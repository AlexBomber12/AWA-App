name: test

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass # pragma: allowlist secret
          POSTGRES_DB: awa
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres -d awa"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            requirements-dev.txt
            services/etl/requirements.txt
            services/api/requirements.txt
            services/repricer/requirements.txt
            services/fees_h10/requirements.txt
            services/alert_bot/requirements.txt

      - name: Install dependencies
        run: |  # pragma: allowlist secret
          pip install -r services/etl/requirements.txt
          pip install -r services/api/requirements.txt
          pip install -r services/repricer/requirements.txt
          pip install -r services/fees_h10/requirements.txt
          pip install -r services/alert_bot/requirements.txt
          pip install -r requirements-dev.txt
          pip install asyncpg
          pip install pytest
        env:
          DATABASE_URL: postgresql+psycopg://postgres:pass@localhost:5432/awa  # pragma: allowlist secret
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - run: npm ci
        working-directory: web

      - run: npm run build --if-present
        working-directory: web

      - name: Install Postgres client & expose initdb
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          echo "/usr/lib/postgresql/$(pg_config --version | cut -d' ' -f2 | cut -d'.' -f1,2)/bin" >> $GITHUB_PATH


      - name: Run Alembic migrations
        run: alembic upgrade head
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass # pragma: allowlist secret
          POSTGRES_DB: awa
          PG_USER: postgres
          PG_PASSWORD: pass # pragma: allowlist secret
          PG_DATABASE: awa
          PG_HOST: localhost
          PG_PORT: '5432'

      - run: echo 'PGHOST=localhost' >> $GITHUB_ENV

      - name: Export DATABASE_URL
        run: echo "DATABASE_URL=postgresql+psycopg://postgres:pass@localhost:5432/awa" >> $GITHUB_ENV  # pragma: allowlist secret

      - name: pytest -q
        continue-on-error: false
        run: pytest -q
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass # pragma: allowlist secret
          POSTGRES_DB: awa
          PG_USER: postgres
          PG_PASSWORD: pass # pragma: allowlist secret
          PG_DATABASE: awa
          PG_PORT: '5432'
          DATA_DIR: ${{ runner.temp }}/awa-data

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Dump Postgres logs
        if: always()
        run: |
          echo "::group::postgres container logs"
          docker logs ${{ job.services.postgres.id }} --tail 200
          echo "::endgroup::"

  integration-db:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: awa
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres -d awa"
          --health-interval=5s --health-timeout=5s --health-retries=10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements-dev.txt
      - name: Install deps
        run: pip install -r requirements-dev.txt
      - name: Ensure test file exists
        run: |
          if [ ! -f tests/db/test_migrations.py ]; then
            echo "::error ::migration test missing" && exit 1
          fi
      - name: Install Postgres client & expose initdb
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          echo "/usr/lib/postgresql/$(pg_config --version | cut -d' ' -f2 | cut -d'.' -f1,2)/bin" >> $GITHUB_PATH

      - name: Run migration regression test
        continue-on-error: false
        env:
          DATABASE_URL: postgresql+psycopg://postgres:pass@localhost:5432/awa
        run: pytest tests/db/test_migrations.py -q

  health-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: if [ ! -f .env ]; then cp .env.postgres .env; fi
      - run: docker compose build --parallel
      - run: docker compose up -d --wait
      - name: Ensure services healthy
        run: |
          docker compose ps --format '{{.Name}} {{.State.Health.Status}}' | tee ps.log
          if grep -E '\b(unhealthy|starting|exited)\b' ps.log; then
            cat ps.log
            exit 1
          fi
      - run: docker compose down -v
