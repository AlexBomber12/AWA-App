name: test

on:
  push:
    branches: [dev, main]
    paths-ignore: ['ci-logs/**']
  pull_request:
    branches: [dev, main]
    paths-ignore: ['ci-logs/**']

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      REDIS_URL: redis://localhost:6379/0
      RATE_LIMIT_DEFAULT: 100/minute
      TRUST_X_FORWARDED: 1
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass # pragma: allowlist secret
          POSTGRES_DB: awa
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres -d awa"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
      redis:
        image: redis:7-alpine
        ports: ['6379:6379']
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Load env
        run: |
          cat .env.ci >> "$GITHUB_ENV"
          echo "DATABASE_URL=postgresql+asyncpg://postgres:pass@localhost:5432/awa" >> "$GITHUB_ENV"
          echo "PG_HOST=localhost" >> "$GITHUB_ENV"
          echo "PG_PORT=5432" >> "$GITHUB_ENV"
          echo "PG_USER=postgres" >> "$GITHUB_ENV"
          echo "PG_PASSWORD=pass" >> "$GITHUB_ENV"
          echo "PG_DATABASE=awa" >> "$GITHUB_ENV"
          echo "TESTING=1" >> "$GITHUB_ENV"
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            requirements-dev.txt
            services/etl/requirements.txt
            services/api/requirements.txt
            services/repricer/requirements.txt
            services/fees_h10/requirements.txt
            services/alert_bot/requirements.txt
      - name: Cache tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .pytest_cache
            ~/.ruff_cache
          key: ${{ runner.os }}-test-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: ${{ runner.os }}-test-

      - name: Install dependencies
        run: |  # pragma: allowlist secret
          pip install --break-system-packages -r services/etl/requirements.txt
          pip install --break-system-packages -r services/api/requirements.txt
          pip install --break-system-packages -r services/repricer/requirements.txt
          pip install --break-system-packages -r services/fees_h10/requirements.txt
          pip install --break-system-packages -r services/alert_bot/requirements.txt
          pip install --break-system-packages -r requirements-dev.txt
          pip install --break-system-packages asyncpg
          pip install --break-system-packages pytest
          pip install --break-system-packages keepa==1.3.15 minio==7.1.15
      - uses: actions/setup-node@v4
        with: { node-version: '20.19.0' }
      - run: npm ci
        working-directory: web

      - run: npm run build --if-present
        working-directory: web

      - name: Install PostgreSQL server (initdb)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql
          echo "/usr/lib/postgresql/$(pg_config --version | cut -d' ' -f2 | cut -d'.' -f1,2)/bin" >> $GITHUB_PATH


      - name: Wait for DB
        run: for i in {1..30}; do pg_isready -h localhost -p 5432 -U postgres -d awa && break; sleep 1; done
      - name: Run Alembic migrations
        run: alembic -c services/api/alembic.ini upgrade head
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass # pragma: allowlist secret
          POSTGRES_DB: awa
          PG_USER: postgres
          PG_PASSWORD: pass # pragma: allowlist secret
          PG_DATABASE: awa
          PG_HOST: localhost
          PG_PORT: '5432'


      - name: pytest
        continue-on-error: false
        run: pytest -q --cov=services --cov-report=xml
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass # pragma: allowlist secret
          POSTGRES_DB: awa
          PG_USER: postgres
          PG_PASSWORD: pass # pragma: allowlist secret
          PG_DATABASE: awa
          PG_HOST: localhost
          PG_PORT: '5432'
          DATA_DIR: ${{ runner.temp }}/awa-data
          LLM_PROVIDER: lan
          LLM_BASE_URL: http://localhost:8000

      - name: Upload coverage to Codecov
        if: success() && env.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v5
        with:
          files: coverage.xml
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Dump Postgres logs
        if: always()
        run: |
          echo "::group::postgres container logs"
          docker logs ${{ job.services.postgres.id }} --tail 200
          echo "::endgroup::"

  integration-db:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: awa
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres -d awa"
          --health-interval=5s --health-timeout=5s --health-retries=10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Load env
        run: |
          cat .env.ci >> "$GITHUB_ENV"
          echo "DATABASE_URL=postgresql+asyncpg://postgres:pass@localhost:5432/awa" >> "$GITHUB_ENV"
          echo "PG_HOST=localhost" >> "$GITHUB_ENV"
          echo "PG_PORT=5432" >> "$GITHUB_ENV"
          echo "PG_USER=postgres" >> "$GITHUB_ENV"
          echo "PG_PASSWORD=pass" >> "$GITHUB_ENV"
          echo "PG_DATABASE=awa" >> "$GITHUB_ENV"
          echo "TESTING=1" >> "$GITHUB_ENV"
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements-dev.txt
      - name: Cache tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .pytest_cache
            ~/.ruff_cache
          key: ${{ runner.os }}-int-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: ${{ runner.os }}-int-
      - name: Install deps
        run: |
          pip install --break-system-packages -r requirements-dev.txt
          pip install --break-system-packages keepa==1.3.15 minio==7.1.15
      - name: Install PostgreSQL server (initdb)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql
          echo "/usr/lib/postgresql/$(pg_config --version | cut -d' ' -f2 | cut -d'.' -f1,2)/bin" >> $GITHUB_PATH

      - name: Run migration regression test
        continue-on-error: false
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: pytest tests/migrations/test_migration_roundtrip.py -q -m integration --cov=services --cov-append --cov-fail-under=0 -o addopts=''
      - uses: actions/upload-artifact@v4
        with:
          name: coverage.integration
          path: .coverage

  health-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: if [ ! -f .env ]; then cp .env.postgres .env; fi
      - run: |
          export COMPOSE_DOCKER_CLI_BUILD=1
          export DOCKER_BUILDKIT=1
          docker compose --progress=plain build --build-arg TZ_CACHE_BUST=${{ github.sha }}
      - run: |
          export COMPOSE_DOCKER_CLI_BUILD=1
          export DOCKER_BUILDKIT=1
          docker compose up -d --wait
      - name: Ensure services healthy
        run: |
          export COMPOSE_DOCKER_CLI_BUILD=1
          export DOCKER_BUILDKIT=1
          docker compose ps --format '{{.Name}} {{.State}} {{.Health}}' | tee ps.log
          if grep -E '\b(unhealthy|starting|exited)\b' ps.log; then
            cat ps.log
            exit 1
          fi
      - name: Tear down
        if: always()
        run: |
          export COMPOSE_DOCKER_CLI_BUILD=1
          export DOCKER_BUILDKIT=1
          docker compose down -v --remove-orphans
