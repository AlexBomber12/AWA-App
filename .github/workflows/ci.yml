name: ci

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"
  DOCKER_BUILDKIT: "1"
  COMPOSE_DOCKER_CLI_BUILD: "1"

jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            web/package-lock.json
            webapp/package-lock.json

      - name: Install Python deps
        run: |
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          for f in services/*/requirements.txt; do [ -f "$f" ] && pip install -r "$f" || true; done

      - name: Install Node deps
        run: |
          if [ -f web/package.json ]; then (cd web && npm ci); fi
          if [ -f webapp/package.json ]; then (cd webapp && npm ci); fi

      - name: Backend unit tests
        run: |
          set -o pipefail
          pytest -vv -q | tee unit.log
          test ${PIPESTATUS[0]} -eq 0

      - name: Frontend lint/type/tests
        run: |
          if [ -f web/package.json ]; then
            cd web
            npm run lint | tee ../eslint.log || true
            npx tsc -p . | tee ../tsc.log || true
            npm run test:unit --if-present | tee ../vitest.log || true
          fi

      - name: Build docker images
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml build

      - name: Make debug bundle
        if: always()
        run: ./scripts/ci/make_debug_bundle.sh debug-bundle-unit

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-unit
          path: debug-bundle-unit.tar.gz

  integration:
    runs-on: ubuntu-latest
    needs: [unit]
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Prepare .env.ci
        run: |
          printf "PG_HOST=postgres\nPG_PORT=5432\nPG_USER=%s\nPG_PASSWORD=%s\nPG_DATABASE=%s\n" "${{ secrets.PG_USER || 'postgres' }}" "${{ secrets.PG_PASSWORD || 'pass' }}" "${{ secrets.PG_DATABASE || 'awa' }}" > .env.ci

      - name: Compose up services
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.postgres.yml --env-file .env.ci up -d --build db redis api worker
          for url in http://localhost:8000/ready http://localhost:8001/ready; do
            for i in {1..60}; do
              if curl -fsS "$url" >/dev/null; then break; fi
              sleep 2
            done
          done

      - name: Integration tests
        run: |
          set -o pipefail
          pytest -vv -m integration | tee integ.log
          test ${PIPESTATUS[0]} -eq 0
        continue-on-error: true

      - name: Compose logs snapshot
        if: always()
        run: docker compose logs --no-color > compose-integration-logs.txt

      - name: Make debug bundle
        if: always()
        run: ./scripts/ci/make_debug_bundle.sh debug-bundle-integration

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-integration
          path: |
            debug-bundle-integration.tar.gz
            compose-integration-logs.txt

      - name: Compose down
        if: always()
        run: docker compose down -v

  migrations:
    runs-on: ubuntu-latest
    needs: [unit]
    steps:
      - uses: actions/checkout@v4

      - name: Prepare .env.ci
        run: |
          printf "PG_HOST=postgres\nPG_PORT=5432\nPG_USER=%s\nPG_PASSWORD=%s\nPG_DATABASE=%s\n" "${{ secrets.PG_USER || 'postgres' }}" "${{ secrets.PG_PASSWORD || 'pass' }}" "${{ secrets.PG_DATABASE || 'awa' }}" > .env.ci

      - name: Start database
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.postgres.yml --env-file .env.ci up -d --build db
          for i in {1..60}; do
            if docker compose exec -T db pg_isready -U "${{ secrets.PG_USER || 'postgres' }}" >/dev/null 2>&1; then break; fi
            sleep 2
          done

      - name: Alembic migrations
        run: |
          set -e
          docker compose run --rm api alembic upgrade head
          docker compose run --rm api alembic downgrade -1
          docker compose run --rm api alembic upgrade head

      - name: Make debug bundle
        if: always()
        run: ./scripts/ci/make_debug_bundle.sh debug-bundle-migrations

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-migrations
          path: debug-bundle-migrations.tar.gz

      - name: Compose down
        if: always()
        run: docker compose down -v

  preview:
    runs-on: ubuntu-latest
    needs: [integration, migrations]
    steps:
      - uses: actions/checkout@v4

      - name: Prepare .env.ci
        run: |
          printf "PG_HOST=postgres\nPG_PORT=5432\nPG_USER=%s\nPG_PASSWORD=%s\nPG_DATABASE=%s\n" "${{ secrets.PG_USER || 'postgres' }}" "${{ secrets.PG_PASSWORD || 'pass' }}" "${{ secrets.PG_DATABASE || 'awa' }}" > .env.ci

      - name: Bring up stack
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.postgres.yml --env-file .env.ci up -d --build
          for url in http://localhost:8000/ready http://localhost:8001/ready; do
            for i in {1..60}; do
              if curl -fsS "$url" >/dev/null; then break; fi
              sleep 2
            done
          done

      - name: Cloudflare tunnel
        if: ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN && secrets.PREVIEW_HOSTNAME }}
        run: |
          npx cloudflared tunnel --url http://localhost:8080 --hostname "${{ secrets.PREVIEW_HOSTNAME }}" --token "${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}" &
          echo "https://${{ secrets.PREVIEW_HOSTNAME }}" > preview-url.txt

      - name: Fallback preview URL
        if: ${{ !(secrets.CLOUDFLARE_TUNNEL_TOKEN && secrets.PREVIEW_HOSTNAME) }}
        run: echo "http://localhost:8080" > preview-url.txt

      - name: Preview summary
        run: |
          echo "Preview URL: $(cat preview-url.txt)" >> $GITHUB_STEP_SUMMARY

      - name: Make debug bundle
        if: always()
        run: ./scripts/ci/make_debug_bundle.sh debug-bundle-preview

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-preview
          path: |
            debug-bundle-preview.tar.gz
            preview-url.txt

      - name: Compose down
        if: always()
        run: docker compose down -v

  mirror_logs:
    name: mirror-logs (persist sanitized CI logs to repo)
    runs-on: ubuntu-latest
    needs: [unit, integration, migrations, preview]
    if: always()
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare sanitized mirror
        id: prep
        run: |
          set -Eeuo pipefail
          PR_NUM="${{ github.event.pull_request.number || '' }}"
          SHA_SHORT="$(git rev-parse --short ${{ github.sha }})"
          REF_NAME="${{ github.ref_name }}"
          TS="$(date -u +%Y%m%dT%H%M%SZ)"

          if [ -n "$PR_NUM" ]; then
            BASE="mirror-logs/pr-$PR_NUM/sha-$SHA_SHORT"
          else
            BASE="mirror-logs/branch-$REF_NAME/sha-$SHA_SHORT"
          fi
          mkdir -p "$BASE"

          find artifacts -type f -name "*.tar.gz" -print0 | while IFS= read -r -d '' f; do
            d="$BASE/$(basename "$f" .tar.gz)"
            mkdir -p "$d"
            tar -xzf "$f" -C "$d"
          done

          find artifacts -type f ! -name "*.tar.gz" -maxdepth 2 -print0 | while IFS= read -r -d '' f; do
            cp -f "$f" "$BASE/$(basename "$f")"
          done

          find "$BASE" -type f -print0 | xargs -0 -I{} sed -i -E 's/(TOKEN|SECRET|PASSWORD|KEY|DSN|AUTH|COOKIE)=\S+/\1=REDACTED/g' {}

          LATEST_DIR="$(dirname "$BASE")/latest"
          rm -rf "$LATEST_DIR"
          mkdir -p "$LATEST_DIR"
          cp -a "$BASE"/. "$LATEST_DIR"/

          echo "base=$BASE" >> $GITHUB_OUTPUT
          echo "latest=$LATEST_DIR" >> $GITHUB_OUTPUT

      - name: Push to ci-logs branch
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -Eeuo pipefail
          LOGS_BRANCH="ci-logs"
          git fetch origin $LOGS_BRANCH || true
          if git ls-remote --exit-code --heads origin $LOGS_BRANCH; then
            git checkout -B $LOGS_BRANCH origin/$LOGS_BRANCH
          else
            git checkout --orphan $LOGS_BRANCH
            git rm -rf . || true
            echo "# CI Logs branch" > README.md
            mkdir -p .github/workflows
            git add -A
            git commit -m "init ci-logs branch [skip ci]" || true
          fi

          mkdir -p "$(dirname "${{ steps.prep.outputs.base }}")"
          rsync -a --delete "${{ steps.prep.outputs.base%/* }}/" "$(dirname "${{ steps.prep.outputs.base }}")/"
          rsync -a --delete "${{ steps.prep.outputs.latest%/* }}/" "$(dirname "${{ steps.prep.outputs.latest }}")/"

          git add -A
          COMMIT_MSG="mirror-logs: ${GITHUB_SHA} (PR #${{ github.event.pull_request.number || 'n/a' }}) [skip ci]"
          git -c user.name="github-actions" -c user.email="github-actions@users.noreply.github.com" commit -m "$COMMIT_MSG" || echo "Nothing to commit"
          git push origin $LOGS_BRANCH

      - name: Summarize mirror-logs location
        run: |
          echo "### Mirror-Logs persisted" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: \`ci-logs\`" >> $GITHUB_STEP_SUMMARY
          echo "- Latest: \`${{ steps.prep.outputs.latest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
