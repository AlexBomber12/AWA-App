name: CI
on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]

jobs:
  unit:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: pass
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s --health-timeout=5s --health-retries=10
    steps:
      - uses: actions/checkout@v4
      - name: Load env
        run: cat .env.ci >> $GITHUB_ENV
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements-dev.txt
      - name: Install deps
        run: pip install -r requirements-dev.txt
      - name: Wait for DB
        run: bash services/etl/wait-for-it.sh localhost:5432 -t 30
      - name: Run migrations
        run: alembic -c services/api/alembic.ini upgrade head
      - name: Ruff
        run: ruff check . --output-format=github
      - name: Format
        uses: chartboost/ruff-action@v1
        with:
          args: "format --check ."
      - name: Type check
        run: python -m mypy services || true
      - name: Pytest
        run: pytest -q
      - uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.xml

  container-build:
    needs: unit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
      - name: Build API image
        run: docker build -f services/api/Dockerfile .

  compose-health:
    needs: container-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build images (invalidate TZ layer)
        run: docker compose build --pull --build-arg TZ_CACHE_BUST=${{ github.sha }}
      - run: docker compose up -d --wait
      - run: docker compose ps
      - name: Gather logs
        if: failure()
        run: |
          docker compose logs > logs.txt
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: docker-logs
          path: logs.txt
