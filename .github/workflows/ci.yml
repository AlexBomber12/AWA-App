name: CI
# yamllint disable rule:line-length

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DATA_DIR: ${{runner.temp}}/awa-data
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass
      PG_DATABASE: awa
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ${{runner.temp}}/pip-cache
          key: ${{runner.os}}-pip-${{hashFiles('**/requirements*.txt')}}
          restore-keys: |
            ${{runner.os}}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

          # install global dev reqs first
          pip install -r requirements-dev.txt

          # then recursively install every service / sub-module requirements
          find . -type f -name "requirements*.txt" ! -path "./requirements-dev.txt" \
            -print0 | while IFS= read -r -d '' reqfile; do
              echo "Installing $reqfile"
              pip install -r "$reqfile"
            done
      - run: ruff check .
      - run: black --check .
      - run: mypy services || true
      - run: pytest -q

  postgres:
    needs: build
    runs-on: ubuntu-latest
    env:
      ENABLE_LIVE: "1"
      PGPASSWORD: pass
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: awa
      PG_DATABASE: awa
      PG_USER: ${{env.POSTGRES_USER}}
      PG_PASSWORD: ${{env.POSTGRES_PASSWORD}}
      PG_HOST: localhost
      DATA_DIR: ${{runner.temp}}/awa-data
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: awa
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: |
          pip install -r services/etl/requirements.txt
          pip install -r services/api/requirements.txt
          pip install -r services/repricer/requirements.txt
          pip install -r services/fees_h10/requirements.txt
          pip install -r services/logistics_etl/requirements.txt
          pip install -r requirements-dev.txt
          # core dev tools
          pip install pytest ruff black mypy
      - name: Wait for Postgres to accept connections
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "Postgres is ready"; exit 0
            fi
            sleep 2
          done
          echo "::error::Postgres never became ready"; docker compose logs postgres; exit 1
        env:
          PGPASSWORD: pass
      - name: Prepare DB
        run: createdb -h localhost -p 5432 -U postgres awa
        env:
          PGPASSWORD: pass
      - name: Export DATABASE_URL
        run: echo "DATABASE_URL=postgresql+psycopg://postgres:pass@localhost:5432/awa" >> $GITHUB_ENV
      - name: Run migrations
        run: alembic upgrade head
      - run: ruff check .
      - run: black --check .
      - run: mypy services || true
      - name: Run tests
        run: pytest -q
      - name: Dump compose logs (always)
        if: always()
        run: |
          docker compose ps
          docker compose logs --no-color --tail=300

  importer-test:
    needs: postgres
    runs-on: ubuntu-latest
    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass
      PG_DATABASE: awa
      POSTGRES_DB: awa
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: awa
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres -d awa"
          --health-interval=5s --health-timeout=5s --health-retries=10
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ${{runner.temp}}/pip-cache
          key: ${{runner.os}}-pip-${{hashFiles('**/requirements*.txt')}}
          restore-keys: |
            ${{runner.os}}-pip-
      - name: Install all Python requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          find . -type f -name 'requirements*.txt' ! -path './requirements-dev.txt' -print0 \
            | while IFS= read -r -d '' req; do
                echo "â†’ installing $req"; pip install -r "$req";
              done
      - run: docker build -t price_importer services/price_importer
      - name: Wait for Postgres
        run: |
          for i in {1..20}; do
            pg_isready -h localhost -p 5432 -U postgres -d awa && exit 0
            sleep 2
          done
          exit 1
        env:
          PGPASSWORD: pass
      - run: alembic upgrade head
        env:
          PG_USER: ${{env.POSTGRES_USER}}
          PG_PASSWORD: ${{env.POSTGRES_PASSWORD}}
          PG_DATABASE: ${{env.PG_DATABASE}}
          PG_HOST: localhost
      - run: |
          docker run --network host \
            -e PG_USER=postgres \
            -e PG_PASSWORD=pass \
            -e PG_HOST=localhost \
            -e PG_DATABASE=awa \
            price_importer python -m price_importer.import tests/fixtures/sample_prices.csv --vendor "ACME GmbH"
      - run: psql -h localhost -U ${{env.POSTGRES_USER}} -d awa -c "SELECT count(*) FROM vendor_prices;"
        env:
          PGPASSWORD: pass
