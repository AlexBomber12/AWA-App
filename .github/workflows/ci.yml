name: CI

on:
  pull_request:
    paths-ignore:
      - 'ci-logs/**'
      - '.codex/mirror-logs/**'
  push:
    branches: [main]
    paths-ignore:
      - 'ci-logs/**'
      - '.codex/mirror-logs/**'
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_BUILDKIT: "1"
  COMPOSE_DOCKER_CLI_BUILD: "1"

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            constraints.txt
            **/requirements*.txt

      - name: Upgrade pip tooling
        run: python -m pip install -U pip wheel

      - name: Install lint dependencies
        run: |
          set -euo pipefail
          python -m pip install -c constraints.txt -r requirements-dev.txt
          python -m pip install -c constraints.txt pre-commit ruff mypy
          python -m pip install -c constraints.txt -e packages/awa_common

      - name: Run lint suite
        run: |
          set -euo pipefail
          mkdir -p artifacts
          pre-commit run --all-files | tee artifacts/lint.log
          ruff check . | tee -a artifacts/lint.log
          mypy --install-types --non-interactive . | tee -a artifacts/lint.log

      - name: Upload lint logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-lint
          path: artifacts/lint.log
          if-no-files-found: ignore

      - name: Ensure debug bundle script executable
        if: always()
        run: chmod +x scripts/ci/make_debug_bundle.sh || true

      - name: Make debug bundle (lint)
        if: always()
        run: |
          bash scripts/ci/make_debug_bundle.sh debug-bundle-lint.tar.gz \
          || { echo "::warning::fallback debug bundle (lint)"; tar -czf debug-bundle-lint.tar.gz constraints.txt .github/workflows/ci.yml || true; }

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-lint
          path: debug-bundle-lint.tar.gz
          if-no-files-found: ignore

  unit-local:
    name: unit-local
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            constraints.txt
            **/requirements*.txt

      - name: Upgrade pip tooling
        run: python -m pip install -U pip wheel

      - name: Install test dependencies
        run: |
          set -euo pipefail
          python -m pip install -c constraints.txt -r requirements-dev.txt
          python -m pip install -c constraints.txt -e packages/awa_common
          while IFS= read -r -d '' req; do
            python -m pip install -r "$req" -c constraints.txt
          done < <(find services -maxdepth 2 -name 'requirements*.txt' -print0)

      - name: Run unit suite (coverage)
        run: |
          set -euo pipefail
          mkdir -p artifacts
          bash scripts/ci/run_unit.sh | tee artifacts/unit-local.log

      - name: Upload unit-local logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-unit-local
          path: artifacts/unit-local.log
          if-no-files-found: ignore

      - name: Diff coverage (80% gate)
        env:
          BASE_REF: ${{ github.base_ref || 'main' }}
        run: |
          set -euo pipefail
          python -m pip install diff-cover
          git fetch --no-tags --prune --depth=1 origin "${BASE_REF}:${BASE_REF}"
          echo "${BASE_REF}" > diff-base.txt
          diff-cover coverage.xml --compare-branch "origin/${BASE_REF}" --fail-under=80 --diff-range-notation=... | tee diff-coverage.txt

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-local-coverage
          path: |
            .coverage
            coverage.xml
            coverage.txt
          if-no-files-found: warn

      - name: Upload diff coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diff-coverage
          path: |
            diff-coverage.txt
            diff-base.txt
          if-no-files-found: ignore

      - name: Ensure debug bundle script executable
        if: always()
        run: chmod +x scripts/ci/make_debug_bundle.sh || true

      - name: Make debug bundle (unit-local)
        if: always()
        run: |
          bash scripts/ci/make_debug_bundle.sh debug-bundle-unit-local.tar.gz \
          || { echo "::warning::fallback debug bundle (unit-local)"; tar -czf debug-bundle-unit-local.tar.gz constraints.txt .github/workflows/ci.yml || true; }

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-unit-local
          path: debug-bundle-unit-local.tar.gz
          if-no-files-found: ignore

  migrations:
    name: migrations
    runs-on: ubuntu-latest
    needs: unit-local
    timeout-minutes: 30
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: awa
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d awa"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 12
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/awa
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            constraints.txt
            **/requirements*.txt

      - name: Upgrade pip tooling
        run: python -m pip install -U pip wheel

      - name: Install migration dependencies
        run: |
          set -euo pipefail
          python -m pip install -c constraints.txt -r requirements-dev.txt
          python -m pip install -c constraints.txt -e packages/awa_common
          while IFS= read -r -d '' req; do
            python -m pip install -r "$req" -c constraints.txt
          done < <(find services -maxdepth 2 -name 'requirements*.txt' -print0)

      - name: Run migrations round-trip
        run: |
          set -euo pipefail
          mkdir -p artifacts
          {
            echo "== alembic upgrade head =="
            alembic -c services/api/alembic.ini upgrade head
            echo "== alembic downgrade base =="
            alembic -c services/api/alembic.ini downgrade base
            echo "== alembic upgrade head =="
            alembic -c services/api/alembic.ini upgrade head
          } | tee artifacts/migrations.log
          alembic -c services/api/alembic.ini current -v | tee alembic-current.txt | tee -a artifacts/migrations.log

      - name: Upload migrations logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-migrations
          path: artifacts/migrations.log
          if-no-files-found: ignore

      - name: Upload alembic current
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: alembic-current
          path: alembic-current.txt
          if-no-files-found: ignore

      - name: Ensure debug bundle script executable
        if: always()
        run: chmod +x scripts/ci/make_debug_bundle.sh || true

      - name: Make debug bundle (migrations)
        if: always()
        run: |
          bash scripts/ci/make_debug_bundle.sh debug-bundle-migrations.tar.gz \
          || { echo "::warning::fallback debug bundle (migrations)"; tar -czf debug-bundle-migrations.tar.gz constraints.txt .github/workflows/ci.yml || true; }

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-migrations
          path: debug-bundle-migrations.tar.gz
          if-no-files-found: ignore

  integration:
    name: integration
    runs-on: ubuntu-latest
    needs: migrations
    timeout-minutes: 45
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: awa
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d awa"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 12
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 12
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/awa
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            constraints.txt
            **/requirements*.txt

      - name: Upgrade pip tooling
        run: python -m pip install -U pip wheel

      - name: Install integration dependencies
        run: |
          set -euo pipefail
          python -m pip install -c constraints.txt -r requirements-dev.txt
          python -m pip install -c constraints.txt -e packages/awa_common
          while IFS= read -r -d '' req; do
            python -m pip install -r "$req" -c constraints.txt
          done < <(find services -maxdepth 2 -name 'requirements*.txt' -print0)

      - name: Run integration tests
        run: |
          set -euo pipefail
          mkdir -p artifacts
          alembic -c services/api/alembic.ini upgrade head | tee artifacts/integration.log
          if [ -d tests/integration ] && find tests/integration -type f -name '*.py' -print -quit | grep -q .; then
            echo "== pytest tests/integration ==" | tee -a artifacts/integration.log
            python -m pytest -q tests/integration | tee -a artifacts/integration.log
          else
            echo "no integration tests, skipping" | tee -a artifacts/integration.log
          fi

      - name: Upload integration logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-integration
          path: artifacts/integration.log
          if-no-files-found: ignore

      - name: Ensure debug bundle script executable
        if: always()
        run: chmod +x scripts/ci/make_debug_bundle.sh || true

      - name: Make debug bundle (integration)
        if: always()
        run: |
          bash scripts/ci/make_debug_bundle.sh debug-bundle-integration.tar.gz \
          || { echo "::warning::fallback debug bundle (integration)"; tar -czf debug-bundle-integration.tar.gz constraints.txt .github/workflows/ci.yml || true; }

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-integration
          path: debug-bundle-integration.tar.gz
          if-no-files-found: ignore

  secret-scan:
    name: secret-scan
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run gitleaks
        run: |
          set -euo pipefail
          mkdir -p artifacts
          status=0
          docker run --rm -v "$PWD:/workspace" -w /workspace zricethezav/gitleaks:8.18.4 detect \
            --source . \
            --config=.gitleaks.toml \
            --report-format json \
            --report-path artifacts/gitleaks.json \
            --log-level warn \
            | tee artifacts/gitleaks.log || status=$?
          docker run --rm -v "$PWD:/workspace" -w /workspace zricethezav/gitleaks:8.18.4 detect \
            --source . \
            --config=.gitleaks.toml \
            --report-format sarif \
            --report-path artifacts/gitleaks.sarif \
            --log-level warn >> artifacts/gitleaks.log 2>&1 || true
          exit $status

      - name: Upload gitleaks results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-scan
          path: |
            artifacts/gitleaks.json
            artifacts/gitleaks.sarif
          if-no-files-found: ignore

      - name: Upload secret-scan logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-secret-scan
          path: artifacts/gitleaks.log
          if-no-files-found: ignore

      - name: Ensure debug bundle script executable
        if: always()
        run: chmod +x scripts/ci/make_debug_bundle.sh || true

      - name: Make debug bundle (secret-scan)
        if: always()
        run: |
          bash scripts/ci/make_debug_bundle.sh debug-bundle-secret-scan.tar.gz \
          || { echo "::warning::fallback debug bundle (secret-scan)"; tar -czf debug-bundle-secret-scan.tar.gz constraints.txt .github/workflows/ci.yml || true; }

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-secret-scan
          path: debug-bundle-secret-scan.tar.gz
          if-no-files-found: ignore

  mirror-logs:
    name: mirror-logs
    runs-on: ubuntu-24.04
    needs:
      - lint
      - unit-local
      - migrations
      - integration
      - secret-scan
    if: always()
    permissions:
      contents: read
      actions: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect PR comment capability
        id: cap
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.pull_request.head.repo.fork }}" = "false" ]; then
            echo "can_comment=true" >> "$GITHUB_OUTPUT"
          else
            echo "can_comment=false" >> "$GITHUB_OUTPUT"
          fi

      - uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Fetch job URLs
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const run_id = context.runId;
            const jobs = await github.paginate(
              github.rest.actions.listJobsForWorkflowRun,
              { owner, repo, run_id, per_page: 100 }
            );
            const out = jobs.map(job => ({
              name: job.name,
              url: job.html_url,
              status: job.conclusion || job.status,
              id: job.id,
            }));
            const fs = require('fs');
            fs.mkdirSync('artifacts', { recursive: true });
            fs.writeFileSync('artifacts/jobs.json', JSON.stringify(out, null, 2));

      - name: Build PR summary
        run: |
          python3 scripts/ci/make_pr_summary.py artifacts > artifacts/summary.md || echo "No summary" > artifacts/summary.md

      - name: Append summary to job summary
        run: cat artifacts/summary.md >> "$GITHUB_STEP_SUMMARY"

      - name: Update PR comment
        if: steps.cap.outputs.can_comment == 'true'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const marker = '<!-- MIRROR_LOGS_SUMMARY -->';
            const summary = fs.readFileSync('artifacts/summary.md','utf8');
            const body = `${marker}\n${summary}\n${marker}`;
            const {owner, repo} = context.repo;
            const pr = context.payload.pull_request.number;
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number: pr, per_page: 100 });
            const existing = comments.find(c => c.body && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: pr, body });
            }

      - uses: actions/upload-artifact@v4
        with:
          name: mirror-logs
          path: artifacts
          if-no-files-found: ignore

      - name: Ensure debug bundle script executable
        if: always()
        run: chmod +x scripts/ci/make_debug_bundle.sh || true

      - name: Make debug bundle (mirror-logs)
        if: always()
        run: |
          bash scripts/ci/make_debug_bundle.sh debug-bundle-mirror-logs.tar.gz || true

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-mirror-logs
          path: debug-bundle-mirror-logs.tar.gz
          if-no-files-found: ignore

  legacy-prepare-matrix:
    if: false
    runs-on: ubuntu-latest
    steps:
      - run: echo "Legacy matrix job disabled in favour of unit-local coverage."

  legacy-test-matrix:
    if: false
    runs-on: ubuntu-latest
    steps:
      - run: echo "Legacy per-service pytest matrix disabled."
