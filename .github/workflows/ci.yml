name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements-dev.txt
      - name: Install Python deps
        run: pip install --break-system-packages -r requirements-dev.txt
      - name: Python unit tests
        run: pytest -q -m "not integration" 2>&1 | tee unit-pytest.log; exit ${PIPESTATUS[0]}
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install web deps
        run: npm ci
        working-directory: web
      - name: Web tests
        run: npm test 2>&1 | tee web-vitest.log; exit ${PIPESTATUS[0]}
        working-directory: web
      - name: Frontend webapp build
        run: |
          cd webapp
          npm ci
          npm run build 2>&1 | tee webapp-build.log
          exit ${PIPESTATUS[0]}
      - id: picktail
        if: always()
        run: |
          touch compose-ps.txt compose-logs.txt compose-up.txt compose-build.txt unit-pytest.log web-vitest.log webapp-build.log
          TAIL=""
          for f in webapp-build.log unit-pytest.log web-vitest.log; do
            if [ -s "$f" ]; then TAIL="$f"; break; fi
          done
          if [ -z "$TAIL" ]; then echo "no logs captured" > none.txt; TAIL=none.txt; fi
          {
            echo "### $(basename \"$TAIL\") (tail)"
            echo '```'
            tail -n 200 "$TAIL"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"
          echo "tail_path=$TAIL" >> "$GITHUB_OUTPUT"
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs-${{ github.run_id }}
          path: |
            compose-ps.txt
            compose-logs.txt
            compose-up.txt
            compose-build.txt
            unit-pytest.log
            web-vitest.log
            webapp-build.log
          if-no-files-found: ignore
      - name: PR comment
        if: always()
        uses: actions/github-script@v7
        env:
          CI_JOB_NAME: CI / unit
          TAIL_PATH: ${{ steps.picktail.outputs.tail_path }}
        with:
          script: |
            const fs = require('fs');
            const {owner, repo} = context.repo;
            if (context.eventName !== 'pull_request') { return; }
            const issue_number = context.issue.number;
            const marker = '<!-- CI_FAILURE_SUMMARY -->';
            let tail = '';
            try { tail = fs.readFileSync(process.env.TAIL_PATH, 'utf8'); } catch(e) { tail = 'no logs'; }
            const jobName = process.env.CI_JOB_NAME || '';
            const title = jobName.includes('integration') ? 'Integration logs (tail)' :
                          jobName.includes('unit') ? 'Unit logs (tail)' :
                          jobName || 'CI logs (tail)';
            const bodyFail = `${marker}
                        ${title}
            
                        ```
                        ${tail.split('\n').slice(-200).join('\n')}
                        ```
            
                        Comment "@codex review" to request an AI review.`;
            const comments = await github.rest.issues.listComments({owner, repo, issue_number, per_page: 100});
            const existing = comments.data.find(c => c.user.type === 'Bot' && c.body && c.body.includes(marker));
            if ("${{ job.status }}".toLowerCase() === "failure") {
              if (existing) {
                await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body: bodyFail});
              } else {
                await github.rest.issues.createComment({owner, repo, issue_number, body: bodyFail});
              }
            } else {
              if (existing) { await github.rest.issues.deleteComment({owner, repo, comment_id: existing.id}); }
            }

  integration:
    needs: unit
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Write CI env file
        run: |
          cat > .env.ci <<'ENV'
          PG_HOST=postgres
          PG_PORT=5432
          PG_USER=${{ secrets.PG_USER || 'postgres' }}
          PG_PASSWORD=${{ secrets.PG_PASSWORD || 'postgres' }}
          PG_DATABASE=${{ secrets.PG_DATABASE || 'awa' }}
          POSTGRES_HOST=postgres
          POSTGRES_PORT=5432
          POSTGRES_USER=${{ secrets.PG_USER || 'postgres' }}
          POSTGRES_PASSWORD=${{ secrets.PG_PASSWORD || 'postgres' }}
          POSTGRES_DB=${{ secrets.PG_DATABASE || 'awa' }}
          ENV
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements-dev.txt
      - name: Install Python deps
        run: pip install --break-system-packages -r requirements-dev.txt
      - name: Build services
        run: |
          export COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1
          docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.postgres.yml --env-file .env.ci build --pull 2>&1 | tee compose-build.txt
      - name: Up services
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.postgres.yml --env-file .env.ci up -d --wait 2>&1 | tee compose-up.txt
      - name: Integration tests
        env:
          PG_HOST: postgres
          PG_PORT: 5432
          PG_USER: ${{ secrets.PG_USER || 'postgres' }}
          PG_PASSWORD: ${{ secrets.PG_PASSWORD || 'postgres' }}
          PG_DATABASE: ${{ secrets.PG_DATABASE || 'awa' }}
        run: pytest -m integration
      - id: picktail
        if: always()
        run: |
          touch compose-ps.txt compose-logs.txt compose-up.txt compose-build.txt unit-pytest.log web-vitest.log webapp-build.log
          docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.postgres.yml --env-file .env.ci logs --no-color > compose-logs.txt || true
          docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.postgres.yml --env-file .env.ci ps > compose-ps.txt || true
          TAIL=""
          for f in compose-logs.txt compose-up.txt compose-build.txt; do
            if [ -s "$f" ]; then TAIL="$f"; break; fi
          done
          if [ -z "$TAIL" ]; then echo "no logs captured" > none.txt; TAIL=none.txt; fi
          {
            echo "### $(basename \"$TAIL\") (tail)"
            echo '```'
            tail -n 200 "$TAIL"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"
          echo "tail_path=$TAIL" >> "$GITHUB_OUTPUT"
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs-${{ github.run_id }}
          path: |
            compose-ps.txt
            compose-logs.txt
            compose-up.txt
            compose-build.txt
            unit-pytest.log
            web-vitest.log
            webapp-build.log
          if-no-files-found: ignore
      - name: PR comment
        if: always()
        uses: actions/github-script@v7
        env:
          CI_JOB_NAME: CI / integration
          TAIL_PATH: ${{ steps.picktail.outputs.tail_path }}
        with:
          script: |
            const fs = require('fs');
            const {owner, repo} = context.repo;
            if (context.eventName !== 'pull_request') { return; }
            const issue_number = context.issue.number;
            const marker = '<!-- CI_FAILURE_SUMMARY -->';
            let tail = '';
            try { tail = fs.readFileSync(process.env.TAIL_PATH, 'utf8'); } catch(e) { tail = 'no logs'; }
            const jobName = process.env.CI_JOB_NAME || '';
            const title = jobName.includes('integration') ? 'Integration logs (tail)' :
                          jobName.includes('unit') ? 'Unit logs (tail)' :
                          jobName || 'CI logs (tail)';
            const bodyFail = `${marker}
                        ${title}
            
                        ```
                        ${tail.split('\n').slice(-200).join('\n')}
                        ```
            
                        Comment "@codex review" to request an AI review.`;
            const comments = await github.rest.issues.listComments({owner, repo, issue_number, per_page: 100});
            const existing = comments.data.find(c => c.user.type === 'Bot' && c.body && c.body.includes(marker));
            if ("${{ job.status }}".toLowerCase() === "failure") {
              if (existing) {
                await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body: bodyFail});
              } else {
                await github.rest.issues.createComment({owner, repo, issue_number, body: bodyFail});
              }
            } else {
              if (existing) { await github.rest.issues.deleteComment({owner, repo, comment_id: existing.id}); }
            }
      - name: Tear down
        if: always()
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.postgres.yml --env-file .env.ci down -v --remove-orphans
