name: ci

on:
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"
  DOCKER_BUILDKIT: "1"
  COMPOSE_DOCKER_CLI_BUILD: "1"

jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: |
            web/package-lock.json
            webapp/package-lock.json
      - name: Install Python deps
        run: |
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          for f in services/*/requirements.txt; do [ -f "$f" ] && pip install -r "$f" || true; done
      - name: Backend unit tests
        run: |
          set -o pipefail
          pytest -vv -q -m "not integration" | tee unit.log
          test ${PIPESTATUS[0]} -eq 0
      - name: Frontend lint/tests
        run: |
          if [ -d web ]; then
            pushd web
            npm ci
            npm run lint | tee ../eslint.log || true
            npx tsc -p . | tee ../tsc.log || true
            npm run test:unit --if-present | tee ../vitest.log || true
            popd
          fi
          if [ -d webapp ]; then
            pushd webapp
            npm ci
            npm run lint | tee -a ../eslint.log || true
            npx tsc -p . | tee -a ../tsc.log || true
            npm run test:unit --if-present | tee -a ../vitest.log || true
            popd
          fi
      - name: Build compose images
        run: |
          set -o pipefail
          docker compose build | tee docker-build.log || true
      - name: Make debug bundle
        run: scripts/ci/make_debug_bundle.sh
      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-unit-${{ github.run_id }}-${{ github.run_attempt }}
          path: debug-bundle.tar.gz
          if-no-files-found: ignore

  integration:
    needs: unit
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v5
      - name: Start services
        run: |
          docker compose up -d db redis api worker --wait
          for i in {1..60}; do
            curl -fsS http://localhost:8000/ready && break || sleep 2
          done
          for i in {1..60}; do
            curl -fsS http://localhost:8001/ready && break || sleep 2
          done
      - name: Integration tests
        run: |
          set -o pipefail
          pytest -vv -m integration | tee integ.log || true
      - name: Compose status
        if: always()
        run: |
          docker compose ps > compose-ps.txt || true
          docker compose logs --no-color > compose-logs.txt || true
      - name: Make debug bundle
        if: always()
        run: scripts/ci/make_debug_bundle.sh
      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-integration-${{ github.run_id }}-${{ github.run_attempt }}
          path: debug-bundle.tar.gz
          if-no-files-found: ignore
      - name: Compose down
        if: always()
        run: docker compose down || true

  migrations:
    needs: unit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Run migrations
        run: |
          docker compose up -d db --wait
          for i in {1..30}; do
            docker compose exec -T db pg_isready -U app -d app && break || sleep 1
          done
          set +e
          docker compose run --rm api alembic upgrade head
          docker compose run --rm api alembic downgrade -1 || true
          docker compose run --rm api alembic upgrade head
      - name: Compose logs
        if: always()
        run: |
          docker compose logs --no-color > compose-logs.txt || true
      - name: Make debug bundle
        if: always()
        run: scripts/ci/make_debug_bundle.sh
      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-migrations-${{ github.run_id }}-${{ github.run_attempt }}
          path: debug-bundle.tar.gz
          if-no-files-found: ignore
      - name: Compose down
        if: always()
        run: docker compose down || true

  preview:
    needs: [integration, migrations]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Start stack
        run: |
          docker compose up -d --wait
          for i in {1..60}; do
            curl -fsS http://localhost:8000/ready && break || sleep 2
          done
      - name: Expose preview
        run: |
          URL=http://localhost:3000
          echo "Preview URL: $URL" >> $GITHUB_STEP_SUMMARY
          echo "$URL" > preview-url.txt
      - name: Cloudflare tunnel
        if: env.TUNNEL_TOKEN != ''
        env:
          TUNNEL_TOKEN: ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
        run: |
          curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
          chmod +x cloudflared
          url=$(./cloudflared tunnel --no-autoupdate run --token "$TUNNEL_TOKEN" 2>&1 | grep -oE 'https://[^\"]+' | head -n1)
          if [ -n "$url" ]; then
            echo "Preview URL: $url" >> $GITHUB_STEP_SUMMARY
            echo "$url" > preview-url.txt
          fi
      - name: Make debug bundle
        run: scripts/ci/make_debug_bundle.sh
      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-preview-${{ github.run_id }}-${{ github.run_attempt }}
          path: debug-bundle.tar.gz
          if-no-files-found: ignore
      - name: Compose down
        if: always()
        run: docker compose down || true

  mirror_logs:
    needs: [unit, integration, migrations, preview]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
      - name: Prepare logs
        run: |
          mkdir -p artifacts digest_logs
          find artifacts -name '*.tar.gz' -exec tar -xzf {} -C digest_logs \;
          find artifacts -maxdepth 1 -type f -name '*.log' -exec cp {} digest_logs/ \;
          find artifacts -maxdepth 1 -type f -name '*.txt' -exec cp {} digest_logs/ \;
      - name: Build digest
        run: scripts/ci/make_pr_digest.sh
        env:
          MIRROR_PATH: artifacts
      - name: Append digest to summary
        run: cat ci-digest.md >> $GITHUB_STEP_SUMMARY
      - name: Upsert PR comment
        if: github.event.pull_request.head.repo.fork == false
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const {owner, repo} = context.repo;
            const issue_number = context.issue.number;
            const marker = '<!-- CI_LOG_MIRROR -->';
            const body = fs.readFileSync('ci-digest.md','utf8');
            const list = await github.rest.issues.listComments({owner, repo, issue_number, per_page: 100});
            const existing = list.data.find(c => (c.body||'').includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body});
            } else {
              await github.rest.issues.createComment({owner, repo, issue_number, body});
            }
      - name: Note fork comment skip
        if: github.event.pull_request.head.repo.fork
        run: echo 'Skipping PR comment on forked PR' >> $GITHUB_STEP_SUMMARY

