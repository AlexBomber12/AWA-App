name: CI

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Detect sandbox
        run: |
          if [[ "$GITHUB_ACTIONS" != "true" ]]; then
            echo "PLAYWRIGHT_OFFLINE=1" >> $GITHUB_ENV
          fi
      - if: env.PLAYWRIGHT_OFFLINE != '1'
        run: npm install -g playwright && playwright install --with-deps chromium
      - run: |
          pip install -r services/etl/requirements.txt
          pip install -r services/api/requirements.txt
          pip install -r services/repricer/requirements.txt
          pip install -r requirements-dev.txt
          # core dev tools
          pip install pytest ruff black mypy playwright
      - run: ruff check .
      - run: black --check .
      - run: mypy services || true
      - run: pytest -q

  postgres:
    needs: build
    runs-on: ubuntu-latest
    env:
      ENABLE_LIVE: "1"
      PGPASSWORD: pass
      PG_USER: postgres
      PG_PASSWORD: pass
      PG_HOST: localhost
      PG_DATABASE: awa
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: awa
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: |
          pip install -r services/etl/requirements.txt
          pip install -r services/api/requirements.txt
          pip install -r services/repricer/requirements.txt
          pip install -r requirements-dev.txt
          # core dev tools
          pip install pytest ruff black mypy
      - name: Copy env (Postgres)
        run: cp .env.postgres .env
      - name: Override host
        run: echo "PG_HOST=localhost" >> $GITHUB_ENV
      - name: Export DATABASE_URL
        run: |
          python - <<'PY'
          from services.common.settings import Settings
          print(f"DATABASE_URL={Settings().DATABASE_URL}")
          PY >> $GITHUB_ENV
      - name: Compose up
        run: docker compose -f docker-compose.yml -f docker-compose.postgres.yml up -d --wait
      - name: Run migrations
        run: alembic upgrade head
      - run: ruff check .
      - run: black --check .
      - run: mypy services || true
      - name: Run tests
        run: pytest -q
