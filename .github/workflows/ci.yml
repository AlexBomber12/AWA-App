name: ci
on:
  pull_request:
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"
  DOCKER_BUILDKIT: "1"
  COMPOSE_DOCKER_CLI_BUILD: "1"

jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install Python deps
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt || true
          [ -f requirements-dev.txt ] && pip install -r requirements-dev.txt || true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: |
            webapp/package-lock.json

      - name: Install Web deps
        working-directory: webapp
        run: npm ci

      - name: Unit tests (backend)
        run: |
          set -o pipefail
          pytest -vv -q | tee unit.log
          test ${PIPESTATUS[0]} -eq 0

      - name: Lint & typecheck (webapp)
        working-directory: webapp
        run: |
          set -o pipefail
          npm run lint | tee ../eslint.log || true
          npx tsc -p . | tee ../tsc.log || true
          npm run test:unit --if-present | tee ../vitest.log || true

      - name: Build docker images (no push)
        run: |
          docker compose build | tee docker-build.log || true

      - name: Make debug bundle
        if: always()
        run: |
          chmod +x scripts/ci/make_debug_bundle.sh
          scripts/ci/make_debug_bundle.sh debug-bundle

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-unit
          path: debug-bundle.tar.gz
          if-no-files-found: warn

  integration:
    runs-on: ubuntu-latest
    needs: [unit]
    continue-on-error: true   # will be removed in PR-105
    steps:
      - uses: actions/checkout@v4

      - name: Compose up (db, redis, api, worker)
        run: |
          docker compose up -d --build db redis api worker
          # wait for health
          for i in $(seq 1 60); do
            curl -fsS http://localhost:8000/ready && curl -fsS http://localhost:8001/ready && break || sleep 2
          done

      - name: Integration tests
        run: |
          set -o pipefail
          pytest -vv -m integration | tee integ.log
          # allow failure in this PR
          exit 0

      - name: Compose logs snapshot
        if: always()
        run: docker compose logs --no-color > compose-integration-logs.txt || true

      - name: Make debug bundle
        if: always()
        run: |
          chmod +x scripts/ci/make_debug_bundle.sh
          scripts/ci/make_debug_bundle.sh debug-bundle

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-integration
          path: |
            debug-bundle.tar.gz
            compose-integration-logs.txt
          if-no-files-found: warn

      - name: Compose down
        if: always()
        run: docker compose down -v

  migrations:
    runs-on: ubuntu-latest
    needs: [unit]
    steps:
      - uses: actions/checkout@v4

      - name: Start DB only
        run: |
          docker compose up -d db
          for i in $(seq 1 40); do
            docker exec $(docker ps -qf "name=db") pg_isready -U app -d app && break || sleep 2
          done

      - name: Alembic upgrade/downgrade/upgrade
        run: |
          docker compose build api
          docker compose run --rm api alembic upgrade head
          docker compose run --rm api alembic downgrade -1 || true
          docker compose run --rm api alembic upgrade head

      - name: Make debug bundle
        if: always()
        run: |
          chmod +x scripts/ci/make_debug_bundle.sh
          scripts/ci/make_debug_bundle.sh debug-bundle

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-migrations
          path: debug-bundle.tar.gz

      - name: Stop DB
        if: always()
        run: docker compose down -v

  preview:
    runs-on: ubuntu-latest
    needs: [integration, migrations]
    steps:
      - uses: actions/checkout@v4

      - name: Compose up full stack
        run: |
          docker compose up -d --build
          for i in $(seq 1 60); do
            curl -fsS http://localhost:8000/ready && curl -fsS http://localhost:8001/ready && break || sleep 2
          done

      - name: Optional Cloudflare Tunnel (skips if token missing)
        id: cft
        env:
          CLOUDFLARE_TUNNEL_TOKEN: ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
          PREVIEW_HOSTNAME: ${{ secrets.PREVIEW_HOSTNAME }} # e.g. preview.example.com
        run: |
          if [ -n "${CLOUDFLARE_TUNNEL_TOKEN:-}" ] && [ -n "${PREVIEW_HOSTNAME:-}" ]; then
            docker run -d --name cft --net=host cloudflare/cloudflared:latest tunnel run --token "${CLOUDFLARE_TUNNEL_TOKEN}"
            echo "url=https://${PREVIEW_HOSTNAME}" >> $GITHUB_OUTPUT
          else
            echo "url=http://(no external tunnel; use job ports)" >> $GITHUB_OUTPUT
          fi

      - name: Write preview summary
        run: |
          echo "### Preview Environment" >> $GITHUB_STEP_SUMMARY
          echo "- API: http://localhost:8000/ready" >> $GITHUB_STEP_SUMMARY
          echo "- Worker: http://localhost:8001/ready" >> $GITHUB_STEP_SUMMARY
          echo "- Webapp: http://localhost:3000" >> $GITHUB_STEP_SUMMARY
          echo "- External: ${{ steps.cft.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.cft.outputs.url }}" > preview-url.txt

      - name: Upload preview URL
        uses: actions/upload-artifact@v4
        with:
          name: preview-url
          path: preview-url.txt

      - name: Make debug bundle
        if: always()
        run: |
          chmod +x scripts/ci/make_debug_bundle.sh
          scripts/ci/make_debug_bundle.sh debug-bundle

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-bundle-preview
          path: debug-bundle.tar.gz

      - name: Compose down
        if: always()
        run: docker compose down -v
