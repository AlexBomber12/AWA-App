name: CI
on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]

jobs:
  service:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [api, etl, fees_h10, logistics_etl, price_importer, repricer, alert_bot, emailer, llm_server]
    services:
      db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: awa
        options: >-
          --health-cmd="pg_isready -U postgres -d awa"
          --health-interval=5s --health-timeout=5s --health-retries=20
        ports: ['5432:5432']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            constraints.txt
            services/${{ matrix.service }}/requirements.txt
            services/${{ matrix.service }}/requirements-dev.txt
            requirements-dev.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          for d in services/*/requirements.txt; do
            if [[ -f "$d" ]]; then python -m pip install -r "$d" -c constraints.txt; fi
          done
          if [[ -f requirements-dev.txt ]]; then pip install -r requirements-dev.txt -c constraints.txt; fi
          for d in services/*/requirements-dev.txt; do
            if [[ -f "$d" ]]; then pip install -r "$d" -c constraints.txt; fi
          done
      - name: Fix imports
        run: ruff check . --select I001 --fix
      - name: Build service Dockerfile
        if: hashFiles('services/${{ matrix.service }}/Dockerfile') != ''
        run: docker build services/${{ matrix.service }} -t tmp-${{ matrix.service }}
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
      - name: Set DATABASE_URL
        run: echo "DATABASE_URL=postgresql+asyncpg://postgres:pass@localhost:5432/awa" >> $GITHUB_ENV
      - name: Wait for Postgres
        run: scripts/wait_pg.sh
      - run: alembic upgrade head
        if: matrix.service == 'api'
      - name: Lint
        run: ruff check .
      - name: Format
        run: ruff format --check .
      - name: Ruff Style
        run: ruff check . --format=github --output-format=text
      - name: Type check
        run: python -m mypy services || true
      - name: Wait for Postgres again
        run: scripts/wait_pg.sh
      - name: Test
        continue-on-error: false
        run: pytest -q \
          --cov=services --cov=tests \
          --cov-report=xml \
          --cov-fail-under=45
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml

  web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install
        run: npm ci
        working-directory: web
      - name: Biome
        run: npx biome lint .
        working-directory: web
