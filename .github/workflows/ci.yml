name: CI
# yamllint disable rule:line-length

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DATA_DIR: $RUNNER_TEMP/awa-data
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass # pragma: allowlist secret
      PG_DATABASE: awa
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{runner.os}}-pip-${{hashFiles('**/requirements*.txt')}}
          restore-keys: |
            ${{runner.os}}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          find . -name 'requirements*.txt' ! -path './requirements-dev.txt' -print0 \
            | xargs -0 -n1 -I{} pip install -r {}
      - name: Install ruff
        run: pip install ruff==0.4.4
      - name: Install black
        run: pip install black==24.4.2
      - run: ruff check .
      - run: black --check .
      - run: mypy services || true
      - run: pytest -q

  postgres:
    needs: build
    runs-on: ubuntu-latest
    env:
      ENABLE_LIVE: "1"
      PGPASSWORD: pass # pragma: allowlist secret
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass # pragma: allowlist secret
      POSTGRES_DB: awa
      PG_DATABASE: awa
      PG_USER: postgres
      PG_PASSWORD: pass # pragma: allowlist secret
      PG_HOST: localhost
      DATA_DIR: $RUNNER_TEMP/awa-data
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass # pragma: allowlist secret
          POSTGRES_DB: awa
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{runner.os}}-pip-${{hashFiles('**/requirements*.txt')}}
          restore-keys: |
            ${{runner.os}}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          find . -name 'requirements*.txt' ! -path './requirements-dev.txt' -print0 \
            | xargs -0 -n1 -I{} pip install -r {}
      - name: Install ruff
        run: pip install ruff==0.4.4
      - name: Install black
        run: pip install black==24.4.2
      - name: Prepare DB
        run: |
          if ! psql -h localhost -p 5432 -U postgres -tAc "SELECT 1 FROM pg_database WHERE datname='awa'" | grep -q 1; then
            createdb -h localhost -p 5432 -U postgres awa
          fi
        env:
          PGPASSWORD: pass # pragma: allowlist secret
      - name: Export DATABASE_URL
        run: echo "DATABASE_URL=postgresql+psycopg://postgres:pass@localhost:5432/awa" >> $GITHUB_ENV # pragma: allowlist secret
      - name: Run migrations
        run: alembic upgrade head
      - run: ruff check .
      - run: black --check .
      - run: mypy services || true
      - name: Run tests
        run: pytest -q
      - name: Dump Postgres logs
        if: always()
        run: |
          echo "::group::postgres logs"
          docker logs postgres --tail 200 || true
          echo "::endgroup::"

  importer-test:
    needs: postgres
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass # pragma: allowlist secret
          POSTGRES_DB: awa
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres -d awa"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{runner.os}}-pip-${{hashFiles('**/requirements*.txt')}}
          restore-keys: |
            ${{runner.os}}-pip-
      - name: Install all Python requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          find . -name 'requirements*.txt' ! -path './requirements-dev.txt' -print0 \
            | xargs -0 -n1 -I{} pip install -r {}
      - run: docker build -t price_importer services/price_importer
      - run: alembic upgrade head
        env:
          PG_USER: postgres
          PG_PASSWORD: pass # pragma: allowlist secret
          PG_DATABASE: awa
          PG_HOST: localhost
      - run: |
          docker run --network host \
            -e PG_USER=postgres \
            -e PG_PASSWORD=$POSTGRES_PASSWORD \
            -e PG_HOST=localhost \
            -e PG_DATABASE=awa \
            price_importer python -m price_importer.import tests/fixtures/sample_prices.csv --vendor "ACME GmbH"
        env:
          POSTGRES_PASSWORD: pass # pragma: allowlist secret
      - run: psql -h localhost -U "$POSTGRES_USER" -d awa -c "SELECT count(*) FROM vendor_prices;"
        env:
          PGPASSWORD: pass # pragma: allowlist secret
