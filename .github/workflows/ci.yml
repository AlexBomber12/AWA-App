name: CI
on:
  push:
    branches: [dev, main]
    paths-ignore: ['ci-logs/**']
  pull_request:
    branches: [dev, main]
    paths-ignore: ['ci-logs/**']

jobs:
  unit:
    runs-on: ubuntu-latest
    env:
      REDIS_URL: redis://localhost:6379/0
      RATE_LIMIT_DEFAULT: 100/minute
      TRUST_X_FORWARDED: 1
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: awa
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres -d awa"
          --health-interval=5s --health-timeout=5s --health-retries=10
      redis:
        image: redis:7-alpine
        ports: ['6379:6379']
    steps:
      - uses: actions/checkout@v4
      - name: Load env
        run: |
          cat .env.ci >> "$GITHUB_ENV"
          echo "DATABASE_URL=postgresql+asyncpg://postgres:pass@localhost:5432/awa" >> "$GITHUB_ENV"
          echo "PG_HOST=localhost" >> "$GITHUB_ENV"
          echo "PG_PORT=5432" >> "$GITHUB_ENV"
          echo "PG_USER=postgres" >> "$GITHUB_ENV"
          echo "PG_PASSWORD=pass" >> "$GITHUB_ENV"
          echo "PG_DATABASE=awa" >> "$GITHUB_ENV"
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements-dev.txt
      - name: Install deps
        run: |
          pip install -r requirements-dev.txt
          pip install keepa==1.3.15 minio==7.1.15
      - name: Check code formatting
        run: |
          ruff check .
          ruff format --check .
      - name: Wait for DB
        run: for i in {1..30}; do pg_isready -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d "$PG_DATABASE" && break; sleep 1; done
      - name: Verify database exists
        run: psql -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d "$PG_DATABASE" -c "SELECT 1"
        env:
          PGPASSWORD: ${{ env.PG_PASSWORD }}
      - name: Run migrations
        run: alembic -c services/api/alembic.ini upgrade head
      - name: Type check
        run: python -m mypy services || true
      - name: Pytest
        run: pytest -q --cov=services --cov-report=xml --cov-fail-under=75
      - uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.xml

  migrations-check:
    needs: unit
    runs-on: ubuntu-latest
    env:
      REDIS_URL: redis://localhost:6379/0
      RATE_LIMIT_DEFAULT: 100/minute
      TRUST_X_FORWARDED: 1
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: awa
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres -d awa"
          --health-interval=5s --health-timeout=5s --health-retries=10
      redis:
        image: redis:7-alpine
        ports: ['6379:6379']
    steps:
      - uses: actions/checkout@v4
      - name: Load env
        run: |
          cat .env.ci >> "$GITHUB_ENV"
          echo "DATABASE_URL=postgresql+asyncpg://postgres:pass@localhost:5432/awa" >> "$GITHUB_ENV"
          echo "PG_HOST=localhost" >> "$GITHUB_ENV"
          echo "PG_PORT=5432" >> "$GITHUB_ENV"
          echo "PG_USER=postgres" >> "$GITHUB_ENV"
          echo "PG_PASSWORD=pass" >> "$GITHUB_ENV"
          echo "PG_DATABASE=awa" >> "$GITHUB_ENV"
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements-dev.txt
      - name: Install deps
        run: |
          pip install -r requirements-dev.txt
          pip install keepa==1.3.15 minio==7.1.15
      - name: Wait for DB
        run: for i in {1..30}; do pg_isready -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d "$PG_DATABASE" && break; sleep 1; done
      - name: Alembic upgrade
        run: alembic -c services/api/alembic.ini upgrade head
      - name: ROI smoke test
        run: |
          python - <<'PY'
          from fastapi.testclient import TestClient
          from services.api.main import app
          with TestClient(app) as c:
              r = c.get('/roi-review')
              assert r.status_code < 500, r.text
          PY
      - name: Alembic downgrade
        run: alembic -c services/api/alembic.ini downgrade base
      - name: Single head check
        run: test "$(alembic -c services/api/alembic.ini heads | wc -l)" -eq 1

  container-build:
    needs: unit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
      - name: Build & tag API image
        run: |
          docker buildx build \
            --tag ghcr.io/alexbomber12/awa-app/api:${{ github.sha }} \
            --build-arg TZ_CACHE_BUST=${{ github.sha }} \
            --file services/api/Dockerfile \
            --load .

  compose-health:
    needs: container-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo "GITHUB_SHA=${GITHUB_SHA}" >> "$GITHUB_ENV"
      - run: |
          export COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1
          docker compose \
            -f docker-compose.yml \
            -f docker-compose.ci.yml \
            -f docker-compose.postgres.yml \
            build --progress plain
      - name: Pull compose images
        run: |
          export COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1
          docker compose \
            -f docker-compose.yml \
            -f docker-compose.ci.yml \
            -f docker-compose.postgres.yml \
            pull
      - run: |
          export COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1
          docker compose \
            -f docker-compose.yml \
            -f docker-compose.ci.yml \
            -f docker-compose.postgres.yml \
            up -d --wait --no-build --pull always
      - name: Wait for Postgres
        run: for i in {1..60}; do pg_isready -h localhost -p 5432 && break; sleep 1; done
      - name: Ensure compose database
        run: |
          [ "$(psql -U postgres -h localhost -tAc "select 1 from pg_database where datname='awa'")" = '1' ] || psql -U postgres -h localhost -c "create database awa"
        env:
          PGPASSWORD: pass
      - run: |
          docker compose \
            -f docker-compose.yml \
            -f docker-compose.ci.yml \
            -f docker-compose.postgres.yml \
            config | grep image:
      - run: |
          export COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1
          docker compose ps
      - name: Gather logs
        if: failure()
        run: |
          export COMPOSE_DOCKER_CLI_BUILD=1
          export DOCKER_BUILDKIT=1
          docker compose logs > logs.txt
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: docker-logs
          path: logs.txt

  push-image:
    if: github.ref == 'refs/heads/main'
    needs: compose-health
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push image
        run: |
          export COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1
          docker compose \
            -f docker-compose.yml \
            -f docker-compose.postgres.yml \
            push api

  upload-coverage:
    needs: compose-health
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: coverage
      - uses: codecov/codecov-action@v4
        if: success() && env.CODECOV_TOKEN != ''
        with:
          files: coverage.xml
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
