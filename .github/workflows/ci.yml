name: ci

on:
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: |
            web/package-lock.json
            webapp/package-lock.json

      - name: Install Python dev deps
        shell: bash
        run: |
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Python unit tests
        shell: bash
        run: |
          if [ -f pyproject.toml ] || [ -f pytest.ini ]; then
            set -o pipefail
            pytest -q -m "not integration" 2>&1 | tee unit-pytest.log
            exit ${PIPESTATUS[0]}
          fi

      - name: Frontend web tests
        shell: bash
        run: |
          if [ -f web/package.json ]; then
            cd web
            set -o pipefail
            npm ci
            npm test 2>&1 | tee ../web-vitest.log
            exit ${PIPESTATUS[0]}
          fi

      - name: Frontend webapp build
        shell: bash
        run: |
          if [ -f webapp/package.json ]; then
            cd webapp
            set -o pipefail
            npm ci
            npm run build 2>&1 | tee ../webapp-build.log
            exit ${PIPESTATUS[0]}
          fi

      - name: Pick tail and write summary
        id: picktail_unit
        if: always()
        shell: bash
        run: |
          touch unit-pytest.log web-vitest.log webapp-build.log compose-logs.txt compose-up.txt compose-build.txt
          echo no logs > none.txt
          choose_tail() { for f in "$@"; do [ -s "$f" ] && { echo "$f"; return; }; done; echo none.txt; }
          TAIL=$(choose_tail webapp-build.log unit-pytest.log web-vitest.log compose-logs.txt compose-up.txt compose-build.txt)
          echo "tail_path=$TAIL" >> $GITHUB_OUTPUT
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          tail -n 200 "$TAIL" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs-${{ github.run_id }}
          path: |
            unit-pytest.log
            web-vitest.log
            webapp-build.log
            compose-ps.txt
            compose-logs.txt
            compose-up.txt
            compose-build.txt
            none.txt
          if-no-files-found: ignore

      - name: Upsert or delete PR failure comment
        if: always()
        env:
          TAIL_PATH: ${{ steps.picktail_unit.outputs.tail_path }}
          TITLE: CI / unit
          JOB_STATUS: ${{ job.status }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const {owner, repo} = context.repo;
            if (context.eventName !== 'pull_request') return;
            const issue_number = context.issue.number;
            const marker = '<!-- CI_FAILURE_SUMMARY -->';
            let tail = 'no logs';
            try { tail = fs.readFileSync(process.env.TAIL_PATH, 'utf8'); } catch (e) {}
            const body = `${marker}
${process.env.TITLE}

\`\`\`
${tail.split('\n').slice(-200).join('\n')}
\`\`\`

Comment "@codex review" to request an AI review.`;
            const comments = await github.rest.issues.listComments({owner, repo, issue_number, per_page: 100});
            const existing = comments.data.find(c => c.user.type === 'Bot' && c.body && c.body.includes(marker));
            if (process.env.JOB_STATUS.toLowerCase() === 'failure') {
              if (existing) await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body});
              else await github.rest.issues.createComment({owner, repo, issue_number, body});
            } else {
              if (existing) await github.rest.issues.deleteComment({owner, repo, comment_id: existing.id});
            }

  integration:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: unit
    steps:
      - uses: actions/checkout@v4

      - name: Prepare .env.ci
        shell: bash
        run: |
          printf "PG_HOST=postgres\nPG_PORT=5432\nPG_USER=%s\nPG_PASSWORD=%s\nPG_DATABASE=%s\nPOSTGRES_HOST=postgres\nPOSTGRES_PORT=5432\nPOSTGRES_USER=%s\nPOSTGRES_PASSWORD=%s\nPOSTGRES_DB=%s\n" "${{ secrets.PG_USER || 'postgres' }}" "${{ secrets.PG_PASSWORD || 'postgres' }}" "${{ secrets.PG_DATABASE || 'awa' }}" "${{ secrets.PG_USER || 'postgres' }}" "${{ secrets.PG_PASSWORD || 'postgres' }}" "${{ secrets.PG_DATABASE || 'awa' }}" > .env.ci

      - name: Build images
        shell: bash
        run: |
          export COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1
          COMPOSE_FILES=""
          [ -f docker-compose.yml ] && COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.yml"
          [ -f docker-compose.ci.yml ] && COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.ci.yml"
          [ -f docker-compose.postgres.yml ] && COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.postgres.yml"
          set -o pipefail
          docker compose $COMPOSE_FILES --env-file .env.ci build --pull 2>&1 | tee compose-build.txt
          exit ${PIPESTATUS[0]}

      - name: Up services
        shell: bash
        run: |
          COMPOSE_FILES=""
          [ -f docker-compose.yml ] && COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.yml"
          [ -f docker-compose.ci.yml ] && COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.ci.yml"
          [ -f docker-compose.postgres.yml ] && COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.postgres.yml"
          set -o pipefail
          docker compose $COMPOSE_FILES --env-file .env.ci up -d --wait 2>&1 | tee compose-up.txt
          exit ${PIPESTATUS[0]}

      - name: Dump compose logs
        if: always()
        shell: bash
        run: |
          COMPOSE_FILES=""
          [ -f docker-compose.yml ] && COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.yml"
          [ -f docker-compose.ci.yml ] && COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.ci.yml"
          [ -f docker-compose.postgres.yml ] && COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.postgres.yml"
          docker compose $COMPOSE_FILES --env-file .env.ci ps > compose-ps.txt || true
          docker compose $COMPOSE_FILES --env-file .env.ci logs --no-color > compose-logs.txt || true

      - name: Python integration tests
        shell: bash
        run: |
          if [ -f pyproject.toml ] || [ -f pytest.ini ]; then
            set -o pipefail
            pytest -q -m integration 2>&1 | tee integration-pytest.log
            exit ${PIPESTATUS[0]}
          fi

      - name: Pick tail and write summary
        id: picktail_integration
        if: always()
        shell: bash
        run: |
          touch compose-ps.txt compose-logs.txt compose-up.txt compose-build.txt integration-pytest.log
          echo no logs > none.txt
          choose_tail() { for f in "$@"; do [ -s "$f" ] && { echo "$f"; return; }; done; echo none.txt; }
          TAIL=$(choose_tail compose-logs.txt integration-pytest.log compose-up.txt compose-build.txt)
          echo "tail_path=$TAIL" >> $GITHUB_OUTPUT
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          tail -n 200 "$TAIL" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs-${{ github.run_id }}
          path: |
            compose-ps.txt
            compose-logs.txt
            compose-up.txt
            compose-build.txt
            integration-pytest.log
            none.txt
          if-no-files-found: ignore

      - name: Upsert or delete PR failure comment
        if: always()
        env:
          TAIL_PATH: ${{ steps.picktail_integration.outputs.tail_path }}
          TITLE: CI / integration
          JOB_STATUS: ${{ job.status }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const {owner, repo} = context.repo;
            if (context.eventName !== 'pull_request') return;
            const issue_number = context.issue.number;
            const marker = '<!-- CI_FAILURE_SUMMARY -->';
            let tail = 'no logs';
            try { tail = fs.readFileSync(process.env.TAIL_PATH, 'utf8'); } catch (e) {}
            const body = `${marker}
${process.env.TITLE}

\`\`\`
${tail.split('\n').slice(-200).join('\n')}
\`\`\`

Comment "@codex review" to request an AI review.`;
            const comments = await github.rest.issues.listComments({owner, repo, issue_number, per_page: 100});
            const existing = comments.data.find(c => c.user.type === 'Bot' && c.body && c.body.includes(marker));
            if (process.env.JOB_STATUS.toLowerCase() === 'failure') {
              if (existing) await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body});
              else await github.rest.issues.createComment({owner, repo, issue_number, body});
            } else {
              if (existing) await github.rest.issues.deleteComment({owner, repo, comment_id: existing.id});
            }
