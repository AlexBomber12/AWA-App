services:
  postgres:
    build:
      context: .
      dockerfile: docker/postgres/Dockerfile
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass # pragma: allowlist secret
      POSTGRES_DB: awa
      PGPASSWORD: pass # for healthcheck
      TZ: UTC
      LANG: en_US.UTF-8
    
      POSTGRES_CONFIG_FILE: /etc/postgresql/postgresql.conf
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      start_period: 60s
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - awa-net
  minio:
    image: minio/minio
    command: server /data --console-address :9001
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123 # pragma: allowlist secret
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata:/data
    networks:
      - awa-net
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - awa-net
  imap_watcher:
    build:
      context: ./services/ingest
      dockerfile: Dockerfile.email
    environment:
      IMAP_HOST: ${IMAP_HOST:-imap.example.com}
      IMAP_USER: ${IMAP_USER:-user@example.com}
      IMAP_PASS: ${IMAP_PASS:-pass123}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minio}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minio123}
    depends_on:
      - minio
    profiles: [ingest]
  api:
    build:
      context: .
      dockerfile: services/api/Dockerfile
      args:
        TZ_CACHE_BUST: ${GITHUB_SHA:-dev}
    environment:
      TZ: UTC
      PYTHONPATH: /app:/app/services
      PG_USER: postgres
      PG_PASSWORD: pass
      PG_DATABASE: awa
      PG_HOST: postgres
      PG_PORT: 5432
      DATABASE_URL: postgresql+asyncpg://postgres:pass@postgres:5432/awa
      ENABLE_LIVE: 0
      LLM_PROVIDER: stub
      ALEMBIC_CONFIG: /app/alembic.ini
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      RATE_LIMIT_DEFAULT: ${RATE_LIMIT_DEFAULT:-100/minute}
      TRUST_X_FORWARDED: ${TRUST_X_FORWARDED:-1}
      SENTRY_DSN: ${SENTRY_DSN:-}
      SENTRY_ENV: ${SENTRY_ENV:-local}
      SENTRY_TRACES_SAMPLE_RATE: ${SENTRY_TRACES_SAMPLE_RATE:-0.05}
      SENTRY_PROFILES_SAMPLE_RATE: ${SENTRY_PROFILES_SAMPLE_RATE:-0.0}
      SENTRY_RELEASE: ${SENTRY_RELEASE:-}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-fsSL", "http://localhost:8000/health" ]
      start_period: 120s
      interval: 8s
      timeout: 3s
      retries: 12
    networks:
      - awa-net
    volumes:
      - awa-data:/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
  etl:
    build:
      context: .
      dockerfile: services/etl/Dockerfile
      args:
        TZ_CACHE_BUST: ${GITHUB_SHA:-dev}
    environment:
      TZ: UTC
      PG_USER: postgres
      PG_PASSWORD: pass
      PG_DATABASE: awa
      PG_HOST: postgres
      PG_PORT: 5432
      DATABASE_URL: postgresql+asyncpg://postgres:pass@postgres:5432/awa
      ENABLE_LIVE: 0
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
    healthcheck:
      test: ["CMD", "true"]
    networks:
      - awa-net
    volumes:
      - awa-data:/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
  celery_worker:
    build:
      context: .
      dockerfile: services/etl/Dockerfile
      args:
        TZ_CACHE_BUST: ${GITHUB_SHA:-dev}
    command: ["celery", "-A", "services.ingest.celery_app:celery_app", "worker", "-Q", "ingest", "-l", "INFO"]
    environment:
      TZ: UTC
      PYTHONPATH: /app:/app/services
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      PG_USER: postgres
      PG_PASSWORD: pass
      PG_DATABASE: awa
      PG_HOST: postgres
      PG_PORT: 5432
      DATABASE_URL: postgresql+asyncpg://postgres:pass@postgres:5432/awa
      ENABLE_LIVE: 0
      SENTRY_DSN: ${SENTRY_DSN:-}
      SENTRY_ENV: ${SENTRY_ENV:-local}
      SENTRY_TRACES_SAMPLE_RATE: ${SENTRY_TRACES_SAMPLE_RATE:-0.05}
      SENTRY_PROFILES_SAMPLE_RATE: ${SENTRY_PROFILES_SAMPLE_RATE:-0.0}
      SENTRY_RELEASE: ${SENTRY_RELEASE:-}
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - awa-net
    volumes:
      - awa-data:/data
    restart: unless-stopped
  celery_beat:
    build:
      context: .
      dockerfile: services/etl/Dockerfile
      args:
        TZ_CACHE_BUST: ${GITHUB_SHA:-dev}
    command: ["celery", "-A", "services.ingest.celery_app:celery_app", "beat", "-l", "INFO"]
    environment:
      TZ: UTC
      PYTHONPATH: /app:/app/services
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      SCHEDULE_NIGHTLY_MAINTENANCE: "true"
      NIGHTLY_MAINTENANCE_CRON: "30 2 * * *"
      TABLE_MAINTENANCE_LIST: "public.reimbursements_raw,public.returns_raw"
      SENTRY_DSN: ${SENTRY_DSN:-}
      SENTRY_ENV: ${SENTRY_ENV:-local}
      SENTRY_TRACES_SAMPLE_RATE: ${SENTRY_TRACES_SAMPLE_RATE:-0.05}
      SENTRY_PROFILES_SAMPLE_RATE: ${SENTRY_PROFILES_SAMPLE_RATE:-0.0}
      SENTRY_RELEASE: ${SENTRY_RELEASE:-}
    depends_on:
      redis:
        condition: service_started
    networks:
      - awa-net
    restart: unless-stopped
    profiles: ["beat"]
  web:
    build: ./web
    environment:
      VITE_API_URL: http://api:8000
      TZ: UTC
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - awa-net
    extra_hosts:
      - "host.docker.internal:host-gateway"
  repricer:
    build:
      context: .
      dockerfile: services/repricer/Dockerfile
      args:
        TZ_CACHE_BUST: ${GITHUB_SHA:-dev}
    ports:
      - "8100:8100"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8100/health || exit 1"]
      interval: 10s
      retries: 5
    environment:
      TZ: UTC
      PG_USER: postgres
      PG_PASSWORD: pass
      PG_DATABASE: awa
      PG_HOST: postgres
      PG_PORT: 5432
      DATABASE_URL: postgresql+asyncpg://postgres:pass@postgres:5432/awa
      ENABLE_LIVE: 0
    depends_on:
      api:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - awa-net
    volumes:
      - awa-data:/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
  fees_h10:
    build:
      context: ./services/fees_h10
    environment:
      PG_USER: postgres
      PG_PASSWORD: pass
      PG_DATABASE: awa
      PG_HOST: postgres
      PG_PORT: 5432
      DATABASE_URL: postgresql+asyncpg://postgres:pass@postgres:5432/awa
      PYTHONPATH: /app:/app/services
      SENTRY_DSN: ${SENTRY_DSN:-}
      SENTRY_ENV: ${SENTRY_ENV:-local}
      SENTRY_TRACES_SAMPLE_RATE: ${SENTRY_TRACES_SAMPLE_RATE:-0.05}
      SENTRY_PROFILES_SAMPLE_RATE: ${SENTRY_PROFILES_SAMPLE_RATE:-0.0}
      SENTRY_RELEASE: ${SENTRY_RELEASE:-}
    command: ["python", "-m", "fees_h10.worker"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - awa-net
    extra_hosts:
      - "host.docker.internal:host-gateway"
  logistics_etl:
    build:
      context: ./services/logistics_etl
    environment:
      PG_USER: postgres
      PG_PASSWORD: pass
      PG_DATABASE: awa
      PG_HOST: postgres
      PG_PORT: 5432
      DATABASE_URL: postgresql+asyncpg://postgres:pass@postgres:5432/awa
      PYTHONPATH: /app:/app/services
    command: ["python", "-m", "logistics_etl"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - awa-net
    extra_hosts:
      - "host.docker.internal:host-gateway"
  alert_bot:
    build:
      context: ./services/alert_bot
    environment:
      PG_ASYNC_DSN: postgresql://postgres:pass@postgres:5432/awa
      PG_HOST: postgres
      TZ: UTC
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN:-}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID:-}
      ROI_THRESHOLD: "5"
      ROI_DURATION_DAYS: "30"
      COST_DELTA_PCT: "10"
      PRICE_DROP_PCT: "15"
      RETURNS_PCT: "5"
      STALE_DAYS: "30"
      CHECK_INTERVAL_MIN: "60"
    depends_on:
      - postgres
    extra_hosts:
      - "host.docker.internal:host-gateway"
    profiles: [alerts]

volumes:
  miniodata:
  awa-data:
networks:
  awa-net:
