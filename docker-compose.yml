services:
  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass # pragma: allowlist secret
      POSTGRES_DB: awa
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
  minio:
    image: minio/minio
    command: server /data --console-address :9001
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123 # pragma: allowlist secret
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata:/data
    networks:
      - awa-net
  imap_watcher:
    build:
      context: ./services/ingest
      dockerfile: Dockerfile.email
    environment:
      IMAP_HOST: ${IMAP_HOST:-imap.example.com}
      IMAP_USER: ${IMAP_USER:-user@example.com}
      IMAP_PASS: ${IMAP_PASS:-pass123}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minio}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minio123}
    depends_on:
      - minio
    profiles: [ingest]
  api:
    build:
      context: ./services/api
    env_file:
      - .env.example
      - .env.postgres
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DATABASE}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-sSf", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      start_period: 20s
      retries: 12
    networks:
      - awa-net
    volumes:
      - awa-data:/data
  etl:
    build:
      context: ./services/etl
    env_file:
      - .env.example
      - .env.postgres
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DATABASE}
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
    healthcheck:
      test: ["CMD", "true"]
    networks:
      - awa-net
    volumes:
      - awa-data:/data
  web:
    build: ./web
    environment:
      VITE_API_URL: http://api:8000
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - awa-net
  repricer:
    build:
      context: ./services/repricer
    ports:
      - "8100:8100"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8100/health || exit 1"]
      interval: 10s
      retries: 5
    env_file:
      - .env.example
      - .env.postgres
    depends_on:
      api:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - awa-net
    volumes:
      - awa-data:/data
  fees_h10:
    build:
      context: ./services/fees_h10
    env_file:
      - .env.example
      - .env.postgres
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "--help"]
      interval: 30s
      retries: 3
    networks:
      - awa-net
  logistics_etl:
    build:
      context: ./services/logistics_etl
    env_file:
      - .env.example
      - .env.postgres
    command: ["python", "-m", "logistics_etl"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - awa-net
  alert_bot:
    build:
      context: ./services/alert_bot
    env_file:
      - .env.postgres
    environment:
      PG_ASYNC_DSN: postgresql://postgres:pass@postgres:5432/awa
      PG_HOST: postgres
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN:-}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID:-}
      ROI_THRESHOLD: "5"
      ROI_DURATION_DAYS: "30"
      COST_DELTA_PCT: "10"
      PRICE_DROP_PCT: "15"
      RETURNS_PCT: "5"
      STALE_DAYS: "30"
      CHECK_INTERVAL_MIN: "60"
    depends_on:
      - postgres
    profiles: [alerts]

volumes:
  miniodata:
  awa-data:
networks:
  awa-net:
