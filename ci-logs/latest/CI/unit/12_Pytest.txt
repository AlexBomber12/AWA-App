2025-08-19T20:07:11.5201041Z ##[group]Run pytest -q --cov=services
2025-08-19T20:07:11.5201407Z [36;1mpytest -q --cov=services[0m
2025-08-19T20:07:11.5241751Z shell: /usr/bin/bash -e {0}
2025-08-19T20:07:11.5242025Z env:
2025-08-19T20:07:11.5242261Z   REDIS_URL: redis://localhost:6379/0
2025-08-19T20:07:11.5242562Z   RATE_LIMIT_DEFAULT: 100/minute
2025-08-19T20:07:11.5242817Z   TRUST_X_FORWARDED: 1
2025-08-19T20:07:11.5243050Z   PG_USER: postgres
2025-08-19T20:07:11.5243273Z   PG_PASSWORD: pass
2025-08-19T20:07:11.5243492Z   PG_DATABASE: awa
2025-08-19T20:07:11.5243699Z   PG_HOST: localhost
2025-08-19T20:07:11.5243915Z   PG_PORT: 5432
2025-08-19T20:07:11.5244400Z   PG_SYNC_DSN: ***localhost:5432/awa
2025-08-19T20:07:11.5244876Z   PG_ASYNC_DSN: ***localhost:5432/awa
2025-08-19T20:07:11.5245326Z   DATABASE_URL: ***localhost:5432/awa
2025-08-19T20:07:11.5245603Z   DATA_DIR: /tmp/awa-data
2025-08-19T20:07:11.5245840Z   ENABLE_LIVE: 0
2025-08-19T20:07:11.5246046Z   TESTING: 1
2025-08-19T20:07:11.5246316Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:07:11.5246808Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-08-19T20:07:11.5247476Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:07:11.5247899Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:07:11.5248311Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:07:11.5248719Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-08-19T20:07:11.5249063Z ##[endgroup]
2025-08-19T20:07:44.4692241Z ........s.............................sssssss........................... [ 43%]
2025-08-19T20:08:17.2770649Z ..........................F............................................. [ 86%]
2025-08-19T20:08:18.0352924Z ......................                                                   [100%]
2025-08-19T20:08:18.0353672Z =================================== FAILURES ===================================
2025-08-19T20:08:18.0354303Z _________________________________ test_offline _________________________________
2025-08-19T20:08:18.0354929Z 
2025-08-19T20:08:18.0355276Z self = <sqlalchemy.engine.base.Connection object at 0x7f43fe0f8ad0>
2025-08-19T20:08:18.0356638Z dialect = <sqlalchemy.dialects.postgresql.psycopg.PGDialect_psycopg object at 0x7f43fe0f9af0>
2025-08-19T20:08:18.0358284Z context = <sqlalchemy.dialects.postgresql.psycopg.PGExecutionContext_psycopg object at 0x7f43fe29aff0>
2025-08-19T20:08:18.0359741Z statement = <sqlalchemy.dialects.postgresql.psycopg.PGCompiler_psycopg object at 0x7f43fe2990a0>
2025-08-19T20:08:18.0361135Z parameters = [{'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}]
2025-08-19T20:08:18.0362428Z 
2025-08-19T20:08:18.0362640Z     def _exec_single_context(
2025-08-19T20:08:18.0363114Z         self,
2025-08-19T20:08:18.0363489Z         dialect: Dialect,
2025-08-19T20:08:18.0363968Z         context: ExecutionContext,
2025-08-19T20:08:18.0364485Z         statement: Union[str, Compiled],
2025-08-19T20:08:18.0365084Z         parameters: Optional[_AnyMultiExecuteParams],
2025-08-19T20:08:18.0365661Z     ) -> CursorResult[Any]:
2025-08-19T20:08:18.0366105Z         """continue the _execute_context() method for a single DBAPI
2025-08-19T20:08:18.0366553Z         cursor.execute() or cursor.executemany() call.
2025-08-19T20:08:18.0366887Z     
2025-08-19T20:08:18.0367075Z         """
2025-08-19T20:08:18.0367604Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-08-19T20:08:18.0368080Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-08-19T20:08:18.0368464Z     
2025-08-19T20:08:18.0368683Z             if generic_setinputsizes:
2025-08-19T20:08:18.0368975Z                 try:
2025-08-19T20:08:18.0369229Z                     dialect.do_set_input_sizes(
2025-08-19T20:08:18.0369606Z                         context.cursor, generic_setinputsizes, context
2025-08-19T20:08:18.0369952Z                     )
2025-08-19T20:08:18.0370202Z                 except BaseException as e:
2025-08-19T20:08:18.0370841Z                     self._handle_dbapi_exception(
2025-08-19T20:08:18.0371137Z                         e, str(statement), parameters, None, context
2025-08-19T20:08:18.0371409Z                     )
2025-08-19T20:08:18.0371583Z     
2025-08-19T20:08:18.0371764Z         cursor, str_statement, parameters = (
2025-08-19T20:08:18.0372015Z             context.cursor,
2025-08-19T20:08:18.0372326Z             context.statement,
2025-08-19T20:08:18.0372708Z             context.parameters,
2025-08-19T20:08:18.0373059Z         )
2025-08-19T20:08:18.0373307Z     
2025-08-19T20:08:18.0373621Z         effective_parameters: Optional[_AnyExecuteParams]
2025-08-19T20:08:18.0373894Z     
2025-08-19T20:08:18.0374059Z         if not context.executemany:
2025-08-19T20:08:18.0374314Z             effective_parameters = parameters[0]
2025-08-19T20:08:18.0374558Z         else:
2025-08-19T20:08:18.0374752Z             effective_parameters = parameters
2025-08-19T20:08:18.0374981Z     
2025-08-19T20:08:18.0375179Z         if self._has_events or self.engine._has_events:
2025-08-19T20:08:18.0375494Z             for fn in self.dispatch.before_cursor_execute:
2025-08-19T20:08:18.0375793Z                 str_statement, effective_parameters = fn(
2025-08-19T20:08:18.0376051Z                     self,
2025-08-19T20:08:18.0376241Z                     cursor,
2025-08-19T20:08:18.0376436Z                     str_statement,
2025-08-19T20:08:18.0376668Z                     effective_parameters,
2025-08-19T20:08:18.0376904Z                     context,
2025-08-19T20:08:18.0377112Z                     context.executemany,
2025-08-19T20:08:18.0377616Z                 )
2025-08-19T20:08:18.0377788Z     
2025-08-19T20:08:18.0377947Z         if self._echo:
2025-08-19T20:08:18.0378146Z             self._log_info(str_statement)
2025-08-19T20:08:18.0378373Z     
2025-08-19T20:08:18.0378545Z             stats = context._get_cache_stats()
2025-08-19T20:08:18.0378769Z     
2025-08-19T20:08:18.0378949Z             if not self.engine.hide_parameters:
2025-08-19T20:08:18.0379210Z                 self._log_info(
2025-08-19T20:08:18.0379414Z                     "[%s] %r",
2025-08-19T20:08:18.0379617Z                     stats,
2025-08-19T20:08:18.0379986Z                     sql_util._repr_params(
2025-08-19T20:08:18.0380231Z                         effective_parameters,
2025-08-19T20:08:18.0380494Z                         batches=10,
2025-08-19T20:08:18.0380742Z                         ismulti=context.executemany,
2025-08-19T20:08:18.0380987Z                     ),
2025-08-19T20:08:18.0381159Z                 )
2025-08-19T20:08:18.0381329Z             else:
2025-08-19T20:08:18.0381503Z                 self._log_info(
2025-08-19T20:08:18.0381777Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-08-19T20:08:18.0382069Z                     stats,
2025-08-19T20:08:18.0382257Z                 )
2025-08-19T20:08:18.0382420Z     
2025-08-19T20:08:18.0382587Z         evt_handled: bool = False
2025-08-19T20:08:18.0382803Z         try:
2025-08-19T20:08:18.0383033Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-08-19T20:08:18.0383345Z                 effective_parameters = cast(
2025-08-19T20:08:18.0383646Z                     "_CoreMultiExecuteParams", effective_parameters
2025-08-19T20:08:18.0383911Z                 )
2025-08-19T20:08:18.0384103Z                 if self.dialect._has_events:
2025-08-19T20:08:18.0384402Z                     for fn in self.dialect.dispatch.do_executemany:
2025-08-19T20:08:18.0384679Z                         if fn(
2025-08-19T20:08:18.0384885Z                             cursor,
2025-08-19T20:08:18.0385106Z                             str_statement,
2025-08-19T20:08:18.0385352Z                             effective_parameters,
2025-08-19T20:08:18.0385589Z                             context,
2025-08-19T20:08:18.0385809Z                         ):
2025-08-19T20:08:18.0386022Z                             evt_handled = True
2025-08-19T20:08:18.0386252Z                             break
2025-08-19T20:08:18.0386605Z                 if not evt_handled:
2025-08-19T20:08:18.0386850Z                     self.dialect.do_executemany(
2025-08-19T20:08:18.0387094Z                         cursor,
2025-08-19T20:08:18.0387487Z                         str_statement,
2025-08-19T20:08:18.0387728Z                         effective_parameters,
2025-08-19T20:08:18.0387964Z                         context,
2025-08-19T20:08:18.0388162Z                     )
2025-08-19T20:08:18.0388412Z             elif not effective_parameters and context.no_parameters:
2025-08-19T20:08:18.0388720Z                 if self.dialect._has_events:
2025-08-19T20:08:18.0389010Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-08-19T20:08:18.0389328Z                         if fn(cursor, str_statement, context):
2025-08-19T20:08:18.0389599Z                             evt_handled = True
2025-08-19T20:08:18.0389834Z                             break
2025-08-19T20:08:18.0390050Z                 if not evt_handled:
2025-08-19T20:08:18.0390301Z                     self.dialect.do_execute_no_params(
2025-08-19T20:08:18.0390572Z                         cursor, str_statement, context
2025-08-19T20:08:18.0390813Z                     )
2025-08-19T20:08:18.0390988Z             else:
2025-08-19T20:08:18.0391184Z                 effective_parameters = cast(
2025-08-19T20:08:18.0391469Z                     "_CoreSingleExecuteParams", effective_parameters
2025-08-19T20:08:18.0391735Z                 )
2025-08-19T20:08:18.0391926Z                 if self.dialect._has_events:
2025-08-19T20:08:18.0392199Z                     for fn in self.dialect.dispatch.do_execute:
2025-08-19T20:08:18.0392461Z                         if fn(
2025-08-19T20:08:18.0392668Z                             cursor,
2025-08-19T20:08:18.0392891Z                             str_statement,
2025-08-19T20:08:18.0393129Z                             effective_parameters,
2025-08-19T20:08:18.0393372Z                             context,
2025-08-19T20:08:18.0393588Z                         ):
2025-08-19T20:08:18.0393791Z                             evt_handled = True
2025-08-19T20:08:18.0394027Z                             break
2025-08-19T20:08:18.0394374Z                 if not evt_handled:
2025-08-19T20:08:18.0394601Z >                   self.dialect.do_execute(
2025-08-19T20:08:18.0394898Z                         cursor, str_statement, effective_parameters, context
2025-08-19T20:08:18.0395179Z                     )
2025-08-19T20:08:18.0395290Z 
2025-08-19T20:08:18.0395585Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: 
2025-08-19T20:08:18.0396087Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:08:18.0396639Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T20:08:18.0397142Z     cursor.execute(statement, parameters)
2025-08-19T20:08:18.0397617Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:08:18.0397817Z 
2025-08-19T20:08:18.0398075Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7f440234fa10>
2025-08-19T20:08:18.0399035Z query = '\n    WITH v(asin, marketplace, fee_type, amount, currency, source, effective_date) AS (VALUES (%(asin0)s, %(marketpl...CT FROM v.currency OR t.source IS DISTINCT FROM v.source OR t.effective_date IS DISTINCT FROM v.effective_date);\n    '
2025-08-19T20:08:18.0399920Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T20:08:18.0400187Z 
2025-08-19T20:08:18.0400256Z     def execute(
2025-08-19T20:08:18.0400430Z         self,
2025-08-19T20:08:18.0400599Z         query: Query,
2025-08-19T20:08:18.0400803Z         params: Params | None = None,
2025-08-19T20:08:18.0401046Z         *,
2025-08-19T20:08:18.0401222Z         prepare: bool | None = None,
2025-08-19T20:08:18.0401449Z         binary: bool | None = None,
2025-08-19T20:08:18.0401800Z     ) -> Self:
2025-08-19T20:08:18.0401969Z         """
2025-08-19T20:08:18.0402159Z         Execute a query or command to the database.
2025-08-19T20:08:18.0402413Z         """
2025-08-19T20:08:18.0402570Z         try:
2025-08-19T20:08:18.0402744Z             with self._conn.lock:
2025-08-19T20:08:18.0402967Z                 self._conn.wait(
2025-08-19T20:08:18.0403272Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T20:08:18.0403584Z                 )
2025-08-19T20:08:18.0403770Z         except e._NO_TRACEBACK as ex:
2025-08-19T20:08:18.0404013Z >           raise ex.with_traceback(None)
2025-08-19T20:08:18.0404376Z E           psycopg.errors.UndefinedFunction: operator does not exist: date = text
2025-08-19T20:08:18.0404819Z E           LINE 7: ...rce IS DISTINCT FROM v.source OR t.effective_date IS DISTINC...
2025-08-19T20:08:18.0405161Z E                                                                        ^
2025-08-19T20:08:18.0405602Z E           HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-08-19T20:08:18.0405960Z 
2025-08-19T20:08:18.0406275Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: UndefinedFunction
2025-08-19T20:08:18.0406667Z 
2025-08-19T20:08:18.0406832Z The above exception was the direct cause of the following exception:
2025-08-19T20:08:18.0407085Z 
2025-08-19T20:08:18.0407522Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f43fe130620>
2025-08-19T20:08:18.0407971Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_offline0')
2025-08-19T20:08:18.0408604Z pg_engine = Engine(***localhost:5432/awa)
2025-08-19T20:08:18.0408880Z ensure_test_fees_raw_table = None
2025-08-19T20:08:18.0409045Z 
2025-08-19T20:08:18.0409275Z     def test_offline(monkeypatch, tmp_path, pg_engine, ensure_test_fees_raw_table) -> None:
2025-08-19T20:08:18.0409697Z         os.environ["FEES_RAW_TABLE"] = "test_fees_raw"
2025-08-19T20:08:18.0409976Z         os.environ["ENABLE_LIVE"] = "0"
2025-08-19T20:08:18.0410234Z         os.environ["SP_REFRESH_TOKEN"] = "t"
2025-08-19T20:08:18.0410492Z         os.environ["SP_CLIENT_ID"] = "i"
2025-08-19T20:08:18.0410882Z         os.environ["SP_CLIENT_SECRET"] = "s"
2025-08-19T20:08:18.0411134Z         os.environ["SELLER_ID"] = "seller"
2025-08-19T20:08:18.0411376Z         os.environ["REGION"] = "EU"
2025-08-19T20:08:18.0411645Z         os.environ["DATABASE_URL"] = build_dsn(sync=True)
2025-08-19T20:08:18.0411934Z         _ = pg_engine, ensure_test_fees_raw_table
2025-08-19T20:08:18.0412202Z >       res = sp_fees_ingestor.main()
2025-08-19T20:08:18.0412435Z               ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T20:08:18.0412579Z 
2025-08-19T20:08:18.0412668Z tests/test_sp_fees_ingestor.py:52: 
2025-08-19T20:08:18.0412937Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:08:18.0413238Z services/etl/sp_fees_ingestor.py:79: in main
2025-08-19T20:08:18.0413584Z     repo.upsert_fees_raw(engine, rows, testing=os.getenv("TESTING") == "1")
2025-08-19T20:08:18.0413975Z services/fees_h10/repository.py:65: in upsert_fees_raw
2025-08-19T20:08:18.0414321Z     res2 = conn.execute(text(update_sql), params)
2025-08-19T20:08:18.0414579Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T20:08:18.0415055Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-08-19T20:08:18.0415511Z     return meth(
2025-08-19T20:08:18.0415984Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-08-19T20:08:18.0416533Z     return connection._execute_clauseelement(
2025-08-19T20:08:18.0417069Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-08-19T20:08:18.0417822Z     ret = self._execute_context(
2025-08-19T20:08:18.0418309Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-08-19T20:08:18.0418943Z     return self._exec_single_context(
2025-08-19T20:08:18.0419447Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-08-19T20:08:18.0419977Z     self._handle_dbapi_exception(
2025-08-19T20:08:18.0420491Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-08-19T20:08:18.0421086Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-08-19T20:08:18.0421663Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-08-19T20:08:18.0422177Z     self.dialect.do_execute(
2025-08-19T20:08:18.0422646Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T20:08:18.0423146Z     cursor.execute(statement, parameters)
2025-08-19T20:08:18.0423434Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:08:18.0423637Z 
2025-08-19T20:08:18.0423889Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7f440234fa10>
2025-08-19T20:08:18.0424845Z query = '\n    WITH v(asin, marketplace, fee_type, amount, currency, source, effective_date) AS (VALUES (%(asin0)s, %(marketpl...CT FROM v.currency OR t.source IS DISTINCT FROM v.source OR t.effective_date IS DISTINCT FROM v.effective_date);\n    '
2025-08-19T20:08:18.0425724Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T20:08:18.0425987Z 
2025-08-19T20:08:18.0426061Z     def execute(
2025-08-19T20:08:18.0426233Z         self,
2025-08-19T20:08:18.0426402Z         query: Query,
2025-08-19T20:08:18.0426602Z         params: Params | None = None,
2025-08-19T20:08:18.0426826Z         *,
2025-08-19T20:08:18.0427003Z         prepare: bool | None = None,
2025-08-19T20:08:18.0427444Z         binary: bool | None = None,
2025-08-19T20:08:18.0427680Z     ) -> Self:
2025-08-19T20:08:18.0427851Z         """
2025-08-19T20:08:18.0428048Z         Execute a query or command to the database.
2025-08-19T20:08:18.0428434Z         """
2025-08-19T20:08:18.0428592Z         try:
2025-08-19T20:08:18.0428773Z             with self._conn.lock:
2025-08-19T20:08:18.0428995Z                 self._conn.wait(
2025-08-19T20:08:18.0429300Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T20:08:18.0429615Z                 )
2025-08-19T20:08:18.0429803Z         except e._NO_TRACEBACK as ex:
2025-08-19T20:08:18.0430051Z >           raise ex.with_traceback(None)
2025-08-19T20:08:18.0430530Z E           sqlalchemy.exc.ProgrammingError: (psycopg.errors.UndefinedFunction) operator does not exist: date = text
2025-08-19T20:08:18.0431093Z E           LINE 7: ...rce IS DISTINCT FROM v.source OR t.effective_date IS DISTINC...
2025-08-19T20:08:18.0431446Z E                                                                        ^
2025-08-19T20:08:18.0431887Z E           HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-08-19T20:08:18.0432304Z E           [SQL: 
2025-08-19T20:08:18.0433146Z E               WITH v(asin, marketplace, fee_type, amount, currency, source, effective_date) AS (VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, %(effective_date0)s), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, %(effective_date1)s))
2025-08-19T20:08:18.0434043Z E               UPDATE test_fees_raw AS t
2025-08-19T20:08:18.0434451Z E               SET amount = v.amount, currency = v.currency, source = v.source, effective_date = v.effective_date
2025-08-19T20:08:18.0434848Z E               FROM v
2025-08-19T20:08:18.0435166Z E               WHERE t.asin = v.asin AND t.marketplace = v.marketplace AND t.fee_type = v.fee_type
2025-08-19T20:08:18.0436038Z E                 AND (t.amount IS DISTINCT FROM v.amount OR t.currency IS DISTINCT FROM v.currency OR t.source IS DISTINCT FROM v.source OR t.effective_date IS DISTINCT FROM v.effective_date);
2025-08-19T20:08:18.0436643Z E               ]
2025-08-19T20:08:18.0437575Z E           [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'effective_date0': None, 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp', 'effective_date1': None}]
2025-08-19T20:08:18.0438523Z E           (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T20:08:18.0438768Z 
2025-08-19T20:08:18.0439080Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: ProgrammingError
2025-08-19T20:08:18.0439612Z =============================== warnings summary ===============================
2025-08-19T20:08:18.0439915Z services/alert_bot/tests/test_smoke.py:5
2025-08-19T20:08:18.0441007Z   /home/runner/work/AWA-App/AWA-App/services/alert_bot/tests/test_smoke.py:5: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
2025-08-19T20:08:18.0442110Z     import pkg_resources  # noqa: F401
2025-08-19T20:08:18.0442284Z 
2025-08-19T20:08:18.0442395Z tests/api/test_ingest_endpoints.py: 12 warnings
2025-08-19T20:08:18.0442692Z tests/ingest/test_tasks_eager.py: 3 warnings
2025-08-19T20:08:18.0442952Z tests/test_api_fast.py: 1 warning
2025-08-19T20:08:18.0443190Z tests/test_health.py: 5 warnings
2025-08-19T20:08:18.0443421Z tests/test_smoke.py: 5 warnings
2025-08-19T20:08:18.0443664Z services/api/tests/test_cors.py: 1 warning
2025-08-19T20:08:18.0443942Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T20:08:18.0444242Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:08:18.0444537Z services/api/tests/test_rate_limit.py: 122 warnings
2025-08-19T20:08:18.0444850Z services/api/tests/test_roi_basic_auth.py: 4 warnings
2025-08-19T20:08:18.0445301Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T20:08:18.0445620Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T20:08:18.0446949Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/asgi_correlation_id/extensions/sentry.py:27: DeprecationWarning: sentry_sdk.configure_scope is deprecated and will be removed in the next major version. Please consult our migration guide to learn how to migrate to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x#scope-configuring
2025-08-19T20:08:18.0448456Z     with configure_scope() as scope:
2025-08-19T20:08:18.0448624Z 
2025-08-19T20:08:18.0448735Z tests/api/test_ingest_endpoints.py: 3 warnings
2025-08-19T20:08:18.0449007Z tests/test_api_fast.py: 1 warning
2025-08-19T20:08:18.0449246Z tests/test_health.py: 5 warnings
2025-08-19T20:08:18.0449469Z tests/test_smoke.py: 5 warnings
2025-08-19T20:08:18.0449712Z services/api/tests/test_cors.py: 3 warnings
2025-08-19T20:08:18.0450006Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T20:08:18.0450291Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:08:18.0450582Z services/api/tests/test_rate_limit.py: 2 warnings
2025-08-19T20:08:18.0450882Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T20:08:18.0451196Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T20:08:18.0452000Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/fastapi_limiter/__init__.py:89: DeprecationWarning: Call to deprecated close. (Use aclose() instead) -- Deprecated since version 5.0.1.
2025-08-19T20:08:18.0452753Z     await cls.redis.close()
2025-08-19T20:08:18.0452891Z 
2025-08-19T20:08:18.0453054Z tests/test_api_fast.py::test_health_endpoint
2025-08-19T20:08:18.0454006Z   /home/runner/work/AWA-App/AWA-App/tests/test_api_fast.py:13: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:08:18.0455090Z     return datetime.datetime.utcnow()
2025-08-19T20:08:18.0455263Z 
2025-08-19T20:08:18.0455347Z tests/test_api_fast.py: 1 warning
2025-08-19T20:08:18.0455580Z tests/test_health.py: 5 warnings
2025-08-19T20:08:18.0455801Z tests/test_smoke.py: 5 warnings
2025-08-19T20:08:18.0456036Z services/api/tests/test_cors.py: 1 warning
2025-08-19T20:08:18.0456307Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:08:18.0456590Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T20:08:18.0457713Z   /home/runner/work/AWA-App/AWA-App/services/api/routes/health.py:24: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:08:18.0458755Z     app_now = datetime.utcnow().replace(tzinfo=timezone.utc)
2025-08-19T20:08:18.0458974Z 
2025-08-19T20:08:18.0459073Z tests/test_health.py::test_health[0]
2025-08-19T20:08:18.0459322Z tests/test_health.py::test_health[1]
2025-08-19T20:08:18.0459565Z tests/test_health.py::test_health[2]
2025-08-19T20:08:18.0460008Z tests/test_health.py::test_health[3]
2025-08-19T20:08:18.0460449Z tests/test_health.py::test_health[4]
2025-08-19T20:08:18.0461999Z   /home/runner/work/AWA-App/AWA-App/tests/test_health.py:22: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:08:18.0463686Z     return datetime.datetime.utcnow()
2025-08-19T20:08:18.0463988Z 
2025-08-19T20:08:18.0464154Z tests/test_smoke.py::test_health[0]
2025-08-19T20:08:18.0464611Z tests/test_smoke.py::test_health[1]
2025-08-19T20:08:18.0465051Z tests/test_smoke.py::test_health[2]
2025-08-19T20:08:18.0465522Z tests/test_smoke.py::test_health[3]
2025-08-19T20:08:18.0465976Z tests/test_smoke.py::test_health[4]
2025-08-19T20:08:18.0468143Z   /home/runner/work/AWA-App/AWA-App/tests/test_smoke.py:32: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:08:18.0469879Z     return datetime.datetime.utcnow()
2025-08-19T20:08:18.0470203Z 
2025-08-19T20:08:18.5785983Z services/api/tests/test_cors.py::test_cors_simple_get_allowed
2025-08-19T20:08:18.5788202Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_cors.py:27: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:08:18.5789852Z     return datetime.datetime.utcnow()
2025-08-19T20:08:18.5790159Z 
2025-08-19T20:08:18.5790376Z services/api/tests/test_health.py::test_health_route
2025-08-19T20:08:18.5791914Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_health.py:14: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:08:18.5792997Z     return datetime.datetime.utcnow()
2025-08-19T20:08:18.5793177Z 
2025-08-19T20:08:18.5793302Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T20:08:18.5794346Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_rate_limit.py:33: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:08:18.5795349Z     return datetime.datetime.utcnow()
2025-08-19T20:08:18.5795525Z 
2025-08-19T20:08:18.5796170Z services/api/tests/test_sentry_event.py::test_unhandled_exception_is_captured_and_tagged
2025-08-19T20:08:18.5798618Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_sentry_event.py:47: SentryHubDeprecationWarning: `sentry_sdk.Hub` is deprecated and will be removed in a future major release. Please consult our 1.x to 2.x migration guide for details on how to migrate `Hub` usage to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x
2025-08-19T20:08:18.5800692Z     hub = sentry_sdk.Hub.current
2025-08-19T20:08:18.5800943Z 
2025-08-19T20:08:18.5801216Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-08-19T20:08:18.5801604Z ================================ tests coverage ================================
2025-08-19T20:08:18.5801973Z _______________ coverage: platform linux, python 3.12.11-final-0 _______________
2025-08-19T20:08:18.5802222Z 
2025-08-19T20:08:18.5802324Z Coverage XML written to file coverage.xml
2025-08-19T20:08:18.5802648Z Required test coverage of 65% reached. Total coverage: 65.43%
2025-08-19T20:08:18.5803250Z =========================== short test summary info ============================
2025-08-19T20:08:18.5803927Z FAILED tests/test_sp_fees_ingestor.py::test_offline - sqlalchemy.exc.ProgrammingError: (psycopg.errors.UndefinedFunction) operator does not exist: date = text
2025-08-19T20:08:18.5804777Z LINE 7: ...rce IS DISTINCT FROM v.source OR t.effective_date IS DISTINC...
2025-08-19T20:08:18.5805223Z                                                              ^
2025-08-19T20:08:18.5805661Z HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-08-19T20:08:18.5806072Z [SQL: 
2025-08-19T20:08:18.5806510Z Sentry is attempting to send 0 pending events
2025-08-19T20:08:18.5806907Z Waiting up to True seconds
2025-08-19T20:08:18.5807374Z Press Ctrl-C to quit
2025-08-19T20:08:18.5808714Z     WITH v(asin, marketplace, fee_type, amount, currency, source, effective_date) AS (VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, %(effective_date0)s), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, %(effective_date1)s))
2025-08-19T20:08:18.5810355Z     UPDATE test_fees_raw AS t
2025-08-19T20:08:18.5810889Z     SET amount = v.amount, currency = v.currency, source = v.source, effective_date = v.effective_date
2025-08-19T20:08:18.5811683Z     FROM v
2025-08-19T20:08:18.5812316Z     WHERE t.asin = v.asin AND t.marketplace = v.marketplace AND t.fee_type = v.fee_type
2025-08-19T20:08:18.5813673Z       AND (t.amount IS DISTINCT FROM v.amount OR t.currency IS DISTINCT FROM v.currency OR t.source IS DISTINCT FROM v.source OR t.effective_date IS DISTINCT FROM v.effective_date);
2025-08-19T20:08:18.5815067Z     ]
2025-08-19T20:08:18.5816667Z [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'effective_date0': None, 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp', 'effective_date1': None}]
2025-08-19T20:08:18.5818875Z (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T20:08:19.0964707Z ##[error]Process completed with exit code 1.
