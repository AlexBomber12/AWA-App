2025-08-19T20:24:30.2548632Z ##[group]Run pytest -q --cov=services
2025-08-19T20:24:30.2548950Z [36;1mpytest -q --cov=services[0m
2025-08-19T20:24:30.2589036Z shell: /usr/bin/bash -e {0}
2025-08-19T20:24:30.2589261Z env:
2025-08-19T20:24:30.2589465Z   REDIS_URL: redis://localhost:6379/0
2025-08-19T20:24:30.2589741Z   RATE_LIMIT_DEFAULT: 100/minute
2025-08-19T20:24:30.2589959Z   TRUST_X_FORWARDED: 1
2025-08-19T20:24:30.2590160Z   PG_USER: postgres
2025-08-19T20:24:30.2590468Z   PG_PASSWORD: pass
2025-08-19T20:24:30.2590657Z   PG_DATABASE: awa
2025-08-19T20:24:30.2590833Z   PG_HOST: localhost
2025-08-19T20:24:30.2591016Z   PG_PORT: 5432
2025-08-19T20:24:30.2591423Z   PG_SYNC_DSN: ***localhost:5432/awa
2025-08-19T20:24:30.2591830Z   PG_ASYNC_DSN: ***localhost:5432/awa
2025-08-19T20:24:30.2592210Z   DATABASE_URL: ***localhost:5432/awa
2025-08-19T20:24:30.2592441Z   DATA_DIR: /tmp/awa-data
2025-08-19T20:24:30.2592645Z   ENABLE_LIVE: 0
2025-08-19T20:24:30.2592819Z   TESTING: 1
2025-08-19T20:24:30.2593048Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:24:30.2593461Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-08-19T20:24:30.2593847Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:24:30.2594187Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:24:30.2594549Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:24:30.2594892Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-08-19T20:24:30.2595185Z ##[endgroup]
2025-08-19T20:24:59.8547672Z ........s.............................sssssss........................... [ 43%]
2025-08-19T20:25:32.6278289Z ..........................F............................................. [ 86%]
2025-08-19T20:25:33.3854586Z ......................                                                   [100%]
2025-08-19T20:25:33.3855291Z =================================== FAILURES ===================================
2025-08-19T20:25:33.3855941Z _________________________________ test_offline _________________________________
2025-08-19T20:25:33.3856388Z 
2025-08-19T20:25:33.3856693Z self = <sqlalchemy.engine.base.Connection object at 0x7f516c6a8b90>
2025-08-19T20:25:33.3857518Z dialect = <sqlalchemy.dialects.postgresql.psycopg.PGDialect_psycopg object at 0x7f516c6a8ec0>
2025-08-19T20:25:33.3858926Z context = <sqlalchemy.dialects.postgresql.psycopg.PGExecutionContext_psycopg object at 0x7f516c6a9190>
2025-08-19T20:25:33.3860047Z statement = <sqlalchemy.dialects.postgresql.psycopg.PGCompiler_psycopg object at 0x7f516c6ab350>
2025-08-19T20:25:33.3861231Z parameters = [{'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}]
2025-08-19T20:25:33.3861712Z 
2025-08-19T20:25:33.3861865Z     def _exec_single_context(
2025-08-19T20:25:33.3862211Z         self,
2025-08-19T20:25:33.3862492Z         dialect: Dialect,
2025-08-19T20:25:33.3862850Z         context: ExecutionContext,
2025-08-19T20:25:33.3863274Z         statement: Union[str, Compiled],
2025-08-19T20:25:33.3863780Z         parameters: Optional[_AnyMultiExecuteParams],
2025-08-19T20:25:33.3864277Z     ) -> CursorResult[Any]:
2025-08-19T20:25:33.3864751Z         """continue the _execute_context() method for a single DBAPI
2025-08-19T20:25:33.3865345Z         cursor.execute() or cursor.executemany() call.
2025-08-19T20:25:33.3865818Z     
2025-08-19T20:25:33.3866080Z         """
2025-08-19T20:25:33.3866473Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-08-19T20:25:33.3867153Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-08-19T20:25:33.3867669Z     
2025-08-19T20:25:33.3867958Z             if generic_setinputsizes:
2025-08-19T20:25:33.3868339Z                 try:
2025-08-19T20:25:33.3868653Z                     dialect.do_set_input_sizes(
2025-08-19T20:25:33.3869112Z                         context.cursor, generic_setinputsizes, context
2025-08-19T20:25:33.3869526Z                     )
2025-08-19T20:25:33.3869841Z                 except BaseException as e:
2025-08-19T20:25:33.3870825Z                     self._handle_dbapi_exception(
2025-08-19T20:25:33.3871296Z                         e, str(statement), parameters, None, context
2025-08-19T20:25:33.3871706Z                     )
2025-08-19T20:25:33.3871972Z     
2025-08-19T20:25:33.3872256Z         cursor, str_statement, parameters = (
2025-08-19T20:25:33.3872649Z             context.cursor,
2025-08-19T20:25:33.3873042Z             context.statement,
2025-08-19T20:25:33.3873387Z             context.parameters,
2025-08-19T20:25:33.3873717Z         )
2025-08-19T20:25:33.3873943Z     
2025-08-19T20:25:33.3874275Z         effective_parameters: Optional[_AnyExecuteParams]
2025-08-19T20:25:33.3874745Z     
2025-08-19T20:25:33.3875030Z         if not context.executemany:
2025-08-19T20:25:33.3875459Z             effective_parameters = parameters[0]
2025-08-19T20:25:33.3875894Z         else:
2025-08-19T20:25:33.3876231Z             effective_parameters = parameters
2025-08-19T20:25:33.3876639Z     
2025-08-19T20:25:33.3876982Z         if self._has_events or self.engine._has_events:
2025-08-19T20:25:33.3877526Z             for fn in self.dispatch.before_cursor_execute:
2025-08-19T20:25:33.3878003Z                 str_statement, effective_parameters = fn(
2025-08-19T20:25:33.3878446Z                     self,
2025-08-19T20:25:33.3878783Z                     cursor,
2025-08-19T20:25:33.3879137Z                     str_statement,
2025-08-19T20:25:33.3879545Z                     effective_parameters,
2025-08-19T20:25:33.3879946Z                     context,
2025-08-19T20:25:33.3880315Z                     context.executemany,
2025-08-19T20:25:33.3880877Z                 )
2025-08-19T20:25:33.3881159Z     
2025-08-19T20:25:33.3881441Z         if self._echo:
2025-08-19T20:25:33.3881794Z             self._log_info(str_statement)
2025-08-19T20:25:33.3882179Z     
2025-08-19T20:25:33.3882485Z             stats = context._get_cache_stats()
2025-08-19T20:25:33.3882883Z     
2025-08-19T20:25:33.3883206Z             if not self.engine.hide_parameters:
2025-08-19T20:25:33.3883661Z                 self._log_info(
2025-08-19T20:25:33.3884000Z                     "[%s] %r",
2025-08-19T20:25:33.3884349Z                     stats,
2025-08-19T20:25:33.3884702Z                     sql_util._repr_params(
2025-08-19T20:25:33.3885138Z                         effective_parameters,
2025-08-19T20:25:33.3885883Z                         batches=10,
2025-08-19T20:25:33.3886302Z                         ismulti=context.executemany,
2025-08-19T20:25:33.3886708Z                     ),
2025-08-19T20:25:33.3886994Z                 )
2025-08-19T20:25:33.3887260Z             else:
2025-08-19T20:25:33.3887561Z                 self._log_info(
2025-08-19T20:25:33.3888019Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-08-19T20:25:33.3888483Z                     stats,
2025-08-19T20:25:33.3888775Z                 )
2025-08-19T20:25:33.3889014Z     
2025-08-19T20:25:33.3889276Z         evt_handled: bool = False
2025-08-19T20:25:33.3889605Z         try:
2025-08-19T20:25:33.3889943Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-08-19T20:25:33.3890611Z                 effective_parameters = cast(
2025-08-19T20:25:33.3891045Z                     "_CoreMultiExecuteParams", effective_parameters
2025-08-19T20:25:33.3891446Z                 )
2025-08-19T20:25:33.3891715Z                 if self.dialect._has_events:
2025-08-19T20:25:33.3892136Z                     for fn in self.dialect.dispatch.do_executemany:
2025-08-19T20:25:33.3892538Z                         if fn(
2025-08-19T20:25:33.3892860Z                             cursor,
2025-08-19T20:25:33.3893192Z                             str_statement,
2025-08-19T20:25:33.3893547Z                             effective_parameters,
2025-08-19T20:25:33.3893895Z                             context,
2025-08-19T20:25:33.3894216Z                         ):
2025-08-19T20:25:33.3894520Z                             evt_handled = True
2025-08-19T20:25:33.3894871Z                             break
2025-08-19T20:25:33.3895439Z                 if not evt_handled:
2025-08-19T20:25:33.3895801Z                     self.dialect.do_executemany(
2025-08-19T20:25:33.3896160Z                         cursor,
2025-08-19T20:25:33.3896465Z                         str_statement,
2025-08-19T20:25:33.3896825Z                         effective_parameters,
2025-08-19T20:25:33.3897164Z                         context,
2025-08-19T20:25:33.3897455Z                     )
2025-08-19T20:25:33.3897824Z             elif not effective_parameters and context.no_parameters:
2025-08-19T20:25:33.3898278Z                 if self.dialect._has_events:
2025-08-19T20:25:33.3898703Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-08-19T20:25:33.3899167Z                         if fn(cursor, str_statement, context):
2025-08-19T20:25:33.3899563Z                             evt_handled = True
2025-08-19T20:25:33.3899910Z                             break
2025-08-19T20:25:33.3900220Z                 if not evt_handled:
2025-08-19T20:25:33.3900742Z                     self.dialect.do_execute_no_params(
2025-08-19T20:25:33.3901138Z                         cursor, str_statement, context
2025-08-19T20:25:33.3901490Z                     )
2025-08-19T20:25:33.3901756Z             else:
2025-08-19T20:25:33.3902054Z                 effective_parameters = cast(
2025-08-19T20:25:33.3902485Z                     "_CoreSingleExecuteParams", effective_parameters
2025-08-19T20:25:33.3902874Z                 )
2025-08-19T20:25:33.3903150Z                 if self.dialect._has_events:
2025-08-19T20:25:33.3903546Z                     for fn in self.dialect.dispatch.do_execute:
2025-08-19T20:25:33.3903941Z                         if fn(
2025-08-19T20:25:33.3904234Z                             cursor,
2025-08-19T20:25:33.3904558Z                             str_statement,
2025-08-19T20:25:33.3904919Z                             effective_parameters,
2025-08-19T20:25:33.3905268Z                             context,
2025-08-19T20:25:33.3905585Z                         ):
2025-08-19T20:25:33.3905874Z                             evt_handled = True
2025-08-19T20:25:33.3906216Z                             break
2025-08-19T20:25:33.3906526Z                 if not evt_handled:
2025-08-19T20:25:33.3906870Z >                   self.dialect.do_execute(
2025-08-19T20:25:33.3907471Z                         cursor, str_statement, effective_parameters, context
2025-08-19T20:25:33.3907899Z                     )
2025-08-19T20:25:33.3908056Z 
2025-08-19T20:25:33.3908488Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: 
2025-08-19T20:25:33.3909203Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:25:33.3909968Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T20:25:33.3910887Z     cursor.execute(statement, parameters)
2025-08-19T20:25:33.3911296Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:25:33.3911592Z 
2025-08-19T20:25:33.3911944Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7f516f8db590>
2025-08-19T20:25:33.3913389Z query = '\n    INSERT INTO test_fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)\n    VALUES (..., %(currency1)s, %(source1)s, :effective_date1::DATE)\n    ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;\n    '
2025-08-19T20:25:33.3914684Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T20:25:33.3915066Z 
2025-08-19T20:25:33.3915167Z     def execute(
2025-08-19T20:25:33.3915422Z         self,
2025-08-19T20:25:33.3915672Z         query: Query,
2025-08-19T20:25:33.3915961Z         params: Params | None = None,
2025-08-19T20:25:33.3916322Z         *,
2025-08-19T20:25:33.3916589Z         prepare: bool | None = None,
2025-08-19T20:25:33.3916919Z         binary: bool | None = None,
2025-08-19T20:25:33.3917425Z     ) -> Self:
2025-08-19T20:25:33.3917668Z         """
2025-08-19T20:25:33.3917948Z         Execute a query or command to the database.
2025-08-19T20:25:33.3918313Z         """
2025-08-19T20:25:33.3918536Z         try:
2025-08-19T20:25:33.3918813Z             with self._conn.lock:
2025-08-19T20:25:33.3919147Z                 self._conn.wait(
2025-08-19T20:25:33.3919600Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T20:25:33.3920111Z                 )
2025-08-19T20:25:33.3920530Z         except e._NO_TRACEBACK as ex:
2025-08-19T20:25:33.3920909Z >           raise ex.with_traceback(None)
2025-08-19T20:25:33.3921366Z E           psycopg.errors.SyntaxError: syntax error at or near ":"
2025-08-19T20:25:33.3921906Z E           LINE 3:     VALUES ($1, $2, $3, $4, $5, $6, :effective_date0::DATE),...
2025-08-19T20:25:33.3922353Z E                                                       ^
2025-08-19T20:25:33.3922616Z 
2025-08-19T20:25:33.3923077Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: SyntaxError
2025-08-19T20:25:33.3923642Z 
2025-08-19T20:25:33.3923893Z The above exception was the direct cause of the following exception:
2025-08-19T20:25:33.3924260Z 
2025-08-19T20:25:33.3924540Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f516c55ce60>
2025-08-19T20:25:33.3925193Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_offline0')
2025-08-19T20:25:33.3926062Z pg_engine = Engine(***localhost:5432/awa)
2025-08-19T20:25:33.3926451Z ensure_test_fees_raw_table = None
2025-08-19T20:25:33.3926680Z 
2025-08-19T20:25:33.3927016Z     def test_offline(monkeypatch, tmp_path, pg_engine, ensure_test_fees_raw_table) -> None:
2025-08-19T20:25:33.3927622Z         os.environ["FEES_RAW_TABLE"] = "test_fees_raw"
2025-08-19T20:25:33.3928026Z         os.environ["ENABLE_LIVE"] = "0"
2025-08-19T20:25:33.3928396Z         os.environ["SP_REFRESH_TOKEN"] = "t"
2025-08-19T20:25:33.3928774Z         os.environ["SP_CLIENT_ID"] = "i"
2025-08-19T20:25:33.3929162Z         os.environ["SP_CLIENT_SECRET"] = "s"
2025-08-19T20:25:33.3929524Z         os.environ["SELLER_ID"] = "seller"
2025-08-19T20:25:33.3929883Z         os.environ["REGION"] = "EU"
2025-08-19T20:25:33.3930269Z         os.environ["DATABASE_URL"] = build_dsn(sync=True)
2025-08-19T20:25:33.3931049Z         _ = pg_engine, ensure_test_fees_raw_table
2025-08-19T20:25:33.3931438Z >       res = sp_fees_ingestor.main()
2025-08-19T20:25:33.3931784Z               ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T20:25:33.3931998Z 
2025-08-19T20:25:33.3932132Z tests/test_sp_fees_ingestor.py:52: 
2025-08-19T20:25:33.3932508Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:25:33.3932951Z services/etl/sp_fees_ingestor.py:79: in main
2025-08-19T20:25:33.3933467Z     repo.upsert_fees_raw(engine, rows, testing=os.getenv("TESTING") == "1")
2025-08-19T20:25:33.3934029Z services/fees_h10/repository.py:67: in upsert_fees_raw
2025-08-19T20:25:33.3934487Z     res1 = conn.execute(text(insert_sql), params)
2025-08-19T20:25:33.3934884Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T20:25:33.3935622Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-08-19T20:25:33.3936319Z     return meth(
2025-08-19T20:25:33.3937014Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-08-19T20:25:33.3937834Z     return connection._execute_clauseelement(
2025-08-19T20:25:33.3938626Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-08-19T20:25:33.3939413Z     ret = self._execute_context(
2025-08-19T20:25:33.3940142Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-08-19T20:25:33.3941063Z     return self._exec_single_context(
2025-08-19T20:25:33.3941802Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-08-19T20:25:33.3942739Z     self._handle_dbapi_exception(
2025-08-19T20:25:33.3943522Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-08-19T20:25:33.3944440Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-08-19T20:25:33.3945304Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-08-19T20:25:33.3946137Z     self.dialect.do_execute(
2025-08-19T20:25:33.3946845Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T20:25:33.3947601Z     cursor.execute(statement, parameters)
2025-08-19T20:25:33.3948012Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:25:33.3948301Z 
2025-08-19T20:25:33.3948664Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7f516f8db590>
2025-08-19T20:25:33.3950063Z query = '\n    INSERT INTO test_fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)\n    VALUES (..., %(currency1)s, %(source1)s, :effective_date1::DATE)\n    ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;\n    '
2025-08-19T20:25:33.3951517Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T20:25:33.3951904Z 
2025-08-19T20:25:33.3952011Z     def execute(
2025-08-19T20:25:33.3952254Z         self,
2025-08-19T20:25:33.3952502Z         query: Query,
2025-08-19T20:25:33.3952793Z         params: Params | None = None,
2025-08-19T20:25:33.3953110Z         *,
2025-08-19T20:25:33.3953358Z         prepare: bool | None = None,
2025-08-19T20:25:33.3953691Z         binary: bool | None = None,
2025-08-19T20:25:33.3954001Z     ) -> Self:
2025-08-19T20:25:33.3954235Z         """
2025-08-19T20:25:33.3954507Z         Execute a query or command to the database.
2025-08-19T20:25:33.3954863Z         """
2025-08-19T20:25:33.3955092Z         try:
2025-08-19T20:25:33.3955329Z             with self._conn.lock:
2025-08-19T20:25:33.3955641Z                 self._conn.wait(
2025-08-19T20:25:33.3956082Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T20:25:33.3956720Z                 )
2025-08-19T20:25:33.3957001Z         except e._NO_TRACEBACK as ex:
2025-08-19T20:25:33.3957355Z >           raise ex.with_traceback(None)
2025-08-19T20:25:33.3958003Z E           sqlalchemy.exc.ProgrammingError: (psycopg.errors.SyntaxError) syntax error at or near ":"
2025-08-19T20:25:33.3958737Z E           LINE 3:     VALUES ($1, $2, $3, $4, $5, $6, :effective_date0::DATE),...
2025-08-19T20:25:33.3959212Z E                                                       ^
2025-08-19T20:25:33.3959577Z E           [SQL: 
2025-08-19T20:25:33.3960124Z E               INSERT INTO test_fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)
2025-08-19T20:25:33.3961781Z E               VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, :effective_date0::DATE), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, :effective_date1::DATE)
2025-08-19T20:25:33.3962909Z E               ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;
2025-08-19T20:25:33.3963339Z E               ]
2025-08-19T20:25:33.3964416Z E           [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp'}]
2025-08-19T20:25:33.3965707Z E           (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T20:25:33.3966077Z 
2025-08-19T20:25:33.3966538Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: ProgrammingError
2025-08-19T20:25:33.3967502Z =============================== warnings summary ===============================
2025-08-19T20:25:33.3967951Z services/alert_bot/tests/test_smoke.py:5
2025-08-19T20:25:33.3969664Z   /home/runner/work/AWA-App/AWA-App/services/alert_bot/tests/test_smoke.py:5: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
2025-08-19T20:25:33.3971511Z     import pkg_resources  # noqa: F401
2025-08-19T20:25:33.3971765Z 
2025-08-19T20:25:33.3971927Z tests/api/test_ingest_endpoints.py: 12 warnings
2025-08-19T20:25:33.3972351Z tests/ingest/test_tasks_eager.py: 3 warnings
2025-08-19T20:25:33.3972743Z tests/test_api_fast.py: 1 warning
2025-08-19T20:25:33.3973089Z tests/test_health.py: 5 warnings
2025-08-19T20:25:33.3973452Z tests/test_smoke.py: 5 warnings
2025-08-19T20:25:33.3973809Z services/api/tests/test_cors.py: 1 warning
2025-08-19T20:25:33.3974248Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T20:25:33.3974689Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:25:33.3975127Z services/api/tests/test_rate_limit.py: 122 warnings
2025-08-19T20:25:33.3975600Z services/api/tests/test_roi_basic_auth.py: 4 warnings
2025-08-19T20:25:33.3976071Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T20:25:33.3976549Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T20:25:33.3978652Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/asgi_correlation_id/extensions/sentry.py:27: DeprecationWarning: sentry_sdk.configure_scope is deprecated and will be removed in the next major version. Please consult our migration guide to learn how to migrate to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x#scope-configuring
2025-08-19T20:25:33.3980856Z     with configure_scope() as scope:
2025-08-19T20:25:33.3981093Z 
2025-08-19T20:25:33.3981257Z tests/api/test_ingest_endpoints.py: 3 warnings
2025-08-19T20:25:33.3981659Z tests/test_api_fast.py: 1 warning
2025-08-19T20:25:33.3982009Z tests/test_health.py: 5 warnings
2025-08-19T20:25:33.3982344Z tests/test_smoke.py: 5 warnings
2025-08-19T20:25:33.3982714Z services/api/tests/test_cors.py: 3 warnings
2025-08-19T20:25:33.3983329Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T20:25:33.3983773Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:25:33.3984187Z services/api/tests/test_rate_limit.py: 2 warnings
2025-08-19T20:25:33.3984634Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T20:25:33.3985103Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T20:25:33.3986315Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/fastapi_limiter/__init__.py:89: DeprecationWarning: Call to deprecated close. (Use aclose() instead) -- Deprecated since version 5.0.1.
2025-08-19T20:25:33.3987442Z     await cls.redis.close()
2025-08-19T20:25:33.3987656Z 
2025-08-19T20:25:33.3987808Z tests/test_api_fast.py::test_health_endpoint
2025-08-19T20:25:33.3989216Z   /home/runner/work/AWA-App/AWA-App/tests/test_api_fast.py:13: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:25:33.3990820Z     return datetime.datetime.utcnow()
2025-08-19T20:25:33.3991074Z 
2025-08-19T20:25:33.3991202Z tests/test_api_fast.py: 1 warning
2025-08-19T20:25:33.3991546Z tests/test_health.py: 5 warnings
2025-08-19T20:25:33.3991884Z tests/test_smoke.py: 5 warnings
2025-08-19T20:25:33.3992273Z services/api/tests/test_cors.py: 1 warning
2025-08-19T20:25:33.3992677Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:25:33.3993114Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T20:25:33.3994676Z   /home/runner/work/AWA-App/AWA-App/services/api/routes/health.py:24: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:25:33.3996415Z     app_now = datetime.utcnow().replace(tzinfo=timezone.utc)
2025-08-19T20:25:33.3996738Z 
2025-08-19T20:25:33.3996870Z tests/test_health.py::test_health[0]
2025-08-19T20:25:33.3997231Z tests/test_health.py::test_health[1]
2025-08-19T20:25:33.3997568Z tests/test_health.py::test_health[2]
2025-08-19T20:25:33.3997926Z tests/test_health.py::test_health[3]
2025-08-19T20:25:33.3998281Z tests/test_health.py::test_health[4]
2025-08-19T20:25:33.3999672Z   /home/runner/work/AWA-App/AWA-App/tests/test_health.py:22: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:25:33.4001251Z     return datetime.datetime.utcnow()
2025-08-19T20:25:33.4001502Z 
2025-08-19T20:25:33.4001643Z tests/test_smoke.py::test_health[0]
2025-08-19T20:25:33.4002002Z tests/test_smoke.py::test_health[1]
2025-08-19T20:25:33.4002348Z tests/test_smoke.py::test_health[2]
2025-08-19T20:25:33.4002697Z tests/test_smoke.py::test_health[3]
2025-08-19T20:25:33.4003052Z tests/test_smoke.py::test_health[4]
2025-08-19T20:25:33.4004456Z   /home/runner/work/AWA-App/AWA-App/tests/test_smoke.py:32: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:25:33.4005923Z     return datetime.datetime.utcnow()
2025-08-19T20:25:33.4006178Z 
2025-08-19T20:25:33.4006412Z services/api/tests/test_cors.py::test_cors_simple_get_allowed
2025-08-19T20:25:33.4008002Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_cors.py:27: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:25:33.4009502Z     return datetime.datetime.utcnow()
2025-08-19T20:25:33.4009740Z 
2025-08-19T20:25:33.4009929Z services/api/tests/test_health.py::test_health_route
2025-08-19T20:25:33.4011606Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_health.py:14: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:25:33.4013267Z     return datetime.datetime.utcnow()
2025-08-19T20:25:33.4013502Z 
2025-08-19T20:25:33.9361698Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T20:25:33.9363226Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_rate_limit.py:33: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:25:33.9364844Z     return datetime.datetime.utcnow()
2025-08-19T20:25:33.9365135Z 
2025-08-19T20:25:33.9365482Z services/api/tests/test_sentry_event.py::test_unhandled_exception_is_captured_and_tagged
2025-08-19T20:25:33.9367502Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_sentry_event.py:47: SentryHubDeprecationWarning: `sentry_sdk.Hub` is deprecated and will be removed in a future major release. Please consult our 1.x to 2.x migration guide for details on how to migrate `Hub` usage to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x
2025-08-19T20:25:33.9369420Z     hub = sentry_sdk.Hub.current
2025-08-19T20:25:33.9369632Z 
2025-08-19T20:25:33.9369871Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-08-19T20:25:33.9370629Z ================================ tests coverage ================================
2025-08-19T20:25:33.9371176Z _______________ coverage: platform linux, python 3.12.11-final-0 _______________
2025-08-19T20:25:33.9371808Z 
2025-08-19T20:25:33.9371935Z Coverage XML written to file coverage.xml
2025-08-19T20:25:33.9372356Z Required test coverage of 65% reached. Total coverage: 65.36%
2025-08-19T20:25:33.9372806Z =========================== short test summary info ============================
2025-08-19T20:25:33.9373313Z Sentry is attempting to send 0 pending events
2025-08-19T20:25:33.9373837Z Waiting up to True seconds
2025-08-19T20:25:33.9374269Z Press Ctrl-C to quit
2025-08-19T20:25:33.9375078Z FAILED tests/test_sp_fees_ingestor.py::test_offline - sqlalchemy.exc.ProgrammingError: (psycopg.errors.SyntaxError) syntax error at or near ":"
2025-08-19T20:25:33.9375890Z LINE 3:     VALUES ($1, $2, $3, $4, $5, $6, :effective_date0::DATE),...
2025-08-19T20:25:33.9376263Z                                             ^
2025-08-19T20:25:33.9376550Z [SQL: 
2025-08-19T20:25:33.9376976Z     INSERT INTO test_fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)
2025-08-19T20:25:33.9378085Z     VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, :effective_date0::DATE), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, :effective_date1::DATE)
2025-08-19T20:25:33.9379027Z     ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;
2025-08-19T20:25:33.9379375Z     ]
2025-08-19T20:25:33.9380240Z [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp'}]
2025-08-19T20:25:33.9381474Z (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T20:25:34.4051535Z ##[error]Process completed with exit code 1.
