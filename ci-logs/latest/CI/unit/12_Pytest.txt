2025-08-19T20:28:27.9576756Z ##[group]Run pytest -q --cov=services
2025-08-19T20:28:27.9577117Z [36;1mpytest -q --cov=services[0m
2025-08-19T20:28:27.9617416Z shell: /usr/bin/bash -e {0}
2025-08-19T20:28:27.9617669Z env:
2025-08-19T20:28:27.9617922Z   REDIS_URL: redis://localhost:6379/0
2025-08-19T20:28:27.9618230Z   RATE_LIMIT_DEFAULT: 100/minute
2025-08-19T20:28:27.9618501Z   TRUST_X_FORWARDED: 1
2025-08-19T20:28:27.9618734Z   PG_USER: postgres
2025-08-19T20:28:27.9618959Z   PG_PASSWORD: pass
2025-08-19T20:28:27.9619174Z   PG_DATABASE: awa
2025-08-19T20:28:27.9619389Z   PG_HOST: localhost
2025-08-19T20:28:27.9619607Z   PG_PORT: 5432
2025-08-19T20:28:27.9620072Z   PG_SYNC_DSN: ***localhost:5432/awa
2025-08-19T20:28:27.9620537Z   PG_ASYNC_DSN: ***localhost:5432/awa
2025-08-19T20:28:27.9620981Z   DATABASE_URL: ***localhost:5432/awa
2025-08-19T20:28:27.9621251Z   DATA_DIR: /tmp/awa-data
2025-08-19T20:28:27.9621485Z   ENABLE_LIVE: 0
2025-08-19T20:28:27.9621687Z   TESTING: 1
2025-08-19T20:28:27.9621955Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:28:27.9622454Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-08-19T20:28:27.9622916Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:28:27.9623332Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:28:27.9623753Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:28:27.9624168Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-08-19T20:28:27.9624518Z ##[endgroup]
2025-08-19T20:28:57.8312962Z ........s.............................sssssss........................... [ 43%]
2025-08-19T20:29:30.6854175Z ..........................F............................................. [ 86%]
2025-08-19T20:29:31.4516500Z ......................                                                   [100%]
2025-08-19T20:29:31.4517340Z =================================== FAILURES ===================================
2025-08-19T20:29:31.4518072Z _________________________________ test_offline _________________________________
2025-08-19T20:29:31.4518643Z 
2025-08-19T20:29:31.4519073Z self = <sqlalchemy.engine.base.Connection object at 0x7ff4e8eaba40>
2025-08-19T20:29:31.4520349Z dialect = <sqlalchemy.dialects.postgresql.psycopg.PGDialect_psycopg object at 0x7ff4e8eabec0>
2025-08-19T20:29:31.4521880Z context = <sqlalchemy.dialects.postgresql.psycopg.PGExecutionContext_psycopg object at 0x7ff4e8ea9ee0>
2025-08-19T20:29:31.4523488Z statement = <sqlalchemy.dialects.postgresql.psycopg.PGCompiler_psycopg object at 0x7ff4e9084320>
2025-08-19T20:29:31.4525014Z parameters = [{'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}]
2025-08-19T20:29:31.4525718Z 
2025-08-19T20:29:31.4525916Z     def _exec_single_context(
2025-08-19T20:29:31.4526276Z         self,
2025-08-19T20:29:31.4526523Z         dialect: Dialect,
2025-08-19T20:29:31.4526824Z         context: ExecutionContext,
2025-08-19T20:29:31.4527180Z         statement: Union[str, Compiled],
2025-08-19T20:29:31.4527609Z         parameters: Optional[_AnyMultiExecuteParams],
2025-08-19T20:29:31.4528022Z     ) -> CursorResult[Any]:
2025-08-19T20:29:31.4528409Z         """continue the _execute_context() method for a single DBAPI
2025-08-19T20:29:31.4528896Z         cursor.execute() or cursor.executemany() call.
2025-08-19T20:29:31.4529528Z     
2025-08-19T20:29:31.4529731Z         """
2025-08-19T20:29:31.4530042Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-08-19T20:29:31.4530567Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-08-19T20:29:31.4530988Z     
2025-08-19T20:29:31.4531222Z             if generic_setinputsizes:
2025-08-19T20:29:31.4531541Z                 try:
2025-08-19T20:29:31.4531825Z                     dialect.do_set_input_sizes(
2025-08-19T20:29:31.4532235Z                         context.cursor, generic_setinputsizes, context
2025-08-19T20:29:31.4532621Z                     )
2025-08-19T20:29:31.4532900Z                 except BaseException as e:
2025-08-19T20:29:31.4533448Z                     self._handle_dbapi_exception(
2025-08-19T20:29:31.4533786Z                         e, str(statement), parameters, None, context
2025-08-19T20:29:31.4534051Z                     )
2025-08-19T20:29:31.4534215Z     
2025-08-19T20:29:31.4534394Z         cursor, str_statement, parameters = (
2025-08-19T20:29:31.4534965Z             context.cursor,
2025-08-19T20:29:31.4535181Z             context.statement,
2025-08-19T20:29:31.4535403Z             context.parameters,
2025-08-19T20:29:31.4535605Z         )
2025-08-19T20:29:31.4535755Z     
2025-08-19T20:29:31.4535960Z         effective_parameters: Optional[_AnyExecuteParams]
2025-08-19T20:29:31.4536229Z     
2025-08-19T20:29:31.4536397Z         if not context.executemany:
2025-08-19T20:29:31.4536643Z             effective_parameters = parameters[0]
2025-08-19T20:29:31.4536880Z         else:
2025-08-19T20:29:31.4537067Z             effective_parameters = parameters
2025-08-19T20:29:31.4537291Z     
2025-08-19T20:29:31.4537484Z         if self._has_events or self.engine._has_events:
2025-08-19T20:29:31.4537968Z             for fn in self.dispatch.before_cursor_execute:
2025-08-19T20:29:31.4538467Z                 str_statement, effective_parameters = fn(
2025-08-19T20:29:31.4538908Z                     self,
2025-08-19T20:29:31.4539220Z                     cursor,
2025-08-19T20:29:31.4539516Z                     str_statement,
2025-08-19T20:29:31.4539745Z                     effective_parameters,
2025-08-19T20:29:31.4539976Z                     context,
2025-08-19T20:29:31.4540186Z                     context.executemany,
2025-08-19T20:29:31.4540401Z                 )
2025-08-19T20:29:31.4540564Z     
2025-08-19T20:29:31.4540718Z         if self._echo:
2025-08-19T20:29:31.4540914Z             self._log_info(str_statement)
2025-08-19T20:29:31.4541138Z     
2025-08-19T20:29:31.4541309Z             stats = context._get_cache_stats()
2025-08-19T20:29:31.4541533Z     
2025-08-19T20:29:31.4541709Z             if not self.engine.hide_parameters:
2025-08-19T20:29:31.4541961Z                 self._log_info(
2025-08-19T20:29:31.4542160Z                     "[%s] %r",
2025-08-19T20:29:31.4542362Z                     stats,
2025-08-19T20:29:31.4542565Z                     sql_util._repr_params(
2025-08-19T20:29:31.4542809Z                         effective_parameters,
2025-08-19T20:29:31.4543047Z                         batches=10,
2025-08-19T20:29:31.4543289Z                         ismulti=context.executemany,
2025-08-19T20:29:31.4543533Z                     ),
2025-08-19T20:29:31.4543700Z                 )
2025-08-19T20:29:31.4543865Z             else:
2025-08-19T20:29:31.4544037Z                 self._log_info(
2025-08-19T20:29:31.4544310Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-08-19T20:29:31.4544786Z                     stats,
2025-08-19T20:29:31.4544982Z                 )
2025-08-19T20:29:31.4545137Z     
2025-08-19T20:29:31.4545302Z         evt_handled: bool = False
2025-08-19T20:29:31.4545511Z         try:
2025-08-19T20:29:31.4545742Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-08-19T20:29:31.4546042Z                 effective_parameters = cast(
2025-08-19T20:29:31.4546333Z                     "_CoreMultiExecuteParams", effective_parameters
2025-08-19T20:29:31.4546598Z                 )
2025-08-19T20:29:31.4546933Z                 if self.dialect._has_events:
2025-08-19T20:29:31.4547214Z                     for fn in self.dialect.dispatch.do_executemany:
2025-08-19T20:29:31.4547488Z                         if fn(
2025-08-19T20:29:31.4547688Z                             cursor,
2025-08-19T20:29:31.4547906Z                             str_statement,
2025-08-19T20:29:31.4548145Z                             effective_parameters,
2025-08-19T20:29:31.4548385Z                             context,
2025-08-19T20:29:31.4548592Z                         ):
2025-08-19T20:29:31.4548796Z                             evt_handled = True
2025-08-19T20:29:31.4549027Z                             break
2025-08-19T20:29:31.4549365Z                 if not evt_handled:
2025-08-19T20:29:31.4549611Z                     self.dialect.do_executemany(
2025-08-19T20:29:31.4549850Z                         cursor,
2025-08-19T20:29:31.4550053Z                         str_statement,
2025-08-19T20:29:31.4550288Z                         effective_parameters,
2025-08-19T20:29:31.4550530Z                         context,
2025-08-19T20:29:31.4550726Z                     )
2025-08-19T20:29:31.4550969Z             elif not effective_parameters and context.no_parameters:
2025-08-19T20:29:31.4551274Z                 if self.dialect._has_events:
2025-08-19T20:29:31.4551573Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-08-19T20:29:31.4551892Z                         if fn(cursor, str_statement, context):
2025-08-19T20:29:31.4552160Z                             evt_handled = True
2025-08-19T20:29:31.4552394Z                             break
2025-08-19T20:29:31.4552602Z                 if not evt_handled:
2025-08-19T20:29:31.4552845Z                     self.dialect.do_execute_no_params(
2025-08-19T20:29:31.4553130Z                         cursor, str_statement, context
2025-08-19T20:29:31.4553376Z                     )
2025-08-19T20:29:31.4553551Z             else:
2025-08-19T20:29:31.4553743Z                 effective_parameters = cast(
2025-08-19T20:29:31.4554038Z                     "_CoreSingleExecuteParams", effective_parameters
2025-08-19T20:29:31.4554307Z                 )
2025-08-19T20:29:31.4554488Z                 if self.dialect._has_events:
2025-08-19T20:29:31.4555050Z                     for fn in self.dialect.dispatch.do_execute:
2025-08-19T20:29:31.4555322Z                         if fn(
2025-08-19T20:29:31.4555521Z                             cursor,
2025-08-19T20:29:31.4555736Z                             str_statement,
2025-08-19T20:29:31.4555979Z                             effective_parameters,
2025-08-19T20:29:31.4556214Z                             context,
2025-08-19T20:29:31.4556433Z                         ):
2025-08-19T20:29:31.4556634Z                             evt_handled = True
2025-08-19T20:29:31.4556865Z                             break
2025-08-19T20:29:31.4557070Z                 if not evt_handled:
2025-08-19T20:29:31.4557295Z >                   self.dialect.do_execute(
2025-08-19T20:29:31.4557587Z                         cursor, str_statement, effective_parameters, context
2025-08-19T20:29:31.4557865Z                     )
2025-08-19T20:29:31.4557980Z 
2025-08-19T20:29:31.4558265Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: 
2025-08-19T20:29:31.4558771Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:29:31.4559302Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T20:29:31.4559807Z     cursor.execute(statement, parameters)
2025-08-19T20:29:31.4560087Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:29:31.4560285Z 
2025-08-19T20:29:31.4560534Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7ff4ed2d7590>
2025-08-19T20:29:31.4561517Z query = '\n    INSERT INTO test_fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)\n    VALUES (..., %(currency1)s, %(source1)s, :effective_date1::DATE)\n    ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;\n    '
2025-08-19T20:29:31.4562525Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T20:29:31.4562786Z 
2025-08-19T20:29:31.4562857Z     def execute(
2025-08-19T20:29:31.4563019Z         self,
2025-08-19T20:29:31.4563185Z         query: Query,
2025-08-19T20:29:31.4563385Z         params: Params | None = None,
2025-08-19T20:29:31.4563599Z         *,
2025-08-19T20:29:31.4563766Z         prepare: bool | None = None,
2025-08-19T20:29:31.4563995Z         binary: bool | None = None,
2025-08-19T20:29:31.4564314Z     ) -> Self:
2025-08-19T20:29:31.4564474Z         """
2025-08-19T20:29:31.4564883Z         Execute a query or command to the database.
2025-08-19T20:29:31.4565131Z         """
2025-08-19T20:29:31.4565277Z         try:
2025-08-19T20:29:31.4565448Z             with self._conn.lock:
2025-08-19T20:29:31.4565676Z                 self._conn.wait(
2025-08-19T20:29:31.4565971Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T20:29:31.4566276Z                 )
2025-08-19T20:29:31.4566462Z         except e._NO_TRACEBACK as ex:
2025-08-19T20:29:31.4566695Z >           raise ex.with_traceback(None)
2025-08-19T20:29:31.4566998Z E           psycopg.errors.SyntaxError: syntax error at or near ":"
2025-08-19T20:29:31.4567369Z E           LINE 3:     VALUES ($1, $2, $3, $4, $5, $6, :effective_date0::DATE),...
2025-08-19T20:29:31.4567669Z E                                                       ^
2025-08-19T20:29:31.4567839Z 
2025-08-19T20:29:31.4568122Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: SyntaxError
2025-08-19T20:29:31.4568496Z 
2025-08-19T20:29:31.4568660Z The above exception was the direct cause of the following exception:
2025-08-19T20:29:31.4568909Z 
2025-08-19T20:29:31.4569097Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ff4e9084470>
2025-08-19T20:29:31.4569528Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_offline0')
2025-08-19T20:29:31.4570145Z pg_engine = Engine(***localhost:5432/awa)
2025-08-19T20:29:31.4570418Z ensure_test_fees_raw_table = None
2025-08-19T20:29:31.4570573Z 
2025-08-19T20:29:31.4570799Z     def test_offline(monkeypatch, tmp_path, pg_engine, ensure_test_fees_raw_table) -> None:
2025-08-19T20:29:31.4571213Z         os.environ["FEES_RAW_TABLE"] = "test_fees_raw"
2025-08-19T20:29:31.4571494Z         os.environ["ENABLE_LIVE"] = "0"
2025-08-19T20:29:31.4571747Z         os.environ["SP_REFRESH_TOKEN"] = "t"
2025-08-19T20:29:31.4571994Z         os.environ["SP_CLIENT_ID"] = "i"
2025-08-19T20:29:31.4572247Z         os.environ["SP_CLIENT_SECRET"] = "s"
2025-08-19T20:29:31.4572500Z         os.environ["SELLER_ID"] = "seller"
2025-08-19T20:29:31.4572736Z         os.environ["REGION"] = "EU"
2025-08-19T20:29:31.4573003Z         os.environ["DATABASE_URL"] = build_dsn(sync=True)
2025-08-19T20:29:31.4573309Z         _ = pg_engine, ensure_test_fees_raw_table
2025-08-19T20:29:31.4573571Z >       res = sp_fees_ingestor.main()
2025-08-19T20:29:31.4573793Z               ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T20:29:31.4573938Z 
2025-08-19T20:29:31.4574026Z tests/test_sp_fees_ingestor.py:52: 
2025-08-19T20:29:31.4574292Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:29:31.4574743Z services/etl/sp_fees_ingestor.py:79: in main
2025-08-19T20:29:31.4575100Z     repo.upsert_fees_raw(engine, rows, testing=os.getenv("TESTING") == "1")
2025-08-19T20:29:31.4575490Z services/fees_h10/repository.py:67: in upsert_fees_raw
2025-08-19T20:29:31.4575800Z     res1 = conn.execute(text(insert_sql), params)
2025-08-19T20:29:31.4576060Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T20:29:31.4576565Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-08-19T20:29:31.4577028Z     return meth(
2025-08-19T20:29:31.4577638Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-08-19T20:29:31.4578179Z     return connection._execute_clauseelement(
2025-08-19T20:29:31.4578715Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-08-19T20:29:31.4579237Z     ret = self._execute_context(
2025-08-19T20:29:31.4579714Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-08-19T20:29:31.4580212Z     return self._exec_single_context(
2025-08-19T20:29:31.4580717Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-08-19T20:29:31.4581342Z     self._handle_dbapi_exception(
2025-08-19T20:29:31.4581850Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-08-19T20:29:31.4582441Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-08-19T20:29:31.4583020Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-08-19T20:29:31.4583530Z     self.dialect.do_execute(
2025-08-19T20:29:31.4583986Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T20:29:31.4584486Z     cursor.execute(statement, parameters)
2025-08-19T20:29:31.4584871Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:29:31.4585071Z 
2025-08-19T20:29:31.4585322Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7ff4ed2d7590>
2025-08-19T20:29:31.4586274Z query = '\n    INSERT INTO test_fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)\n    VALUES (..., %(currency1)s, %(source1)s, :effective_date1::DATE)\n    ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;\n    '
2025-08-19T20:29:31.4587130Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T20:29:31.4587396Z 
2025-08-19T20:29:31.4587463Z     def execute(
2025-08-19T20:29:31.4587633Z         self,
2025-08-19T20:29:31.4587793Z         query: Query,
2025-08-19T20:29:31.4587995Z         params: Params | None = None,
2025-08-19T20:29:31.4588215Z         *,
2025-08-19T20:29:31.4588380Z         prepare: bool | None = None,
2025-08-19T20:29:31.4588613Z         binary: bool | None = None,
2025-08-19T20:29:31.4588832Z     ) -> Self:
2025-08-19T20:29:31.4588991Z         """
2025-08-19T20:29:31.4589182Z         Execute a query or command to the database.
2025-08-19T20:29:31.4589433Z         """
2025-08-19T20:29:31.4589585Z         try:
2025-08-19T20:29:31.4589751Z             with self._conn.lock:
2025-08-19T20:29:31.4589969Z                 self._conn.wait(
2025-08-19T20:29:31.4590269Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T20:29:31.4590578Z                 )
2025-08-19T20:29:31.4590765Z         except e._NO_TRACEBACK as ex:
2025-08-19T20:29:31.4591003Z >           raise ex.with_traceback(None)
2025-08-19T20:29:31.4591416Z E           sqlalchemy.exc.ProgrammingError: (psycopg.errors.SyntaxError) syntax error at or near ":"
2025-08-19T20:29:31.4591900Z E           LINE 3:     VALUES ($1, $2, $3, $4, $5, $6, :effective_date0::DATE),...
2025-08-19T20:29:31.4592210Z E                                                       ^
2025-08-19T20:29:31.4592443Z E           [SQL: 
2025-08-19T20:29:31.4592785Z E               INSERT INTO test_fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)
2025-08-19T20:29:31.4594156Z E               VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, :effective_date0::DATE), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, :effective_date1::DATE)
2025-08-19T20:29:31.4595784Z E               ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;
2025-08-19T20:29:31.4596283Z E               ]
2025-08-19T20:29:31.4597565Z E           [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp'}]
2025-08-19T20:29:31.4599078Z E           (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T20:29:31.4599544Z 
2025-08-19T20:29:31.4600124Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: ProgrammingError
2025-08-19T20:29:31.4601330Z =============================== warnings summary ===============================
2025-08-19T20:29:31.4601850Z services/alert_bot/tests/test_smoke.py:5
2025-08-19T20:29:31.4603834Z   /home/runner/work/AWA-App/AWA-App/services/alert_bot/tests/test_smoke.py:5: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
2025-08-19T20:29:31.4606005Z     import pkg_resources  # noqa: F401
2025-08-19T20:29:31.4606320Z 
2025-08-19T20:29:31.4606521Z tests/api/test_ingest_endpoints.py: 12 warnings
2025-08-19T20:29:31.4607017Z tests/ingest/test_tasks_eager.py: 3 warnings
2025-08-19T20:29:31.4607479Z tests/test_api_fast.py: 1 warning
2025-08-19T20:29:31.4607894Z tests/test_health.py: 5 warnings
2025-08-19T20:29:31.4608289Z tests/test_smoke.py: 5 warnings
2025-08-19T20:29:31.4608707Z services/api/tests/test_cors.py: 1 warning
2025-08-19T20:29:31.4609220Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T20:29:31.4609735Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:29:31.4610241Z services/api/tests/test_rate_limit.py: 122 warnings
2025-08-19T20:29:31.4610801Z services/api/tests/test_roi_basic_auth.py: 4 warnings
2025-08-19T20:29:31.4611366Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T20:29:31.4611926Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T20:29:31.4614352Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/asgi_correlation_id/extensions/sentry.py:27: DeprecationWarning: sentry_sdk.configure_scope is deprecated and will be removed in the next major version. Please consult our migration guide to learn how to migrate to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x#scope-configuring
2025-08-19T20:29:31.4616900Z     with configure_scope() as scope:
2025-08-19T20:29:31.4617193Z 
2025-08-19T20:29:31.4617401Z tests/api/test_ingest_endpoints.py: 3 warnings
2025-08-19T20:29:31.4617864Z tests/test_api_fast.py: 1 warning
2025-08-19T20:29:31.4618266Z tests/test_health.py: 5 warnings
2025-08-19T20:29:31.4618687Z tests/test_smoke.py: 5 warnings
2025-08-19T20:29:31.4619131Z services/api/tests/test_cors.py: 3 warnings
2025-08-19T20:29:31.4619631Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T20:29:31.4620151Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:29:31.4620663Z services/api/tests/test_rate_limit.py: 2 warnings
2025-08-19T20:29:31.4621201Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T20:29:31.4621769Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T20:29:31.4623217Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/fastapi_limiter/__init__.py:89: DeprecationWarning: Call to deprecated close. (Use aclose() instead) -- Deprecated since version 5.0.1.
2025-08-19T20:29:31.4624783Z     await cls.redis.close()
2025-08-19T20:29:31.4625056Z 
2025-08-19T20:29:31.4625240Z tests/test_api_fast.py::test_health_endpoint
2025-08-19T20:29:31.4627035Z   /home/runner/work/AWA-App/AWA-App/tests/test_api_fast.py:13: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:29:31.4628991Z     return datetime.datetime.utcnow()
2025-08-19T20:29:31.4629305Z 
2025-08-19T20:29:31.4629461Z tests/test_api_fast.py: 1 warning
2025-08-19T20:29:31.4629865Z tests/test_health.py: 5 warnings
2025-08-19T20:29:31.4630253Z tests/test_smoke.py: 5 warnings
2025-08-19T20:29:31.4630669Z services/api/tests/test_cors.py: 1 warning
2025-08-19T20:29:31.4631130Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:29:31.4631636Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T20:29:31.4633527Z   /home/runner/work/AWA-App/AWA-App/services/api/routes/health.py:24: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:29:31.4635893Z     app_now = datetime.utcnow().replace(tzinfo=timezone.utc)
2025-08-19T20:29:31.4636310Z 
2025-08-19T20:29:31.4636504Z tests/test_health.py::test_health[0]
2025-08-19T20:29:31.4636950Z tests/test_health.py::test_health[1]
2025-08-19T20:29:31.4637398Z tests/test_health.py::test_health[2]
2025-08-19T20:29:31.4637828Z tests/test_health.py::test_health[3]
2025-08-19T20:29:31.4638251Z tests/test_health.py::test_health[4]
2025-08-19T20:29:31.4639933Z   /home/runner/work/AWA-App/AWA-App/tests/test_health.py:22: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:29:31.4641706Z     return datetime.datetime.utcnow()
2025-08-19T20:29:31.4642011Z 
2025-08-19T20:29:31.4642187Z tests/test_smoke.py::test_health[0]
2025-08-19T20:29:31.4642624Z tests/test_smoke.py::test_health[1]
2025-08-19T20:29:31.4643052Z tests/test_smoke.py::test_health[2]
2025-08-19T20:29:31.4643467Z tests/test_smoke.py::test_health[3]
2025-08-19T20:29:31.4643874Z tests/test_smoke.py::test_health[4]
2025-08-19T20:29:31.4645766Z   /home/runner/work/AWA-App/AWA-App/tests/test_smoke.py:32: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:29:31.4647519Z     return datetime.datetime.utcnow()
2025-08-19T20:29:31.4647826Z 
2025-08-19T20:29:31.4648115Z services/api/tests/test_cors.py::test_cors_simple_get_allowed
2025-08-19T20:29:31.4650023Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_cors.py:27: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:29:31.4651895Z     return datetime.datetime.utcnow()
2025-08-19T20:29:31.4652205Z 
2025-08-19T20:29:31.4652434Z services/api/tests/test_health.py::test_health_route
2025-08-19T20:29:31.4654334Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_health.py:14: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:29:31.4656084Z     return datetime.datetime.utcnow()
2025-08-19T20:29:31.4656276Z 
2025-08-19T20:29:32.0118766Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T20:29:32.0120586Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_rate_limit.py:33: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:29:32.0122401Z     return datetime.datetime.utcnow()
2025-08-19T20:29:32.0122658Z 
2025-08-19T20:29:32.0123076Z services/api/tests/test_sentry_event.py::test_unhandled_exception_is_captured_and_tagged
2025-08-19T20:29:32.0125318Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_sentry_event.py:47: SentryHubDeprecationWarning: `sentry_sdk.Hub` is deprecated and will be removed in a future major release. Please consult our 1.x to 2.x migration guide for details on how to migrate `Hub` usage to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x
2025-08-19T20:29:32.0127255Z     hub = sentry_sdk.Hub.current
2025-08-19T20:29:32.0127453Z 
2025-08-19T20:29:32.0127682Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-08-19T20:29:32.0128170Z ================================ tests coverage ================================
2025-08-19T20:29:32.0128638Z _______________ coverage: platform linux, python 3.12.11-final-0 _______________
2025-08-19T20:29:32.0129107Z 
2025-08-19T20:29:32.0129223Z Coverage XML written to file coverage.xml
2025-08-19T20:29:32.0129624Z Required test coverage of 65% reached. Total coverage: 65.36%
2025-08-19T20:29:32.0130056Z =========================== short test summary info ============================
2025-08-19T20:29:32.0130875Z FAILED tests/test_sp_fees_ingestor.py::test_offline - sqlalchemy.exc.ProgrammingError: (psycopg.errors.SyntaxError) syntax error at or near ":"
2025-08-19T20:29:32.0131701Z LINE 3:     VALUES ($1, $2, $3, $4, $5, $6, :effective_date0::DATE),...
2025-08-19T20:29:32.0132076Z                                             ^
2025-08-19T20:29:32.0132352Z [SQL: 
2025-08-19T20:29:32.0132763Z     INSERT INTO test_fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)
2025-08-19T20:29:32.0133904Z     VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, :effective_date0::DATE), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, :effective_date1::DATE)
2025-08-19T20:29:32.0134940Z     ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;
2025-08-19T20:29:32.0135228Z     ]
2025-08-19T20:29:32.0135963Z [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp'}]
2025-08-19T20:29:32.0136874Z (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T20:29:32.0137400Z Sentry is attempting to send 0 pending events
2025-08-19T20:29:32.0137682Z Waiting up to True seconds
2025-08-19T20:29:32.0137899Z Press Ctrl-C to quit
2025-08-19T20:29:32.5220765Z ##[error]Process completed with exit code 1.
