2025-08-19T20:10:16.5802195Z ##[group]Run pytest -q --cov=services
2025-08-19T20:10:16.5802728Z [36;1mpytest -q --cov=services[0m
2025-08-19T20:10:16.5861173Z shell: /usr/bin/bash -e {0}
2025-08-19T20:10:16.5861535Z env:
2025-08-19T20:10:16.5861848Z   REDIS_URL: redis://localhost:6379/0
2025-08-19T20:10:16.5862288Z   RATE_LIMIT_DEFAULT: 100/minute
2025-08-19T20:10:16.5862652Z   TRUST_X_FORWARDED: 1
2025-08-19T20:10:16.5862974Z   PG_USER: postgres
2025-08-19T20:10:16.5863286Z   PG_PASSWORD: pass
2025-08-19T20:10:16.5863591Z   PG_DATABASE: awa
2025-08-19T20:10:16.5863879Z   PG_HOST: localhost
2025-08-19T20:10:16.5864180Z   PG_PORT: 5432
2025-08-19T20:10:16.5864807Z   PG_SYNC_DSN: ***localhost:5432/awa
2025-08-19T20:10:16.5865488Z   PG_ASYNC_DSN: ***localhost:5432/awa
2025-08-19T20:10:16.5866173Z   DATABASE_URL: ***localhost:5432/awa
2025-08-19T20:10:16.5866595Z   DATA_DIR: /tmp/awa-data
2025-08-19T20:10:16.5866944Z   ENABLE_LIVE: 0
2025-08-19T20:10:16.5867245Z   TESTING: 1
2025-08-19T20:10:16.5867647Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:10:16.5868380Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-08-19T20:10:16.5869044Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:10:16.5869657Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:10:16.5870276Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:10:16.5871150Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-08-19T20:10:16.5871641Z ##[endgroup]
2025-08-19T20:10:47.6416370Z ........s.............................sssssss........................... [ 43%]
2025-08-19T20:11:20.3405422Z ..........................F............................................. [ 86%]
2025-08-19T20:11:21.0808544Z ......................                                                   [100%]
2025-08-19T20:11:21.0811057Z =================================== FAILURES ===================================
2025-08-19T20:11:21.0814402Z _________________________________ test_offline _________________________________
2025-08-19T20:11:21.0814840Z 
2025-08-19T20:11:21.0815128Z self = <sqlalchemy.engine.base.Connection object at 0x7fa406c24e90>
2025-08-19T20:11:21.0815992Z dialect = <sqlalchemy.dialects.postgresql.psycopg.PGDialect_psycopg object at 0x7fa406c27fe0>
2025-08-19T20:11:21.0817032Z context = <sqlalchemy.dialects.postgresql.psycopg.PGExecutionContext_psycopg object at 0x7fa406a398b0>
2025-08-19T20:11:21.0818190Z statement = <sqlalchemy.dialects.postgresql.psycopg.PGCompiler_psycopg object at 0x7fa406a38140>
2025-08-19T20:11:21.0819173Z parameters = [{'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}]
2025-08-19T20:11:21.0819659Z 
2025-08-19T20:11:21.0819812Z     def _exec_single_context(
2025-08-19T20:11:21.0820156Z         self,
2025-08-19T20:11:21.0820735Z         dialect: Dialect,
2025-08-19T20:11:21.0821120Z         context: ExecutionContext,
2025-08-19T20:11:21.0821541Z         statement: Union[str, Compiled],
2025-08-19T20:11:21.0822046Z         parameters: Optional[_AnyMultiExecuteParams],
2025-08-19T20:11:21.0822541Z     ) -> CursorResult[Any]:
2025-08-19T20:11:21.0823015Z         """continue the _execute_context() method for a single DBAPI
2025-08-19T20:11:21.0823604Z         cursor.execute() or cursor.executemany() call.
2025-08-19T20:11:21.0824131Z     
2025-08-19T20:11:21.0824281Z         """
2025-08-19T20:11:21.0824504Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-08-19T20:11:21.0824865Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-08-19T20:11:21.0825160Z     
2025-08-19T20:11:21.0825327Z             if generic_setinputsizes:
2025-08-19T20:11:21.0825546Z                 try:
2025-08-19T20:11:21.0825747Z                     dialect.do_set_input_sizes(
2025-08-19T20:11:21.0826038Z                         context.cursor, generic_setinputsizes, context
2025-08-19T20:11:21.0826308Z                     )
2025-08-19T20:11:21.0826507Z                 except BaseException as e:
2025-08-19T20:11:21.0826945Z                     self._handle_dbapi_exception(
2025-08-19T20:11:21.0827264Z                         e, str(statement), parameters, None, context
2025-08-19T20:11:21.0827723Z                     )
2025-08-19T20:11:21.0827920Z     
2025-08-19T20:11:21.0828104Z         cursor, str_statement, parameters = (
2025-08-19T20:11:21.0828354Z             context.cursor,
2025-08-19T20:11:21.0828564Z             context.statement,
2025-08-19T20:11:21.0828775Z             context.parameters,
2025-08-19T20:11:21.0828968Z         )
2025-08-19T20:11:21.0829115Z     
2025-08-19T20:11:21.0829322Z         effective_parameters: Optional[_AnyExecuteParams]
2025-08-19T20:11:21.0829578Z     
2025-08-19T20:11:21.0829742Z         if not context.executemany:
2025-08-19T20:11:21.0829988Z             effective_parameters = parameters[0]
2025-08-19T20:11:21.0830220Z         else:
2025-08-19T20:11:21.0830603Z             effective_parameters = parameters
2025-08-19T20:11:21.0830918Z     
2025-08-19T20:11:21.0831109Z         if self._has_events or self.engine._has_events:
2025-08-19T20:11:21.0831419Z             for fn in self.dispatch.before_cursor_execute:
2025-08-19T20:11:21.0831713Z                 str_statement, effective_parameters = fn(
2025-08-19T20:11:21.0831975Z                     self,
2025-08-19T20:11:21.0832157Z                     cursor,
2025-08-19T20:11:21.0832352Z                     str_statement,
2025-08-19T20:11:21.0832577Z                     effective_parameters,
2025-08-19T20:11:21.0832802Z                     context,
2025-08-19T20:11:21.0833008Z                     context.executemany,
2025-08-19T20:11:21.0833278Z                 )
2025-08-19T20:11:21.0833438Z     
2025-08-19T20:11:21.0833587Z         if self._echo:
2025-08-19T20:11:21.0833780Z             self._log_info(str_statement)
2025-08-19T20:11:21.0833997Z     
2025-08-19T20:11:21.0834168Z             stats = context._get_cache_stats()
2025-08-19T20:11:21.0834386Z     
2025-08-19T20:11:21.0834574Z             if not self.engine.hide_parameters:
2025-08-19T20:11:21.0834823Z                 self._log_info(
2025-08-19T20:11:21.0835022Z                     "[%s] %r",
2025-08-19T20:11:21.0835223Z                     stats,
2025-08-19T20:11:21.0835426Z                     sql_util._repr_params(
2025-08-19T20:11:21.0835671Z                         effective_parameters,
2025-08-19T20:11:21.0835903Z                         batches=10,
2025-08-19T20:11:21.0836147Z                         ismulti=context.executemany,
2025-08-19T20:11:21.0836387Z                     ),
2025-08-19T20:11:21.0836552Z                 )
2025-08-19T20:11:21.0836714Z             else:
2025-08-19T20:11:21.0836880Z                 self._log_info(
2025-08-19T20:11:21.0837150Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-08-19T20:11:21.0837449Z                     stats,
2025-08-19T20:11:21.0837635Z                 )
2025-08-19T20:11:21.0837789Z     
2025-08-19T20:11:21.0837953Z         evt_handled: bool = False
2025-08-19T20:11:21.0838167Z         try:
2025-08-19T20:11:21.0838391Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-08-19T20:11:21.0838696Z                 effective_parameters = cast(
2025-08-19T20:11:21.0838990Z                     "_CoreMultiExecuteParams", effective_parameters
2025-08-19T20:11:21.0839411Z                 )
2025-08-19T20:11:21.0839597Z                 if self.dialect._has_events:
2025-08-19T20:11:21.0839878Z                     for fn in self.dialect.dispatch.do_executemany:
2025-08-19T20:11:21.0840154Z                         if fn(
2025-08-19T20:11:21.0840355Z                             cursor,
2025-08-19T20:11:21.0840768Z                             str_statement,
2025-08-19T20:11:21.0841017Z                             effective_parameters,
2025-08-19T20:11:21.0841252Z                             context,
2025-08-19T20:11:21.0841463Z                         ):
2025-08-19T20:11:21.0841667Z                             evt_handled = True
2025-08-19T20:11:21.0841898Z                             break
2025-08-19T20:11:21.0842254Z                 if not evt_handled:
2025-08-19T20:11:21.0842490Z                     self.dialect.do_executemany(
2025-08-19T20:11:21.0842726Z                         cursor,
2025-08-19T20:11:21.0842928Z                         str_statement,
2025-08-19T20:11:21.0843167Z                         effective_parameters,
2025-08-19T20:11:21.0843396Z                         context,
2025-08-19T20:11:21.0843596Z                     )
2025-08-19T20:11:21.0843843Z             elif not effective_parameters and context.no_parameters:
2025-08-19T20:11:21.0844147Z                 if self.dialect._has_events:
2025-08-19T20:11:21.0844445Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-08-19T20:11:21.0844758Z                         if fn(cursor, str_statement, context):
2025-08-19T20:11:21.0845022Z                             evt_handled = True
2025-08-19T20:11:21.0845258Z                             break
2025-08-19T20:11:21.0845473Z                 if not evt_handled:
2025-08-19T20:11:21.0845725Z                     self.dialect.do_execute_no_params(
2025-08-19T20:11:21.0845993Z                         cursor, str_statement, context
2025-08-19T20:11:21.0846222Z                     )
2025-08-19T20:11:21.0846401Z             else:
2025-08-19T20:11:21.0846592Z                 effective_parameters = cast(
2025-08-19T20:11:21.0846879Z                     "_CoreSingleExecuteParams", effective_parameters
2025-08-19T20:11:21.0847148Z                 )
2025-08-19T20:11:21.0847335Z                 if self.dialect._has_events:
2025-08-19T20:11:21.0847610Z                     for fn in self.dialect.dispatch.do_execute:
2025-08-19T20:11:21.0847868Z                         if fn(
2025-08-19T20:11:21.0848068Z                             cursor,
2025-08-19T20:11:21.0848289Z                             str_statement,
2025-08-19T20:11:21.0848528Z                             effective_parameters,
2025-08-19T20:11:21.0848766Z                             context,
2025-08-19T20:11:21.0848986Z                         ):
2025-08-19T20:11:21.0849182Z                             evt_handled = True
2025-08-19T20:11:21.0849421Z                             break
2025-08-19T20:11:21.0849654Z                 if not evt_handled:
2025-08-19T20:11:21.0849893Z >                   self.dialect.do_execute(
2025-08-19T20:11:21.0850179Z                         cursor, str_statement, effective_parameters, context
2025-08-19T20:11:21.0850627Z                     )
2025-08-19T20:11:21.0850748Z 
2025-08-19T20:11:21.0851041Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: 
2025-08-19T20:11:21.0851534Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:11:21.0852060Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T20:11:21.0852574Z     cursor.execute(statement, parameters)
2025-08-19T20:11:21.0852854Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:11:21.0853047Z 
2025-08-19T20:11:21.0853292Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7fa40eecfa10>
2025-08-19T20:11:21.0854229Z query = '\n    WITH v(asin, marketplace, fee_type, amount, currency, source, effective_date) AS (VALUES (%(asin0)s, %(marketpl...CT FROM v.currency OR t.source IS DISTINCT FROM v.source OR t.effective_date IS DISTINCT FROM v.effective_date);\n    '
2025-08-19T20:11:21.0855262Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T20:11:21.0855518Z 
2025-08-19T20:11:21.0855590Z     def execute(
2025-08-19T20:11:21.0855750Z         self,
2025-08-19T20:11:21.0855912Z         query: Query,
2025-08-19T20:11:21.0856110Z         params: Params | None = None,
2025-08-19T20:11:21.0856322Z         *,
2025-08-19T20:11:21.0856489Z         prepare: bool | None = None,
2025-08-19T20:11:21.0856720Z         binary: bool | None = None,
2025-08-19T20:11:21.0857051Z     ) -> Self:
2025-08-19T20:11:21.0857209Z         """
2025-08-19T20:11:21.0857396Z         Execute a query or command to the database.
2025-08-19T20:11:21.0857634Z         """
2025-08-19T20:11:21.0857776Z         try:
2025-08-19T20:11:21.0857949Z             with self._conn.lock:
2025-08-19T20:11:21.0858168Z                 self._conn.wait(
2025-08-19T20:11:21.0858459Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T20:11:21.0858764Z                 )
2025-08-19T20:11:21.0858949Z         except e._NO_TRACEBACK as ex:
2025-08-19T20:11:21.0859184Z >           raise ex.with_traceback(None)
2025-08-19T20:11:21.0859536Z E           psycopg.errors.UndefinedFunction: operator does not exist: date = text
2025-08-19T20:11:21.0859977Z E           LINE 7: ...rce IS DISTINCT FROM v.source OR t.effective_date IS DISTINC...
2025-08-19T20:11:21.0860319Z E                                                                        ^
2025-08-19T20:11:21.0860930Z E           HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-08-19T20:11:21.0861286Z 
2025-08-19T20:11:21.0861589Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: UndefinedFunction
2025-08-19T20:11:21.0861978Z 
2025-08-19T20:11:21.0862141Z The above exception was the direct cause of the following exception:
2025-08-19T20:11:21.0862385Z 
2025-08-19T20:11:21.0862571Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fa406a21730>
2025-08-19T20:11:21.0862989Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_offline0')
2025-08-19T20:11:21.0863609Z pg_engine = Engine(***localhost:5432/awa)
2025-08-19T20:11:21.0863879Z ensure_test_fees_raw_table = None
2025-08-19T20:11:21.0864032Z 
2025-08-19T20:11:21.0864264Z     def test_offline(monkeypatch, tmp_path, pg_engine, ensure_test_fees_raw_table) -> None:
2025-08-19T20:11:21.0864680Z         os.environ["FEES_RAW_TABLE"] = "test_fees_raw"
2025-08-19T20:11:21.0864961Z         os.environ["ENABLE_LIVE"] = "0"
2025-08-19T20:11:21.0865215Z         os.environ["SP_REFRESH_TOKEN"] = "t"
2025-08-19T20:11:21.0865463Z         os.environ["SP_CLIENT_ID"] = "i"
2025-08-19T20:11:21.0865711Z         os.environ["SP_CLIENT_SECRET"] = "s"
2025-08-19T20:11:21.0865966Z         os.environ["SELLER_ID"] = "seller"
2025-08-19T20:11:21.0866203Z         os.environ["REGION"] = "EU"
2025-08-19T20:11:21.0866469Z         os.environ["DATABASE_URL"] = build_dsn(sync=True)
2025-08-19T20:11:21.0866758Z         _ = pg_engine, ensure_test_fees_raw_table
2025-08-19T20:11:21.0867014Z >       res = sp_fees_ingestor.main()
2025-08-19T20:11:21.0867244Z               ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T20:11:21.0867390Z 
2025-08-19T20:11:21.0867478Z tests/test_sp_fees_ingestor.py:52: 
2025-08-19T20:11:21.0867745Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:11:21.0868038Z services/etl/sp_fees_ingestor.py:79: in main
2025-08-19T20:11:21.0868385Z     repo.upsert_fees_raw(engine, rows, testing=os.getenv("TESTING") == "1")
2025-08-19T20:11:21.0868770Z services/fees_h10/repository.py:65: in upsert_fees_raw
2025-08-19T20:11:21.0869078Z     res2 = conn.execute(text(update_sql), params)
2025-08-19T20:11:21.0869482Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T20:11:21.0869948Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-08-19T20:11:21.0870596Z     return meth(
2025-08-19T20:11:21.0871108Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-08-19T20:11:21.0871652Z     return connection._execute_clauseelement(
2025-08-19T20:11:21.0872189Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-08-19T20:11:21.0872701Z     ret = self._execute_context(
2025-08-19T20:11:21.0873180Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-08-19T20:11:21.0873850Z     return self._exec_single_context(
2025-08-19T20:11:21.0874360Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-08-19T20:11:21.0874874Z     self._handle_dbapi_exception(
2025-08-19T20:11:21.0875386Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-08-19T20:11:21.0875968Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-08-19T20:11:21.0876538Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-08-19T20:11:21.0877034Z     self.dialect.do_execute(
2025-08-19T20:11:21.0877493Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T20:11:21.0877986Z     cursor.execute(statement, parameters)
2025-08-19T20:11:21.0878268Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:11:21.0878467Z 
2025-08-19T20:11:21.0878717Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7fa40eecfa10>
2025-08-19T20:11:21.0879660Z query = '\n    WITH v(asin, marketplace, fee_type, amount, currency, source, effective_date) AS (VALUES (%(asin0)s, %(marketpl...CT FROM v.currency OR t.source IS DISTINCT FROM v.source OR t.effective_date IS DISTINCT FROM v.effective_date);\n    '
2025-08-19T20:11:21.0880746Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T20:11:21.0881011Z 
2025-08-19T20:11:21.0881085Z     def execute(
2025-08-19T20:11:21.0881251Z         self,
2025-08-19T20:11:21.0881418Z         query: Query,
2025-08-19T20:11:21.0881619Z         params: Params | None = None,
2025-08-19T20:11:21.0881833Z         *,
2025-08-19T20:11:21.0882003Z         prepare: bool | None = None,
2025-08-19T20:11:21.0882240Z         binary: bool | None = None,
2025-08-19T20:11:21.0882454Z     ) -> Self:
2025-08-19T20:11:21.0882619Z         """
2025-08-19T20:11:21.0882808Z         Execute a query or command to the database.
2025-08-19T20:11:21.0883052Z         """
2025-08-19T20:11:21.0883201Z         try:
2025-08-19T20:11:21.0883373Z             with self._conn.lock:
2025-08-19T20:11:21.0883586Z                 self._conn.wait(
2025-08-19T20:11:21.0883893Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T20:11:21.0884198Z                 )
2025-08-19T20:11:21.0884392Z         except e._NO_TRACEBACK as ex:
2025-08-19T20:11:21.0884628Z >           raise ex.with_traceback(None)
2025-08-19T20:11:21.0885089Z E           sqlalchemy.exc.ProgrammingError: (psycopg.errors.UndefinedFunction) operator does not exist: date = text
2025-08-19T20:11:21.0885639Z E           LINE 7: ...rce IS DISTINCT FROM v.source OR t.effective_date IS DISTINC...
2025-08-19T20:11:21.0885979Z E                                                                        ^
2025-08-19T20:11:21.0886411Z E           HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-08-19T20:11:21.0886958Z E           [SQL: 
2025-08-19T20:11:21.0887784Z E               WITH v(asin, marketplace, fee_type, amount, currency, source, effective_date) AS (VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, %(effective_date0)s), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, %(effective_date1)s))
2025-08-19T20:11:21.0888659Z E               UPDATE test_fees_raw AS t
2025-08-19T20:11:21.0889063Z E               SET amount = v.amount, currency = v.currency, source = v.source, effective_date = v.effective_date
2025-08-19T20:11:21.0889450Z E               FROM v
2025-08-19T20:11:21.0889766Z E               WHERE t.asin = v.asin AND t.marketplace = v.marketplace AND t.fee_type = v.fee_type
2025-08-19T20:11:21.0890795Z E                 AND (t.amount IS DISTINCT FROM v.amount OR t.currency IS DISTINCT FROM v.currency OR t.source IS DISTINCT FROM v.source OR t.effective_date IS DISTINCT FROM v.effective_date);
2025-08-19T20:11:21.0891389Z E               ]
2025-08-19T20:11:21.0892190Z E           [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'effective_date0': None, 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp', 'effective_date1': None}]
2025-08-19T20:11:21.0893112Z E           (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T20:11:21.0893349Z 
2025-08-19T20:11:21.0893658Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: ProgrammingError
2025-08-19T20:11:21.0894147Z =============================== warnings summary ===============================
2025-08-19T20:11:21.0894443Z services/alert_bot/tests/test_smoke.py:5
2025-08-19T20:11:21.0895524Z   /home/runner/work/AWA-App/AWA-App/services/alert_bot/tests/test_smoke.py:5: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
2025-08-19T20:11:21.0896575Z     import pkg_resources  # noqa: F401
2025-08-19T20:11:21.0896736Z 
2025-08-19T20:11:21.0896843Z tests/api/test_ingest_endpoints.py: 12 warnings
2025-08-19T20:11:21.0897126Z tests/ingest/test_tasks_eager.py: 3 warnings
2025-08-19T20:11:21.0897382Z tests/test_api_fast.py: 1 warning
2025-08-19T20:11:21.0897608Z tests/test_health.py: 5 warnings
2025-08-19T20:11:21.0897832Z tests/test_smoke.py: 5 warnings
2025-08-19T20:11:21.0898065Z services/api/tests/test_cors.py: 1 warning
2025-08-19T20:11:21.0898339Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T20:11:21.0898627Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:11:21.0898914Z services/api/tests/test_rate_limit.py: 122 warnings
2025-08-19T20:11:21.0899228Z services/api/tests/test_roi_basic_auth.py: 4 warnings
2025-08-19T20:11:21.0899535Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T20:11:21.0899851Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T20:11:21.0901367Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/asgi_correlation_id/extensions/sentry.py:27: DeprecationWarning: sentry_sdk.configure_scope is deprecated and will be removed in the next major version. Please consult our migration guide to learn how to migrate to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x#scope-configuring
2025-08-19T20:11:21.0902621Z     with configure_scope() as scope:
2025-08-19T20:11:21.0902779Z 
2025-08-19T20:11:21.0902884Z tests/api/test_ingest_endpoints.py: 3 warnings
2025-08-19T20:11:21.0903150Z tests/test_api_fast.py: 1 warning
2025-08-19T20:11:21.0903383Z tests/test_health.py: 5 warnings
2025-08-19T20:11:21.0903600Z tests/test_smoke.py: 5 warnings
2025-08-19T20:11:21.0903830Z services/api/tests/test_cors.py: 3 warnings
2025-08-19T20:11:21.0904109Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T20:11:21.0904537Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:11:21.0904815Z services/api/tests/test_rate_limit.py: 2 warnings
2025-08-19T20:11:21.0905105Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T20:11:21.0905415Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T20:11:21.0906206Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/fastapi_limiter/__init__.py:89: DeprecationWarning: Call to deprecated close. (Use aclose() instead) -- Deprecated since version 5.0.1.
2025-08-19T20:11:21.0906958Z     await cls.redis.close()
2025-08-19T20:11:21.0907100Z 
2025-08-19T20:11:21.0907309Z tests/test_api_fast.py::test_health_endpoint
2025-08-19T20:11:21.0908247Z   /home/runner/work/AWA-App/AWA-App/tests/test_api_fast.py:13: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:11:21.0909302Z     return datetime.datetime.utcnow()
2025-08-19T20:11:21.0909470Z 
2025-08-19T20:11:21.0909552Z tests/test_api_fast.py: 1 warning
2025-08-19T20:11:21.0909783Z tests/test_health.py: 5 warnings
2025-08-19T20:11:21.0910006Z tests/test_smoke.py: 5 warnings
2025-08-19T20:11:21.0910230Z services/api/tests/test_cors.py: 1 warning
2025-08-19T20:11:21.0910745Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:11:21.0911044Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T20:11:21.0912026Z   /home/runner/work/AWA-App/AWA-App/services/api/routes/health.py:24: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:11:21.0913038Z     app_now = datetime.utcnow().replace(tzinfo=timezone.utc)
2025-08-19T20:11:21.0913254Z 
2025-08-19T20:11:21.0913356Z tests/test_health.py::test_health[0]
2025-08-19T20:11:21.0913601Z tests/test_health.py::test_health[1]
2025-08-19T20:11:21.0913833Z tests/test_health.py::test_health[2]
2025-08-19T20:11:21.0914063Z tests/test_health.py::test_health[3]
2025-08-19T20:11:21.0914295Z tests/test_health.py::test_health[4]
2025-08-19T20:11:21.0915197Z   /home/runner/work/AWA-App/AWA-App/tests/test_health.py:22: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:11:21.0916107Z     return datetime.datetime.utcnow()
2025-08-19T20:11:21.0916275Z 
2025-08-19T20:11:21.0916359Z tests/test_smoke.py::test_health[0]
2025-08-19T20:11:21.0916595Z tests/test_smoke.py::test_health[1]
2025-08-19T20:11:21.0916818Z tests/test_smoke.py::test_health[2]
2025-08-19T20:11:21.0917051Z tests/test_smoke.py::test_health[3]
2025-08-19T20:11:21.0917278Z tests/test_smoke.py::test_health[4]
2025-08-19T20:11:21.0918163Z   /home/runner/work/AWA-App/AWA-App/tests/test_smoke.py:32: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:11:21.0919074Z     return datetime.datetime.utcnow()
2025-08-19T20:11:21.0919241Z 
2025-08-19T20:11:21.4965428Z services/api/tests/test_cors.py::test_cors_simple_get_allowed
2025-08-19T20:11:21.4967259Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_cors.py:27: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:11:21.4969061Z     return datetime.datetime.utcnow()
2025-08-19T20:11:21.4969524Z Sentry is attempting to send 0 pending events
2025-08-19T20:11:21.4969866Z Waiting up to True seconds
2025-08-19T20:11:21.4970122Z Press Ctrl-C to quit
2025-08-19T20:11:21.4970274Z 
2025-08-19T20:11:21.4970716Z services/api/tests/test_health.py::test_health_route
2025-08-19T20:11:21.4972306Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_health.py:14: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:11:21.4973312Z     return datetime.datetime.utcnow()
2025-08-19T20:11:21.4973481Z 
2025-08-19T20:11:21.4973596Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T20:11:21.4974608Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_rate_limit.py:33: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:11:21.4975787Z     return datetime.datetime.utcnow()
2025-08-19T20:11:21.4975971Z 
2025-08-19T20:11:21.4976204Z services/api/tests/test_sentry_event.py::test_unhandled_exception_is_captured_and_tagged
2025-08-19T20:11:21.4977571Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_sentry_event.py:47: SentryHubDeprecationWarning: `sentry_sdk.Hub` is deprecated and will be removed in a future major release. Please consult our 1.x to 2.x migration guide for details on how to migrate `Hub` usage to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x
2025-08-19T20:11:21.4978721Z     hub = sentry_sdk.Hub.current
2025-08-19T20:11:21.4978870Z 
2025-08-19T20:11:21.4979053Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-08-19T20:11:21.4979426Z ================================ tests coverage ================================
2025-08-19T20:11:21.4979791Z _______________ coverage: platform linux, python 3.12.11-final-0 _______________
2025-08-19T20:11:21.4980045Z 
2025-08-19T20:11:21.4980143Z Coverage XML written to file coverage.xml
2025-08-19T20:11:21.4980679Z Required test coverage of 65% reached. Total coverage: 65.43%
2025-08-19T20:11:21.4981039Z =========================== short test summary info ============================
2025-08-19T20:11:21.4981711Z FAILED tests/test_sp_fees_ingestor.py::test_offline - sqlalchemy.exc.ProgrammingError: (psycopg.errors.UndefinedFunction) operator does not exist: date = text
2025-08-19T20:11:21.4982417Z LINE 7: ...rce IS DISTINCT FROM v.source OR t.effective_date IS DISTINC...
2025-08-19T20:11:21.4982748Z                                                              ^
2025-08-19T20:11:21.4983172Z HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-08-19T20:11:21.4983568Z [SQL: 
2025-08-19T20:11:21.4984366Z     WITH v(asin, marketplace, fee_type, amount, currency, source, effective_date) AS (VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, %(effective_date0)s), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, %(effective_date1)s))
2025-08-19T20:11:21.4985244Z     UPDATE test_fees_raw AS t
2025-08-19T20:11:21.4985634Z     SET amount = v.amount, currency = v.currency, source = v.source, effective_date = v.effective_date
2025-08-19T20:11:21.4986022Z     FROM v
2025-08-19T20:11:21.4986306Z     WHERE t.asin = v.asin AND t.marketplace = v.marketplace AND t.fee_type = v.fee_type
2025-08-19T20:11:21.4987022Z       AND (t.amount IS DISTINCT FROM v.amount OR t.currency IS DISTINCT FROM v.currency OR t.source IS DISTINCT FROM v.source OR t.effective_date IS DISTINCT FROM v.effective_date);
2025-08-19T20:11:21.4987596Z     ]
2025-08-19T20:11:21.4988365Z [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'effective_date0': None, 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp', 'effective_date1': None}]
2025-08-19T20:11:21.4989275Z (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T20:11:21.8933004Z ##[error]Process completed with exit code 1.
