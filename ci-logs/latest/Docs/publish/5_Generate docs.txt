2025-08-17T22:11:47.2036014Z ##[group]Run pydoc-markdown
2025-08-17T22:11:47.2036322Z [36;1mpydoc-markdown[0m
2025-08-17T22:11:47.2076696Z shell: /usr/bin/bash -e {0}
2025-08-17T22:11:47.2076949Z env:
2025-08-17T22:11:47.2077210Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T22:11:47.2077619Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-17T22:11:47.2078017Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T22:11:47.2078359Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T22:11:47.2078710Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T22:11:47.2079059Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-17T22:11:47.2079349Z ##[endgroup]
2025-08-17T22:11:47.5568850Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-17T22:11:47.5569580Z Unknown key(s) "{'output_directory'}" at:
2025-08-17T22:11:47.5569968Z In "pydoc-markdown.yml"
2025-08-17T22:11:47.5570354Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-17T22:11:47.5570993Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-17T22:11:47.5571590Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-17T22:11:47.5571993Z 
2025-08-17T22:11:47.8380215Z <a id="__init__"></a>
2025-08-17T22:11:47.8380539Z 
2025-08-17T22:11:47.8380679Z # \_\_init\_\_
2025-08-17T22:11:47.8380871Z 
2025-08-17T22:11:47.8381016Z <a id="api"></a>
2025-08-17T22:11:47.8381261Z 
2025-08-17T22:11:47.8381381Z # api
2025-08-17T22:11:47.8381578Z 
2025-08-17T22:11:47.8381754Z <a id="api.tests.test_llm"></a>
2025-08-17T22:11:47.8382020Z 
2025-08-17T22:11:47.8382146Z # api.tests.test\_llm
2025-08-17T22:11:47.8382345Z 
2025-08-17T22:11:47.8382503Z <a id="api.tests.test_imports"></a>
2025-08-17T22:11:47.8382763Z 
2025-08-17T22:11:47.8382898Z # api.tests.test\_imports
2025-08-17T22:11:47.8383129Z 
2025-08-17T22:11:47.8383290Z <a id="api.tests.test_entrypoint"></a>
2025-08-17T22:11:47.8384040Z 
2025-08-17T22:11:47.8384206Z # api.tests.test\_entrypoint
2025-08-17T22:11:47.8384478Z 
2025-08-17T22:11:47.8384627Z <a id="api.tests.test_health"></a>
2025-08-17T22:11:47.8385995Z 
2025-08-17T22:11:47.8386147Z # api.tests.test\_health
2025-08-17T22:11:47.8386375Z 
2025-08-17T22:11:47.8386525Z <a id="api.migrations.env"></a>
2025-08-17T22:11:47.8386783Z 
2025-08-17T22:11:47.8386916Z # api.migrations.env
2025-08-17T22:11:47.8387115Z 
2025-08-17T22:11:47.8387320Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-17T22:11:47.8387689Z 
2025-08-17T22:11:47.8387873Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-17T22:11:47.8388203Z 
2025-08-17T22:11:47.8388611Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-17T22:11:47.8388944Z 
2025-08-17T22:11:47.8389112Z # api.migrations.versions.0004\_fee\_cron
2025-08-17T22:11:47.8389429Z 
2025-08-17T22:11:47.8389699Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-17T22:11:47.8390122Z 
2025-08-17T22:11:47.8390374Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-17T22:11:47.8390781Z 
2025-08-17T22:11:47.8390994Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-17T22:11:47.8391371Z 
2025-08-17T22:11:47.8391565Z # api.migrations.versions.0003\_vendor\_prices
2025-08-17T22:11:47.8391783Z 
2025-08-17T22:11:47.8391918Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-17T22:11:47.8392154Z 
2025-08-17T22:11:47.8392268Z # api.migrations.versions.0024\_create\_buybox
2025-08-17T22:11:47.8392475Z 
2025-08-17T22:11:47.8392618Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-17T22:11:47.8392861Z 
2025-08-17T22:11:47.8392984Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-17T22:11:47.8393201Z 
2025-08-17T22:11:47.8393337Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-17T22:11:47.8393561Z 
2025-08-17T22:11:47.8393689Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-17T22:11:47.8393909Z 
2025-08-17T22:11:47.8394048Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-17T22:11:47.8394534Z 
2025-08-17T22:11:47.8394923Z # api.migrations.versions.0020\_unified\_schema
2025-08-17T22:11:47.8395165Z 
2025-08-17T22:11:47.8395327Z <a id="api.migrations.versions.0025_pr4_indexes_loadlog"></a>
2025-08-17T22:11:47.8395590Z 
2025-08-17T22:11:47.8395726Z # api.migrations.versions.0025\_pr4\_indexes\_loadlog
2025-08-17T22:11:47.8395954Z 
2025-08-17T22:11:47.8396092Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-17T22:11:47.8396335Z 
2025-08-17T22:11:47.8396464Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-17T22:11:47.8396686Z 
2025-08-17T22:11:47.8396847Z <a id="api.migrations.versions.0026_amazon_new_reports"></a>
2025-08-17T22:11:47.8397099Z 
2025-08-17T22:11:47.8397231Z # api.migrations.versions.0026\_amazon\_new\_reports
2025-08-17T22:11:47.8397465Z 
2025-08-17T22:11:47.8397588Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-17T22:11:47.8397806Z 
2025-08-17T22:11:47.8397911Z # api.migrations.versions.0001\_baseline
2025-08-17T22:11:47.8398122Z 
2025-08-17T22:11:47.8398226Z <a id="api.migrations.versions"></a>
2025-08-17T22:11:47.8398409Z 
2025-08-17T22:11:47.8398510Z # api.migrations.versions
2025-08-17T22:11:47.8398663Z 
2025-08-17T22:11:47.8398754Z <a id="api.migrations"></a>
2025-08-17T22:11:47.8398913Z 
2025-08-17T22:11:47.8398994Z # api.migrations
2025-08-17T22:11:47.8399116Z 
2025-08-17T22:11:47.8399195Z <a id="api.db"></a>
2025-08-17T22:11:47.8399328Z 
2025-08-17T22:11:47.8399402Z # api.db
2025-08-17T22:11:47.8399512Z 
2025-08-17T22:11:47.8399611Z <a id="api.routes.stats"></a>
2025-08-17T22:11:47.8399772Z 
2025-08-17T22:11:47.8399852Z # api.routes.stats
2025-08-17T22:11:47.8399974Z 
2025-08-17T22:11:47.8400079Z <a id="api.routes.stats.kpi"></a>
2025-08-17T22:11:47.8400250Z 
2025-08-17T22:11:47.8400316Z #### kpi
2025-08-17T22:11:47.8400412Z 
2025-08-17T22:11:47.8400483Z ```python
2025-08-17T22:11:47.8400660Z @router.get("/stats/kpi")
2025-08-17T22:11:47.8400917Z def kpi() -> List[Dict[str, int]]
2025-08-17T22:11:47.8401286Z ```
2025-08-17T22:11:47.8401375Z 
2025-08-17T22:11:47.8401458Z Return KPI metrics (mock).
2025-08-17T22:11:47.8401592Z 
2025-08-17T22:11:47.8401703Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-17T22:11:47.8401888Z 
2025-08-17T22:11:47.8401959Z #### roi\_by\_vendor
2025-08-17T22:11:47.8402077Z 
2025-08-17T22:11:47.8402143Z ```python
2025-08-17T22:11:47.8402320Z @router.get("/stats/roi_by_vendor")
2025-08-17T22:11:47.8402577Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-17T22:11:47.8402811Z ```
2025-08-17T22:11:47.8402894Z 
2025-08-17T22:11:47.8402978Z Return ROI percent by vendor.
2025-08-17T22:11:47.8403119Z 
2025-08-17T22:11:47.8403217Z <a id="api.routes.stats.roi_trend"></a>
2025-08-17T22:11:47.8403387Z 
2025-08-17T22:11:47.8403454Z #### roi\_trend
2025-08-17T22:11:47.8403565Z 
2025-08-17T22:11:47.8403630Z ```python
2025-08-17T22:11:47.8403799Z @router.get("/stats/roi_trend")
2025-08-17T22:11:47.8404043Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-17T22:11:47.8404362Z ```
2025-08-17T22:11:47.8404480Z 
2025-08-17T22:11:47.8404557Z Return 30-day ROI trend.
2025-08-17T22:11:47.8404895Z 
2025-08-17T22:11:47.8404983Z <a id="api.routes.roi"></a>
2025-08-17T22:11:47.8405123Z 
2025-08-17T22:11:47.8405200Z # api.routes.roi
2025-08-17T22:11:47.8405309Z 
2025-08-17T22:11:47.8405394Z <a id="api.routes.health"></a>
2025-08-17T22:11:47.8405538Z 
2025-08-17T22:11:47.8405618Z # api.routes.health
2025-08-17T22:11:47.8405732Z 
2025-08-17T22:11:47.8405823Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-17T22:11:47.8406001Z 
2025-08-17T22:11:47.8406068Z #### MAX\_SKEW
2025-08-17T22:11:47.8406174Z 
2025-08-17T22:11:47.8406246Z seconds
2025-08-17T22:11:47.8406333Z 
2025-08-17T22:11:47.8406430Z <a id="api.routes.health.health"></a>
2025-08-17T22:11:47.8406599Z 
2025-08-17T22:11:47.8406670Z #### health
2025-08-17T22:11:47.8406763Z 
2025-08-17T22:11:47.8406828Z ```python
2025-08-17T22:11:47.8407029Z @router.get("/health", include_in_schema=False)
2025-08-17T22:11:47.8407420Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-17T22:11:47.8407920Z ```
2025-08-17T22:11:47.8408024Z 
2025-08-17T22:11:47.8408145Z Return 200 when DB reachable and clocks are in sync.
2025-08-17T22:11:47.8408347Z 
2025-08-17T22:11:47.8408437Z <a id="api.routes.repository"></a>
2025-08-17T22:11:47.8408597Z 
2025-08-17T22:11:47.8408682Z # api.routes.repository
2025-08-17T22:11:47.8408811Z 
2025-08-17T22:11:47.8408886Z <a id="api.routes"></a>
2025-08-17T22:11:47.8409013Z 
2025-08-17T22:11:47.8409087Z # api.routes
2025-08-17T22:11:47.8409191Z 
2025-08-17T22:11:47.8409279Z <a id="api.models.fee"></a>
2025-08-17T22:11:47.8409417Z 
2025-08-17T22:11:47.8409488Z # api.models.fee
2025-08-17T22:11:47.8409598Z 
2025-08-17T22:11:47.8409678Z <a id="api.models"></a>
2025-08-17T22:11:47.8409798Z 
2025-08-17T22:11:47.8409864Z # api.models
2025-08-17T22:11:47.8409969Z 
2025-08-17T22:11:47.8410054Z <a id="api.roi_repository"></a>
2025-08-17T22:11:47.8410199Z 
2025-08-17T22:11:47.8410281Z # api.roi\_repository
2025-08-17T22:11:47.8410417Z 
2025-08-17T22:11:47.8410494Z <a id="api.main"></a>
2025-08-17T22:11:47.8410615Z 
2025-08-17T22:11:47.8410692Z # api.main
2025-08-17T22:11:47.8410787Z 
2025-08-17T22:11:47.8410869Z <a id="api.main.ready"></a>
2025-08-17T22:11:47.8411015Z 
2025-08-17T22:11:47.8411080Z #### ready
2025-08-17T22:11:47.8411175Z 
2025-08-17T22:11:47.8411241Z ```python
2025-08-17T22:11:47.8411517Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-17T22:11:47.8411965Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-17T22:11:47.8412324Z                                                                       str]
2025-08-17T22:11:47.8412566Z ```
2025-08-17T22:11:47.8412656Z 
2025-08-17T22:11:47.8412757Z Return 200 only when migrations are at head.
2025-08-17T22:11:47.8412942Z 
2025-08-17T22:11:47.8413017Z <a id="api.config"></a>
2025-08-17T22:11:47.8413140Z 
2025-08-17T22:11:47.8413208Z # api.config
2025-08-17T22:11:47.8413432Z 
2025-08-17T22:11:47.8413505Z <a id="etl"></a>
2025-08-17T22:11:47.8413613Z 
2025-08-17T22:11:47.8413681Z # etl
2025-08-17T22:11:47.8413771Z 
2025-08-17T22:11:47.8413856Z <a id="etl.fba_fee_ingestor"></a>
2025-08-17T22:11:47.8414016Z 
2025-08-17T22:11:47.8414092Z # etl.fba\_fee\_ingestor
2025-08-17T22:11:47.8414221Z 
2025-08-17T22:11:47.8414303Z <a id="etl.sp_fees_ingestor"></a>
2025-08-17T22:11:47.8414456Z 
2025-08-17T22:11:47.8414532Z # etl.sp\_fees\_ingestor
2025-08-17T22:11:47.8414813Z 
2025-08-17T22:11:47.8414912Z <a id="etl.keepa_ingestor"></a>
2025-08-17T22:11:47.8415062Z 
2025-08-17T22:11:47.8415135Z # etl.keepa\_ingestor
2025-08-17T22:11:47.8415251Z 
2025-08-17T22:11:47.8415326Z <a id="etl.db"></a>
2025-08-17T22:11:47.8415437Z 
2025-08-17T22:11:47.8415501Z # etl.db
2025-08-17T22:11:47.8415597Z 
2025-08-17T22:11:47.8415683Z <a id="etl.dialects.schemas"></a>
2025-08-17T22:11:47.8415836Z 
2025-08-17T22:11:47.8415913Z # etl.dialects.schemas
2025-08-17T22:11:47.8416043Z 
2025-08-17T22:11:47.8416160Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-17T22:11:47.8416360Z 
2025-08-17T22:11:47.8416470Z # etl.dialects.amazon\_reimbursements
2025-08-17T22:11:47.8416638Z 
2025-08-17T22:11:47.8416745Z <a id="etl.dialects.amazon_ads_sp_cost"></a>
2025-08-17T22:11:47.8416922Z 
2025-08-17T22:11:47.8417011Z # etl.dialects.amazon\_ads\_sp\_cost
2025-08-17T22:11:47.8417177Z 
2025-08-17T22:11:47.8417271Z <a id="etl.dialects.amazon_returns"></a>
2025-08-17T22:11:47.8417440Z 
2025-08-17T22:11:47.8417524Z # etl.dialects.amazon\_returns
2025-08-17T22:11:47.8417675Z 
2025-08-17T22:11:47.8417771Z <a id="etl.dialects.amazon_fee_preview"></a>
2025-08-17T22:11:47.8417956Z 
2025-08-17T22:11:47.8418049Z # etl.dialects.amazon\_fee\_preview
2025-08-17T22:11:47.8418205Z 
2025-08-17T22:11:47.8418317Z <a id="etl.dialects.amazon_inventory_ledger"></a>
2025-08-17T22:11:47.8418514Z 
2025-08-17T22:11:47.8418609Z # etl.dialects.amazon\_inventory\_ledger
2025-08-17T22:11:47.8418783Z 
2025-08-17T22:11:47.8418878Z <a id="etl.dialects.amazon_settlements"></a>
2025-08-17T22:11:47.8419183Z 
2025-08-17T22:11:47.8419282Z # etl.dialects.amazon\_settlements
2025-08-17T22:11:47.8419439Z 
2025-08-17T22:11:47.8419523Z <a id="etl.dialects"></a>
2025-08-17T22:11:47.8419654Z 
2025-08-17T22:11:47.8419723Z # etl.dialects
2025-08-17T22:11:47.8419830Z 
2025-08-17T22:11:47.8419897Z <a id="ingest"></a>
2025-08-17T22:11:47.8420006Z 
2025-08-17T22:11:47.8420070Z # ingest
2025-08-17T22:11:47.8420163Z 
2025-08-17T22:11:47.8420247Z <a id="ingest.maintenance"></a>
2025-08-17T22:11:47.8420393Z 
2025-08-17T22:11:47.8420473Z # ingest.maintenance
2025-08-17T22:11:47.8420592Z 
2025-08-17T22:11:47.8420673Z <a id="ingest.copy_loader"></a>
2025-08-17T22:11:47.8420815Z 
2025-08-17T22:11:47.8420895Z # ingest.copy\_loader
2025-08-17T22:11:47.8421013Z 
2025-08-17T22:11:47.8421118Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-17T22:11:47.8421308Z 
2025-08-17T22:11:47.8421385Z #### copy\_df\_via\_temp
2025-08-17T22:11:47.8421508Z 
2025-08-17T22:11:47.8421588Z ```python
2025-08-17T22:11:47.8421768Z def copy_df_via_temp(engine: Engine,
2025-08-17T22:11:47.8422014Z                      df: pd.DataFrame,
2025-08-17T22:11:47.8422254Z                      target_table: str,
2025-08-17T22:11:47.8422482Z                      *,
2025-08-17T22:11:47.8422696Z                      target_schema: Optional[str] = None,
2025-08-17T22:11:47.8422970Z                      columns: Sequence[str],
2025-08-17T22:11:47.8423253Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-17T22:11:47.8423548Z                      analyze_after: bool = False,
2025-08-17T22:11:47.8423824Z                      connection: Any | None = None) -> int
2025-08-17T22:11:47.8424068Z ```
2025-08-17T22:11:47.8424157Z 
2025-08-17T22:11:47.8424320Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-17T22:11:47.8424555Z 
2025-08-17T22:11:47.8424796Z <a id="ingest.tests.test_smoke"></a>
2025-08-17T22:11:47.8425044Z 
2025-08-17T22:11:47.8425129Z # ingest.tests.test\_smoke
2025-08-17T22:11:47.8425400Z 
2025-08-17T22:11:47.8425486Z <a id="ingest.tests"></a>
2025-08-17T22:11:47.8425616Z 
2025-08-17T22:11:47.8425685Z # ingest.tests
2025-08-17T22:11:47.8425792Z 
2025-08-17T22:11:47.8425886Z <a id="ingest.upload_router"></a>
2025-08-17T22:11:47.8426038Z 
2025-08-17T22:11:47.8426116Z # ingest.upload\_router
2025-08-17T22:11:47.8426245Z 
2025-08-17T22:11:47.8426331Z <a id="ingest.email_watcher"></a>
2025-08-17T22:11:47.8426478Z 
2025-08-17T22:11:47.8426554Z # ingest.email\_watcher
2025-08-17T22:11:47.8426681Z 
2025-08-17T22:11:47.8426770Z <a id="ingest.email_watcher.main"></a>
2025-08-17T22:11:47.8426934Z 
2025-08-17T22:11:47.8427006Z #### main
2025-08-17T22:11:47.8427099Z 
2025-08-17T22:11:47.8427165Z ```python
2025-08-17T22:11:47.8427344Z def main() -> dict[str, str]
2025-08-17T22:11:47.8427542Z ```
2025-08-17T22:11:47.8427632Z 
2025-08-17T22:11:47.8427775Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-17T22:11:47.8428002Z 
2025-08-17T22:11:47.8428141Z Returns {"status": "success"} when processing completes.
2025-08-17T22:11:47.8428359Z 
2025-08-17T22:11:47.8428436Z <a id="ingest.tasks"></a>
2025-08-17T22:11:47.8428564Z 
2025-08-17T22:11:47.8428646Z # ingest.tasks
2025-08-17T22:11:47.8428750Z 
2025-08-17T22:11:47.8428851Z <a id="ingest.tasks.task_import_file"></a>
2025-08-17T22:11:47.8429038Z 
2025-08-17T22:11:47.8429113Z #### task\_import\_file
2025-08-17T22:11:47.8429232Z 
2025-08-17T22:11:47.8429298Z ```python
2025-08-17T22:11:47.8429521Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-17T22:11:47.8429825Z def task_import_file(self,
2025-08-17T22:11:47.8430031Z                      uri: str,
2025-08-17T22:11:47.8430259Z                      report_type: Optional[str] = None,
2025-08-17T22:11:47.8430534Z                      force: bool = False) -> Dict[str, Any]
2025-08-17T22:11:47.8430798Z ```
2025-08-17T22:11:47.8430892Z 
2025-08-17T22:11:47.8431026Z Import a file into Postgres using existing ETL pipeline.
2025-08-17T22:11:47.8431251Z 
2025-08-17T22:11:47.8431337Z <a id="ingest.celery_app"></a>
2025-08-17T22:11:47.8431614Z 
2025-08-17T22:11:47.8431697Z # ingest.celery\_app
2025-08-17T22:11:47.8431816Z 
2025-08-17T22:11:47.8431899Z <a id="ingest.ingest_router"></a>
2025-08-17T22:11:47.8432054Z 
2025-08-17T22:11:47.8432130Z # ingest.ingest\_router
2025-08-17T22:11:47.8432249Z 
2025-08-17T22:11:47.8432326Z <a id="logistics_etl"></a>
2025-08-17T22:11:47.8432461Z 
2025-08-17T22:11:47.8432530Z # logistics\_etl
2025-08-17T22:11:47.8432638Z 
2025-08-17T22:11:47.8432722Z Daily logistics ETL job.
2025-08-17T22:11:47.8432845Z 
2025-08-17T22:11:47.8432929Z <a id="logistics_etl.__main__"></a>
2025-08-17T22:11:47.8433084Z 
2025-08-17T22:11:47.8433171Z # logistics\_etl.\_\_main\_\_
2025-08-17T22:11:47.8433306Z 
2025-08-17T22:11:47.8433386Z <a id="logistics_etl.dsn"></a>
2025-08-17T22:11:47.8433531Z 
2025-08-17T22:11:47.8433603Z # logistics\_etl.dsn
2025-08-17T22:11:47.8433718Z 
2025-08-17T22:11:47.8433840Z Local DSN builder to avoid cross-service dependency.
2025-08-17T22:11:47.8434053Z 
2025-08-17T22:11:47.8434151Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-17T22:11:47.8434319Z 
2025-08-17T22:11:47.8434391Z #### build\_dsn
2025-08-17T22:11:47.8434496Z 
2025-08-17T22:11:47.8434561Z ```python
2025-08-17T22:11:47.8434928Z def build_dsn(sync: bool = True) -> str
2025-08-17T22:11:47.8435158Z ```
2025-08-17T22:11:47.8435264Z 
2025-08-17T22:11:47.8435410Z Return a Postgres DSN assembled from environment variables.
2025-08-17T22:11:47.8435633Z 
2025-08-17T22:11:47.8435782Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-17T22:11:47.8436182Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-17T22:11:47.8436531Z error when any required variable is missing.
2025-08-17T22:11:47.8436716Z 
2025-08-17T22:11:47.8436811Z <a id="logistics_etl.tests.conftest"></a>
2025-08-17T22:11:47.8436985Z 
2025-08-17T22:11:47.8437071Z # logistics\_etl.tests.conftest
2025-08-17T22:11:47.8437223Z 
2025-08-17T22:11:47.8437329Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-17T22:11:47.8437648Z 
2025-08-17T22:11:47.8437744Z # logistics\_etl.tests.test\_repository
2025-08-17T22:11:47.8437912Z 
2025-08-17T22:11:47.8438006Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-17T22:11:47.8438184Z 
2025-08-17T22:11:47.8438270Z # logistics\_etl.tests.test\_cron
2025-08-17T22:11:47.8438423Z 
2025-08-17T22:11:47.8438522Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-17T22:11:47.8438707Z 
2025-08-17T22:11:47.8438795Z # logistics\_etl.tests.test\_imports
2025-08-17T22:11:47.8438955Z 
2025-08-17T22:11:47.8439062Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-17T22:11:47.8439236Z 
2025-08-17T22:11:47.8439321Z # logistics\_etl.tests.test\_smoke
2025-08-17T22:11:47.8439507Z 
2025-08-17T22:11:47.8439603Z <a id="logistics_etl.tests.test_client"></a>
2025-08-17T22:11:47.8439776Z 
2025-08-17T22:11:47.8439862Z # logistics\_etl.tests.test\_client
2025-08-17T22:11:47.8440022Z 
2025-08-17T22:11:47.8440105Z <a id="logistics_etl.tests"></a>
2025-08-17T22:11:47.8440258Z 
2025-08-17T22:11:47.8440342Z # logistics\_etl.tests
2025-08-17T22:11:47.8440463Z 
2025-08-17T22:11:47.8440545Z <a id="logistics_etl.flow"></a>
2025-08-17T22:11:47.8440690Z 
2025-08-17T22:11:47.8440764Z # logistics\_etl.flow
2025-08-17T22:11:47.8440884Z 
2025-08-17T22:11:47.8440970Z <a id="logistics_etl.client"></a>
2025-08-17T22:11:47.8441124Z 
2025-08-17T22:11:47.8441200Z # logistics\_etl.client
2025-08-17T22:11:47.8441324Z 
2025-08-17T22:11:47.8441411Z <a id="logistics_etl.cron"></a>
2025-08-17T22:11:47.8441550Z 
2025-08-17T22:11:47.8441622Z # logistics\_etl.cron
2025-08-17T22:11:47.8441743Z 
2025-08-17T22:11:47.8441824Z <a id="logistics_etl.db"></a>
2025-08-17T22:11:47.8441963Z 
2025-08-17T22:11:47.8442036Z # logistics\_etl.db
2025-08-17T22:11:47.8442154Z 
2025-08-17T22:11:47.8442246Z <a id="logistics_etl.repository"></a>
2025-08-17T22:11:47.8442407Z 
2025-08-17T22:11:47.8442498Z # logistics\_etl.repository
2025-08-17T22:11:47.8442636Z 
2025-08-17T22:11:47.8442709Z <a id="alert_bot"></a>
2025-08-17T22:11:47.8442956Z 
2025-08-17T22:11:47.8443023Z # alert\_bot
2025-08-17T22:11:47.8443121Z 
2025-08-17T22:11:47.8443212Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-17T22:11:47.8443384Z 
2025-08-17T22:11:47.8443468Z # alert\_bot.tests.test\_smoke
2025-08-17T22:11:47.8443610Z 
2025-08-17T22:11:47.8443694Z <a id="alert_bot.tests"></a>
2025-08-17T22:11:47.8443833Z 
2025-08-17T22:11:47.8443903Z # alert\_bot.tests
2025-08-17T22:11:47.8444011Z 
2025-08-17T22:11:47.8444100Z <a id="alert_bot.alert_bot"></a>
2025-08-17T22:11:47.8444245Z 
2025-08-17T22:11:47.8444320Z # alert\_bot.alert\_bot
2025-08-17T22:11:47.8444447Z 
2025-08-17T22:11:47.8444525Z <a id="alert_bot.rules"></a>
2025-08-17T22:11:47.8444848Z 
2025-08-17T22:11:47.8444928Z # alert\_bot.rules
2025-08-17T22:11:47.8445038Z 
2025-08-17T22:11:47.8445107Z <a id="common"></a>
2025-08-17T22:11:47.8445216Z 
2025-08-17T22:11:47.8445286Z # common
2025-08-17T22:11:47.8445378Z 
2025-08-17T22:11:47.8445453Z <a id="common.dsn"></a>
2025-08-17T22:11:47.8445583Z 
2025-08-17T22:11:47.8445655Z # common.dsn
2025-08-17T22:11:47.8445751Z 
2025-08-17T22:11:47.8445836Z <a id="common.dsn.build_dsn"></a>
2025-08-17T22:11:47.8445994Z 
2025-08-17T22:11:47.8446060Z #### build\_dsn
2025-08-17T22:11:47.8446161Z 
2025-08-17T22:11:47.8446233Z ```python
2025-08-17T22:11:47.8446415Z def build_dsn(sync: bool = True) -> str
2025-08-17T22:11:47.8446646Z ```
2025-08-17T22:11:47.8446731Z 
2025-08-17T22:11:47.8446855Z Return a Postgres DSN, validating required variables.
2025-08-17T22:11:47.8447072Z 
2025-08-17T22:11:47.8447257Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-17T22:11:47.8447700Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-17T22:11:47.8448125Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-17T22:11:47.8448446Z missing.
2025-08-17T22:11:47.8448539Z 
2025-08-17T22:11:47.8448624Z <a id="common.models_vendor"></a>
2025-08-17T22:11:47.8448779Z 
2025-08-17T22:11:47.8480842Z # common.models\_vendor
2025-08-17T22:11:47.8481107Z 
2025-08-17T22:11:47.8481280Z <a id="common.models_vendor.Vendor"></a>
2025-08-17T22:11:47.8481599Z 
2025-08-17T22:11:47.8481725Z ## Vendor Objects
2025-08-17T22:11:47.8481914Z 
2025-08-17T22:11:47.8482032Z ```python
2025-08-17T22:11:47.8482321Z class Vendor(Base)
2025-08-17T22:11:47.8482510Z ```
2025-08-17T22:11:47.8482601Z 
2025-08-17T22:11:47.8482689Z Vendor of inventory items.
2025-08-17T22:11:47.8482838Z 
2025-08-17T22:11:47.8482948Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-17T22:11:47.8483138Z 
2025-08-17T22:11:47.8483220Z ## VendorPrice Objects
2025-08-17T22:11:47.8483344Z 
2025-08-17T22:11:47.8483413Z ```python
2025-08-17T22:11:47.8483590Z class VendorPrice(Base)
2025-08-17T22:11:47.8483775Z ```
2025-08-17T22:11:47.8483866Z 
2025-08-17T22:11:47.8483973Z Association table linking vendors to pricing.
2025-08-17T22:11:47.8484163Z 
2025-08-17T22:11:47.8484244Z <a id="common.db_url"></a>
2025-08-17T22:11:47.8484395Z 
2025-08-17T22:11:47.8484521Z # common.db\_url
2025-08-17T22:11:47.8484798Z 
2025-08-17T22:11:47.8484939Z <a id="common.db_url.build_url"></a>
2025-08-17T22:11:47.8485108Z 
2025-08-17T22:11:47.8485178Z #### build\_url
2025-08-17T22:11:47.8485289Z 
2025-08-17T22:11:47.8485355Z ```python
2025-08-17T22:11:47.8485539Z def build_url(async_: bool = True) -> str
2025-08-17T22:11:47.8485778Z ```
2025-08-17T22:11:47.8485867Z 
2025-08-17T22:11:47.8485967Z Return Postgres DSN from env or PG_* parts.
2025-08-17T22:11:47.8486156Z 
2025-08-17T22:11:47.8486238Z <a id="common.keepa"></a>
2025-08-17T22:11:47.8486372Z 
2025-08-17T22:11:47.8486449Z # common.keepa
2025-08-17T22:11:47.8486553Z 
2025-08-17T22:11:47.8486629Z <a id="common.llm"></a>
2025-08-17T22:11:47.8486758Z 
2025-08-17T22:11:47.8486825Z # common.llm
2025-08-17T22:11:47.8486922Z 
2025-08-17T22:11:47.8487005Z <a id="common.settings"></a>
2025-08-17T22:11:47.8487151Z 
2025-08-17T22:11:47.8487221Z # common.settings
2025-08-17T22:11:47.8487332Z 
2025-08-17T22:11:47.8487421Z <a id="common.db"></a>
2025-08-17T22:11:47.8487704Z 
2025-08-17T22:11:47.8487772Z # common.db
2025-08-17T22:11:47.8487865Z 
2025-08-17T22:11:47.8487966Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-17T22:11:47.8488140Z 
2025-08-17T22:11:47.8488218Z #### build\_sqlalchemy\_url
2025-08-17T22:11:47.8488360Z 
2025-08-17T22:11:47.8488424Z ```python
2025-08-17T22:11:47.8488601Z def build_sqlalchemy_url() -> str
2025-08-17T22:11:47.8488820Z ```
2025-08-17T22:11:47.8488908Z 
2025-08-17T22:11:47.8489016Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T22:11:47.8489196Z 
2025-08-17T22:11:47.8489289Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-17T22:11:47.8489467Z 
2025-08-17T22:11:47.8489543Z #### build\_asyncpg\_dsn
2025-08-17T22:11:47.8489669Z 
2025-08-17T22:11:47.8489734Z ```python
2025-08-17T22:11:47.8489913Z def build_asyncpg_dsn() -> str
2025-08-17T22:11:47.8490116Z ```
2025-08-17T22:11:47.8490206Z 
2025-08-17T22:11:47.8490338Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T22:11:47.8490563Z 
2025-08-17T22:11:47.8490665Z <a id="common.db.refresh_mvs"></a>
2025-08-17T22:11:47.8490825Z 
2025-08-17T22:11:47.8490895Z #### refresh\_mvs
2025-08-17T22:11:47.8491009Z 
2025-08-17T22:11:47.8491075Z ```python
2025-08-17T22:11:47.8491275Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T22:11:47.8491536Z ```
2025-08-17T22:11:47.8491623Z 
2025-08-17T22:11:47.8491767Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T22:11:47.8491988Z 
2025-08-17T22:11:47.8492070Z <a id="common.config"></a>
2025-08-17T22:11:47.8492202Z 
2025-08-17T22:11:47.8492279Z # common.config
2025-08-17T22:11:47.8492385Z 
2025-08-17T22:11:47.8492463Z <a id="common.base"></a>
2025-08-17T22:11:47.8492596Z 
2025-08-17T22:11:47.8492663Z # common.base
2025-08-17T22:11:47.8492762Z 
2025-08-17T22:11:47.8492851Z <a id="common.base.Base"></a>
2025-08-17T22:11:47.8492995Z 
2025-08-17T22:11:47.8493062Z ## Base Objects
2025-08-17T22:11:47.8493164Z 
2025-08-17T22:11:47.8493235Z ```python
2025-08-17T22:11:47.8493526Z class Base(DeclarativeBase)
2025-08-17T22:11:47.8493737Z ```
2025-08-17T22:11:47.8493821Z 
2025-08-17T22:11:47.8493907Z Base class for SQLAlchemy models.
2025-08-17T22:11:47.8494067Z 
2025-08-17T22:11:47.8494143Z <a id="repricer"></a>
2025-08-17T22:11:47.8494263Z 
2025-08-17T22:11:47.8494336Z # repricer
2025-08-17T22:11:47.8494431Z 
2025-08-17T22:11:47.8494521Z <a id="repricer.app.schemas"></a>
2025-08-17T22:11:47.8494866Z 
2025-08-17T22:11:47.8494960Z # repricer.app.schemas
2025-08-17T22:11:47.8495089Z 
2025-08-17T22:11:47.8495176Z <a id="repricer.app.deps"></a>
2025-08-17T22:11:47.8495327Z 
2025-08-17T22:11:47.8495405Z # repricer.app.deps
2025-08-17T22:11:47.8495524Z 
2025-08-17T22:11:47.8495640Z Placeholder module for Keepa / SP-API clients.
2025-08-17T22:11:47.8495835Z 
2025-08-17T22:11:47.8495929Z <a id="repricer.app.logic"></a>
2025-08-17T22:11:47.8496080Z 
2025-08-17T22:11:47.8496163Z # repricer.app.logic
2025-08-17T22:11:47.8496281Z 
2025-08-17T22:11:47.8496383Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-17T22:11:47.8496581Z 
2025-08-17T22:11:47.8496647Z #### MIN\_MARGIN
2025-08-17T22:11:47.8496750Z 
2025-08-17T22:11:47.8496814Z 15 % ROI
2025-08-17T22:11:47.8496917Z 
2025-08-17T22:11:47.8497020Z <a id="repricer.app.logic.compute_price"></a>
2025-08-17T22:11:47.8497207Z 
2025-08-17T22:11:47.8497286Z #### compute\_price
2025-08-17T22:11:47.8497398Z 
2025-08-17T22:11:47.8497465Z ```python
2025-08-17T22:11:47.8497723Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-17T22:11:47.8498033Z ```
2025-08-17T22:11:47.8498124Z 
2025-08-17T22:11:47.8498236Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-17T22:11:47.8498522Z Replace with real competitive logic later.
2025-08-17T22:11:47.8498702Z 
2025-08-17T22:11:47.8498789Z <a id="repricer.app.main"></a>
2025-08-17T22:11:47.8498932Z 
2025-08-17T22:11:47.8499011Z # repricer.app.main
2025-08-17T22:11:47.8499124Z 
2025-08-17T22:11:47.8499203Z <a id="repricer.app"></a>
2025-08-17T22:11:47.8499337Z 
2025-08-17T22:11:47.8499416Z # repricer.app
2025-08-17T22:11:47.8499646Z 
2025-08-17T22:11:47.8499740Z <a id="repricer.tests.test_imports"></a>
2025-08-17T22:11:47.8499918Z 
2025-08-17T22:11:47.8500001Z # repricer.tests.test\_imports
2025-08-17T22:11:47.8500140Z 
2025-08-17T22:11:47.8500235Z <a id="repricer.tests.test_smoke"></a>
2025-08-17T22:11:47.8500397Z 
2025-08-17T22:11:47.8500480Z # repricer.tests.test\_smoke
2025-08-17T22:11:47.8500625Z 
2025-08-17T22:11:47.8500705Z <a id="repricer.tests"></a>
2025-08-17T22:11:47.8500839Z 
2025-08-17T22:11:47.8500910Z # repricer.tests
2025-08-17T22:11:47.8501026Z 
2025-08-17T22:11:47.8501092Z <a id="db"></a>
2025-08-17T22:11:47.8501192Z 
2025-08-17T22:11:47.8501262Z # db
2025-08-17T22:11:47.8501350Z 
2025-08-17T22:11:47.8501427Z <a id="db.utils.views"></a>
2025-08-17T22:11:47.8501560Z 
2025-08-17T22:11:47.8501634Z # db.utils.views
2025-08-17T22:11:47.8501740Z 
2025-08-17T22:11:47.8501835Z <a id="db.utils.views.replace_view"></a>
2025-08-17T22:11:47.8502013Z 
2025-08-17T22:11:47.8502089Z #### replace\_view
2025-08-17T22:11:47.8502202Z 
2025-08-17T22:11:47.8502272Z ```python
2025-08-17T22:11:47.8502471Z def replace_view(name: str, new_sql: str) -> None
2025-08-17T22:11:47.8502727Z ```
2025-08-17T22:11:47.8502815Z 
2025-08-17T22:11:47.8502907Z Drop and recreate a SQL view atomically.
2025-08-17T22:11:47.8503082Z 
2025-08-17T22:11:47.8503156Z <a id="db.utils"></a>
2025-08-17T22:11:47.8503275Z 
2025-08-17T22:11:47.8503341Z # db.utils
2025-08-17T22:11:47.8503440Z 
2025-08-17T22:11:47.8503520Z <a id="price_importer"></a>
2025-08-17T22:11:47.8503655Z 
2025-08-17T22:11:47.8503731Z # price\_importer
2025-08-17T22:11:47.8503840Z 
2025-08-17T22:11:47.8503947Z <a id="price_importer.services_common.dsn"></a>
2025-08-17T22:11:47.8504135Z 
2025-08-17T22:11:47.8504235Z # price\_importer.services\_common.dsn
2025-08-17T22:11:47.8504402Z 
2025-08-17T22:11:47.8504530Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-17T22:11:47.8504951Z 
2025-08-17T22:11:47.8505023Z #### build\_dsn
2025-08-17T22:11:47.8505258Z 
2025-08-17T22:11:47.8505337Z ```python
2025-08-17T22:11:47.8505518Z def build_dsn(sync: bool = True) -> str
2025-08-17T22:11:47.8505749Z ```
2025-08-17T22:11:47.8505834Z 
2025-08-17T22:11:47.8505904Z Return safe DSN.
2025-08-17T22:11:47.8506016Z 
2025-08-17T22:11:47.8506346Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-17T22:11:47.8506562Z 
2025-08-17T22:11:47.8506695Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-17T22:11:47.8506915Z 
2025-08-17T22:11:47.8507029Z # price\_importer.services\_common.models\_vendor
2025-08-17T22:11:47.8507226Z 
2025-08-17T22:11:47.8507341Z <a id="price_importer.services_common.db_url"></a>
2025-08-17T22:11:47.8507533Z 
2025-08-17T22:11:47.8507632Z # price\_importer.services\_common.db\_url
2025-08-17T22:11:47.8507812Z 
2025-08-17T22:11:47.8507948Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-17T22:11:47.8508167Z 
2025-08-17T22:11:47.8508234Z #### build\_url
2025-08-17T22:11:47.8508356Z 
2025-08-17T22:11:47.8508422Z ```python
2025-08-17T22:11:47.8508618Z def build_url(async_: bool = True) -> str
2025-08-17T22:11:47.8508852Z ```
2025-08-17T22:11:47.8508939Z 
2025-08-17T22:11:47.8509045Z Return Postgres DSN from env or PG_* parts.
2025-08-17T22:11:47.8509224Z 
2025-08-17T22:11:47.8509334Z <a id="price_importer.services_common.keepa"></a>
2025-08-17T22:11:47.8509531Z 
2025-08-17T22:11:47.8509628Z # price\_importer.services\_common.keepa
2025-08-17T22:11:47.8509800Z 
2025-08-17T22:11:47.8509912Z <a id="price_importer.services_common.llm"></a>
2025-08-17T22:11:47.8510101Z 
2025-08-17T22:11:47.8510194Z # price\_importer.services\_common.llm
2025-08-17T22:11:47.8510359Z 
2025-08-17T22:11:47.8510480Z <a id="price_importer.services_common.settings"></a>
2025-08-17T22:11:47.8510680Z 
2025-08-17T22:11:47.8510778Z # price\_importer.services\_common.settings
2025-08-17T22:11:47.8510961Z 
2025-08-17T22:11:47.8511064Z <a id="price_importer.services_common.db"></a>
2025-08-17T22:11:47.8511248Z 
2025-08-17T22:11:47.8511350Z # price\_importer.services\_common.db
2025-08-17T22:11:47.8511682Z 
2025-08-17T22:11:47.8511841Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-17T22:11:47.8512085Z 
2025-08-17T22:11:47.8512170Z #### build\_sqlalchemy\_url
2025-08-17T22:11:47.8512306Z 
2025-08-17T22:11:47.8512372Z ```python
2025-08-17T22:11:47.8512554Z def build_sqlalchemy_url() -> str
2025-08-17T22:11:47.8512767Z ```
2025-08-17T22:11:47.8512859Z 
2025-08-17T22:11:47.8512955Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T22:11:47.8513131Z 
2025-08-17T22:11:47.8513283Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-17T22:11:47.8513515Z 
2025-08-17T22:11:47.8513592Z #### build\_asyncpg\_dsn
2025-08-17T22:11:47.8513725Z 
2025-08-17T22:11:47.8513789Z ```python
2025-08-17T22:11:47.8513961Z def build_asyncpg_dsn() -> str
2025-08-17T22:11:47.8514173Z ```
2025-08-17T22:11:47.8514257Z 
2025-08-17T22:11:47.8514387Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T22:11:47.8514613Z 
2025-08-17T22:11:47.8514945Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-17T22:11:47.8515164Z 
2025-08-17T22:11:47.8515239Z #### refresh\_mvs
2025-08-17T22:11:47.8515347Z 
2025-08-17T22:11:47.8515413Z ```python
2025-08-17T22:11:47.8515618Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T22:11:47.8515872Z ```
2025-08-17T22:11:47.8515965Z 
2025-08-17T22:11:47.8516101Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T22:11:47.8516319Z 
2025-08-17T22:11:47.8516426Z <a id="price_importer.services_common"></a>
2025-08-17T22:11:47.8516601Z 
2025-08-17T22:11:47.8516691Z # price\_importer.services\_common
2025-08-17T22:11:47.8516855Z 
2025-08-17T22:11:47.8516961Z <a id="price_importer.services_common.base"></a>
2025-08-17T22:11:47.8517149Z 
2025-08-17T22:11:47.8517241Z # price\_importer.services\_common.base
2025-08-17T22:11:47.8517415Z 
2025-08-17T22:11:47.8517508Z <a id="price_importer.normaliser"></a>
2025-08-17T22:11:47.8517804Z 
2025-08-17T22:11:47.8517895Z # price\_importer.normaliser
2025-08-17T22:11:47.8518045Z 
2025-08-17T22:11:47.8518152Z <a id="price_importer.common.models_vendor"></a>
2025-08-17T22:11:47.8518343Z 
2025-08-17T22:11:47.8518434Z # price\_importer.common.models\_vendor
2025-08-17T22:11:47.8518598Z 
2025-08-17T22:11:47.8518692Z <a id="price_importer.common.db_url"></a>
2025-08-17T22:11:47.8518870Z 
2025-08-17T22:11:47.8518956Z # price\_importer.common.db\_url
2025-08-17T22:11:47.8519105Z 
2025-08-17T22:11:47.8519218Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-17T22:11:47.8519407Z 
2025-08-17T22:11:47.8519475Z #### make\_dsn
2025-08-17T22:11:47.8519583Z 
2025-08-17T22:11:47.8519648Z ```python
2025-08-17T22:11:47.8519825Z def make_dsn(async_: bool = False) -> str
2025-08-17T22:11:47.8520058Z ```
2025-08-17T22:11:47.8520144Z 
2025-08-17T22:11:47.8520264Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-17T22:11:47.8520473Z 
2025-08-17T22:11:47.8520583Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-17T22:11:47.8520788Z 
2025-08-17T22:11:47.8520860Z #### build\_url
2025-08-17T22:11:47.8520966Z 
2025-08-17T22:11:47.8521031Z ```python
2025-08-17T22:11:47.8521216Z def build_url(async_: bool = False) -> str
2025-08-17T22:11:47.8521448Z ```
2025-08-17T22:11:47.8521541Z 
2025-08-17T22:11:47.8521666Z Return Postgres DSN built from environment variables.
2025-08-17T22:11:47.8521877Z 
2025-08-17T22:11:47.8521972Z <a id="price_importer.common"></a>
2025-08-17T22:11:47.8522129Z 
2025-08-17T22:11:47.8522209Z # price\_importer.common
2025-08-17T22:11:47.8522341Z 
2025-08-17T22:11:47.8522440Z <a id="price_importer.common.base"></a>
2025-08-17T22:11:47.8522607Z 
2025-08-17T22:11:47.8522693Z # price\_importer.common.base
2025-08-17T22:11:47.8522843Z 
2025-08-17T22:11:47.8522945Z <a id="price_importer.tests.conftest"></a>
2025-08-17T22:11:47.8523125Z 
2025-08-17T22:11:47.8523222Z # price\_importer.tests.conftest
2025-08-17T22:11:47.8523373Z 
2025-08-17T22:11:47.8523474Z <a id="price_importer.tests.test_reader"></a>
2025-08-17T22:11:47.8523778Z 
2025-08-17T22:11:47.8523878Z # price\_importer.tests.test\_reader
2025-08-17T22:11:47.8524043Z 
2025-08-17T22:11:47.8524146Z <a id="price_importer.tests.test_imports"></a>
2025-08-17T22:11:47.8524334Z 
2025-08-17T22:11:47.8524427Z # price\_importer.tests.test\_imports
2025-08-17T22:11:47.8524586Z 
2025-08-17T22:11:47.8524875Z <a id="price_importer.tests.test_smoke"></a>
2025-08-17T22:11:47.8525063Z 
2025-08-17T22:11:47.8525152Z # price\_importer.tests.test\_smoke
2025-08-17T22:11:47.8525311Z 
2025-08-17T22:11:47.8525427Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-17T22:11:47.8525616Z 
2025-08-17T22:11:47.8525712Z # price\_importer.tests.test\_normaliser
2025-08-17T22:11:47.8525889Z 
2025-08-17T22:11:47.8525977Z <a id="price_importer.tests"></a>
2025-08-17T22:11:47.8526128Z 
2025-08-17T22:11:47.8526213Z # price\_importer.tests
2025-08-17T22:11:47.8526336Z 
2025-08-17T22:11:47.8526425Z <a id="price_importer.reader"></a>
2025-08-17T22:11:47.8526585Z 
2025-08-17T22:11:47.8526671Z # price\_importer.reader
2025-08-17T22:11:47.8526806Z 
2025-08-17T22:11:47.8526900Z <a id="price_importer.repository"></a>
2025-08-17T22:11:47.8527073Z 
2025-08-17T22:11:47.8527158Z # price\_importer.repository
2025-08-17T22:11:47.8527299Z 
2025-08-17T22:11:47.8527389Z <a id="price_importer.import"></a>
2025-08-17T22:11:47.8527542Z 
2025-08-17T22:11:47.8527621Z # price\_importer.import
2025-08-17T22:11:47.8527749Z 
2025-08-17T22:11:47.8527826Z <a id="fees_h10"></a>
2025-08-17T22:11:47.8527943Z 
2025-08-17T22:11:47.8528010Z # fees\_h10
2025-08-17T22:11:47.8528110Z 
2025-08-17T22:11:47.8528188Z <a id="fees_h10.worker"></a>
2025-08-17T22:11:47.8528323Z 
2025-08-17T22:11:47.8528393Z # fees\_h10.worker
2025-08-17T22:11:47.8528507Z 
2025-08-17T22:11:47.8528608Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-17T22:11:47.8528795Z 
2025-08-17T22:11:47.8528875Z #### list\_active\_asins
2025-08-17T22:11:47.8529000Z 
2025-08-17T22:11:47.8529064Z ```python
2025-08-17T22:11:47.8529392Z def list_active_asins() -> list[str]
2025-08-17T22:11:47.8529614Z ```
2025-08-17T22:11:47.8529706Z 
2025-08-17T22:11:47.8529820Z Return known ASINs or an empty list if unavailable.
2025-08-17T22:11:47.8530018Z 
2025-08-17T22:11:47.8530111Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-17T22:11:47.8530274Z 
2025-08-17T22:11:47.8530359Z # fees\_h10.tests.test\_smoke
2025-08-17T22:11:47.8530498Z 
2025-08-17T22:11:47.8530584Z <a id="fees_h10.tests"></a>
2025-08-17T22:11:47.8530733Z 
2025-08-17T22:11:47.8530801Z # fees\_h10.tests
2025-08-17T22:11:47.8530943Z 
2025-08-17T22:11:47.8531021Z <a id="fees_h10.client"></a>
2025-08-17T22:11:47.8531156Z 
2025-08-17T22:11:47.8531231Z # fees\_h10.client
2025-08-17T22:11:47.8531338Z 
2025-08-17T22:11:47.8531423Z <a id="fees_h10.repository"></a>
2025-08-17T22:11:47.8531569Z 
2025-08-17T22:11:47.8531650Z # fees\_h10.repository
2025-08-17T22:11:47.8531769Z 
2025-08-17T22:11:47.8531841Z <a id="emailer"></a>
2025-08-17T22:11:47.8531959Z 
2025-08-17T22:11:47.8532025Z # emailer
2025-08-17T22:11:47.8532123Z 
2025-08-17T22:11:47.8532230Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-17T22:11:47.8532417Z 
2025-08-17T22:11:47.8532507Z # emailer.tests.test\_import\_emailer
2025-08-17T22:11:47.8532671Z 
2025-08-17T22:11:47.8532768Z <a id="emailer.tests.test_smoke"></a>
2025-08-17T22:11:47.8532926Z 
2025-08-17T22:11:47.8533009Z # emailer.tests.test\_smoke
2025-08-17T22:11:47.8533154Z 
2025-08-17T22:11:47.8533238Z <a id="emailer.tests"></a>
2025-08-17T22:11:47.8533370Z 
2025-08-17T22:11:47.8533439Z # emailer.tests
2025-08-17T22:11:47.8533552Z 
2025-08-17T22:11:47.8533640Z <a id="emailer.generate_body"></a>
2025-08-17T22:11:47.8533795Z 
2025-08-17T22:11:47.8533881Z # emailer.generate\_body
2025-08-17T22:11:47.8534011Z 
2025-08-17T22:11:47.8534086Z <a id="llm_server"></a>
2025-08-17T22:11:47.8534216Z 
2025-08-17T22:11:47.8534282Z # llm\_server
2025-08-17T22:11:47.8534383Z 
2025-08-17T22:11:47.8534463Z <a id="llm_server.app"></a>
2025-08-17T22:11:47.8534603Z 
2025-08-17T22:11:47.8534782Z # llm\_server.app
2025-08-17T22:11:47.8535014Z 
