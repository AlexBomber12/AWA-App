2025-08-17T17:26:25.9561452Z ##[group]Run pydoc-markdown
2025-08-17T17:26:25.9561754Z [36;1mpydoc-markdown[0m
2025-08-17T17:26:25.9605197Z shell: /usr/bin/bash -e {0}
2025-08-17T17:26:25.9605458Z env:
2025-08-17T17:26:25.9605702Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T17:26:25.9606117Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-17T17:26:25.9606517Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T17:26:25.9606863Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T17:26:25.9607214Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T17:26:25.9607550Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-17T17:26:25.9607835Z ##[endgroup]
2025-08-17T17:26:26.4345221Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-17T17:26:26.4345946Z Unknown key(s) "{'output_directory'}" at:
2025-08-17T17:26:26.4346411Z In "pydoc-markdown.yml"
2025-08-17T17:26:26.6638436Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-17T17:26:26.6639322Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-17T17:26:26.6640288Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-17T17:26:26.6640975Z 
2025-08-17T17:26:26.6641229Z <a id="__init__"></a>
2025-08-17T17:26:26.6641513Z 
2025-08-17T17:26:26.6641664Z # \_\_init\_\_
2025-08-17T17:26:26.6641905Z 
2025-08-17T17:26:26.6642064Z <a id="api"></a>
2025-08-17T17:26:26.6642321Z 
2025-08-17T17:26:26.6642768Z # api
2025-08-17T17:26:26.6642990Z 
2025-08-17T17:26:26.6643189Z <a id="api.tests.test_llm"></a>
2025-08-17T17:26:26.6643539Z 
2025-08-17T17:26:26.6643731Z # api.tests.test\_llm
2025-08-17T17:26:26.6644019Z 
2025-08-17T17:26:26.6644224Z <a id="api.tests.test_imports"></a>
2025-08-17T17:26:26.6644607Z 
2025-08-17T17:26:26.6644792Z # api.tests.test\_imports
2025-08-17T17:26:26.6645096Z 
2025-08-17T17:26:26.6645298Z <a id="api.tests.test_entrypoint"></a>
2025-08-17T17:26:26.6646052Z 
2025-08-17T17:26:26.6646210Z # api.tests.test\_entrypoint
2025-08-17T17:26:26.6646480Z 
2025-08-17T17:26:26.6646643Z <a id="api.tests.test_health"></a>
2025-08-17T17:26:26.6646926Z 
2025-08-17T17:26:26.6647066Z # api.tests.test\_health
2025-08-17T17:26:26.6647311Z 
2025-08-17T17:26:26.6647455Z <a id="api.migrations.env"></a>
2025-08-17T17:26:26.6647604Z 
2025-08-17T17:26:26.6647681Z # api.migrations.env
2025-08-17T17:26:26.6647812Z 
2025-08-17T17:26:26.6647944Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-17T17:26:26.6648168Z 
2025-08-17T17:26:26.6648291Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-17T17:26:26.6648488Z 
2025-08-17T17:26:26.6648603Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-17T17:26:26.6648803Z 
2025-08-17T17:26:26.6648969Z # api.migrations.versions.0004\_fee\_cron
2025-08-17T17:26:26.6649145Z 
2025-08-17T17:26:26.6649306Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-17T17:26:26.6649553Z 
2025-08-17T17:26:26.6649705Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-17T17:26:26.6649933Z 
2025-08-17T17:26:26.6650068Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-17T17:26:26.6650278Z 
2025-08-17T17:26:26.6650385Z # api.migrations.versions.0003\_vendor\_prices
2025-08-17T17:26:26.6650581Z 
2025-08-17T17:26:26.6650700Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-17T17:26:26.6650901Z 
2025-08-17T17:26:26.6651011Z # api.migrations.versions.0024\_create\_buybox
2025-08-17T17:26:26.6651193Z 
2025-08-17T17:26:26.6651316Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-17T17:26:26.6651529Z 
2025-08-17T17:26:26.6651637Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-17T17:26:26.6651828Z 
2025-08-17T17:26:26.6651947Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-17T17:26:26.6652153Z 
2025-08-17T17:26:26.6652262Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-17T17:26:26.6652691Z 
2025-08-17T17:26:26.6652831Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-17T17:26:26.6653309Z 
2025-08-17T17:26:26.6653418Z # api.migrations.versions.0020\_unified\_schema
2025-08-17T17:26:26.6653613Z 
2025-08-17T17:26:26.6653735Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-17T17:26:26.6653940Z 
2025-08-17T17:26:26.6654049Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-17T17:26:26.6654246Z 
2025-08-17T17:26:26.6654354Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-17T17:26:26.6654544Z 
2025-08-17T17:26:26.6654642Z # api.migrations.versions.0001\_baseline
2025-08-17T17:26:26.6654813Z 
2025-08-17T17:26:26.6654902Z <a id="api.migrations.versions"></a>
2025-08-17T17:26:26.6655072Z 
2025-08-17T17:26:26.6655152Z # api.migrations.versions
2025-08-17T17:26:26.6655280Z 
2025-08-17T17:26:26.6655356Z <a id="api.migrations"></a>
2025-08-17T17:26:26.6655496Z 
2025-08-17T17:26:26.6655564Z # api.migrations
2025-08-17T17:26:26.6655669Z 
2025-08-17T17:26:26.6655742Z <a id="api.db"></a>
2025-08-17T17:26:26.6655855Z 
2025-08-17T17:26:26.6655922Z # api.db
2025-08-17T17:26:26.6656015Z 
2025-08-17T17:26:26.6656102Z <a id="api.routes.stats"></a>
2025-08-17T17:26:26.6656243Z 
2025-08-17T17:26:26.6656312Z # api.routes.stats
2025-08-17T17:26:26.6656426Z 
2025-08-17T17:26:26.6656510Z <a id="api.routes.stats.kpi"></a>
2025-08-17T17:26:26.6656661Z 
2025-08-17T17:26:26.6656729Z #### kpi
2025-08-17T17:26:26.6656816Z 
2025-08-17T17:26:26.6656879Z ```python
2025-08-17T17:26:26.6657049Z @router.get("/stats/kpi")
2025-08-17T17:26:26.6657282Z def kpi() -> List[Dict[str, int]]
2025-08-17T17:26:26.6657492Z ```
2025-08-17T17:26:26.6657572Z 
2025-08-17T17:26:26.6657648Z Return KPI metrics (mock).
2025-08-17T17:26:26.6657784Z 
2025-08-17T17:26:26.6657884Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-17T17:26:26.6658065Z 
2025-08-17T17:26:26.6658138Z #### roi\_by\_vendor
2025-08-17T17:26:26.6658252Z 
2025-08-17T17:26:26.6658313Z ```python
2025-08-17T17:26:26.6658487Z @router.get("/stats/roi_by_vendor")
2025-08-17T17:26:26.6658857Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-17T17:26:26.6659104Z ```
2025-08-17T17:26:26.6659195Z 
2025-08-17T17:26:26.6659274Z Return ROI percent by vendor.
2025-08-17T17:26:26.6659421Z 
2025-08-17T17:26:26.6659512Z <a id="api.routes.stats.roi_trend"></a>
2025-08-17T17:26:26.6659678Z 
2025-08-17T17:26:26.6659749Z #### roi\_trend
2025-08-17T17:26:26.6659849Z 
2025-08-17T17:26:26.6659911Z ```python
2025-08-17T17:26:26.6660077Z @router.get("/stats/roi_trend")
2025-08-17T17:26:26.6660306Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-17T17:26:26.6660543Z ```
2025-08-17T17:26:26.6660704Z 
2025-08-17T17:26:26.6660786Z Return 30-day ROI trend.
2025-08-17T17:26:26.6660940Z 
2025-08-17T17:26:26.6661020Z <a id="api.routes.roi"></a>
2025-08-17T17:26:26.6661161Z 
2025-08-17T17:26:26.6661228Z # api.routes.roi
2025-08-17T17:26:26.6661332Z 
2025-08-17T17:26:26.6661417Z <a id="api.routes.health"></a>
2025-08-17T17:26:26.6661564Z 
2025-08-17T17:26:26.6661636Z # api.routes.health
2025-08-17T17:26:26.6661750Z 
2025-08-17T17:26:26.6661855Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-17T17:26:26.6662019Z 
2025-08-17T17:26:26.6662080Z #### MAX\_SKEW
2025-08-17T17:26:26.6662185Z 
2025-08-17T17:26:26.6662249Z seconds
2025-08-17T17:26:26.6662333Z 
2025-08-17T17:26:26.6662637Z <a id="api.routes.health.health"></a>
2025-08-17T17:26:26.6662843Z 
2025-08-17T17:26:26.6662908Z #### health
2025-08-17T17:26:26.6663002Z 
2025-08-17T17:26:26.6663072Z ```python
2025-08-17T17:26:26.6663267Z @router.get("/health", include_in_schema=False)
2025-08-17T17:26:26.6663654Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-17T17:26:26.6663997Z ```
2025-08-17T17:26:26.6664083Z 
2025-08-17T17:26:26.6664199Z Return 200 when DB reachable and clocks are in sync.
2025-08-17T17:26:26.6664651Z 
2025-08-17T17:26:26.6664816Z <a id="api.routes.repository"></a>
2025-08-17T17:26:26.6665117Z 
2025-08-17T17:26:26.6665261Z # api.routes.repository
2025-08-17T17:26:26.6665499Z 
2025-08-17T17:26:26.6665650Z <a id="api.routes"></a>
2025-08-17T17:26:26.6666133Z 
2025-08-17T17:26:26.6666259Z # api.routes
2025-08-17T17:26:26.6666454Z 
2025-08-17T17:26:26.6666548Z <a id="api.models.fee"></a>
2025-08-17T17:26:26.6666692Z 
2025-08-17T17:26:26.6666763Z # api.models.fee
2025-08-17T17:26:26.6666876Z 
2025-08-17T17:26:26.6666949Z <a id="api.models"></a>
2025-08-17T17:26:26.6667063Z 
2025-08-17T17:26:26.6667132Z # api.models
2025-08-17T17:26:26.6667226Z 
2025-08-17T17:26:26.6667304Z <a id="api.roi_repository"></a>
2025-08-17T17:26:26.6667442Z 
2025-08-17T17:26:26.6667519Z # api.roi\_repository
2025-08-17T17:26:26.6667633Z 
2025-08-17T17:26:26.6667701Z <a id="api.main"></a>
2025-08-17T17:26:26.6667813Z 
2025-08-17T17:26:26.6667875Z # api.main
2025-08-17T17:26:26.6667966Z 
2025-08-17T17:26:26.6668041Z <a id="api.main.ready"></a>
2025-08-17T17:26:26.6668178Z 
2025-08-17T17:26:26.6668239Z #### ready
2025-08-17T17:26:26.6668325Z 
2025-08-17T17:26:26.6668395Z ```python
2025-08-17T17:26:26.6668657Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-17T17:26:26.6669117Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-17T17:26:26.6669469Z                                                                       str]
2025-08-17T17:26:26.6669704Z ```
2025-08-17T17:26:26.6669788Z 
2025-08-17T17:26:26.6669889Z Return 200 only when migrations are at head.
2025-08-17T17:26:26.6670060Z 
2025-08-17T17:26:26.6670134Z <a id="api.config"></a>
2025-08-17T17:26:26.6670254Z 
2025-08-17T17:26:26.6670323Z # api.config
2025-08-17T17:26:26.6670417Z 
2025-08-17T17:26:26.6670479Z <a id="etl"></a>
2025-08-17T17:26:26.6670583Z 
2025-08-17T17:26:26.6670644Z # etl
2025-08-17T17:26:26.6670729Z 
2025-08-17T17:26:26.6670811Z <a id="etl.fba_fee_ingestor"></a>
2025-08-17T17:26:26.6670966Z 
2025-08-17T17:26:26.6671041Z # etl.fba\_fee\_ingestor
2025-08-17T17:26:26.6671162Z 
2025-08-17T17:26:26.6671250Z <a id="etl.sp_fees_ingestor"></a>
2025-08-17T17:26:26.6671394Z 
2025-08-17T17:26:26.6671465Z # etl.sp\_fees\_ingestor
2025-08-17T17:26:26.6671733Z 
2025-08-17T17:26:26.6671811Z <a id="etl.keepa_ingestor"></a>
2025-08-17T17:26:26.6671950Z 
2025-08-17T17:26:26.6672018Z # etl.keepa\_ingestor
2025-08-17T17:26:26.6672138Z 
2025-08-17T17:26:26.6672204Z <a id="etl.db"></a>
2025-08-17T17:26:26.6672308Z 
2025-08-17T17:26:26.6672513Z # etl.db
2025-08-17T17:26:26.6672605Z 
2025-08-17T17:26:26.6672689Z <a id="etl.dialects.schemas"></a>
2025-08-17T17:26:26.6672837Z 
2025-08-17T17:26:26.6672916Z # etl.dialects.schemas
2025-08-17T17:26:26.6673034Z 
2025-08-17T17:26:26.6673144Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-17T17:26:26.6673337Z 
2025-08-17T17:26:26.6673427Z # etl.dialects.amazon\_reimbursements
2025-08-17T17:26:26.6673597Z 
2025-08-17T17:26:26.6673687Z <a id="etl.dialects.amazon_returns"></a>
2025-08-17T17:26:26.6673851Z 
2025-08-17T17:26:26.6673936Z # etl.dialects.amazon\_returns
2025-08-17T17:26:26.6674074Z 
2025-08-17T17:26:26.6674149Z <a id="etl.dialects"></a>
2025-08-17T17:26:26.6674287Z 
2025-08-17T17:26:26.6674357Z # etl.dialects
2025-08-17T17:26:26.6674463Z 
2025-08-17T17:26:26.6674528Z <a id="ingest"></a>
2025-08-17T17:26:26.6674639Z 
2025-08-17T17:26:26.6674698Z # ingest
2025-08-17T17:26:26.6674782Z 
2025-08-17T17:26:26.6674865Z <a id="ingest.copy_loader"></a>
2025-08-17T17:26:26.6675002Z 
2025-08-17T17:26:26.6675076Z # ingest.copy\_loader
2025-08-17T17:26:26.6675188Z 
2025-08-17T17:26:26.6675294Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-17T17:26:26.6675481Z 
2025-08-17T17:26:26.6675555Z #### copy\_df\_via\_temp
2025-08-17T17:26:26.6675686Z 
2025-08-17T17:26:26.6675750Z ```python
2025-08-17T17:26:26.6675925Z def copy_df_via_temp(engine: Engine,
2025-08-17T17:26:26.6676168Z                      df: pd.DataFrame,
2025-08-17T17:26:26.6676398Z                      target_table: str,
2025-08-17T17:26:26.6676623Z                      *,
2025-08-17T17:26:26.6676832Z                      target_schema: Optional[str] = None,
2025-08-17T17:26:26.6677098Z                      columns: Sequence[str],
2025-08-17T17:26:26.6677516Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-17T17:26:26.6677811Z                      analyze_after: bool = False) -> int
2025-08-17T17:26:26.6678048Z ```
2025-08-17T17:26:26.6678142Z 
2025-08-17T17:26:26.6678302Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-17T17:26:26.6678535Z 
2025-08-17T17:26:26.6678708Z The dataframe is first written to a TEMP table created ``LIKE`` the target
2025-08-17T17:26:26.6679161Z including defaults and generated columns.  Data is streamed via ``COPY`` and
2025-08-17T17:26:26.6679612Z then inserted into the final table.  If ``conflict_cols`` is provided an
2025-08-17T17:26:26.6680019Z ``INSERT ... ON CONFLICT DO UPDATE`` is issued for the non-conflicting
2025-08-17T17:26:26.6680363Z columns, otherwise rows are simply appended.
2025-08-17T17:26:26.6680541Z 
2025-08-17T17:26:26.6680642Z Returns the number of rows provided in ``df``.
2025-08-17T17:26:26.6680826Z 
2025-08-17T17:26:26.6680919Z <a id="ingest.tests.test_smoke"></a>
2025-08-17T17:26:26.6681082Z 
2025-08-17T17:26:26.6681167Z # ingest.tests.test\_smoke
2025-08-17T17:26:26.6681302Z 
2025-08-17T17:26:26.6681389Z <a id="ingest.tests"></a>
2025-08-17T17:26:26.6681526Z 
2025-08-17T17:26:26.6681600Z # ingest.tests
2025-08-17T17:26:26.6681697Z 
2025-08-17T17:26:26.6681779Z <a id="ingest.upload_router"></a>
2025-08-17T17:26:26.6681938Z 
2025-08-17T17:26:26.6682011Z # ingest.upload\_router
2025-08-17T17:26:26.6682131Z 
2025-08-17T17:26:26.6682209Z <a id="ingest.email_watcher"></a>
2025-08-17T17:26:26.6682358Z 
2025-08-17T17:26:26.6682637Z # ingest.email\_watcher
2025-08-17T17:26:26.6682768Z 
2025-08-17T17:26:26.6682866Z <a id="ingest.email_watcher.main"></a>
2025-08-17T17:26:26.6683027Z 
2025-08-17T17:26:26.6683088Z #### main
2025-08-17T17:26:26.6683183Z 
2025-08-17T17:26:26.6683244Z ```python
2025-08-17T17:26:26.6683408Z def main() -> dict[str, str]
2025-08-17T17:26:26.6683605Z ```
2025-08-17T17:26:26.6683686Z 
2025-08-17T17:26:26.6683966Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-17T17:26:26.6684196Z 
2025-08-17T17:26:26.6684324Z Returns {"status": "success"} when processing completes.
2025-08-17T17:26:26.6684564Z 
2025-08-17T17:26:26.6684645Z <a id="ingest.tasks"></a>
2025-08-17T17:26:26.6684769Z 
2025-08-17T17:26:26.6684839Z # ingest.tasks
2025-08-17T17:26:26.6684955Z 
2025-08-17T17:26:26.6685066Z <a id="ingest.tasks.task_import_file"></a>
2025-08-17T17:26:26.6685234Z 
2025-08-17T17:26:26.6685311Z #### task\_import\_file
2025-08-17T17:26:26.6685426Z 
2025-08-17T17:26:26.6685488Z ```python
2025-08-17T17:26:26.6685699Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-17T17:26:26.6685979Z def task_import_file(self,
2025-08-17T17:26:26.6686180Z                      uri: str,
2025-08-17T17:26:26.6686427Z                      report_type: Optional[str] = None) -> Dict[str, Any]
2025-08-17T17:26:26.6686699Z ```
2025-08-17T17:26:26.6686780Z 
2025-08-17T17:26:26.6686909Z Import a file into Postgres using existing ETL pipeline.
2025-08-17T17:26:26.6687130Z 
2025-08-17T17:26:26.6687209Z <a id="ingest.celery_app"></a>
2025-08-17T17:26:26.6687346Z 
2025-08-17T17:26:26.6687422Z # ingest.celery\_app
2025-08-17T17:26:26.6687537Z 
2025-08-17T17:26:26.6687620Z <a id="ingest.ingest_router"></a>
2025-08-17T17:26:26.6687771Z 
2025-08-17T17:26:26.6687843Z # ingest.ingest\_router
2025-08-17T17:26:26.6687959Z 
2025-08-17T17:26:26.6688034Z <a id="logistics_etl"></a>
2025-08-17T17:26:26.6688163Z 
2025-08-17T17:26:26.6688227Z # logistics\_etl
2025-08-17T17:26:26.6688336Z 
2025-08-17T17:26:26.6688417Z Daily logistics ETL job.
2025-08-17T17:26:26.6688537Z 
2025-08-17T17:26:26.6688617Z <a id="logistics_etl.__main__"></a>
2025-08-17T17:26:26.6688771Z 
2025-08-17T17:26:26.6688848Z # logistics\_etl.\_\_main\_\_
2025-08-17T17:26:26.6688982Z 
2025-08-17T17:26:26.6689057Z <a id="logistics_etl.dsn"></a>
2025-08-17T17:26:26.6689199Z 
2025-08-17T17:26:26.6689267Z # logistics\_etl.dsn
2025-08-17T17:26:26.6689378Z 
2025-08-17T17:26:26.6689504Z Local DSN builder to avoid cross-service dependency.
2025-08-17T17:26:26.6689818Z 
2025-08-17T17:26:26.6689907Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-17T17:26:26.6690076Z 
2025-08-17T17:26:26.6690143Z #### build\_dsn
2025-08-17T17:26:26.6690244Z 
2025-08-17T17:26:26.6690306Z ```python
2025-08-17T17:26:26.6690484Z def build_dsn(sync: bool = True) -> str
2025-08-17T17:26:26.6690698Z ```
2025-08-17T17:26:26.6690782Z 
2025-08-17T17:26:26.6690919Z Return a Postgres DSN assembled from environment variables.
2025-08-17T17:26:26.6691138Z 
2025-08-17T17:26:26.6691290Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-17T17:26:26.6691667Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-17T17:26:26.6692009Z error when any required variable is missing.
2025-08-17T17:26:26.6692181Z 
2025-08-17T17:26:26.6692272Z <a id="logistics_etl.tests.conftest"></a>
2025-08-17T17:26:26.6692553Z 
2025-08-17T17:26:26.6692637Z # logistics\_etl.tests.conftest
2025-08-17T17:26:26.6692784Z 
2025-08-17T17:26:26.6692896Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-17T17:26:26.6693094Z 
2025-08-17T17:26:26.6693191Z # logistics\_etl.tests.test\_repository
2025-08-17T17:26:26.6693354Z 
2025-08-17T17:26:26.6693443Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-17T17:26:26.6693618Z 
2025-08-17T17:26:26.6693699Z # logistics\_etl.tests.test\_cron
2025-08-17T17:26:26.6693844Z 
2025-08-17T17:26:26.6693943Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-17T17:26:26.6694115Z 
2025-08-17T17:26:26.6694198Z # logistics\_etl.tests.test\_imports
2025-08-17T17:26:26.6694352Z 
2025-08-17T17:26:26.6694448Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-17T17:26:26.6694614Z 
2025-08-17T17:26:26.6694698Z # logistics\_etl.tests.test\_smoke
2025-08-17T17:26:26.6694852Z 
2025-08-17T17:26:26.6694944Z <a id="logistics_etl.tests.test_client"></a>
2025-08-17T17:26:26.6695110Z 
2025-08-17T17:26:26.6695196Z # logistics\_etl.tests.test\_client
2025-08-17T17:26:26.6695345Z 
2025-08-17T17:26:26.6695546Z <a id="logistics_etl.tests"></a>
2025-08-17T17:26:26.6695695Z 
2025-08-17T17:26:26.6695771Z # logistics\_etl.tests
2025-08-17T17:26:26.6695887Z 
2025-08-17T17:26:26.6695972Z <a id="logistics_etl.flow"></a>
2025-08-17T17:26:26.6696132Z 
2025-08-17T17:26:26.6696201Z # logistics\_etl.flow
2025-08-17T17:26:26.6696316Z 
2025-08-17T17:26:26.6696405Z <a id="logistics_etl.client"></a>
2025-08-17T17:26:26.6696549Z 
2025-08-17T17:26:26.6696621Z # logistics\_etl.client
2025-08-17T17:26:26.6696739Z 
2025-08-17T17:26:26.6696822Z <a id="logistics_etl.cron"></a>
2025-08-17T17:26:26.6696957Z 
2025-08-17T17:26:26.6697026Z # logistics\_etl.cron
2025-08-17T17:26:26.6697143Z 
2025-08-17T17:26:26.6697219Z <a id="logistics_etl.db"></a>
2025-08-17T17:26:26.6697355Z 
2025-08-17T17:26:26.6697421Z # logistics\_etl.db
2025-08-17T17:26:26.6697533Z 
2025-08-17T17:26:26.6697620Z <a id="logistics_etl.repository"></a>
2025-08-17T17:26:26.6697778Z 
2025-08-17T17:26:26.6697862Z # logistics\_etl.repository
2025-08-17T17:26:26.6697997Z 
2025-08-17T17:26:26.6698070Z <a id="alert_bot"></a>
2025-08-17T17:26:26.6698191Z 
2025-08-17T17:26:26.6698254Z # alert\_bot
2025-08-17T17:26:26.6698350Z 
2025-08-17T17:26:26.6698435Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-17T17:26:26.6698599Z 
2025-08-17T17:26:26.6698677Z # alert\_bot.tests.test\_smoke
2025-08-17T17:26:26.6698813Z 
2025-08-17T17:26:26.6698893Z <a id="alert_bot.tests"></a>
2025-08-17T17:26:26.6699027Z 
2025-08-17T17:26:26.6699093Z # alert\_bot.tests
2025-08-17T17:26:26.6699204Z 
2025-08-17T17:26:26.6699283Z <a id="alert_bot.alert_bot"></a>
2025-08-17T17:26:26.6699423Z 
2025-08-17T17:26:26.6699494Z # alert\_bot.alert\_bot
2025-08-17T17:26:26.6699619Z 
2025-08-17T17:26:26.6699694Z <a id="alert_bot.rules"></a>
2025-08-17T17:26:26.6699824Z 
2025-08-17T17:26:26.6699895Z # alert\_bot.rules
2025-08-17T17:26:26.6700000Z 
2025-08-17T17:26:26.6700065Z <a id="common"></a>
2025-08-17T17:26:26.6700171Z 
2025-08-17T17:26:26.6700238Z # common
2025-08-17T17:26:26.6700325Z 
2025-08-17T17:26:26.6700400Z <a id="common.dsn"></a>
2025-08-17T17:26:26.6700634Z 
2025-08-17T17:26:26.6700698Z # common.dsn
2025-08-17T17:26:26.6700793Z 
2025-08-17T17:26:26.6700883Z <a id="common.dsn.build_dsn"></a>
2025-08-17T17:26:26.6701028Z 
2025-08-17T17:26:26.6701097Z #### build\_dsn
2025-08-17T17:26:26.6701196Z 
2025-08-17T17:26:26.6701265Z ```python
2025-08-17T17:26:26.6701435Z def build_dsn(sync: bool = True) -> str
2025-08-17T17:26:26.6701655Z ```
2025-08-17T17:26:26.6701738Z 
2025-08-17T17:26:26.6701859Z Return a Postgres DSN, validating required variables.
2025-08-17T17:26:26.6702069Z 
2025-08-17T17:26:26.6702250Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-17T17:26:26.6702886Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-17T17:26:26.6703299Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-17T17:26:26.6703613Z missing.
2025-08-17T17:26:26.6703700Z 
2025-08-17T17:26:26.6703780Z <a id="common.models_vendor"></a>
2025-08-17T17:26:26.6703945Z 
2025-08-17T17:26:26.6704020Z # common.models\_vendor
2025-08-17T17:26:26.6704138Z 
2025-08-17T17:26:26.6704226Z <a id="common.models_vendor.Vendor"></a>
2025-08-17T17:26:26.6704401Z 
2025-08-17T17:26:26.6704466Z ## Vendor Objects
2025-08-17T17:26:26.6704571Z 
2025-08-17T17:26:26.6704636Z ```python
2025-08-17T17:26:26.6704784Z class Vendor(Base)
2025-08-17T17:26:26.6704948Z ```
2025-08-17T17:26:26.6705029Z 
2025-08-17T17:26:26.6705105Z Vendor of inventory items.
2025-08-17T17:26:26.6705237Z 
2025-08-17T17:26:26.6705339Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-17T17:26:26.6705513Z 
2025-08-17T17:26:26.6705585Z ## VendorPrice Objects
2025-08-17T17:26:26.6705704Z 
2025-08-17T17:26:26.6705764Z ```python
2025-08-17T17:26:26.6705930Z class VendorPrice(Base)
2025-08-17T17:26:26.6706100Z ```
2025-08-17T17:26:26.6706179Z 
2025-08-17T17:26:26.6706286Z Association table linking vendors to pricing.
2025-08-17T17:26:26.6706463Z 
2025-08-17T17:26:26.6706536Z <a id="common.db_url"></a>
2025-08-17T17:26:26.6706798Z 
2025-08-17T17:26:26.6729620Z # common.db\_url
2025-08-17T17:26:26.6729818Z 
2025-08-17T17:26:26.6729974Z <a id="common.db_url.build_url"></a>
2025-08-17T17:26:26.6730248Z 
2025-08-17T17:26:26.6730354Z #### build\_url
2025-08-17T17:26:26.6730538Z 
2025-08-17T17:26:26.6730647Z ```python
2025-08-17T17:26:26.6730957Z def build_url(async_: bool = True) -> str
2025-08-17T17:26:26.6731419Z ```
2025-08-17T17:26:26.6731583Z 
2025-08-17T17:26:26.6731763Z Return Postgres DSN from env or PG_* parts.
2025-08-17T17:26:26.6732101Z 
2025-08-17T17:26:26.6732243Z <a id="common.keepa"></a>
2025-08-17T17:26:26.6732710Z 
2025-08-17T17:26:26.6732849Z # common.keepa
2025-08-17T17:26:26.6733048Z 
2025-08-17T17:26:26.6733180Z <a id="common.llm"></a>
2025-08-17T17:26:26.6733414Z 
2025-08-17T17:26:26.6733534Z # common.llm
2025-08-17T17:26:26.6733715Z 
2025-08-17T17:26:26.6733860Z <a id="common.settings"></a>
2025-08-17T17:26:26.6734127Z 
2025-08-17T17:26:26.6734356Z # common.settings
2025-08-17T17:26:26.6734632Z 
2025-08-17T17:26:26.6734782Z <a id="common.db"></a>
2025-08-17T17:26:26.6735009Z 
2025-08-17T17:26:26.6735130Z # common.db
2025-08-17T17:26:26.6735303Z 
2025-08-17T17:26:26.6735463Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-17T17:26:26.6735760Z 
2025-08-17T17:26:26.6735886Z #### build\_sqlalchemy\_url
2025-08-17T17:26:26.6736123Z 
2025-08-17T17:26:26.6736235Z ```python
2025-08-17T17:26:26.6736443Z def build_sqlalchemy_url() -> str
2025-08-17T17:26:26.6736652Z ```
2025-08-17T17:26:26.6736736Z 
2025-08-17T17:26:26.6736840Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T17:26:26.6737014Z 
2025-08-17T17:26:26.6737108Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-17T17:26:26.6737281Z 
2025-08-17T17:26:26.6737355Z #### build\_asyncpg\_dsn
2025-08-17T17:26:26.6737480Z 
2025-08-17T17:26:26.6737543Z ```python
2025-08-17T17:26:26.6737724Z def build_asyncpg_dsn() -> str
2025-08-17T17:26:26.6737930Z ```
2025-08-17T17:26:26.6738014Z 
2025-08-17T17:26:26.6738143Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T17:26:26.6738546Z 
2025-08-17T17:26:26.6738646Z <a id="common.db.refresh_mvs"></a>
2025-08-17T17:26:26.6738804Z 
2025-08-17T17:26:26.6738869Z #### refresh\_mvs
2025-08-17T17:26:26.6738982Z 
2025-08-17T17:26:26.6739045Z ```python
2025-08-17T17:26:26.6739245Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T17:26:26.6739500Z ```
2025-08-17T17:26:26.6739580Z 
2025-08-17T17:26:26.6739721Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T17:26:26.6739938Z 
2025-08-17T17:26:26.6740015Z <a id="common.config"></a>
2025-08-17T17:26:26.6740151Z 
2025-08-17T17:26:26.6740217Z # common.config
2025-08-17T17:26:26.6740321Z 
2025-08-17T17:26:26.6740395Z <a id="common.base"></a>
2025-08-17T17:26:26.6740522Z 
2025-08-17T17:26:26.6740584Z # common.base
2025-08-17T17:26:26.6740678Z 
2025-08-17T17:26:26.6740763Z <a id="common.base.Base"></a>
2025-08-17T17:26:26.6740901Z 
2025-08-17T17:26:26.6740964Z ## Base Objects
2025-08-17T17:26:26.6741067Z 
2025-08-17T17:26:26.6741134Z ```python
2025-08-17T17:26:26.6741301Z class Base(DeclarativeBase)
2025-08-17T17:26:26.6741495Z ```
2025-08-17T17:26:26.6741577Z 
2025-08-17T17:26:26.6741661Z Base class for SQLAlchemy models.
2025-08-17T17:26:26.6741815Z 
2025-08-17T17:26:26.6741885Z <a id="repricer"></a>
2025-08-17T17:26:26.6742001Z 
2025-08-17T17:26:26.6742070Z # repricer
2025-08-17T17:26:26.6742159Z 
2025-08-17T17:26:26.6742244Z <a id="repricer.app.schemas"></a>
2025-08-17T17:26:26.6742589Z 
2025-08-17T17:26:26.6742697Z # repricer.app.schemas
2025-08-17T17:26:26.6742822Z 
2025-08-17T17:26:26.6742907Z <a id="repricer.app.deps"></a>
2025-08-17T17:26:26.6743055Z 
2025-08-17T17:26:26.6743127Z # repricer.app.deps
2025-08-17T17:26:26.6743238Z 
2025-08-17T17:26:26.6743360Z Placeholder module for Keepa / SP-API clients.
2025-08-17T17:26:26.6743546Z 
2025-08-17T17:26:26.6743628Z <a id="repricer.app.logic"></a>
2025-08-17T17:26:26.6743772Z 
2025-08-17T17:26:26.6743850Z # repricer.app.logic
2025-08-17T17:26:26.6744093Z 
2025-08-17T17:26:26.6744191Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-17T17:26:26.6744380Z 
2025-08-17T17:26:26.6744442Z #### MIN\_MARGIN
2025-08-17T17:26:26.6744545Z 
2025-08-17T17:26:26.6744611Z 15 % ROI
2025-08-17T17:26:26.6744698Z 
2025-08-17T17:26:26.6744800Z <a id="repricer.app.logic.compute_price"></a>
2025-08-17T17:26:26.6744980Z 
2025-08-17T17:26:26.6745054Z #### compute\_price
2025-08-17T17:26:26.6745162Z 
2025-08-17T17:26:26.6745223Z ```python
2025-08-17T17:26:26.6745472Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-17T17:26:26.6745765Z ```
2025-08-17T17:26:26.6745851Z 
2025-08-17T17:26:26.6745958Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-17T17:26:26.6746243Z Replace with real competitive logic later.
2025-08-17T17:26:26.6746413Z 
2025-08-17T17:26:26.6746495Z <a id="repricer.app.main"></a>
2025-08-17T17:26:26.6746635Z 
2025-08-17T17:26:26.6746712Z # repricer.app.main
2025-08-17T17:26:26.6746817Z 
2025-08-17T17:26:26.6746893Z <a id="repricer.app"></a>
2025-08-17T17:26:26.6747037Z 
2025-08-17T17:26:26.6747104Z # repricer.app
2025-08-17T17:26:26.6747203Z 
2025-08-17T17:26:26.6747294Z <a id="repricer.tests.test_imports"></a>
2025-08-17T17:26:26.6747465Z 
2025-08-17T17:26:26.6747547Z # repricer.tests.test\_imports
2025-08-17T17:26:26.6747683Z 
2025-08-17T17:26:26.6747778Z <a id="repricer.tests.test_smoke"></a>
2025-08-17T17:26:26.6747940Z 
2025-08-17T17:26:26.6748024Z # repricer.tests.test\_smoke
2025-08-17T17:26:26.6748170Z 
2025-08-17T17:26:26.6748251Z <a id="repricer.tests"></a>
2025-08-17T17:26:26.6748392Z 
2025-08-17T17:26:26.6748461Z # repricer.tests
2025-08-17T17:26:26.6748574Z 
2025-08-17T17:26:26.6748636Z <a id="db"></a>
2025-08-17T17:26:26.6748735Z 
2025-08-17T17:26:26.6748801Z # db
2025-08-17T17:26:26.6748883Z 
2025-08-17T17:26:26.6748958Z <a id="db.utils.views"></a>
2025-08-17T17:26:26.6749096Z 
2025-08-17T17:26:26.6749161Z # db.utils.views
2025-08-17T17:26:26.6749262Z 
2025-08-17T17:26:26.6749356Z <a id="db.utils.views.replace_view"></a>
2025-08-17T17:26:26.6749655Z 
2025-08-17T17:26:26.6749724Z #### replace\_view
2025-08-17T17:26:26.6749829Z 
2025-08-17T17:26:26.6749896Z ```python
2025-08-17T17:26:26.6750088Z def replace_view(name: str, new_sql: str) -> None
2025-08-17T17:26:26.6750338Z ```
2025-08-17T17:26:26.6750420Z 
2025-08-17T17:26:26.6750508Z Drop and recreate a SQL view atomically.
2025-08-17T17:26:26.6750676Z 
2025-08-17T17:26:26.6750744Z <a id="db.utils"></a>
2025-08-17T17:26:26.6750861Z 
2025-08-17T17:26:26.6750922Z # db.utils
2025-08-17T17:26:26.6751018Z 
2025-08-17T17:26:26.6751096Z <a id="price_importer"></a>
2025-08-17T17:26:26.6751225Z 
2025-08-17T17:26:26.6751300Z # price\_importer
2025-08-17T17:26:26.6751402Z 
2025-08-17T17:26:26.6751504Z <a id="price_importer.services_common.dsn"></a>
2025-08-17T17:26:26.6751689Z 
2025-08-17T17:26:26.6751781Z # price\_importer.services\_common.dsn
2025-08-17T17:26:26.6751941Z 
2025-08-17T17:26:26.6752064Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-17T17:26:26.6752278Z 
2025-08-17T17:26:26.6752347Z #### build\_dsn
2025-08-17T17:26:26.6752664Z 
2025-08-17T17:26:26.6752736Z ```python
2025-08-17T17:26:26.6752909Z def build_dsn(sync: bool = True) -> str
2025-08-17T17:26:26.6753126Z ```
2025-08-17T17:26:26.6753209Z 
2025-08-17T17:26:26.6753274Z Return safe DSN.
2025-08-17T17:26:26.6753383Z 
2025-08-17T17:26:26.6753732Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-17T17:26:26.6753939Z 
2025-08-17T17:26:26.6754071Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-17T17:26:26.6754283Z 
2025-08-17T17:26:26.6754394Z # price\_importer.services\_common.models\_vendor
2025-08-17T17:26:26.6754585Z 
2025-08-17T17:26:26.6754697Z <a id="price_importer.services_common.db_url"></a>
2025-08-17T17:26:26.6754883Z 
2025-08-17T17:26:26.6754977Z # price\_importer.services\_common.db\_url
2025-08-17T17:26:26.6755155Z 
2025-08-17T17:26:26.6755286Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-17T17:26:26.6755498Z 
2025-08-17T17:26:26.6755744Z #### build\_url
2025-08-17T17:26:26.6755858Z 
2025-08-17T17:26:26.6755923Z ```python
2025-08-17T17:26:26.6756111Z def build_url(async_: bool = True) -> str
2025-08-17T17:26:26.6756353Z ```
2025-08-17T17:26:26.6756434Z 
2025-08-17T17:26:26.6756537Z Return Postgres DSN from env or PG_* parts.
2025-08-17T17:26:26.6756712Z 
2025-08-17T17:26:26.6756820Z <a id="price_importer.services_common.keepa"></a>
2025-08-17T17:26:26.6757015Z 
2025-08-17T17:26:26.6757107Z # price\_importer.services\_common.keepa
2025-08-17T17:26:26.6757280Z 
2025-08-17T17:26:26.6757393Z <a id="price_importer.services_common.llm"></a>
2025-08-17T17:26:26.6757585Z 
2025-08-17T17:26:26.6757677Z # price\_importer.services\_common.llm
2025-08-17T17:26:26.6757847Z 
2025-08-17T17:26:26.6757961Z <a id="price_importer.services_common.settings"></a>
2025-08-17T17:26:26.6758155Z 
2025-08-17T17:26:26.6758250Z # price\_importer.services\_common.settings
2025-08-17T17:26:26.6758427Z 
2025-08-17T17:26:26.6758528Z <a id="price_importer.services_common.db"></a>
2025-08-17T17:26:26.6758715Z 
2025-08-17T17:26:26.6758810Z # price\_importer.services\_common.db
2025-08-17T17:26:26.6758973Z 
2025-08-17T17:26:26.6759125Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-17T17:26:26.6759372Z 
2025-08-17T17:26:26.6759451Z #### build\_sqlalchemy\_url
2025-08-17T17:26:26.6759580Z 
2025-08-17T17:26:26.6759643Z ```python
2025-08-17T17:26:26.6759821Z def build_sqlalchemy_url() -> str
2025-08-17T17:26:26.6760032Z ```
2025-08-17T17:26:26.6760117Z 
2025-08-17T17:26:26.6760212Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T17:26:26.6760381Z 
2025-08-17T17:26:26.6760530Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-17T17:26:26.6760760Z 
2025-08-17T17:26:26.6760834Z #### build\_asyncpg\_dsn
2025-08-17T17:26:26.6760964Z 
2025-08-17T17:26:26.6761025Z ```python
2025-08-17T17:26:26.6761193Z def build_asyncpg_dsn() -> str
2025-08-17T17:26:26.6761395Z ```
2025-08-17T17:26:26.6761479Z 
2025-08-17T17:26:26.6761615Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T17:26:26.6761946Z 
2025-08-17T17:26:26.6762075Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-17T17:26:26.6762291Z 
2025-08-17T17:26:26.6762358Z #### refresh\_mvs
2025-08-17T17:26:26.6762577Z 
2025-08-17T17:26:26.6762641Z ```python
2025-08-17T17:26:26.6762843Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T17:26:26.6763089Z ```
2025-08-17T17:26:26.6763179Z 
2025-08-17T17:26:26.6763313Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T17:26:26.6763528Z 
2025-08-17T17:26:26.6763633Z <a id="price_importer.services_common"></a>
2025-08-17T17:26:26.6763804Z 
2025-08-17T17:26:26.6763892Z # price\_importer.services\_common
2025-08-17T17:26:26.6764049Z 
2025-08-17T17:26:26.6764152Z <a id="price_importer.services_common.base"></a>
2025-08-17T17:26:26.6764335Z 
2025-08-17T17:26:26.6764424Z # price\_importer.services\_common.base
2025-08-17T17:26:26.6764592Z 
2025-08-17T17:26:26.6764680Z <a id="price_importer.normaliser"></a>
2025-08-17T17:26:26.6764853Z 
2025-08-17T17:26:26.6764941Z # price\_importer.normaliser
2025-08-17T17:26:26.6765077Z 
2025-08-17T17:26:26.6765181Z <a id="price_importer.common.models_vendor"></a>
2025-08-17T17:26:26.6765368Z 
2025-08-17T17:26:26.6765455Z # price\_importer.common.models\_vendor
2025-08-17T17:26:26.6765621Z 
2025-08-17T17:26:26.6765709Z <a id="price_importer.common.db_url"></a>
2025-08-17T17:26:26.6765886Z 
2025-08-17T17:26:26.6765969Z # price\_importer.common.db\_url
2025-08-17T17:26:26.6766116Z 
2025-08-17T17:26:26.6766226Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-17T17:26:26.6766408Z 
2025-08-17T17:26:26.6766471Z #### make\_dsn
2025-08-17T17:26:26.6766575Z 
2025-08-17T17:26:26.6766638Z ```python
2025-08-17T17:26:26.6766805Z def make_dsn(async_: bool = False) -> str
2025-08-17T17:26:26.6767031Z ```
2025-08-17T17:26:26.6767112Z 
2025-08-17T17:26:26.6767233Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-17T17:26:26.6767432Z 
2025-08-17T17:26:26.6767658Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-17T17:26:26.6767851Z 
2025-08-17T17:26:26.6767920Z #### build\_url
2025-08-17T17:26:26.6768020Z 
2025-08-17T17:26:26.6768080Z ```python
2025-08-17T17:26:26.6768255Z def build_url(async_: bool = False) -> str
2025-08-17T17:26:26.6768475Z ```
2025-08-17T17:26:26.6768560Z 
2025-08-17T17:26:26.6768679Z Return Postgres DSN built from environment variables.
2025-08-17T17:26:26.6768880Z 
2025-08-17T17:26:26.6768974Z <a id="price_importer.common"></a>
2025-08-17T17:26:26.6769128Z 
2025-08-17T17:26:26.6769204Z # price\_importer.common
2025-08-17T17:26:26.6769336Z 
2025-08-17T17:26:26.6769424Z <a id="price_importer.common.base"></a>
2025-08-17T17:26:26.6769588Z 
2025-08-17T17:26:26.6769670Z # price\_importer.common.base
2025-08-17T17:26:26.6769817Z 
2025-08-17T17:26:26.6769912Z <a id="price_importer.tests.conftest"></a>
2025-08-17T17:26:26.6770083Z 
2025-08-17T17:26:26.6770174Z # price\_importer.tests.conftest
2025-08-17T17:26:26.6770320Z 
2025-08-17T17:26:26.6770424Z <a id="price_importer.tests.test_reader"></a>
2025-08-17T17:26:26.6770611Z 
2025-08-17T17:26:26.6770701Z # price\_importer.tests.test\_reader
2025-08-17T17:26:26.6770859Z 
2025-08-17T17:26:26.6770960Z <a id="price_importer.tests.test_imports"></a>
2025-08-17T17:26:26.6771145Z 
2025-08-17T17:26:26.6771237Z # price\_importer.tests.test\_imports
2025-08-17T17:26:26.6771395Z 
2025-08-17T17:26:26.6771497Z <a id="price_importer.tests.test_smoke"></a>
2025-08-17T17:26:26.6771668Z 
2025-08-17T17:26:26.6771752Z # price\_importer.tests.test\_smoke
2025-08-17T17:26:26.6771910Z 
2025-08-17T17:26:26.6772015Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-17T17:26:26.6772198Z 
2025-08-17T17:26:26.6772289Z # price\_importer.tests.test\_normaliser
2025-08-17T17:26:26.6772658Z 
2025-08-17T17:26:26.6772746Z <a id="price_importer.tests"></a>
2025-08-17T17:26:26.6772897Z 
2025-08-17T17:26:26.6772977Z # price\_importer.tests
2025-08-17T17:26:26.6773099Z 
2025-08-17T17:26:26.6773185Z <a id="price_importer.reader"></a>
2025-08-17T17:26:26.6773567Z 
2025-08-17T17:26:26.6773645Z # price\_importer.reader
2025-08-17T17:26:26.6773769Z 
2025-08-17T17:26:26.6773858Z <a id="price_importer.repository"></a>
2025-08-17T17:26:26.6774031Z 
2025-08-17T17:26:26.6774116Z # price\_importer.repository
2025-08-17T17:26:26.6774257Z 
2025-08-17T17:26:26.6774346Z <a id="price_importer.import"></a>
2025-08-17T17:26:26.6774495Z 
2025-08-17T17:26:26.6774573Z # price\_importer.import
2025-08-17T17:26:26.6774700Z 
2025-08-17T17:26:26.6774777Z <a id="fees_h10"></a>
2025-08-17T17:26:26.6774888Z 
2025-08-17T17:26:26.6774952Z # fees\_h10
2025-08-17T17:26:26.6775050Z 
2025-08-17T17:26:26.6775123Z <a id="fees_h10.worker"></a>
2025-08-17T17:26:26.6775255Z 
2025-08-17T17:26:26.6775324Z # fees\_h10.worker
2025-08-17T17:26:26.6775429Z 
2025-08-17T17:26:26.6775525Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-17T17:26:26.6775700Z 
2025-08-17T17:26:26.6775777Z #### list\_active\_asins
2025-08-17T17:26:26.6775896Z 
2025-08-17T17:26:26.6775966Z ```python
2025-08-17T17:26:26.6776144Z def list_active_asins() -> list[str]
2025-08-17T17:26:26.6776350Z ```
2025-08-17T17:26:26.6776438Z 
2025-08-17T17:26:26.6776551Z Return known ASINs or an empty list if unavailable.
2025-08-17T17:26:26.6776744Z 
2025-08-17T17:26:26.6776833Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-17T17:26:26.6776988Z 
2025-08-17T17:26:26.6777067Z # fees\_h10.tests.test\_smoke
2025-08-17T17:26:26.6777205Z 
2025-08-17T17:26:26.6777286Z <a id="fees_h10.tests"></a>
2025-08-17T17:26:26.6777414Z 
2025-08-17T17:26:26.6777479Z # fees\_h10.tests
2025-08-17T17:26:26.6777587Z 
2025-08-17T17:26:26.6777661Z <a id="fees_h10.client"></a>
2025-08-17T17:26:26.6777790Z 
2025-08-17T17:26:26.6777860Z # fees\_h10.client
2025-08-17T17:26:26.6777963Z 
2025-08-17T17:26:26.6778042Z <a id="fees_h10.repository"></a>
2025-08-17T17:26:26.6778184Z 
2025-08-17T17:26:26.6778261Z # fees\_h10.repository
2025-08-17T17:26:26.6778374Z 
2025-08-17T17:26:26.6778443Z <a id="emailer"></a>
2025-08-17T17:26:26.6778674Z 
2025-08-17T17:26:26.6778741Z # emailer
2025-08-17T17:26:26.6778828Z 
2025-08-17T17:26:26.6778928Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-17T17:26:26.6779141Z 
2025-08-17T17:26:26.6779231Z # emailer.tests.test\_import\_emailer
2025-08-17T17:26:26.6779391Z 
2025-08-17T17:26:26.6779486Z <a id="emailer.tests.test_smoke"></a>
2025-08-17T17:26:26.6779639Z 
2025-08-17T17:26:26.6779717Z # emailer.tests.test\_smoke
2025-08-17T17:26:26.6779859Z 
2025-08-17T17:26:26.6779937Z <a id="emailer.tests"></a>
2025-08-17T17:26:26.6780067Z 
2025-08-17T17:26:26.6780132Z # emailer.tests
2025-08-17T17:26:26.6780241Z 
2025-08-17T17:26:26.6780324Z <a id="emailer.generate_body"></a>
2025-08-17T17:26:26.6780475Z 
2025-08-17T17:26:26.6780561Z # emailer.generate\_body
2025-08-17T17:26:26.6780686Z 
2025-08-17T17:26:26.6780757Z <a id="llm_server"></a>
2025-08-17T17:26:26.6780885Z 
2025-08-17T17:26:26.6780948Z # llm\_server
2025-08-17T17:26:26.6781043Z 
2025-08-17T17:26:26.6781118Z <a id="llm_server.app"></a>
2025-08-17T17:26:26.6781258Z 
2025-08-17T17:26:26.6781334Z # llm\_server.app
2025-08-17T17:26:26.6781438Z 
