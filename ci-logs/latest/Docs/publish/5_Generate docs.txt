2025-08-17T17:06:23.6938666Z ##[group]Run pydoc-markdown
2025-08-17T17:06:23.6938961Z [36;1mpydoc-markdown[0m
2025-08-17T17:06:23.6980041Z shell: /usr/bin/bash -e {0}
2025-08-17T17:06:23.6980283Z env:
2025-08-17T17:06:23.6980527Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T17:06:23.6980928Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-17T17:06:23.6981313Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T17:06:23.6981660Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T17:06:23.6982000Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T17:06:23.6982340Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-17T17:06:23.6982624Z ##[endgroup]
2025-08-17T17:06:24.0462582Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-17T17:06:24.0463460Z Unknown key(s) "{'output_directory'}" at:
2025-08-17T17:06:24.0464224Z In "pydoc-markdown.yml"
2025-08-17T17:06:24.0464697Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-17T17:06:24.0465374Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-17T17:06:24.0466155Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-17T17:06:24.0466688Z 
2025-08-17T17:06:24.3010816Z <a id="__init__"></a>
2025-08-17T17:06:24.3011342Z 
2025-08-17T17:06:24.3011500Z # \_\_init\_\_
2025-08-17T17:06:24.3011746Z 
2025-08-17T17:06:24.3011896Z <a id="api"></a>
2025-08-17T17:06:24.3012133Z 
2025-08-17T17:06:24.3012268Z # api
2025-08-17T17:06:24.3012467Z 
2025-08-17T17:06:24.3012652Z <a id="api.tests.test_llm"></a>
2025-08-17T17:06:24.3012971Z 
2025-08-17T17:06:24.3013141Z # api.tests.test\_llm
2025-08-17T17:06:24.3013407Z 
2025-08-17T17:06:24.3013836Z <a id="api.tests.test_imports"></a>
2025-08-17T17:06:24.3014202Z 
2025-08-17T17:06:24.3014376Z # api.tests.test\_imports
2025-08-17T17:06:24.3014656Z 
2025-08-17T17:06:24.3014835Z <a id="api.tests.test_entrypoint"></a>
2025-08-17T17:06:24.3015501Z 
2025-08-17T17:06:24.3015644Z # api.tests.test\_entrypoint
2025-08-17T17:06:24.3015899Z 
2025-08-17T17:06:24.3016051Z <a id="api.tests.test_health"></a>
2025-08-17T17:06:24.3016313Z 
2025-08-17T17:06:24.3016445Z # api.tests.test\_health
2025-08-17T17:06:24.3016674Z 
2025-08-17T17:06:24.3016818Z <a id="api.migrations.env"></a>
2025-08-17T17:06:24.3017049Z 
2025-08-17T17:06:24.3017132Z # api.migrations.env
2025-08-17T17:06:24.3017278Z 
2025-08-17T17:06:24.3017409Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-17T17:06:24.3017636Z 
2025-08-17T17:06:24.3017761Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-17T17:06:24.3017969Z 
2025-08-17T17:06:24.3018089Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-17T17:06:24.3018308Z 
2025-08-17T17:06:24.3018412Z # api.migrations.versions.0004\_fee\_cron
2025-08-17T17:06:24.3018607Z 
2025-08-17T17:06:24.3018774Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-17T17:06:24.3019036Z 
2025-08-17T17:06:24.3019226Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-17T17:06:24.3019464Z 
2025-08-17T17:06:24.3019605Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-17T17:06:24.3019818Z 
2025-08-17T17:06:24.3019935Z # api.migrations.versions.0003\_vendor\_prices
2025-08-17T17:06:24.3020141Z 
2025-08-17T17:06:24.3020266Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-17T17:06:24.3020477Z 
2025-08-17T17:06:24.3020585Z # api.migrations.versions.0024\_create\_buybox
2025-08-17T17:06:24.3020790Z 
2025-08-17T17:06:24.3020923Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-17T17:06:24.3021146Z 
2025-08-17T17:06:24.3021268Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-17T17:06:24.3021469Z 
2025-08-17T17:06:24.3021593Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-17T17:06:24.3021810Z 
2025-08-17T17:06:24.3021923Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-17T17:06:24.3022119Z 
2025-08-17T17:06:24.3022256Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-17T17:06:24.3022728Z 
2025-08-17T17:06:24.3022843Z # api.migrations.versions.0020\_unified\_schema
2025-08-17T17:06:24.3023039Z 
2025-08-17T17:06:24.3023178Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-17T17:06:24.3023395Z 
2025-08-17T17:06:24.3023508Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-17T17:06:24.3023874Z 
2025-08-17T17:06:24.3023991Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-17T17:06:24.3024193Z 
2025-08-17T17:06:24.3024299Z # api.migrations.versions.0001\_baseline
2025-08-17T17:06:24.3024480Z 
2025-08-17T17:06:24.3024575Z <a id="api.migrations.versions"></a>
2025-08-17T17:06:24.3024750Z 
2025-08-17T17:06:24.3024846Z # api.migrations.versions
2025-08-17T17:06:24.3024985Z 
2025-08-17T17:06:24.3025068Z <a id="api.migrations"></a>
2025-08-17T17:06:24.3025213Z 
2025-08-17T17:06:24.3025289Z # api.migrations
2025-08-17T17:06:24.3025406Z 
2025-08-17T17:06:24.3025485Z <a id="api.db"></a>
2025-08-17T17:06:24.3025608Z 
2025-08-17T17:06:24.3025682Z # api.db
2025-08-17T17:06:24.3025776Z 
2025-08-17T17:06:24.3025870Z <a id="api.routes.stats"></a>
2025-08-17T17:06:24.3026016Z 
2025-08-17T17:06:24.3026090Z # api.routes.stats
2025-08-17T17:06:24.3026214Z 
2025-08-17T17:06:24.3026305Z <a id="api.routes.stats.kpi"></a>
2025-08-17T17:06:24.3026467Z 
2025-08-17T17:06:24.3026535Z #### kpi
2025-08-17T17:06:24.3026631Z 
2025-08-17T17:06:24.3026699Z ```python
2025-08-17T17:06:24.3026877Z @router.get("/stats/kpi")
2025-08-17T17:06:24.3027119Z def kpi() -> List[Dict[str, int]]
2025-08-17T17:06:24.3027333Z ```
2025-08-17T17:06:24.3027421Z 
2025-08-17T17:06:24.3027504Z Return KPI metrics (mock).
2025-08-17T17:06:24.3027642Z 
2025-08-17T17:06:24.3027746Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-17T17:06:24.3027928Z 
2025-08-17T17:06:24.3028000Z #### roi\_by\_vendor
2025-08-17T17:06:24.3028121Z 
2025-08-17T17:06:24.3028188Z ```python
2025-08-17T17:06:24.3028371Z @router.get("/stats/roi_by_vendor")
2025-08-17T17:06:24.3028765Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-17T17:06:24.3029004Z ```
2025-08-17T17:06:24.3029087Z 
2025-08-17T17:06:24.3029169Z Return ROI percent by vendor.
2025-08-17T17:06:24.3029314Z 
2025-08-17T17:06:24.3029407Z <a id="api.routes.stats.roi_trend"></a>
2025-08-17T17:06:24.3029575Z 
2025-08-17T17:06:24.3029644Z #### roi\_trend
2025-08-17T17:06:24.3029752Z 
2025-08-17T17:06:24.3029818Z ```python
2025-08-17T17:06:24.3029993Z @router.get("/stats/roi_trend")
2025-08-17T17:06:24.3030228Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-17T17:06:24.3030473Z ```
2025-08-17T17:06:24.3030556Z 
2025-08-17T17:06:24.3030632Z Return 30-day ROI trend.
2025-08-17T17:06:24.3030765Z 
2025-08-17T17:06:24.3030846Z <a id="api.routes.roi"></a>
2025-08-17T17:06:24.3030979Z 
2025-08-17T17:06:24.3031053Z # api.routes.roi
2025-08-17T17:06:24.3031186Z 
2025-08-17T17:06:24.3031273Z <a id="api.routes.health"></a>
2025-08-17T17:06:24.3031494Z 
2025-08-17T17:06:24.3031569Z # api.routes.health
2025-08-17T17:06:24.3031688Z 
2025-08-17T17:06:24.3031788Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-17T17:06:24.3031960Z 
2025-08-17T17:06:24.3032027Z #### MAX\_SKEW
2025-08-17T17:06:24.3032127Z 
2025-08-17T17:06:24.3032203Z seconds
2025-08-17T17:06:24.3032293Z 
2025-08-17T17:06:24.3032387Z <a id="api.routes.health.health"></a>
2025-08-17T17:06:24.3032556Z 
2025-08-17T17:06:24.3032623Z #### health
2025-08-17T17:06:24.3032715Z 
2025-08-17T17:06:24.3032783Z ```python
2025-08-17T17:06:24.3032985Z @router.get("/health", include_in_schema=False)
2025-08-17T17:06:24.3033372Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-17T17:06:24.3033888Z ```
2025-08-17T17:06:24.3033975Z 
2025-08-17T17:06:24.3034098Z Return 200 when DB reachable and clocks are in sync.
2025-08-17T17:06:24.3034297Z 
2025-08-17T17:06:24.3034388Z <a id="api.routes.repository"></a>
2025-08-17T17:06:24.3034554Z 
2025-08-17T17:06:24.3034635Z # api.routes.repository
2025-08-17T17:06:24.3034759Z 
2025-08-17T17:06:24.3034841Z <a id="api.routes"></a>
2025-08-17T17:06:24.3035173Z 
2025-08-17T17:06:24.3035277Z # api.routes
2025-08-17T17:06:24.3035377Z 
2025-08-17T17:06:24.3035462Z <a id="api.models.fee"></a>
2025-08-17T17:06:24.3035598Z 
2025-08-17T17:06:24.3035667Z # api.models.fee
2025-08-17T17:06:24.3035779Z 
2025-08-17T17:06:24.3035854Z <a id="api.models"></a>
2025-08-17T17:06:24.3035972Z 
2025-08-17T17:06:24.3036038Z # api.models
2025-08-17T17:06:24.3036139Z 
2025-08-17T17:06:24.3036221Z <a id="api.roi_repository"></a>
2025-08-17T17:06:24.3036365Z 
2025-08-17T17:06:24.3036445Z # api.roi\_repository
2025-08-17T17:06:24.3036563Z 
2025-08-17T17:06:24.3036635Z <a id="api.main"></a>
2025-08-17T17:06:24.3036750Z 
2025-08-17T17:06:24.3036824Z # api.main
2025-08-17T17:06:24.3036918Z 
2025-08-17T17:06:24.3036997Z <a id="api.main.ready"></a>
2025-08-17T17:06:24.3037134Z 
2025-08-17T17:06:24.3037198Z #### ready
2025-08-17T17:06:24.3037288Z 
2025-08-17T17:06:24.3037359Z ```python
2025-08-17T17:06:24.3037621Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-17T17:06:24.3038065Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-17T17:06:24.3038428Z                                                                       str]
2025-08-17T17:06:24.3038677Z ```
2025-08-17T17:06:24.3038764Z 
2025-08-17T17:06:24.3038866Z Return 200 only when migrations are at head.
2025-08-17T17:06:24.3039052Z 
2025-08-17T17:06:24.3039130Z <a id="api.config"></a>
2025-08-17T17:06:24.3039256Z 
2025-08-17T17:06:24.3039343Z # api.config
2025-08-17T17:06:24.3039451Z 
2025-08-17T17:06:24.3039520Z <a id="etl"></a>
2025-08-17T17:06:24.3039627Z 
2025-08-17T17:06:24.3039697Z # etl
2025-08-17T17:06:24.3039788Z 
2025-08-17T17:06:24.3039871Z <a id="etl.fba_fee_ingestor"></a>
2025-08-17T17:06:24.3040023Z 
2025-08-17T17:06:24.3040109Z # etl.fba\_fee\_ingestor
2025-08-17T17:06:24.3040236Z 
2025-08-17T17:06:24.3040318Z <a id="etl.sp_fees_ingestor"></a>
2025-08-17T17:06:24.3040475Z 
2025-08-17T17:06:24.3040550Z # etl.sp\_fees\_ingestor
2025-08-17T17:06:24.3040800Z 
2025-08-17T17:06:24.3040892Z <a id="etl.keepa_ingestor"></a>
2025-08-17T17:06:24.3041035Z 
2025-08-17T17:06:24.3041109Z # etl.keepa\_ingestor
2025-08-17T17:06:24.3041227Z 
2025-08-17T17:06:24.3041303Z <a id="etl.db"></a>
2025-08-17T17:06:24.3041412Z 
2025-08-17T17:06:24.3041477Z # etl.db
2025-08-17T17:06:24.3041573Z 
2025-08-17T17:06:24.3041658Z <a id="etl.dialects.schemas"></a>
2025-08-17T17:06:24.3041808Z 
2025-08-17T17:06:24.3041887Z # etl.dialects.schemas
2025-08-17T17:06:24.3042013Z 
2025-08-17T17:06:24.3042120Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-17T17:06:24.3042311Z 
2025-08-17T17:06:24.3042409Z # etl.dialects.amazon\_reimbursements
2025-08-17T17:06:24.3042572Z 
2025-08-17T17:06:24.3042664Z <a id="etl.dialects.amazon_returns"></a>
2025-08-17T17:06:24.3042841Z 
2025-08-17T17:06:24.3042925Z # etl.dialects.amazon\_returns
2025-08-17T17:06:24.3043066Z 
2025-08-17T17:06:24.3043144Z <a id="etl.dialects"></a>
2025-08-17T17:06:24.3043276Z 
2025-08-17T17:06:24.3043351Z # etl.dialects
2025-08-17T17:06:24.3043458Z 
2025-08-17T17:06:24.3043534Z <a id="ingest"></a>
2025-08-17T17:06:24.3043759Z 
2025-08-17T17:06:24.3043826Z # ingest
2025-08-17T17:06:24.3043921Z 
2025-08-17T17:06:24.3044007Z <a id="ingest.copy_loader"></a>
2025-08-17T17:06:24.3044150Z 
2025-08-17T17:06:24.3044224Z # ingest.copy\_loader
2025-08-17T17:06:24.3044347Z 
2025-08-17T17:06:24.3044450Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-17T17:06:24.3044633Z 
2025-08-17T17:06:24.3044720Z #### copy\_df\_via\_temp
2025-08-17T17:06:24.3044844Z 
2025-08-17T17:06:24.3044913Z ```python
2025-08-17T17:06:24.3045099Z def copy_df_via_temp(engine: Engine,
2025-08-17T17:06:24.3045350Z                      df: pd.DataFrame,
2025-08-17T17:06:24.3045600Z                      target_table: str,
2025-08-17T17:06:24.3045822Z                      *,
2025-08-17T17:06:24.3046040Z                      target_schema: Optional[str] = None,
2025-08-17T17:06:24.3046312Z                      columns: Sequence[str],
2025-08-17T17:06:24.3046720Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-17T17:06:24.3047026Z                      analyze_after: bool = False) -> int
2025-08-17T17:06:24.3047264Z ```
2025-08-17T17:06:24.3047349Z 
2025-08-17T17:06:24.3047514Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-17T17:06:24.3047749Z 
2025-08-17T17:06:24.3047926Z The dataframe is first written to a TEMP table created ``LIKE`` the target
2025-08-17T17:06:24.3048373Z including defaults and generated columns.  Data is streamed via ``COPY`` and
2025-08-17T17:06:24.3048821Z then inserted into the final table.  If ``conflict_cols`` is provided an
2025-08-17T17:06:24.3049228Z ``INSERT ... ON CONFLICT DO UPDATE`` is issued for the non-conflicting
2025-08-17T17:06:24.3049574Z columns, otherwise rows are simply appended.
2025-08-17T17:06:24.3049754Z 
2025-08-17T17:06:24.3049860Z Returns the number of rows provided in ``df``.
2025-08-17T17:06:24.3050050Z 
2025-08-17T17:06:24.3050145Z <a id="ingest.tests.test_smoke"></a>
2025-08-17T17:06:24.3050310Z 
2025-08-17T17:06:24.3050400Z # ingest.tests.test\_smoke
2025-08-17T17:06:24.3050533Z 
2025-08-17T17:06:24.3050611Z <a id="ingest.tests"></a>
2025-08-17T17:06:24.3050739Z 
2025-08-17T17:06:24.3050815Z # ingest.tests
2025-08-17T17:06:24.3050919Z 
2025-08-17T17:06:24.3051005Z <a id="ingest.upload_router"></a>
2025-08-17T17:06:24.3051161Z 
2025-08-17T17:06:24.3051237Z # ingest.upload\_router
2025-08-17T17:06:24.3051360Z 
2025-08-17T17:06:24.3051444Z <a id="ingest.email_watcher"></a>
2025-08-17T17:06:24.3051596Z 
2025-08-17T17:06:24.3051676Z # ingest.email\_watcher
2025-08-17T17:06:24.3051797Z 
2025-08-17T17:06:24.3051896Z <a id="ingest.email_watcher.main"></a>
2025-08-17T17:06:24.3052057Z 
2025-08-17T17:06:24.3052123Z #### main
2025-08-17T17:06:24.3052223Z 
2025-08-17T17:06:24.3052289Z ```python
2025-08-17T17:06:24.3052460Z def main() -> dict[str, str]
2025-08-17T17:06:24.3052663Z ```
2025-08-17T17:06:24.3052749Z 
2025-08-17T17:06:24.3053010Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-17T17:06:24.3053251Z 
2025-08-17T17:06:24.3053380Z Returns {"status": "success"} when processing completes.
2025-08-17T17:06:24.3053590Z 
2025-08-17T17:06:24.3053833Z <a id="ingest.tasks"></a>
2025-08-17T17:06:24.3053965Z 
2025-08-17T17:06:24.3054036Z # ingest.tasks
2025-08-17T17:06:24.3054143Z 
2025-08-17T17:06:24.3054240Z <a id="ingest.tasks.task_import_file"></a>
2025-08-17T17:06:24.3054416Z 
2025-08-17T17:06:24.3054497Z #### task\_import\_file
2025-08-17T17:06:24.3054617Z 
2025-08-17T17:06:24.3054683Z ```python
2025-08-17T17:06:24.3054899Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-17T17:06:24.3055188Z def task_import_file(self,
2025-08-17T17:06:24.3055395Z                      uri: str,
2025-08-17T17:06:24.3055645Z                      report_type: Optional[str] = None) -> Dict[str, Any]
2025-08-17T17:06:24.3055919Z ```
2025-08-17T17:06:24.3056003Z 
2025-08-17T17:06:24.3056133Z Import a file into Postgres using existing ETL pipeline.
2025-08-17T17:06:24.3056361Z 
2025-08-17T17:06:24.3056443Z <a id="ingest.celery_app"></a>
2025-08-17T17:06:24.3056584Z 
2025-08-17T17:06:24.3056663Z # ingest.celery\_app
2025-08-17T17:06:24.3056779Z 
2025-08-17T17:06:24.3056863Z <a id="ingest.ingest_router"></a>
2025-08-17T17:06:24.3057017Z 
2025-08-17T17:06:24.3057092Z # ingest.ingest\_router
2025-08-17T17:06:24.3057209Z 
2025-08-17T17:06:24.3057287Z <a id="logistics_etl"></a>
2025-08-17T17:06:24.3057423Z 
2025-08-17T17:06:24.3057492Z # logistics\_etl
2025-08-17T17:06:24.3057598Z 
2025-08-17T17:06:24.3057685Z Daily logistics ETL job.
2025-08-17T17:06:24.3057809Z 
2025-08-17T17:06:24.3057892Z <a id="logistics_etl.__main__"></a>
2025-08-17T17:06:24.3058051Z 
2025-08-17T17:06:24.3058133Z # logistics\_etl.\_\_main\_\_
2025-08-17T17:06:24.3058270Z 
2025-08-17T17:06:24.3058352Z <a id="logistics_etl.dsn"></a>
2025-08-17T17:06:24.3058494Z 
2025-08-17T17:06:24.3058568Z # logistics\_etl.dsn
2025-08-17T17:06:24.3058681Z 
2025-08-17T17:06:24.3058808Z Local DSN builder to avoid cross-service dependency.
2025-08-17T17:06:24.3059153Z 
2025-08-17T17:06:24.3059245Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-17T17:06:24.3059409Z 
2025-08-17T17:06:24.3059483Z #### build\_dsn
2025-08-17T17:06:24.3059587Z 
2025-08-17T17:06:24.3059652Z ```python
2025-08-17T17:06:24.3059837Z def build_dsn(sync: bool = True) -> str
2025-08-17T17:06:24.3060061Z ```
2025-08-17T17:06:24.3060153Z 
2025-08-17T17:06:24.3060291Z Return a Postgres DSN assembled from environment variables.
2025-08-17T17:06:24.3060513Z 
2025-08-17T17:06:24.3060668Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-17T17:06:24.3061052Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-17T17:06:24.3061399Z error when any required variable is missing.
2025-08-17T17:06:24.3061575Z 
2025-08-17T17:06:24.3061672Z <a id="logistics_etl.tests.conftest"></a>
2025-08-17T17:06:24.3061849Z 
2025-08-17T17:06:24.3061936Z # logistics\_etl.tests.conftest
2025-08-17T17:06:24.3062088Z 
2025-08-17T17:06:24.3062203Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-17T17:06:24.3062388Z 
2025-08-17T17:06:24.3062479Z # logistics\_etl.tests.test\_repository
2025-08-17T17:06:24.3062648Z 
2025-08-17T17:06:24.3062741Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-17T17:06:24.3062911Z 
2025-08-17T17:06:24.3062995Z # logistics\_etl.tests.test\_cron
2025-08-17T17:06:24.3063164Z 
2025-08-17T17:06:24.3063271Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-17T17:06:24.3063449Z 
2025-08-17T17:06:24.3063534Z # logistics\_etl.tests.test\_imports
2025-08-17T17:06:24.3063803Z 
2025-08-17T17:06:24.3063904Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-17T17:06:24.3064077Z 
2025-08-17T17:06:24.3064162Z # logistics\_etl.tests.test\_smoke
2025-08-17T17:06:24.3064323Z 
2025-08-17T17:06:24.3064420Z <a id="logistics_etl.tests.test_client"></a>
2025-08-17T17:06:24.3064594Z 
2025-08-17T17:06:24.3064685Z # logistics\_etl.tests.test\_client
2025-08-17T17:06:24.3064841Z 
2025-08-17T17:06:24.3065133Z <a id="logistics_etl.tests"></a>
2025-08-17T17:06:24.3065292Z 
2025-08-17T17:06:24.3065372Z # logistics\_etl.tests
2025-08-17T17:06:24.3065493Z 
2025-08-17T17:06:24.3065572Z <a id="logistics_etl.flow"></a>
2025-08-17T17:06:24.3065719Z 
2025-08-17T17:06:24.3065792Z # logistics\_etl.flow
2025-08-17T17:06:24.3065912Z 
2025-08-17T17:06:24.3066001Z <a id="logistics_etl.client"></a>
2025-08-17T17:06:24.3066150Z 
2025-08-17T17:06:24.3066226Z # logistics\_etl.client
2025-08-17T17:06:24.3066348Z 
2025-08-17T17:06:24.3066436Z <a id="logistics_etl.cron"></a>
2025-08-17T17:06:24.3066574Z 
2025-08-17T17:06:24.3066647Z # logistics\_etl.cron
2025-08-17T17:06:24.3066769Z 
2025-08-17T17:06:24.3066850Z <a id="logistics_etl.db"></a>
2025-08-17T17:06:24.3066992Z 
2025-08-17T17:06:24.3067063Z # logistics\_etl.db
2025-08-17T17:06:24.3067182Z 
2025-08-17T17:06:24.3067270Z <a id="logistics_etl.repository"></a>
2025-08-17T17:06:24.3067429Z 
2025-08-17T17:06:24.3067518Z # logistics\_etl.repository
2025-08-17T17:06:24.3067658Z 
2025-08-17T17:06:24.3067733Z <a id="alert_bot"></a>
2025-08-17T17:06:24.3067854Z 
2025-08-17T17:06:24.3067923Z # alert\_bot
2025-08-17T17:06:24.3068020Z 
2025-08-17T17:06:24.3068107Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-17T17:06:24.3068274Z 
2025-08-17T17:06:24.3068357Z # alert\_bot.tests.test\_smoke
2025-08-17T17:06:24.3068497Z 
2025-08-17T17:06:24.3068580Z <a id="alert_bot.tests"></a>
2025-08-17T17:06:24.3068716Z 
2025-08-17T17:06:24.3068787Z # alert\_bot.tests
2025-08-17T17:06:24.3068902Z 
2025-08-17T17:06:24.3068983Z <a id="alert_bot.alert_bot"></a>
2025-08-17T17:06:24.3069125Z 
2025-08-17T17:06:24.3069199Z # alert\_bot.alert\_bot
2025-08-17T17:06:24.3069325Z 
2025-08-17T17:06:24.3069403Z <a id="alert_bot.rules"></a>
2025-08-17T17:06:24.3069533Z 
2025-08-17T17:06:24.3069607Z # alert\_bot.rules
2025-08-17T17:06:24.3069714Z 
2025-08-17T17:06:24.3069782Z <a id="common"></a>
2025-08-17T17:06:24.3069890Z 
2025-08-17T17:06:24.3069961Z # common
2025-08-17T17:06:24.3070051Z 
2025-08-17T17:06:24.3070129Z <a id="common.dsn"></a>
2025-08-17T17:06:24.3070373Z 
2025-08-17T17:06:24.3070444Z # common.dsn
2025-08-17T17:06:24.3070546Z 
2025-08-17T17:06:24.3070739Z <a id="common.dsn.build_dsn"></a>
2025-08-17T17:06:24.3071009Z 
2025-08-17T17:06:24.3071122Z #### build\_dsn
2025-08-17T17:06:24.3071301Z 
2025-08-17T17:06:24.3071410Z ```python
2025-08-17T17:06:24.3071705Z def build_dsn(sync: bool = True) -> str
2025-08-17T17:06:24.3072012Z ```
2025-08-17T17:06:24.3072102Z 
2025-08-17T17:06:24.3072226Z Return a Postgres DSN, validating required variables.
2025-08-17T17:06:24.3072439Z 
2025-08-17T17:06:24.3072623Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-17T17:06:24.3073066Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-17T17:06:24.3073480Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-17T17:06:24.3073942Z missing.
2025-08-17T17:06:24.3074035Z 
2025-08-17T17:06:24.3074122Z <a id="common.models_vendor"></a>
2025-08-17T17:06:24.3074289Z 
2025-08-17T17:06:24.3074367Z # common.models\_vendor
2025-08-17T17:06:24.3074486Z 
2025-08-17T17:06:24.3074581Z <a id="common.models_vendor.Vendor"></a>
2025-08-17T17:06:24.3074747Z 
2025-08-17T17:06:24.3074816Z ## Vendor Objects
2025-08-17T17:06:24.3074928Z 
2025-08-17T17:06:24.3074994Z ```python
2025-08-17T17:06:24.3075153Z class Vendor(Base)
2025-08-17T17:06:24.3075325Z ```
2025-08-17T17:06:24.3075410Z 
2025-08-17T17:06:24.3075492Z Vendor of inventory items.
2025-08-17T17:06:24.3075632Z 
2025-08-17T17:06:24.3075736Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-17T17:06:24.3075916Z 
2025-08-17T17:06:24.3075998Z ## VendorPrice Objects
2025-08-17T17:06:24.3076115Z 
2025-08-17T17:06:24.3076181Z ```python
2025-08-17T17:06:24.3076353Z class VendorPrice(Base)
2025-08-17T17:06:24.3076535Z ```
2025-08-17T17:06:24.3076625Z 
2025-08-17T17:06:24.3076732Z Association table linking vendors to pricing.
2025-08-17T17:06:24.3076915Z 
2025-08-17T17:06:24.3076993Z <a id="common.db_url"></a>
2025-08-17T17:06:24.3077277Z 
2025-08-17T17:06:24.3103860Z # common.db\_url
2025-08-17T17:06:24.3104065Z 
2025-08-17T17:06:24.3104231Z <a id="common.db_url.build_url"></a>
2025-08-17T17:06:24.3104513Z 
2025-08-17T17:06:24.3104625Z #### build\_url
2025-08-17T17:06:24.3104809Z 
2025-08-17T17:06:24.3104926Z ```python
2025-08-17T17:06:24.3105318Z def build_url(async_: bool = True) -> str
2025-08-17T17:06:24.3105825Z ```
2025-08-17T17:06:24.3105941Z 
2025-08-17T17:06:24.3106078Z Return Postgres DSN from env or PG_* parts.
2025-08-17T17:06:24.3106316Z 
2025-08-17T17:06:24.3106420Z <a id="common.keepa"></a>
2025-08-17T17:06:24.3106596Z 
2025-08-17T17:06:24.3106685Z # common.keepa
2025-08-17T17:06:24.3106818Z 
2025-08-17T17:06:24.3106914Z <a id="common.llm"></a>
2025-08-17T17:06:24.3107074Z 
2025-08-17T17:06:24.3107158Z # common.llm
2025-08-17T17:06:24.3107285Z 
2025-08-17T17:06:24.3107393Z <a id="common.settings"></a>
2025-08-17T17:06:24.3107565Z 
2025-08-17T17:06:24.3107654Z # common.settings
2025-08-17T17:06:24.3107801Z 
2025-08-17T17:06:24.3107903Z <a id="common.db"></a>
2025-08-17T17:06:24.3108048Z 
2025-08-17T17:06:24.3108193Z # common.db
2025-08-17T17:06:24.3108314Z 
2025-08-17T17:06:24.3108439Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-17T17:06:24.3108665Z 
2025-08-17T17:06:24.3108768Z #### build\_sqlalchemy\_url
2025-08-17T17:06:24.3108934Z 
2025-08-17T17:06:24.3109018Z ```python
2025-08-17T17:06:24.3109245Z def build_sqlalchemy_url() -> str
2025-08-17T17:06:24.3109511Z ```
2025-08-17T17:06:24.3109623Z 
2025-08-17T17:06:24.3109745Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T17:06:24.3109965Z 
2025-08-17T17:06:24.3110079Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-17T17:06:24.3110295Z 
2025-08-17T17:06:24.3110395Z #### build\_asyncpg\_dsn
2025-08-17T17:06:24.3110555Z 
2025-08-17T17:06:24.3110643Z ```python
2025-08-17T17:06:24.3110862Z def build_asyncpg_dsn() -> str
2025-08-17T17:06:24.3111121Z ```
2025-08-17T17:06:24.3111226Z 
2025-08-17T17:06:24.3111389Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T17:06:24.3111856Z 
2025-08-17T17:06:24.3111966Z <a id="common.db.refresh_mvs"></a>
2025-08-17T17:06:24.3112158Z 
2025-08-17T17:06:24.3112242Z #### refresh\_mvs
2025-08-17T17:06:24.3112381Z 
2025-08-17T17:06:24.3112461Z ```python
2025-08-17T17:06:24.3112715Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T17:06:24.3113029Z ```
2025-08-17T17:06:24.3113135Z 
2025-08-17T17:06:24.3113314Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T17:06:24.3113586Z 
2025-08-17T17:06:24.3113836Z <a id="common.config"></a>
2025-08-17T17:06:24.3114006Z 
2025-08-17T17:06:24.3114092Z # common.config
2025-08-17T17:06:24.3114223Z 
2025-08-17T17:06:24.3114327Z <a id="common.base"></a>
2025-08-17T17:06:24.3114481Z 
2025-08-17T17:06:24.3114565Z # common.base
2025-08-17T17:06:24.3114690Z 
2025-08-17T17:06:24.3114800Z <a id="common.base.Base"></a>
2025-08-17T17:06:24.3114973Z 
2025-08-17T17:06:24.3115057Z ## Base Objects
2025-08-17T17:06:24.3115194Z 
2025-08-17T17:06:24.3115260Z ```python
2025-08-17T17:06:24.3115438Z class Base(DeclarativeBase)
2025-08-17T17:06:24.3115636Z ```
2025-08-17T17:06:24.3115720Z 
2025-08-17T17:06:24.3115824Z Base class for SQLAlchemy models.
2025-08-17T17:06:24.3115975Z 
2025-08-17T17:06:24.3116049Z <a id="repricer"></a>
2025-08-17T17:06:24.3116168Z 
2025-08-17T17:06:24.3116241Z # repricer
2025-08-17T17:06:24.3116336Z 
2025-08-17T17:06:24.3116425Z <a id="repricer.app.schemas"></a>
2025-08-17T17:06:24.3116582Z 
2025-08-17T17:06:24.3116664Z # repricer.app.schemas
2025-08-17T17:06:24.3116787Z 
2025-08-17T17:06:24.3116879Z <a id="repricer.app.deps"></a>
2025-08-17T17:06:24.3117024Z 
2025-08-17T17:06:24.3117100Z # repricer.app.deps
2025-08-17T17:06:24.3117213Z 
2025-08-17T17:06:24.3117343Z Placeholder module for Keepa / SP-API clients.
2025-08-17T17:06:24.3117534Z 
2025-08-17T17:06:24.3117618Z <a id="repricer.app.logic"></a>
2025-08-17T17:06:24.3117773Z 
2025-08-17T17:06:24.3117849Z # repricer.app.logic
2025-08-17T17:06:24.3118089Z 
2025-08-17T17:06:24.3118191Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-17T17:06:24.3118381Z 
2025-08-17T17:06:24.3118447Z #### MIN\_MARGIN
2025-08-17T17:06:24.3118551Z 
2025-08-17T17:06:24.3118623Z 15 % ROI
2025-08-17T17:06:24.3118713Z 
2025-08-17T17:06:24.3118821Z <a id="repricer.app.logic.compute_price"></a>
2025-08-17T17:06:24.3119009Z 
2025-08-17T17:06:24.3119082Z #### compute\_price
2025-08-17T17:06:24.3119191Z 
2025-08-17T17:06:24.3119257Z ```python
2025-08-17T17:06:24.3119508Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-17T17:06:24.3119815Z ```
2025-08-17T17:06:24.3119899Z 
2025-08-17T17:06:24.3120010Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-17T17:06:24.3120298Z Replace with real competitive logic later.
2025-08-17T17:06:24.3120473Z 
2025-08-17T17:06:24.3120556Z <a id="repricer.app.main"></a>
2025-08-17T17:06:24.3120701Z 
2025-08-17T17:06:24.3120775Z # repricer.app.main
2025-08-17T17:06:24.3120886Z 
2025-08-17T17:06:24.3120964Z <a id="repricer.app"></a>
2025-08-17T17:06:24.3121110Z 
2025-08-17T17:06:24.3121180Z # repricer.app
2025-08-17T17:06:24.3121284Z 
2025-08-17T17:06:24.3121385Z <a id="repricer.tests.test_imports"></a>
2025-08-17T17:06:24.3121556Z 
2025-08-17T17:06:24.3121640Z # repricer.tests.test\_imports
2025-08-17T17:06:24.3121787Z 
2025-08-17T17:06:24.3121877Z <a id="repricer.tests.test_smoke"></a>
2025-08-17T17:06:24.3122041Z 
2025-08-17T17:06:24.3122125Z # repricer.tests.test\_smoke
2025-08-17T17:06:24.3122269Z 
2025-08-17T17:06:24.3122348Z <a id="repricer.tests"></a>
2025-08-17T17:06:24.3122481Z 
2025-08-17T17:06:24.3122558Z # repricer.tests
2025-08-17T17:06:24.3122667Z 
2025-08-17T17:06:24.3122734Z <a id="db"></a>
2025-08-17T17:06:24.3122845Z 
2025-08-17T17:06:24.3122910Z # db
2025-08-17T17:06:24.3122996Z 
2025-08-17T17:06:24.3123076Z <a id="db.utils.views"></a>
2025-08-17T17:06:24.3123215Z 
2025-08-17T17:06:24.3123284Z # db.utils.views
2025-08-17T17:06:24.3123388Z 
2025-08-17T17:06:24.3123486Z <a id="db.utils.views.replace_view"></a>
2025-08-17T17:06:24.3123925Z 
2025-08-17T17:06:24.3123997Z #### replace\_view
2025-08-17T17:06:24.3124107Z 
2025-08-17T17:06:24.3124179Z ```python
2025-08-17T17:06:24.3124380Z def replace_view(name: str, new_sql: str) -> None
2025-08-17T17:06:24.3124636Z ```
2025-08-17T17:06:24.3124723Z 
2025-08-17T17:06:24.3124815Z Drop and recreate a SQL view atomically.
2025-08-17T17:06:24.3124992Z 
2025-08-17T17:06:24.3125066Z <a id="db.utils"></a>
2025-08-17T17:06:24.3125185Z 
2025-08-17T17:06:24.3125256Z # db.utils
2025-08-17T17:06:24.3125349Z 
2025-08-17T17:06:24.3125430Z <a id="price_importer"></a>
2025-08-17T17:06:24.3125562Z 
2025-08-17T17:06:24.3125641Z # price\_importer
2025-08-17T17:06:24.3125749Z 
2025-08-17T17:06:24.3125859Z <a id="price_importer.services_common.dsn"></a>
2025-08-17T17:06:24.3126052Z 
2025-08-17T17:06:24.3126144Z # price\_importer.services\_common.dsn
2025-08-17T17:06:24.3126308Z 
2025-08-17T17:06:24.3126446Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-17T17:06:24.3126658Z 
2025-08-17T17:06:24.3126730Z #### build\_dsn
2025-08-17T17:06:24.3126832Z 
2025-08-17T17:06:24.3126904Z ```python
2025-08-17T17:06:24.3127080Z def build_dsn(sync: bool = True) -> str
2025-08-17T17:06:24.3127309Z ```
2025-08-17T17:06:24.3127395Z 
2025-08-17T17:06:24.3127464Z Return safe DSN.
2025-08-17T17:06:24.3127576Z 
2025-08-17T17:06:24.3127927Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-17T17:06:24.3128139Z 
2025-08-17T17:06:24.3128275Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-17T17:06:24.3128491Z 
2025-08-17T17:06:24.3128605Z # price\_importer.services\_common.models\_vendor
2025-08-17T17:06:24.3128805Z 
2025-08-17T17:06:24.3128914Z <a id="price_importer.services_common.db_url"></a>
2025-08-17T17:06:24.3129107Z 
2025-08-17T17:06:24.3129205Z # price\_importer.services\_common.db\_url
2025-08-17T17:06:24.3129384Z 
2025-08-17T17:06:24.3129522Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-17T17:06:24.3129741Z 
2025-08-17T17:06:24.3129991Z #### build\_url
2025-08-17T17:06:24.3130106Z 
2025-08-17T17:06:24.3130174Z ```python
2025-08-17T17:06:24.3130358Z def build_url(async_: bool = True) -> str
2025-08-17T17:06:24.3130584Z ```
2025-08-17T17:06:24.3130676Z 
2025-08-17T17:06:24.3130775Z Return Postgres DSN from env or PG_* parts.
2025-08-17T17:06:24.3130950Z 
2025-08-17T17:06:24.3131069Z <a id="price_importer.services_common.keepa"></a>
2025-08-17T17:06:24.3131262Z 
2025-08-17T17:06:24.3131358Z # price\_importer.services\_common.keepa
2025-08-17T17:06:24.3131529Z 
2025-08-17T17:06:24.3131636Z <a id="price_importer.services_common.llm"></a>
2025-08-17T17:06:24.3131821Z 
2025-08-17T17:06:24.3131912Z # price\_importer.services\_common.llm
2025-08-17T17:06:24.3132080Z 
2025-08-17T17:06:24.3132195Z <a id="price_importer.services_common.settings"></a>
2025-08-17T17:06:24.3132389Z 
2025-08-17T17:06:24.3132493Z # price\_importer.services\_common.settings
2025-08-17T17:06:24.3132666Z 
2025-08-17T17:06:24.3132766Z <a id="price_importer.services_common.db"></a>
2025-08-17T17:06:24.3132954Z 
2025-08-17T17:06:24.3133051Z # price\_importer.services\_common.db
2025-08-17T17:06:24.3133221Z 
2025-08-17T17:06:24.3133387Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-17T17:06:24.3133792Z 
2025-08-17T17:06:24.3133875Z #### build\_sqlalchemy\_url
2025-08-17T17:06:24.3134014Z 
2025-08-17T17:06:24.3134085Z ```python
2025-08-17T17:06:24.3134264Z def build_sqlalchemy_url() -> str
2025-08-17T17:06:24.3134483Z ```
2025-08-17T17:06:24.3134568Z 
2025-08-17T17:06:24.3134664Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T17:06:24.3134843Z 
2025-08-17T17:06:24.3134989Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-17T17:06:24.3135218Z 
2025-08-17T17:06:24.3135303Z #### build\_asyncpg\_dsn
2025-08-17T17:06:24.3135437Z 
2025-08-17T17:06:24.3135502Z ```python
2025-08-17T17:06:24.3135685Z def build_asyncpg_dsn() -> str
2025-08-17T17:06:24.3135891Z ```
2025-08-17T17:06:24.3135976Z 
2025-08-17T17:06:24.3136113Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T17:06:24.3136475Z 
2025-08-17T17:06:24.3136607Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-17T17:06:24.3136824Z 
2025-08-17T17:06:24.3136895Z #### refresh\_mvs
2025-08-17T17:06:24.3137003Z 
2025-08-17T17:06:24.3137073Z ```python
2025-08-17T17:06:24.3137276Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T17:06:24.3137536Z ```
2025-08-17T17:06:24.3137621Z 
2025-08-17T17:06:24.3137759Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T17:06:24.3137980Z 
2025-08-17T17:06:24.3138077Z <a id="price_importer.services_common"></a>
2025-08-17T17:06:24.3138251Z 
2025-08-17T17:06:24.3138342Z # price\_importer.services\_common
2025-08-17T17:06:24.3138507Z 
2025-08-17T17:06:24.3138612Z <a id="price_importer.services_common.base"></a>
2025-08-17T17:06:24.3138799Z 
2025-08-17T17:06:24.3138902Z # price\_importer.services\_common.base
2025-08-17T17:06:24.3139072Z 
2025-08-17T17:06:24.3139167Z <a id="price_importer.normaliser"></a>
2025-08-17T17:06:24.3139344Z 
2025-08-17T17:06:24.3139432Z # price\_importer.normaliser
2025-08-17T17:06:24.3139574Z 
2025-08-17T17:06:24.3139678Z <a id="price_importer.common.models_vendor"></a>
2025-08-17T17:06:24.3139870Z 
2025-08-17T17:06:24.3139962Z # price\_importer.common.models\_vendor
2025-08-17T17:06:24.3140127Z 
2025-08-17T17:06:24.3140224Z <a id="price_importer.common.db_url"></a>
2025-08-17T17:06:24.3140395Z 
2025-08-17T17:06:24.3140482Z # price\_importer.common.db\_url
2025-08-17T17:06:24.3140639Z 
2025-08-17T17:06:24.3140748Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-17T17:06:24.3140938Z 
2025-08-17T17:06:24.3141006Z #### make\_dsn
2025-08-17T17:06:24.3141117Z 
2025-08-17T17:06:24.3141183Z ```python
2025-08-17T17:06:24.3141369Z def make_dsn(async_: bool = False) -> str
2025-08-17T17:06:24.3141600Z ```
2025-08-17T17:06:24.3141687Z 
2025-08-17T17:06:24.3141815Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-17T17:06:24.3142019Z 
2025-08-17T17:06:24.3142316Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-17T17:06:24.3142525Z 
2025-08-17T17:06:24.3142593Z #### build\_url
2025-08-17T17:06:24.3142696Z 
2025-08-17T17:06:24.3142761Z ```python
2025-08-17T17:06:24.3142946Z def build_url(async_: bool = False) -> str
2025-08-17T17:06:24.3143180Z ```
2025-08-17T17:06:24.3143264Z 
2025-08-17T17:06:24.3143389Z Return Postgres DSN built from environment variables.
2025-08-17T17:06:24.3143700Z 
2025-08-17T17:06:24.3143796Z <a id="price_importer.common"></a>
2025-08-17T17:06:24.3143953Z 
2025-08-17T17:06:24.3144035Z # price\_importer.common
2025-08-17T17:06:24.3144170Z 
2025-08-17T17:06:24.3144300Z <a id="price_importer.common.base"></a>
2025-08-17T17:06:24.3144469Z 
2025-08-17T17:06:24.3144561Z # price\_importer.common.base
2025-08-17T17:06:24.3144705Z 
2025-08-17T17:06:24.3144803Z <a id="price_importer.tests.conftest"></a>
2025-08-17T17:06:24.3144979Z 
2025-08-17T17:06:24.3145075Z # price\_importer.tests.conftest
2025-08-17T17:06:24.3145226Z 
2025-08-17T17:06:24.3145337Z <a id="price_importer.tests.test_reader"></a>
2025-08-17T17:06:24.3145523Z 
2025-08-17T17:06:24.3145613Z # price\_importer.tests.test\_reader
2025-08-17T17:06:24.3145773Z 
2025-08-17T17:06:24.3145880Z <a id="price_importer.tests.test_imports"></a>
2025-08-17T17:06:24.3146059Z 
2025-08-17T17:06:24.3146150Z # price\_importer.tests.test\_imports
2025-08-17T17:06:24.3146312Z 
2025-08-17T17:06:24.3146417Z <a id="price_importer.tests.test_smoke"></a>
2025-08-17T17:06:24.3146591Z 
2025-08-17T17:06:24.3146679Z # price\_importer.tests.test\_smoke
2025-08-17T17:06:24.3146847Z 
2025-08-17T17:06:24.3146956Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-17T17:06:24.3147145Z 
2025-08-17T17:06:24.3147246Z # price\_importer.tests.test\_normaliser
2025-08-17T17:06:24.3147415Z 
2025-08-17T17:06:24.3147501Z <a id="price_importer.tests"></a>
2025-08-17T17:06:24.3147654Z 
2025-08-17T17:06:24.3147739Z # price\_importer.tests
2025-08-17T17:06:24.3147864Z 
2025-08-17T17:06:24.3147950Z <a id="price_importer.reader"></a>
2025-08-17T17:06:24.3148233Z 
2025-08-17T17:06:24.3148312Z # price\_importer.reader
2025-08-17T17:06:24.3148442Z 
2025-08-17T17:06:24.3148542Z <a id="price_importer.repository"></a>
2025-08-17T17:06:24.3148706Z 
2025-08-17T17:06:24.3148792Z # price\_importer.repository
2025-08-17T17:06:24.3148934Z 
2025-08-17T17:06:24.3149025Z <a id="price_importer.import"></a>
2025-08-17T17:06:24.3149178Z 
2025-08-17T17:06:24.3149259Z # price\_importer.import
2025-08-17T17:06:24.3149395Z 
2025-08-17T17:06:24.3149469Z <a id="fees_h10"></a>
2025-08-17T17:06:24.3149586Z 
2025-08-17T17:06:24.3149652Z # fees\_h10
2025-08-17T17:06:24.3149753Z 
2025-08-17T17:06:24.3149832Z <a id="fees_h10.worker"></a>
2025-08-17T17:06:24.3149965Z 
2025-08-17T17:06:24.3150042Z # fees\_h10.worker
2025-08-17T17:06:24.3150151Z 
2025-08-17T17:06:24.3150248Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-17T17:06:24.3150430Z 
2025-08-17T17:06:24.3150507Z #### list\_active\_asins
2025-08-17T17:06:24.3150628Z 
2025-08-17T17:06:24.3150697Z ```python
2025-08-17T17:06:24.3150882Z def list_active_asins() -> list[str]
2025-08-17T17:06:24.3151104Z ```
2025-08-17T17:06:24.3151191Z 
2025-08-17T17:06:24.3151309Z Return known ASINs or an empty list if unavailable.
2025-08-17T17:06:24.3151505Z 
2025-08-17T17:06:24.3151597Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-17T17:06:24.3151756Z 
2025-08-17T17:06:24.3151838Z # fees\_h10.tests.test\_smoke
2025-08-17T17:06:24.3151983Z 
2025-08-17T17:06:24.3152060Z <a id="fees_h10.tests"></a>
2025-08-17T17:06:24.3152192Z 
2025-08-17T17:06:24.3152266Z # fees\_h10.tests
2025-08-17T17:06:24.3152371Z 
2025-08-17T17:06:24.3152449Z <a id="fees_h10.client"></a>
2025-08-17T17:06:24.3152584Z 
2025-08-17T17:06:24.3152660Z # fees\_h10.client
2025-08-17T17:06:24.3152766Z 
2025-08-17T17:06:24.3152852Z <a id="fees_h10.repository"></a>
2025-08-17T17:06:24.3153006Z 
2025-08-17T17:06:24.3153081Z # fees\_h10.repository
2025-08-17T17:06:24.3153203Z 
2025-08-17T17:06:24.3153275Z <a id="emailer"></a>
2025-08-17T17:06:24.3153522Z 
2025-08-17T17:06:24.3153592Z # emailer
2025-08-17T17:06:24.3153832Z 
2025-08-17T17:06:24.3153942Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-17T17:06:24.3154127Z 
2025-08-17T17:06:24.3154220Z # emailer.tests.test\_import\_emailer
2025-08-17T17:06:24.3154390Z 
2025-08-17T17:06:24.3154479Z <a id="emailer.tests.test_smoke"></a>
2025-08-17T17:06:24.3154637Z 
2025-08-17T17:06:24.3154721Z # emailer.tests.test\_smoke
2025-08-17T17:06:24.3154892Z 
2025-08-17T17:06:24.3154973Z <a id="emailer.tests"></a>
2025-08-17T17:06:24.3155106Z 
2025-08-17T17:06:24.3155184Z # emailer.tests
2025-08-17T17:06:24.3155291Z 
2025-08-17T17:06:24.3155379Z <a id="emailer.generate_body"></a>
2025-08-17T17:06:24.3155544Z 
2025-08-17T17:06:24.3155620Z # emailer.generate\_body
2025-08-17T17:06:24.3155750Z 
2025-08-17T17:06:24.3155824Z <a id="llm_server"></a>
2025-08-17T17:06:24.3155950Z 
2025-08-17T17:06:24.3156016Z # llm\_server
2025-08-17T17:06:24.3156114Z 
2025-08-17T17:06:24.3156200Z <a id="llm_server.app"></a>
2025-08-17T17:06:24.3156343Z 
2025-08-17T17:06:24.3156417Z # llm\_server.app
2025-08-17T17:06:24.3156525Z 
