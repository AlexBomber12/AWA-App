2025-08-18T15:25:49.8163642Z ##[group]Run pydoc-markdown
2025-08-18T15:25:49.8163940Z [36;1mpydoc-markdown[0m
2025-08-18T15:25:49.8206138Z shell: /usr/bin/bash -e {0}
2025-08-18T15:25:49.8206369Z env:
2025-08-18T15:25:49.8206622Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T15:25:49.8207033Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-18T15:25:49.8207443Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T15:25:49.8207790Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T15:25:49.8208167Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T15:25:49.8208517Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-18T15:25:49.8208796Z ##[endgroup]
2025-08-18T15:25:50.1463563Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-18T15:25:50.1464462Z Unknown key(s) "{'output_directory'}" at:
2025-08-18T15:25:50.1465332Z In "pydoc-markdown.yml"
2025-08-18T15:25:50.1465900Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-18T15:25:50.1466826Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-18T15:25:50.1467564Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-18T15:25:50.1468007Z 
2025-08-18T15:25:50.4650711Z <a id="__init__"></a>
2025-08-18T15:25:50.4651105Z 
2025-08-18T15:25:50.4651279Z # \_\_init\_\_
2025-08-18T15:25:50.4651561Z 
2025-08-18T15:25:50.4651728Z <a id="api"></a>
2025-08-18T15:25:50.4652025Z 
2025-08-18T15:25:50.4652197Z # api
2025-08-18T15:25:50.4652408Z 
2025-08-18T15:25:50.4652574Z <a id="api.errors"></a>
2025-08-18T15:25:50.4652921Z 
2025-08-18T15:25:50.4653118Z # api.errors
2025-08-18T15:25:50.4653398Z 
2025-08-18T15:25:50.4653631Z <a id="api.tests.test_errors_json"></a>
2025-08-18T15:25:50.4654018Z 
2025-08-18T15:25:50.4654217Z # api.tests.test\_errors\_json
2025-08-18T15:25:50.4654548Z 
2025-08-18T15:25:50.4654726Z <a id="api.tests.test_llm"></a>
2025-08-18T15:25:50.4655273Z 
2025-08-18T15:25:50.4655859Z # api.tests.test\_llm
2025-08-18T15:25:50.4656171Z 
2025-08-18T15:25:50.4656360Z <a id="api.tests.test_cors"></a>
2025-08-18T15:25:50.4656717Z 
2025-08-18T15:25:50.4656890Z # api.tests.test\_cors
2025-08-18T15:25:50.4657131Z 
2025-08-18T15:25:50.4657296Z <a id="api.tests.test_imports"></a>
2025-08-18T15:25:50.4657589Z 
2025-08-18T15:25:50.4657731Z # api.tests.test\_imports
2025-08-18T15:25:50.4657982Z 
2025-08-18T15:25:50.4658143Z <a id="api.tests.test_rate_limit"></a>
2025-08-18T15:25:50.4658448Z 
2025-08-18T15:25:50.4658594Z # api.tests.test\_rate\_limit
2025-08-18T15:25:50.4658863Z 
2025-08-18T15:25:50.4659038Z <a id="api.tests.test_rate_limit.app"></a>
2025-08-18T15:25:50.4659363Z 
2025-08-18T15:25:50.4659792Z #### app
2025-08-18T15:25:50.4659959Z 
2025-08-18T15:25:50.4660077Z noqa: E402
2025-08-18T15:25:50.4660256Z 
2025-08-18T15:25:50.4660418Z <a id="api.tests.test_entrypoint"></a>
2025-08-18T15:25:50.4660721Z 
2025-08-18T15:25:50.4660870Z # api.tests.test\_entrypoint
2025-08-18T15:25:50.4661116Z 
2025-08-18T15:25:50.4661222Z <a id="api.tests.test_health"></a>
2025-08-18T15:25:50.4661408Z 
2025-08-18T15:25:50.4661505Z # api.tests.test\_health
2025-08-18T15:25:50.4661655Z 
2025-08-18T15:25:50.4661754Z <a id="api.logging_config"></a>
2025-08-18T15:25:50.4661931Z 
2025-08-18T15:25:50.4662016Z # api.logging\_config
2025-08-18T15:25:50.4662155Z 
2025-08-18T15:25:50.4662251Z <a id="api.migrations.env"></a>
2025-08-18T15:25:50.4662436Z 
2025-08-18T15:25:50.4662526Z # api.migrations.env
2025-08-18T15:25:50.4662667Z 
2025-08-18T15:25:50.4662825Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-18T15:25:50.4663078Z 
2025-08-18T15:25:50.4663204Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-18T15:25:50.4663436Z 
2025-08-18T15:25:50.4663567Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-18T15:25:50.4663802Z 
2025-08-18T15:25:50.4663918Z # api.migrations.versions.0004\_fee\_cron
2025-08-18T15:25:50.4664135Z 
2025-08-18T15:25:50.4664315Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-18T15:25:50.4664849Z 
2025-08-18T15:25:50.4665200Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-18T15:25:50.4665524Z 
2025-08-18T15:25:50.4665675Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-18T15:25:50.4665924Z 
2025-08-18T15:25:50.4666049Z # api.migrations.versions.0003\_vendor\_prices
2025-08-18T15:25:50.4666277Z 
2025-08-18T15:25:50.4666423Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-18T15:25:50.4666661Z 
2025-08-18T15:25:50.4666781Z # api.migrations.versions.0024\_create\_buybox
2025-08-18T15:25:50.4667007Z 
2025-08-18T15:25:50.4667160Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-18T15:25:50.4667410Z 
2025-08-18T15:25:50.4667531Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-18T15:25:50.4667726Z 
2025-08-18T15:25:50.4667841Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-18T15:25:50.4668030Z 
2025-08-18T15:25:50.4668144Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-18T15:25:50.4668348Z 
2025-08-18T15:25:50.4668513Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-18T15:25:50.4668724Z 
2025-08-18T15:25:50.4668834Z # api.migrations.versions.0020\_unified\_schema
2025-08-18T15:25:50.4669017Z 
2025-08-18T15:25:50.4669165Z <a id="api.migrations.versions.0025_pr4_indexes_loadlog"></a>
2025-08-18T15:25:50.4669387Z 
2025-08-18T15:25:50.4669507Z # api.migrations.versions.0025\_pr4\_indexes\_loadlog
2025-08-18T15:25:50.4669712Z 
2025-08-18T15:25:50.4669838Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-18T15:25:50.4670040Z 
2025-08-18T15:25:50.4670158Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-18T15:25:50.4670345Z 
2025-08-18T15:25:50.4670482Z <a id="api.migrations.versions.0026_amazon_new_reports"></a>
2025-08-18T15:25:50.4670707Z 
2025-08-18T15:25:50.4670829Z # api.migrations.versions.0026\_amazon\_new\_reports
2025-08-18T15:25:50.4671023Z 
2025-08-18T15:25:50.4671134Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-18T15:25:50.4671475Z 
2025-08-18T15:25:50.4671569Z # api.migrations.versions.0001\_baseline
2025-08-18T15:25:50.4671741Z 
2025-08-18T15:25:50.4671838Z <a id="api.migrations.versions"></a>
2025-08-18T15:25:50.4672000Z 
2025-08-18T15:25:50.4672084Z # api.migrations.versions
2025-08-18T15:25:50.4672221Z 
2025-08-18T15:25:50.4672299Z <a id="api.migrations"></a>
2025-08-18T15:25:50.4672430Z 
2025-08-18T15:25:50.4672499Z # api.migrations
2025-08-18T15:25:50.4672612Z 
2025-08-18T15:25:50.4672677Z <a id="api.db"></a>
2025-08-18T15:25:50.4672784Z 
2025-08-18T15:25:50.4672854Z # api.db
2025-08-18T15:25:50.4672942Z 
2025-08-18T15:25:50.4673022Z <a id="api.routes.stats"></a>
2025-08-18T15:25:50.4673161Z 
2025-08-18T15:25:50.4673238Z # api.routes.stats
2025-08-18T15:25:50.4673346Z 
2025-08-18T15:25:50.4673434Z <a id="api.routes.stats.kpi"></a>
2025-08-18T15:25:50.4673589Z 
2025-08-18T15:25:50.4673654Z #### kpi
2025-08-18T15:25:50.4673741Z 
2025-08-18T15:25:50.4673813Z ```python
2025-08-18T15:25:50.4673990Z @router.get("/stats/kpi")
2025-08-18T15:25:50.4674236Z def kpi() -> List[Dict[str, int]]
2025-08-18T15:25:50.4674442Z ```
2025-08-18T15:25:50.4674561Z 
2025-08-18T15:25:50.4674641Z Return KPI metrics (mock).
2025-08-18T15:25:50.4674847Z 
2025-08-18T15:25:50.4674956Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-18T15:25:50.4675249Z 
2025-08-18T15:25:50.4675318Z #### roi\_by\_vendor
2025-08-18T15:25:50.4675437Z 
2025-08-18T15:25:50.4675500Z ```python
2025-08-18T15:25:50.4675681Z @router.get("/stats/roi_by_vendor")
2025-08-18T15:25:50.4675940Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-18T15:25:50.4676168Z ```
2025-08-18T15:25:50.4676259Z 
2025-08-18T15:25:50.4676342Z Return ROI percent by vendor.
2025-08-18T15:25:50.4676481Z 
2025-08-18T15:25:50.4676581Z <a id="api.routes.stats.roi_trend"></a>
2025-08-18T15:25:50.4676751Z 
2025-08-18T15:25:50.4676817Z #### roi\_trend
2025-08-18T15:25:50.4676926Z 
2025-08-18T15:25:50.4676987Z ```python
2025-08-18T15:25:50.4677153Z @router.get("/stats/roi_trend")
2025-08-18T15:25:50.4677541Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-18T15:25:50.4677778Z ```
2025-08-18T15:25:50.4677867Z 
2025-08-18T15:25:50.4677943Z Return 30-day ROI trend.
2025-08-18T15:25:50.4678093Z 
2025-08-18T15:25:50.4678182Z <a id="api.routes.roi"></a>
2025-08-18T15:25:50.4678317Z 
2025-08-18T15:25:50.4678388Z # api.routes.roi
2025-08-18T15:25:50.4678494Z 
2025-08-18T15:25:50.4678590Z <a id="api.routes.health"></a>
2025-08-18T15:25:50.4678730Z 
2025-08-18T15:25:50.4678802Z # api.routes.health
2025-08-18T15:25:50.4678920Z 
2025-08-18T15:25:50.4679011Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-18T15:25:50.4679178Z 
2025-08-18T15:25:50.4679254Z #### MAX\_SKEW
2025-08-18T15:25:50.4679353Z 
2025-08-18T15:25:50.4679419Z seconds
2025-08-18T15:25:50.4679504Z 
2025-08-18T15:25:50.4679604Z <a id="api.routes.health.health"></a>
2025-08-18T15:25:50.4679770Z 
2025-08-18T15:25:50.4679832Z #### health
2025-08-18T15:25:50.4679931Z 
2025-08-18T15:25:50.4679998Z ```python
2025-08-18T15:25:50.4680198Z @router.get("/health", include_in_schema=False)
2025-08-18T15:25:50.4680597Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-18T15:25:50.4680943Z ```
2025-08-18T15:25:50.4681029Z 
2025-08-18T15:25:50.4681149Z Return 200 when DB reachable and clocks are in sync.
2025-08-18T15:25:50.4681346Z 
2025-08-18T15:25:50.4681446Z <a id="api.routes.repository"></a>
2025-08-18T15:25:50.4681606Z 
2025-08-18T15:25:50.4681684Z # api.routes.repository
2025-08-18T15:25:50.4681821Z 
2025-08-18T15:25:50.4681898Z <a id="api.routes"></a>
2025-08-18T15:25:50.4682013Z 
2025-08-18T15:25:50.4682085Z # api.routes
2025-08-18T15:25:50.4682183Z 
2025-08-18T15:25:50.4682264Z <a id="api.models.fee"></a>
2025-08-18T15:25:50.4682398Z 
2025-08-18T15:25:50.4682475Z # api.models.fee
2025-08-18T15:25:50.4682580Z 
2025-08-18T15:25:50.4682653Z <a id="api.models"></a>
2025-08-18T15:25:50.4682780Z 
2025-08-18T15:25:50.4682845Z # api.models
2025-08-18T15:25:50.4682940Z 
2025-08-18T15:25:50.4683145Z <a id="api.roi_repository"></a>
2025-08-18T15:25:50.4683304Z 
2025-08-18T15:25:50.4683382Z # api.roi\_repository
2025-08-18T15:25:50.4683500Z 
2025-08-18T15:25:50.4683576Z <a id="api.main"></a>
2025-08-18T15:25:50.4683691Z 
2025-08-18T15:25:50.4683754Z # api.main
2025-08-18T15:25:50.4683857Z 
2025-08-18T15:25:50.4683933Z <a id="api.main.ready"></a>
2025-08-18T15:25:50.4684061Z 
2025-08-18T15:25:50.4684123Z #### ready
2025-08-18T15:25:50.4684219Z 
2025-08-18T15:25:50.4684282Z ```python
2025-08-18T15:25:50.4684545Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-18T15:25:50.4684982Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-18T15:25:50.4685442Z                                                                       str]
2025-08-18T15:25:50.4685671Z ```
2025-08-18T15:25:50.4685762Z 
2025-08-18T15:25:50.4685857Z Return 200 only when migrations are at head.
2025-08-18T15:25:50.4686030Z 
2025-08-18T15:25:50.4686100Z <a id="api.config"></a>
2025-08-18T15:25:50.4686232Z 
2025-08-18T15:25:50.4686304Z # api.config
2025-08-18T15:25:50.4686399Z 
2025-08-18T15:25:50.4686472Z <a id="etl"></a>
2025-08-18T15:25:50.4686579Z 
2025-08-18T15:25:50.4686643Z # etl
2025-08-18T15:25:50.4686729Z 
2025-08-18T15:25:50.4686820Z <a id="etl.fba_fee_ingestor"></a>
2025-08-18T15:25:50.4686968Z 
2025-08-18T15:25:50.4687043Z # etl.fba\_fee\_ingestor
2025-08-18T15:25:50.4687174Z 
2025-08-18T15:25:50.4687256Z <a id="etl.sp_fees_ingestor"></a>
2025-08-18T15:25:50.4687400Z 
2025-08-18T15:25:50.4687479Z # etl.sp\_fees\_ingestor
2025-08-18T15:25:50.4687598Z 
2025-08-18T15:25:50.4687676Z <a id="etl.keepa_ingestor"></a>
2025-08-18T15:25:50.4687816Z 
2025-08-18T15:25:50.4687896Z # etl.keepa\_ingestor
2025-08-18T15:25:50.4688011Z 
2025-08-18T15:25:50.4688080Z <a id="etl.db"></a>
2025-08-18T15:25:50.4688194Z 
2025-08-18T15:25:50.4688261Z # etl.db
2025-08-18T15:25:50.4688349Z 
2025-08-18T15:25:50.4688433Z <a id="etl.dialects.schemas"></a>
2025-08-18T15:25:50.4688589Z 
2025-08-18T15:25:50.4688669Z # etl.dialects.schemas
2025-08-18T15:25:50.4688910Z 
2025-08-18T15:25:50.4689027Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-18T15:25:50.4689215Z 
2025-08-18T15:25:50.4689308Z # etl.dialects.amazon\_reimbursements
2025-08-18T15:25:50.4689477Z 
2025-08-18T15:25:50.4689575Z <a id="etl.dialects.amazon_ads_sp_cost"></a>
2025-08-18T15:25:50.4689747Z 
2025-08-18T15:25:50.4689835Z # etl.dialects.amazon\_ads\_sp\_cost
2025-08-18T15:25:50.4690001Z 
2025-08-18T15:25:50.4690092Z <a id="etl.dialects.amazon_returns"></a>
2025-08-18T15:25:50.4690258Z 
2025-08-18T15:25:50.4690350Z # etl.dialects.amazon\_returns
2025-08-18T15:25:50.4690490Z 
2025-08-18T15:25:50.4690587Z <a id="etl.dialects.amazon_fee_preview"></a>
2025-08-18T15:25:50.4690764Z 
2025-08-18T15:25:50.4690847Z # etl.dialects.amazon\_fee\_preview
2025-08-18T15:25:50.4691002Z 
2025-08-18T15:25:50.4691104Z <a id="etl.dialects.amazon_inventory_ledger"></a>
2025-08-18T15:25:50.4691295Z 
2025-08-18T15:25:50.4691385Z # etl.dialects.amazon\_inventory\_ledger
2025-08-18T15:25:50.4691558Z 
2025-08-18T15:25:50.4691662Z <a id="etl.dialects.amazon_settlements"></a>
2025-08-18T15:25:50.4691831Z 
2025-08-18T15:25:50.4691919Z # etl.dialects.amazon\_settlements
2025-08-18T15:25:50.4692080Z 
2025-08-18T15:25:50.4692159Z <a id="etl.dialects"></a>
2025-08-18T15:25:50.4692288Z 
2025-08-18T15:25:50.4692356Z # etl.dialects
2025-08-18T15:25:50.4692461Z 
2025-08-18T15:25:50.4692529Z <a id="ingest"></a>
2025-08-18T15:25:50.4692637Z 
2025-08-18T15:25:50.4692710Z # ingest
2025-08-18T15:25:50.4692796Z 
2025-08-18T15:25:50.4692880Z <a id="ingest.maintenance"></a>
2025-08-18T15:25:50.4693029Z 
2025-08-18T15:25:50.4693104Z # ingest.maintenance
2025-08-18T15:25:50.4693219Z 
2025-08-18T15:25:50.4693299Z <a id="ingest.copy_loader"></a>
2025-08-18T15:25:50.4693446Z 
2025-08-18T15:25:50.4693519Z # ingest.copy\_loader
2025-08-18T15:25:50.4693636Z 
2025-08-18T15:25:50.4693748Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-18T15:25:50.4693931Z 
2025-08-18T15:25:50.4694123Z #### copy\_df\_via\_temp
2025-08-18T15:25:50.4694266Z 
2025-08-18T15:25:50.4694337Z ```python
2025-08-18T15:25:50.4694504Z def copy_df_via_temp(engine: Engine,
2025-08-18T15:25:50.4694747Z                      df: pd.DataFrame,
2025-08-18T15:25:50.4694979Z                      target_table: str,
2025-08-18T15:25:50.4695300Z                      *,
2025-08-18T15:25:50.4695513Z                      target_schema: Optional[str] = None,
2025-08-18T15:25:50.4695773Z                      columns: Sequence[str],
2025-08-18T15:25:50.4696045Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-18T15:25:50.4696321Z                      analyze_after: bool = False,
2025-08-18T15:25:50.4696587Z                      connection: Any | None = None) -> int
2025-08-18T15:25:50.4696824Z ```
2025-08-18T15:25:50.4696917Z 
2025-08-18T15:25:50.4697069Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-18T15:25:50.4697312Z 
2025-08-18T15:25:50.4697409Z <a id="ingest.tests.test_smoke"></a>
2025-08-18T15:25:50.4697577Z 
2025-08-18T15:25:50.4697660Z # ingest.tests.test\_smoke
2025-08-18T15:25:50.4697790Z 
2025-08-18T15:25:50.4697873Z <a id="ingest.tests"></a>
2025-08-18T15:25:50.4697999Z 
2025-08-18T15:25:50.4698066Z # ingest.tests
2025-08-18T15:25:50.4698173Z 
2025-08-18T15:25:50.4698259Z <a id="ingest.upload_router"></a>
2025-08-18T15:25:50.4698409Z 
2025-08-18T15:25:50.4698489Z # ingest.upload\_router
2025-08-18T15:25:50.4698613Z 
2025-08-18T15:25:50.4698700Z <a id="ingest.email_watcher"></a>
2025-08-18T15:25:50.4698845Z 
2025-08-18T15:25:50.4698926Z # ingest.email\_watcher
2025-08-18T15:25:50.4699042Z 
2025-08-18T15:25:50.4699132Z <a id="ingest.email_watcher.main"></a>
2025-08-18T15:25:50.4699296Z 
2025-08-18T15:25:50.4699358Z #### main
2025-08-18T15:25:50.4699448Z 
2025-08-18T15:25:50.4699510Z ```python
2025-08-18T15:25:50.4699688Z def main() -> dict[str, str]
2025-08-18T15:25:50.4699887Z ```
2025-08-18T15:25:50.4699972Z 
2025-08-18T15:25:50.4700109Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-18T15:25:50.4700465Z 
2025-08-18T15:25:50.4700600Z Returns {"status": "success"} when processing completes.
2025-08-18T15:25:50.4700806Z 
2025-08-18T15:25:50.4700882Z <a id="ingest.tasks"></a>
2025-08-18T15:25:50.4701014Z 
2025-08-18T15:25:50.4701079Z # ingest.tasks
2025-08-18T15:25:50.4701181Z 
2025-08-18T15:25:50.4701282Z <a id="ingest.tasks.task_import_file"></a>
2025-08-18T15:25:50.4701455Z 
2025-08-18T15:25:50.4701528Z #### task\_import\_file
2025-08-18T15:25:50.4701649Z 
2025-08-18T15:25:50.4701725Z ```python
2025-08-18T15:25:50.4701935Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-18T15:25:50.4702219Z def task_import_file(self,
2025-08-18T15:25:50.4702419Z                      uri: str,
2025-08-18T15:25:50.4702648Z                      report_type: Optional[str] = None,
2025-08-18T15:25:50.4702914Z                      force: bool = False) -> Dict[str, Any]
2025-08-18T15:25:50.4703154Z ```
2025-08-18T15:25:50.4703240Z 
2025-08-18T15:25:50.4703378Z Import a file into Postgres using existing ETL pipeline.
2025-08-18T15:25:50.4703598Z 
2025-08-18T15:25:50.4703680Z <a id="ingest.celery_app"></a>
2025-08-18T15:25:50.4703825Z 
2025-08-18T15:25:50.4703900Z # ingest.celery\_app
2025-08-18T15:25:50.4704017Z 
2025-08-18T15:25:50.4704098Z <a id="ingest.ingest_router"></a>
2025-08-18T15:25:50.4704253Z 
2025-08-18T15:25:50.4704326Z # ingest.ingest\_router
2025-08-18T15:25:50.4704457Z 
2025-08-18T15:25:50.4704536Z <a id="logistics_etl"></a>
2025-08-18T15:25:50.4704666Z 
2025-08-18T15:25:50.4704742Z # logistics\_etl
2025-08-18T15:25:50.4704850Z 
2025-08-18T15:25:50.4704927Z Daily logistics ETL job.
2025-08-18T15:25:50.4705246Z 
2025-08-18T15:25:50.4705346Z <a id="logistics_etl.__main__"></a>
2025-08-18T15:25:50.4705505Z 
2025-08-18T15:25:50.4705592Z # logistics\_etl.\_\_main\_\_
2025-08-18T15:25:50.4705729Z 
2025-08-18T15:25:50.4705807Z <a id="logistics_etl.dsn"></a>
2025-08-18T15:25:50.4705941Z 
2025-08-18T15:25:50.4706020Z # logistics\_etl.dsn
2025-08-18T15:25:50.4706270Z 
2025-08-18T15:25:50.4706397Z Local DSN builder to avoid cross-service dependency.
2025-08-18T15:25:50.4706602Z 
2025-08-18T15:25:50.4706693Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-18T15:25:50.4706855Z 
2025-08-18T15:25:50.4706922Z #### build\_dsn
2025-08-18T15:25:50.4707029Z 
2025-08-18T15:25:50.4707094Z ```python
2025-08-18T15:25:50.4707272Z def build_dsn(sync: bool = True) -> str
2025-08-18T15:25:50.4707487Z ```
2025-08-18T15:25:50.4707567Z 
2025-08-18T15:25:50.4707710Z Return a Postgres DSN assembled from environment variables.
2025-08-18T15:25:50.4707926Z 
2025-08-18T15:25:50.4708071Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-18T15:25:50.4708453Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-18T15:25:50.4708793Z error when any required variable is missing.
2025-08-18T15:25:50.4708967Z 
2025-08-18T15:25:50.4709057Z <a id="logistics_etl.tests.conftest"></a>
2025-08-18T15:25:50.4709229Z 
2025-08-18T15:25:50.4709320Z # logistics\_etl.tests.conftest
2025-08-18T15:25:50.4709493Z 
2025-08-18T15:25:50.4709602Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-18T15:25:50.4709797Z 
2025-08-18T15:25:50.4709890Z # logistics\_etl.tests.test\_repository
2025-08-18T15:25:50.4710052Z 
2025-08-18T15:25:50.4710148Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-18T15:25:50.4710319Z 
2025-08-18T15:25:50.4710401Z # logistics\_etl.tests.test\_cron
2025-08-18T15:25:50.4710546Z 
2025-08-18T15:25:50.4710651Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-18T15:25:50.4710824Z 
2025-08-18T15:25:50.4710909Z # logistics\_etl.tests.test\_imports
2025-08-18T15:25:50.4711070Z 
2025-08-18T15:25:50.4711164Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-18T15:25:50.4711338Z 
2025-08-18T15:25:50.4711430Z # logistics\_etl.tests.test\_smoke
2025-08-18T15:25:50.4711581Z 
2025-08-18T15:25:50.4711675Z <a id="logistics_etl.tests.test_client"></a>
2025-08-18T15:25:50.4711843Z 
2025-08-18T15:25:50.4711931Z # logistics\_etl.tests.test\_client
2025-08-18T15:25:50.4712088Z 
2025-08-18T15:25:50.4712286Z <a id="logistics_etl.tests"></a>
2025-08-18T15:25:50.4712438Z 
2025-08-18T15:25:50.4712512Z # logistics\_etl.tests
2025-08-18T15:25:50.4712631Z 
2025-08-18T15:25:50.4712716Z <a id="logistics_etl.flow"></a>
2025-08-18T15:25:50.4712854Z 
2025-08-18T15:25:50.4712927Z # logistics\_etl.flow
2025-08-18T15:25:50.4713044Z 
2025-08-18T15:25:50.4713156Z <a id="logistics_etl.client"></a>
2025-08-18T15:25:50.4713300Z 
2025-08-18T15:25:50.4713374Z # logistics\_etl.client
2025-08-18T15:25:50.4713501Z 
2025-08-18T15:25:50.4713580Z <a id="logistics_etl.cron"></a>
2025-08-18T15:25:50.4713715Z 
2025-08-18T15:25:50.4713789Z # logistics\_etl.cron
2025-08-18T15:25:50.4713911Z 
2025-08-18T15:25:50.4713991Z <a id="logistics_etl.db"></a>
2025-08-18T15:25:50.4714126Z 
2025-08-18T15:25:50.4714207Z # logistics\_etl.db
2025-08-18T15:25:50.4714316Z 
2025-08-18T15:25:50.4714404Z <a id="logistics_etl.repository"></a>
2025-08-18T15:25:50.4714571Z 
2025-08-18T15:25:50.4714651Z # logistics\_etl.repository
2025-08-18T15:25:50.4714797Z 
2025-08-18T15:25:50.4714868Z <a id="alert_bot"></a>
2025-08-18T15:25:50.4714991Z 
2025-08-18T15:25:50.4715160Z # alert\_bot
2025-08-18T15:25:50.4715257Z 
2025-08-18T15:25:50.4715348Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-18T15:25:50.4715510Z 
2025-08-18T15:25:50.4715593Z # alert\_bot.tests.test\_smoke
2025-08-18T15:25:50.4715743Z 
2025-08-18T15:25:50.4715823Z <a id="alert_bot.tests"></a>
2025-08-18T15:25:50.4715956Z 
2025-08-18T15:25:50.4716023Z # alert\_bot.tests
2025-08-18T15:25:50.4716138Z 
2025-08-18T15:25:50.4716219Z <a id="alert_bot.alert_bot"></a>
2025-08-18T15:25:50.4716359Z 
2025-08-18T15:25:50.4716439Z # alert\_bot.alert\_bot
2025-08-18T15:25:50.4716556Z 
2025-08-18T15:25:50.4716633Z <a id="alert_bot.rules"></a>
2025-08-18T15:25:50.4716766Z 
2025-08-18T15:25:50.4716845Z # alert\_bot.rules
2025-08-18T15:25:50.4716952Z 
2025-08-18T15:25:50.4717020Z <a id="common"></a>
2025-08-18T15:25:50.4717136Z 
2025-08-18T15:25:50.4717199Z # common
2025-08-18T15:25:50.4717413Z 
2025-08-18T15:25:50.4717504Z <a id="common.dsn"></a>
2025-08-18T15:25:50.4717622Z 
2025-08-18T15:25:50.4717689Z # common.dsn
2025-08-18T15:25:50.4717783Z 
2025-08-18T15:25:50.4717873Z <a id="common.dsn.build_dsn"></a>
2025-08-18T15:25:50.4718017Z 
2025-08-18T15:25:50.4718084Z #### build\_dsn
2025-08-18T15:25:50.4718191Z 
2025-08-18T15:25:50.4718255Z ```python
2025-08-18T15:25:50.4751061Z def build_dsn(sync: bool = True) -> str
2025-08-18T15:25:50.4751515Z ```
2025-08-18T15:25:50.4751666Z 
2025-08-18T15:25:50.4751890Z Return a Postgres DSN, validating required variables.
2025-08-18T15:25:50.4752252Z 
2025-08-18T15:25:50.4752573Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-18T15:25:50.4753369Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-18T15:25:50.4753932Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-18T15:25:50.4754335Z missing.
2025-08-18T15:25:50.4754450Z 
2025-08-18T15:25:50.4754580Z <a id="common.models_vendor"></a>
2025-08-18T15:25:50.4754776Z 
2025-08-18T15:25:50.4754872Z # common.models\_vendor
2025-08-18T15:25:50.4755258Z 
2025-08-18T15:25:50.4755431Z <a id="common.models_vendor.Vendor"></a>
2025-08-18T15:25:50.4755650Z 
2025-08-18T15:25:50.4755804Z ## Vendor Objects
2025-08-18T15:25:50.4755951Z 
2025-08-18T15:25:50.4756037Z ```python
2025-08-18T15:25:50.4756235Z class Vendor(Base)
2025-08-18T15:25:50.4756451Z ```
2025-08-18T15:25:50.4756554Z 
2025-08-18T15:25:50.4756664Z Vendor of inventory items.
2025-08-18T15:25:50.4756831Z 
2025-08-18T15:25:50.4756970Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-18T15:25:50.4757215Z 
2025-08-18T15:25:50.4757309Z ## VendorPrice Objects
2025-08-18T15:25:50.4757462Z 
2025-08-18T15:25:50.4757543Z ```python
2025-08-18T15:25:50.4757752Z class VendorPrice(Base)
2025-08-18T15:25:50.4757976Z ```
2025-08-18T15:25:50.4758083Z 
2025-08-18T15:25:50.4758222Z Association table linking vendors to pricing.
2025-08-18T15:25:50.4758422Z 
2025-08-18T15:25:50.4758511Z <a id="common.db_url"></a>
2025-08-18T15:25:50.4758850Z 
2025-08-18T15:25:50.4758920Z # common.db\_url
2025-08-18T15:25:50.4759032Z 
2025-08-18T15:25:50.4759118Z <a id="common.db_url.build_url"></a>
2025-08-18T15:25:50.4759277Z 
2025-08-18T15:25:50.4759343Z #### build\_url
2025-08-18T15:25:50.4759455Z 
2025-08-18T15:25:50.4759520Z ```python
2025-08-18T15:25:50.4759706Z def build_url(async_: bool = True) -> str
2025-08-18T15:25:50.4759934Z ```
2025-08-18T15:25:50.4760016Z 
2025-08-18T15:25:50.4760121Z Return Postgres DSN from env or PG_* parts.
2025-08-18T15:25:50.4760297Z 
2025-08-18T15:25:50.4760376Z <a id="common.keepa"></a>
2025-08-18T15:25:50.4760513Z 
2025-08-18T15:25:50.4760586Z # common.keepa
2025-08-18T15:25:50.4760686Z 
2025-08-18T15:25:50.4760761Z <a id="common.llm"></a>
2025-08-18T15:25:50.4760889Z 
2025-08-18T15:25:50.4760954Z # common.llm
2025-08-18T15:25:50.4761057Z 
2025-08-18T15:25:50.4761149Z <a id="common.settings"></a>
2025-08-18T15:25:50.4761291Z 
2025-08-18T15:25:50.4761364Z # common.settings
2025-08-18T15:25:50.4761490Z 
2025-08-18T15:25:50.4761564Z <a id="common.db"></a>
2025-08-18T15:25:50.4761684Z 
2025-08-18T15:25:50.4761749Z # common.db
2025-08-18T15:25:50.4761851Z 
2025-08-18T15:25:50.4761945Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-18T15:25:50.4762117Z 
2025-08-18T15:25:50.4762203Z #### build\_sqlalchemy\_url
2025-08-18T15:25:50.4762338Z 
2025-08-18T15:25:50.4762403Z ```python
2025-08-18T15:25:50.4762592Z def build_sqlalchemy_url() -> str
2025-08-18T15:25:50.4762800Z ```
2025-08-18T15:25:50.4762894Z 
2025-08-18T15:25:50.4762993Z Return Postgres URL for SQLAlchemy engines.
2025-08-18T15:25:50.4763163Z 
2025-08-18T15:25:50.4763253Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-18T15:25:50.4763430Z 
2025-08-18T15:25:50.4763507Z #### build\_asyncpg\_dsn
2025-08-18T15:25:50.4763634Z 
2025-08-18T15:25:50.4763706Z ```python
2025-08-18T15:25:50.4763875Z def build_asyncpg_dsn() -> str
2025-08-18T15:25:50.4764082Z ```
2025-08-18T15:25:50.4764289Z 
2025-08-18T15:25:50.4764423Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-18T15:25:50.4764649Z 
2025-08-18T15:25:50.4764736Z <a id="common.db.refresh_mvs"></a>
2025-08-18T15:25:50.4764888Z 
2025-08-18T15:25:50.4764956Z #### refresh\_mvs
2025-08-18T15:25:50.4765180Z 
2025-08-18T15:25:50.4765246Z ```python
2025-08-18T15:25:50.4765455Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-18T15:25:50.4765703Z ```
2025-08-18T15:25:50.4765785Z 
2025-08-18T15:25:50.4765930Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-18T15:25:50.4766146Z 
2025-08-18T15:25:50.4766224Z <a id="common.config"></a>
2025-08-18T15:25:50.4766361Z 
2025-08-18T15:25:50.4766430Z # common.config
2025-08-18T15:25:50.4766536Z 
2025-08-18T15:25:50.4766617Z <a id="common.base"></a>
2025-08-18T15:25:50.4766739Z 
2025-08-18T15:25:50.4766805Z # common.base
2025-08-18T15:25:50.4766901Z 
2025-08-18T15:25:50.4766989Z <a id="common.base.Base"></a>
2025-08-18T15:25:50.4767130Z 
2025-08-18T15:25:50.4767203Z ## Base Objects
2025-08-18T15:25:50.4767316Z 
2025-08-18T15:25:50.4767380Z ```python
2025-08-18T15:25:50.4767550Z class Base(DeclarativeBase)
2025-08-18T15:25:50.4767747Z ```
2025-08-18T15:25:50.4767831Z 
2025-08-18T15:25:50.4767922Z Base class for SQLAlchemy models.
2025-08-18T15:25:50.4768075Z 
2025-08-18T15:25:50.4768150Z <a id="repricer"></a>
2025-08-18T15:25:50.4768267Z 
2025-08-18T15:25:50.4768343Z # repricer
2025-08-18T15:25:50.4768435Z 
2025-08-18T15:25:50.4768523Z <a id="repricer.app.schemas"></a>
2025-08-18T15:25:50.4768680Z 
2025-08-18T15:25:50.4768758Z # repricer.app.schemas
2025-08-18T15:25:50.4768880Z 
2025-08-18T15:25:50.4768966Z <a id="repricer.app.deps"></a>
2025-08-18T15:25:50.4769116Z 
2025-08-18T15:25:50.4769192Z # repricer.app.deps
2025-08-18T15:25:50.4769303Z 
2025-08-18T15:25:50.4769428Z Placeholder module for Keepa / SP-API clients.
2025-08-18T15:25:50.4769614Z 
2025-08-18T15:25:50.4769698Z <a id="repricer.app.logic"></a>
2025-08-18T15:25:50.4769850Z 
2025-08-18T15:25:50.4769924Z # repricer.app.logic
2025-08-18T15:25:50.4770171Z 
2025-08-18T15:25:50.4770269Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-18T15:25:50.4770448Z 
2025-08-18T15:25:50.4770513Z #### MIN\_MARGIN
2025-08-18T15:25:50.4770615Z 
2025-08-18T15:25:50.4770687Z 15 % ROI
2025-08-18T15:25:50.4770774Z 
2025-08-18T15:25:50.4770878Z <a id="repricer.app.logic.compute_price"></a>
2025-08-18T15:25:50.4771069Z 
2025-08-18T15:25:50.4771140Z #### compute\_price
2025-08-18T15:25:50.4771247Z 
2025-08-18T15:25:50.4771311Z ```python
2025-08-18T15:25:50.4771570Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-18T15:25:50.4771875Z ```
2025-08-18T15:25:50.4771961Z 
2025-08-18T15:25:50.4772070Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-18T15:25:50.4772362Z Replace with real competitive logic later.
2025-08-18T15:25:50.4772533Z 
2025-08-18T15:25:50.4772618Z <a id="repricer.app.main"></a>
2025-08-18T15:25:50.4772770Z 
2025-08-18T15:25:50.4772845Z # repricer.app.main
2025-08-18T15:25:50.4772960Z 
2025-08-18T15:25:50.4773039Z <a id="repricer.app"></a>
2025-08-18T15:25:50.4773186Z 
2025-08-18T15:25:50.4773255Z # repricer.app
2025-08-18T15:25:50.4773357Z 
2025-08-18T15:25:50.4773460Z <a id="repricer.tests.test_imports"></a>
2025-08-18T15:25:50.4773627Z 
2025-08-18T15:25:50.4773711Z # repricer.tests.test\_imports
2025-08-18T15:25:50.4773860Z 
2025-08-18T15:25:50.4773951Z <a id="repricer.tests.test_smoke"></a>
2025-08-18T15:25:50.4774113Z 
2025-08-18T15:25:50.4774196Z # repricer.tests.test\_smoke
2025-08-18T15:25:50.4774349Z 
2025-08-18T15:25:50.4774428Z <a id="repricer.tests"></a>
2025-08-18T15:25:50.4774559Z 
2025-08-18T15:25:50.4774637Z # repricer.tests
2025-08-18T15:25:50.4774744Z 
2025-08-18T15:25:50.4774810Z <a id="db"></a>
2025-08-18T15:25:50.4774911Z 
2025-08-18T15:25:50.4774978Z # db
2025-08-18T15:25:50.4775168Z 
2025-08-18T15:25:50.4775244Z <a id="db.utils.views"></a>
2025-08-18T15:25:50.4775381Z 
2025-08-18T15:25:50.4775449Z # db.utils.views
2025-08-18T15:25:50.4775552Z 
2025-08-18T15:25:50.4775818Z <a id="db.utils.views.replace_view"></a>
2025-08-18T15:25:50.4776001Z 
2025-08-18T15:25:50.4776070Z #### replace\_view
2025-08-18T15:25:50.4776179Z 
2025-08-18T15:25:50.4776254Z ```python
2025-08-18T15:25:50.4776448Z def replace_view(name: str, new_sql: str) -> None
2025-08-18T15:25:50.4776702Z ```
2025-08-18T15:25:50.4776789Z 
2025-08-18T15:25:50.4776878Z Drop and recreate a SQL view atomically.
2025-08-18T15:25:50.4777052Z 
2025-08-18T15:25:50.4777125Z <a id="db.utils"></a>
2025-08-18T15:25:50.4777240Z 
2025-08-18T15:25:50.4777310Z # db.utils
2025-08-18T15:25:50.4777403Z 
2025-08-18T15:25:50.4777481Z <a id="price_importer"></a>
2025-08-18T15:25:50.4777618Z 
2025-08-18T15:25:50.4777697Z # price\_importer
2025-08-18T15:25:50.4777804Z 
2025-08-18T15:25:50.4777909Z <a id="price_importer.services_common.dsn"></a>
2025-08-18T15:25:50.4778102Z 
2025-08-18T15:25:50.4778196Z # price\_importer.services\_common.dsn
2025-08-18T15:25:50.4778360Z 
2025-08-18T15:25:50.4778491Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-18T15:25:50.4778707Z 
2025-08-18T15:25:50.4778774Z #### build\_dsn
2025-08-18T15:25:50.4778878Z 
2025-08-18T15:25:50.4778947Z ```python
2025-08-18T15:25:50.4779125Z def build_dsn(sync: bool = True) -> str
2025-08-18T15:25:50.4779349Z ```
2025-08-18T15:25:50.4779433Z 
2025-08-18T15:25:50.4779499Z Return safe DSN.
2025-08-18T15:25:50.4779613Z 
2025-08-18T15:25:50.4779987Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-18T15:25:50.4780192Z 
2025-08-18T15:25:50.4780330Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-18T15:25:50.4780534Z 
2025-08-18T15:25:50.4780646Z # price\_importer.services\_common.models\_vendor
2025-08-18T15:25:50.4780846Z 
2025-08-18T15:25:50.4780954Z <a id="price_importer.services_common.db_url"></a>
2025-08-18T15:25:50.4781142Z 
2025-08-18T15:25:50.4781238Z # price\_importer.services\_common.db\_url
2025-08-18T15:25:50.4781417Z 
2025-08-18T15:25:50.4781584Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-18T15:25:50.4781812Z 
2025-08-18T15:25:50.4782010Z #### build\_url
2025-08-18T15:25:50.4782117Z 
2025-08-18T15:25:50.4782183Z ```python
2025-08-18T15:25:50.4782370Z def build_url(async_: bool = True) -> str
2025-08-18T15:25:50.4782598Z ```
2025-08-18T15:25:50.4782693Z 
2025-08-18T15:25:50.4782796Z Return Postgres DSN from env or PG_* parts.
2025-08-18T15:25:50.4782970Z 
2025-08-18T15:25:50.4783079Z <a id="price_importer.services_common.keepa"></a>
2025-08-18T15:25:50.4783282Z 
2025-08-18T15:25:50.4783376Z # price\_importer.services\_common.keepa
2025-08-18T15:25:50.4783543Z 
2025-08-18T15:25:50.4783654Z <a id="price_importer.services_common.llm"></a>
2025-08-18T15:25:50.4783836Z 
2025-08-18T15:25:50.4783928Z # price\_importer.services\_common.llm
2025-08-18T15:25:50.4784102Z 
2025-08-18T15:25:50.4784217Z <a id="price_importer.services_common.settings"></a>
2025-08-18T15:25:50.4784408Z 
2025-08-18T15:25:50.4784516Z # price\_importer.services\_common.settings
2025-08-18T15:25:50.4784691Z 
2025-08-18T15:25:50.4784798Z <a id="price_importer.services_common.db"></a>
2025-08-18T15:25:50.4784983Z 
2025-08-18T15:25:50.4785340Z # price\_importer.services\_common.db
2025-08-18T15:25:50.4785599Z 
2025-08-18T15:25:50.4785839Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-18T15:25:50.4786171Z 
2025-08-18T15:25:50.4786254Z #### build\_sqlalchemy\_url
2025-08-18T15:25:50.4786388Z 
2025-08-18T15:25:50.4786463Z ```python
2025-08-18T15:25:50.4786644Z def build_sqlalchemy_url() -> str
2025-08-18T15:25:50.4786862Z ```
2025-08-18T15:25:50.4786947Z 
2025-08-18T15:25:50.4787043Z Return Postgres URL for SQLAlchemy engines.
2025-08-18T15:25:50.4787235Z 
2025-08-18T15:25:50.4787398Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-18T15:25:50.4787629Z 
2025-08-18T15:25:50.4787707Z #### build\_asyncpg\_dsn
2025-08-18T15:25:50.4787843Z 
2025-08-18T15:25:50.4787907Z ```python
2025-08-18T15:25:50.4788087Z def build_asyncpg_dsn() -> str
2025-08-18T15:25:50.4788283Z ```
2025-08-18T15:25:50.4788504Z 
2025-08-18T15:25:50.4788653Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-18T15:25:50.4788861Z 
2025-08-18T15:25:50.4788989Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-18T15:25:50.4789199Z 
2025-08-18T15:25:50.4789265Z #### refresh\_mvs
2025-08-18T15:25:50.4789371Z 
2025-08-18T15:25:50.4789434Z ```python
2025-08-18T15:25:50.4789643Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-18T15:25:50.4789896Z ```
2025-08-18T15:25:50.4789977Z 
2025-08-18T15:25:50.4790113Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-18T15:25:50.4790333Z 
2025-08-18T15:25:50.4790428Z <a id="price_importer.services_common"></a>
2025-08-18T15:25:50.4790600Z 
2025-08-18T15:25:50.4790689Z # price\_importer.services\_common
2025-08-18T15:25:50.4790847Z 
2025-08-18T15:25:50.4790953Z <a id="price_importer.services_common.base"></a>
2025-08-18T15:25:50.4791136Z 
2025-08-18T15:25:50.4791236Z # price\_importer.services\_common.base
2025-08-18T15:25:50.4791409Z 
2025-08-18T15:25:50.4791499Z <a id="price_importer.normaliser"></a>
2025-08-18T15:25:50.4791678Z 
2025-08-18T15:25:50.4791762Z # price\_importer.normaliser
2025-08-18T15:25:50.4791901Z 
2025-08-18T15:25:50.4792005Z <a id="price_importer.common.models_vendor"></a>
2025-08-18T15:25:50.4792192Z 
2025-08-18T15:25:50.4792281Z # price\_importer.common.models\_vendor
2025-08-18T15:25:50.4792447Z 
2025-08-18T15:25:50.4792547Z <a id="price_importer.common.db_url"></a>
2025-08-18T15:25:50.4792718Z 
2025-08-18T15:25:50.4792805Z # price\_importer.common.db\_url
2025-08-18T15:25:50.4792960Z 
2025-08-18T15:25:50.4793066Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-18T15:25:50.4793252Z 
2025-08-18T15:25:50.4793318Z #### make\_dsn
2025-08-18T15:25:50.4793425Z 
2025-08-18T15:25:50.4793488Z ```python
2025-08-18T15:25:50.4793668Z def make_dsn(async_: bool = False) -> str
2025-08-18T15:25:50.4793890Z ```
2025-08-18T15:25:50.4793977Z 
2025-08-18T15:25:50.4794101Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-18T15:25:50.4794307Z 
2025-08-18T15:25:50.4794532Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-18T15:25:50.4794732Z 
2025-08-18T15:25:50.4794799Z #### build\_url
2025-08-18T15:25:50.4794902Z 
2025-08-18T15:25:50.4794966Z ```python
2025-08-18T15:25:50.4795366Z def build_url(async_: bool = False) -> str
2025-08-18T15:25:50.4795608Z ```
2025-08-18T15:25:50.4795691Z 
2025-08-18T15:25:50.4795817Z Return Postgres DSN built from environment variables.
2025-08-18T15:25:50.4796028Z 
2025-08-18T15:25:50.4796127Z <a id="price_importer.common"></a>
2025-08-18T15:25:50.4796283Z 
2025-08-18T15:25:50.4796364Z # price\_importer.common
2025-08-18T15:25:50.4796503Z 
2025-08-18T15:25:50.4796596Z <a id="price_importer.common.base"></a>
2025-08-18T15:25:50.4796764Z 
2025-08-18T15:25:50.4796857Z # price\_importer.common.base
2025-08-18T15:25:50.4797002Z 
2025-08-18T15:25:50.4797101Z <a id="price_importer.tests.conftest"></a>
2025-08-18T15:25:50.4797273Z 
2025-08-18T15:25:50.4797368Z # price\_importer.tests.conftest
2025-08-18T15:25:50.4797827Z 
2025-08-18T15:25:50.4818690Z <a id="price_importer.tests.test_reader"></a>
2025-08-18T15:25:50.4819043Z 
2025-08-18T15:25:50.4819193Z # price\_importer.tests.test\_reader
2025-08-18T15:25:50.4819462Z 
2025-08-18T15:25:50.4819641Z <a id="price_importer.tests.test_imports"></a>
2025-08-18T15:25:50.4819949Z 
2025-08-18T15:25:50.4820100Z # price\_importer.tests.test\_imports
2025-08-18T15:25:50.4820364Z 
2025-08-18T15:25:50.4820538Z <a id="price_importer.tests.test_smoke"></a>
2025-08-18T15:25:50.4820837Z 
2025-08-18T15:25:50.4820976Z # price\_importer.tests.test\_smoke
2025-08-18T15:25:50.4821248Z 
2025-08-18T15:25:50.4821426Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-18T15:25:50.4821734Z 
2025-08-18T15:25:50.4821887Z # price\_importer.tests.test\_normaliser
2025-08-18T15:25:50.4822190Z 
2025-08-18T15:25:50.4822335Z <a id="price_importer.tests"></a>
2025-08-18T15:25:50.4822595Z 
2025-08-18T15:25:50.4822743Z # price\_importer.tests
2025-08-18T15:25:50.4823206Z 
2025-08-18T15:25:50.4823368Z <a id="price_importer.reader"></a>
2025-08-18T15:25:50.4823662Z 
2025-08-18T15:25:50.4823809Z # price\_importer.reader
2025-08-18T15:25:50.4824050Z 
2025-08-18T15:25:50.4824223Z <a id="price_importer.repository"></a>
2025-08-18T15:25:50.4824537Z 
2025-08-18T15:25:50.4824683Z # price\_importer.repository
2025-08-18T15:25:50.4824925Z 
2025-08-18T15:25:50.4825280Z <a id="price_importer.import"></a>
2025-08-18T15:25:50.4825566Z 
2025-08-18T15:25:50.4825703Z # price\_importer.import
2025-08-18T15:25:50.4825933Z 
2025-08-18T15:25:50.4826065Z <a id="fees_h10"></a>
2025-08-18T15:25:50.4826294Z 
2025-08-18T15:25:50.4826405Z # fees\_h10
2025-08-18T15:25:50.4826580Z 
2025-08-18T15:25:50.4826709Z <a id="fees_h10.worker"></a>
2025-08-18T15:25:50.4826950Z 
2025-08-18T15:25:50.4827074Z # fees\_h10.worker
2025-08-18T15:25:50.4827264Z 
2025-08-18T15:25:50.4827431Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-18T15:25:50.4827752Z 
2025-08-18T15:25:50.4827887Z #### list\_active\_asins
2025-08-18T15:25:50.4828119Z 
2025-08-18T15:25:50.4828232Z ```python
2025-08-18T15:25:50.4828525Z def list_active_asins() -> list[str]
2025-08-18T15:25:50.4828901Z ```
2025-08-18T15:25:50.4829048Z 
2025-08-18T15:25:50.4829243Z Return known ASINs or an empty list if unavailable.
2025-08-18T15:25:50.4829597Z 
2025-08-18T15:25:50.4829757Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-18T15:25:50.4830046Z 
2025-08-18T15:25:50.4830184Z # fees\_h10.tests.test\_smoke
2025-08-18T15:25:50.4830447Z 
2025-08-18T15:25:50.4830578Z <a id="fees_h10.tests"></a>
2025-08-18T15:25:50.4830813Z 
2025-08-18T15:25:50.4830929Z # fees\_h10.tests
2025-08-18T15:25:50.4831125Z 
2025-08-18T15:25:50.4831255Z <a id="fees_h10.client"></a>
2025-08-18T15:25:50.4831494Z 
2025-08-18T15:25:50.4831605Z # fees\_h10.client
2025-08-18T15:25:50.4831784Z 
2025-08-18T15:25:50.4831924Z <a id="fees_h10.repository"></a>
2025-08-18T15:25:50.4832165Z 
2025-08-18T15:25:50.4832333Z # fees\_h10.repository
2025-08-18T15:25:50.4832547Z 
2025-08-18T15:25:50.4832667Z <a id="emailer"></a>
2025-08-18T15:25:50.4833108Z 
2025-08-18T15:25:50.4833200Z # emailer
2025-08-18T15:25:50.4833384Z 
2025-08-18T15:25:50.4833570Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-18T15:25:50.4833897Z 
2025-08-18T15:25:50.4834058Z # emailer.tests.test\_import\_emailer
2025-08-18T15:25:50.4834293Z 
2025-08-18T15:25:50.4834391Z <a id="emailer.tests.test_smoke"></a>
2025-08-18T15:25:50.4834555Z 
2025-08-18T15:25:50.4834643Z # emailer.tests.test\_smoke
2025-08-18T15:25:50.4834797Z 
2025-08-18T15:25:50.4834876Z <a id="emailer.tests"></a>
2025-08-18T15:25:50.4835171Z 
2025-08-18T15:25:50.4835283Z # emailer.tests
2025-08-18T15:25:50.4835405Z 
2025-08-18T15:25:50.4835497Z <a id="emailer.generate_body"></a>
2025-08-18T15:25:50.4835654Z 
2025-08-18T15:25:50.4835738Z # emailer.generate\_body
2025-08-18T15:25:50.4835874Z 
2025-08-18T15:25:50.4835949Z <a id="llm_server"></a>
2025-08-18T15:25:50.4836077Z 
2025-08-18T15:25:50.4836142Z # llm\_server
2025-08-18T15:25:50.4836241Z 
2025-08-18T15:25:50.4836327Z <a id="llm_server.app"></a>
2025-08-18T15:25:50.4836477Z 
2025-08-18T15:25:50.4836544Z # llm\_server.app
2025-08-18T15:25:50.4836652Z 
