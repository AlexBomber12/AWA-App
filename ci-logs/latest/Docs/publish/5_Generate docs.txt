2025-08-18T19:42:39.9361524Z ##[group]Run pydoc-markdown
2025-08-18T19:42:39.9361926Z [36;1mpydoc-markdown[0m
2025-08-18T19:42:39.9404519Z shell: /usr/bin/bash -e {0}
2025-08-18T19:42:39.9404872Z env:
2025-08-18T19:42:39.9405237Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T19:42:39.9405870Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-18T19:42:39.9406477Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T19:42:39.9407018Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T19:42:39.9407548Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T19:42:39.9408097Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-18T19:42:39.9408543Z ##[endgroup]
2025-08-18T19:42:40.3085721Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-18T19:42:40.3087262Z Unknown key(s) "{'output_directory'}" at:
2025-08-18T19:42:40.3088360Z In "pydoc-markdown.yml"
2025-08-18T19:42:40.3089698Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-18T19:42:40.3091177Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-18T19:42:40.3092272Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-18T19:42:40.3093022Z 
2025-08-18T19:42:40.6313747Z <a id="__init__"></a>
2025-08-18T19:42:40.6314590Z 
2025-08-18T19:42:40.6314924Z # \_\_init\_\_
2025-08-18T19:42:40.6315439Z 
2025-08-18T19:42:40.6315745Z <a id="api"></a>
2025-08-18T19:42:40.6316157Z 
2025-08-18T19:42:40.6316316Z # api
2025-08-18T19:42:40.6316551Z 
2025-08-18T19:42:40.6316748Z <a id="api.errors"></a>
2025-08-18T19:42:40.6317068Z 
2025-08-18T19:42:40.6317244Z # api.errors
2025-08-18T19:42:40.6317491Z 
2025-08-18T19:42:40.6317700Z <a id="api.sentry_config"></a>
2025-08-18T19:42:40.6318073Z 
2025-08-18T19:42:40.6318270Z # api.sentry\_config
2025-08-18T19:42:40.6318573Z 
2025-08-18T19:42:40.6318808Z <a id="api.tests.test_sentry_scrub"></a>
2025-08-18T19:42:40.6319516Z 
2025-08-18T19:42:40.6320039Z # api.tests.test\_sentry\_scrub
2025-08-18T19:42:40.6320422Z 
2025-08-18T19:42:40.6320650Z <a id="api.tests.test_errors_json"></a>
2025-08-18T19:42:40.6321081Z 
2025-08-18T19:42:40.6321283Z # api.tests.test\_errors\_json
2025-08-18T19:42:40.6321640Z 
2025-08-18T19:42:40.6321843Z <a id="api.tests.test_llm"></a>
2025-08-18T19:42:40.6322197Z 
2025-08-18T19:42:40.6322379Z # api.tests.test\_llm
2025-08-18T19:42:40.6322689Z 
2025-08-18T19:42:40.6322867Z <a id="api.tests.test_sentry_event"></a>
2025-08-18T19:42:40.6323208Z 
2025-08-18T19:42:40.6323372Z # api.tests.test\_sentry\_event
2025-08-18T19:42:40.6323660Z 
2025-08-18T19:42:40.6323825Z <a id="api.tests.test_cors"></a>
2025-08-18T19:42:40.6324123Z 
2025-08-18T19:42:40.6324276Z # api.tests.test\_cors
2025-08-18T19:42:40.6324517Z 
2025-08-18T19:42:40.6324686Z <a id="api.tests.test_imports"></a>
2025-08-18T19:42:40.6325010Z 
2025-08-18T19:42:40.6325165Z # api.tests.test\_imports
2025-08-18T19:42:40.6325426Z 
2025-08-18T19:42:40.6325600Z <a id="api.tests.test_rate_limit"></a>
2025-08-18T19:42:40.6325950Z 
2025-08-18T19:42:40.6326111Z # api.tests.test\_rate\_limit
2025-08-18T19:42:40.6326400Z 
2025-08-18T19:42:40.6326598Z <a id="api.tests.test_rate_limit.app"></a>
2025-08-18T19:42:40.6326958Z 
2025-08-18T19:42:40.6327089Z #### app
2025-08-18T19:42:40.6327271Z 
2025-08-18T19:42:40.6327402Z noqa: E402
2025-08-18T19:42:40.6327587Z 
2025-08-18T19:42:40.6327761Z <a id="api.tests.test_entrypoint"></a>
2025-08-18T19:42:40.6328097Z 
2025-08-18T19:42:40.6328260Z # api.tests.test\_entrypoint
2025-08-18T19:42:40.6328543Z 
2025-08-18T19:42:40.6328715Z <a id="api.tests.test_health"></a>
2025-08-18T19:42:40.6329137Z 
2025-08-18T19:42:40.6329291Z # api.tests.test\_health
2025-08-18T19:42:40.6329554Z 
2025-08-18T19:42:40.6329715Z <a id="api.logging_config"></a>
2025-08-18T19:42:40.6330000Z 
2025-08-18T19:42:40.6330143Z # api.logging\_config
2025-08-18T19:42:40.6330387Z 
2025-08-18T19:42:40.6330552Z <a id="api.migrations.env"></a>
2025-08-18T19:42:40.6330843Z 
2025-08-18T19:42:40.6331005Z # api.migrations.env
2025-08-18T19:42:40.6331454Z 
2025-08-18T19:42:40.6331694Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-18T19:42:40.6332122Z 
2025-08-18T19:42:40.6332344Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-18T19:42:40.6332728Z 
2025-08-18T19:42:40.6332945Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-18T19:42:40.6333340Z 
2025-08-18T19:42:40.6333503Z # api.migrations.versions.0004\_fee\_cron
2025-08-18T19:42:40.6333812Z 
2025-08-18T19:42:40.6334090Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-18T19:42:40.6334519Z 
2025-08-18T19:42:40.6334762Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-18T19:42:40.6335158Z 
2025-08-18T19:42:40.6335371Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-18T19:42:40.6335733Z 
2025-08-18T19:42:40.6335919Z # api.migrations.versions.0003\_vendor\_prices
2025-08-18T19:42:40.6336254Z 
2025-08-18T19:42:40.6336458Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-18T19:42:40.6336825Z 
2025-08-18T19:42:40.6337010Z # api.migrations.versions.0024\_create\_buybox
2025-08-18T19:42:40.6337335Z 
2025-08-18T19:42:40.6337552Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-18T19:42:40.6337928Z 
2025-08-18T19:42:40.6338117Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-18T19:42:40.6338461Z 
2025-08-18T19:42:40.6338669Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-18T19:42:40.6339123Z 
2025-08-18T19:42:40.6339309Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-18T19:42:40.6339641Z 
2025-08-18T19:42:40.6339861Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-18T19:42:40.6340226Z 
2025-08-18T19:42:40.6340406Z # api.migrations.versions.0020\_unified\_schema
2025-08-18T19:42:40.6340741Z 
2025-08-18T19:42:40.6340984Z <a id="api.migrations.versions.0025_pr4_indexes_loadlog"></a>
2025-08-18T19:42:40.6341380Z 
2025-08-18T19:42:40.6341593Z # api.migrations.versions.0025\_pr4\_indexes\_loadlog
2025-08-18T19:42:40.6342070Z 
2025-08-18T19:42:40.6342290Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-18T19:42:40.6342669Z 
2025-08-18T19:42:40.6342858Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-18T19:42:40.6343191Z 
2025-08-18T19:42:40.6343402Z <a id="api.migrations.versions.0026_amazon_new_reports"></a>
2025-08-18T19:42:40.6343753Z 
2025-08-18T19:42:40.6343933Z # api.migrations.versions.0026\_amazon\_new\_reports
2025-08-18T19:42:40.6344247Z 
2025-08-18T19:42:40.6344424Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-18T19:42:40.6344726Z 
2025-08-18T19:42:40.6344870Z # api.migrations.versions.0001\_baseline
2025-08-18T19:42:40.6345144Z 
2025-08-18T19:42:40.6345283Z <a id="api.migrations.versions"></a>
2025-08-18T19:42:40.6345537Z 
2025-08-18T19:42:40.6345660Z # api.migrations.versions
2025-08-18T19:42:40.6345866Z 
2025-08-18T19:42:40.6345990Z <a id="api.migrations"></a>
2025-08-18T19:42:40.6346199Z 
2025-08-18T19:42:40.6346308Z # api.migrations
2025-08-18T19:42:40.6346479Z 
2025-08-18T19:42:40.6346589Z <a id="api.db"></a>
2025-08-18T19:42:40.6346760Z 
2025-08-18T19:42:40.6346856Z # api.db
2025-08-18T19:42:40.6346991Z 
2025-08-18T19:42:40.6347114Z <a id="api.routes.stats"></a>
2025-08-18T19:42:40.6347336Z 
2025-08-18T19:42:40.6347445Z # api.routes.stats
2025-08-18T19:42:40.6347644Z 
2025-08-18T19:42:40.6347776Z <a id="api.routes.stats.kpi"></a>
2025-08-18T19:42:40.6348116Z 
2025-08-18T19:42:40.6348213Z #### kpi
2025-08-18T19:42:40.6348354Z 
2025-08-18T19:42:40.6348454Z ```python
2025-08-18T19:42:40.6348719Z @router.get("/stats/kpi")
2025-08-18T19:42:40.6349205Z def kpi() -> List[Dict[str, int]]
2025-08-18T19:42:40.6349534Z ```
2025-08-18T19:42:40.6349664Z 
2025-08-18T19:42:40.6349784Z Return KPI metrics (mock).
2025-08-18T19:42:40.6349992Z 
2025-08-18T19:42:40.6350149Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-18T19:42:40.6350428Z 
2025-08-18T19:42:40.6350533Z #### roi\_by\_vendor
2025-08-18T19:42:40.6350711Z 
2025-08-18T19:42:40.6350808Z ```python
2025-08-18T19:42:40.6351082Z @router.get("/stats/roi_by_vendor")
2025-08-18T19:42:40.6351602Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-18T19:42:40.6351982Z ```
2025-08-18T19:42:40.6352107Z 
2025-08-18T19:42:40.6352229Z Return ROI percent by vendor.
2025-08-18T19:42:40.6352451Z 
2025-08-18T19:42:40.6352591Z <a id="api.routes.stats.roi_trend"></a>
2025-08-18T19:42:40.6352873Z 
2025-08-18T19:42:40.6352973Z #### roi\_trend
2025-08-18T19:42:40.6353133Z 
2025-08-18T19:42:40.6353229Z ```python
2025-08-18T19:42:40.6353486Z @router.get("/stats/roi_trend")
2025-08-18T19:42:40.6353816Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-18T19:42:40.6354149Z ```
2025-08-18T19:42:40.6354262Z 
2025-08-18T19:42:40.6354364Z Return 30-day ROI trend.
2025-08-18T19:42:40.6354543Z 
2025-08-18T19:42:40.6354650Z <a id="api.routes.roi"></a>
2025-08-18T19:42:40.6354835Z 
2025-08-18T19:42:40.6354935Z # api.routes.roi
2025-08-18T19:42:40.6355091Z 
2025-08-18T19:42:40.6355207Z <a id="api.routes.health"></a>
2025-08-18T19:42:40.6355412Z 
2025-08-18T19:42:40.6355522Z # api.routes.health
2025-08-18T19:42:40.6355676Z 
2025-08-18T19:42:40.6355802Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-18T19:42:40.6356036Z 
2025-08-18T19:42:40.6356132Z #### MAX\_SKEW
2025-08-18T19:42:40.6356269Z 
2025-08-18T19:42:40.6356356Z seconds
2025-08-18T19:42:40.6356481Z 
2025-08-18T19:42:40.6356605Z <a id="api.routes.health.health"></a>
2025-08-18T19:42:40.6356835Z 
2025-08-18T19:42:40.6356927Z #### health
2025-08-18T19:42:40.6357051Z 
2025-08-18T19:42:40.6357140Z ```python
2025-08-18T19:42:40.6357410Z @router.get("/health", include_in_schema=False)
2025-08-18T19:42:40.6357939Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-18T19:42:40.6358430Z ```
2025-08-18T19:42:40.6358543Z 
2025-08-18T19:42:40.6358701Z Return 200 when DB reachable and clocks are in sync.
2025-08-18T19:42:40.6359108Z 
2025-08-18T19:42:40.6359230Z <a id="api.routes.repository"></a>
2025-08-18T19:42:40.6359450Z 
2025-08-18T19:42:40.6359681Z # api.routes.repository
2025-08-18T19:42:40.6359863Z 
2025-08-18T19:42:40.6359963Z <a id="api.routes"></a>
2025-08-18T19:42:40.6360128Z 
2025-08-18T19:42:40.6360226Z # api.routes
2025-08-18T19:42:40.6360364Z 
2025-08-18T19:42:40.6360471Z <a id="api.models.fee"></a>
2025-08-18T19:42:40.6360664Z 
2025-08-18T19:42:40.6360757Z # api.models.fee
2025-08-18T19:42:40.6360903Z 
2025-08-18T19:42:40.6361005Z <a id="api.models"></a>
2025-08-18T19:42:40.6361173Z 
2025-08-18T19:42:40.6361262Z # api.models
2025-08-18T19:42:40.6361393Z 
2025-08-18T19:42:40.6361510Z <a id="api.roi_repository"></a>
2025-08-18T19:42:40.6361709Z 
2025-08-18T19:42:40.6361810Z # api.roi\_repository
2025-08-18T19:42:40.6361974Z 
2025-08-18T19:42:40.6362072Z <a id="api.main"></a>
2025-08-18T19:42:40.6362229Z 
2025-08-18T19:42:40.6362316Z # api.main
2025-08-18T19:42:40.6362448Z 
2025-08-18T19:42:40.6362554Z <a id="api.main.ready"></a>
2025-08-18T19:42:40.6362736Z 
2025-08-18T19:42:40.6362826Z #### ready
2025-08-18T19:42:40.6362947Z 
2025-08-18T19:42:40.6363041Z ```python
2025-08-18T19:42:40.6363385Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-18T19:42:40.6363936Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-18T19:42:40.6364391Z                                                                       str]
2025-08-18T19:42:40.6364686Z ```
2025-08-18T19:42:40.6364794Z 
2025-08-18T19:42:40.6364913Z Return 200 only when migrations are at head.
2025-08-18T19:42:40.6365136Z 
2025-08-18T19:42:40.6365232Z <a id="api.config"></a>
2025-08-18T19:42:40.6365381Z 
2025-08-18T19:42:40.6365462Z # api.config
2025-08-18T19:42:40.6365585Z 
2025-08-18T19:42:40.6365667Z <a id="etl"></a>
2025-08-18T19:42:40.6365798Z 
2025-08-18T19:42:40.6365876Z # etl
2025-08-18T19:42:40.6365989Z 
2025-08-18T19:42:40.6366091Z <a id="etl.fba_fee_ingestor"></a>
2025-08-18T19:42:40.6366278Z 
2025-08-18T19:42:40.6366374Z # etl.fba\_fee\_ingestor
2025-08-18T19:42:40.6366534Z 
2025-08-18T19:42:40.6366634Z <a id="etl.sp_fees_ingestor"></a>
2025-08-18T19:42:40.6366937Z 
2025-08-18T19:42:40.6367034Z # etl.sp\_fees\_ingestor
2025-08-18T19:42:40.6367188Z 
2025-08-18T19:42:40.6367287Z <a id="etl.keepa_ingestor"></a>
2025-08-18T19:42:40.6367469Z 
2025-08-18T19:42:40.6367556Z # etl.keepa\_ingestor
2025-08-18T19:42:40.6367718Z 
2025-08-18T19:42:40.6367803Z <a id="etl.db"></a>
2025-08-18T19:42:40.6367936Z 
2025-08-18T19:42:40.6368015Z # etl.db
2025-08-18T19:42:40.6368131Z 
2025-08-18T19:42:40.6368234Z <a id="etl.dialects.schemas"></a>
2025-08-18T19:42:40.6368423Z 
2025-08-18T19:42:40.6368526Z # etl.dialects.schemas
2025-08-18T19:42:40.6368676Z 
2025-08-18T19:42:40.6368805Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-18T19:42:40.6369146Z 
2025-08-18T19:42:40.6369260Z # etl.dialects.amazon\_reimbursements
2025-08-18T19:42:40.6369468Z 
2025-08-18T19:42:40.6369633Z <a id="etl.dialects.amazon_ads_sp_cost"></a>
2025-08-18T19:42:40.6369856Z 
2025-08-18T19:42:40.6369969Z # etl.dialects.amazon\_ads\_sp\_cost
2025-08-18T19:42:40.6370175Z 
2025-08-18T19:42:40.6370289Z <a id="etl.dialects.amazon_returns"></a>
2025-08-18T19:42:40.6370512Z 
2025-08-18T19:42:40.6370615Z # etl.dialects.amazon\_returns
2025-08-18T19:42:40.6370794Z 
2025-08-18T19:42:40.6370913Z <a id="etl.dialects.amazon_fee_preview"></a>
2025-08-18T19:42:40.6371139Z 
2025-08-18T19:42:40.6371246Z # etl.dialects.amazon\_fee\_preview
2025-08-18T19:42:40.6371441Z 
2025-08-18T19:42:40.6371578Z <a id="etl.dialects.amazon_inventory_ledger"></a>
2025-08-18T19:42:40.6371819Z 
2025-08-18T19:42:40.6371930Z # etl.dialects.amazon\_inventory\_ledger
2025-08-18T19:42:40.6372149Z 
2025-08-18T19:42:40.6372268Z <a id="etl.dialects.amazon_settlements"></a>
2025-08-18T19:42:40.6372488Z 
2025-08-18T19:42:40.6372597Z # etl.dialects.amazon\_settlements
2025-08-18T19:42:40.6372800Z 
2025-08-18T19:42:40.6372899Z <a id="etl.dialects"></a>
2025-08-18T19:42:40.6373063Z 
2025-08-18T19:42:40.6373150Z # etl.dialects
2025-08-18T19:42:40.6373276Z 
2025-08-18T19:42:40.6373362Z <a id="ingest"></a>
2025-08-18T19:42:40.6373612Z 
2025-08-18T19:42:40.6373702Z # ingest
2025-08-18T19:42:40.6373811Z 
2025-08-18T19:42:40.6373905Z <a id="ingest.maintenance"></a>
2025-08-18T19:42:40.6374075Z 
2025-08-18T19:42:40.6374158Z # ingest.maintenance
2025-08-18T19:42:40.6374293Z 
2025-08-18T19:42:40.6374388Z <a id="ingest.copy_loader"></a>
2025-08-18T19:42:40.6374550Z 
2025-08-18T19:42:40.6374633Z # ingest.copy\_loader
2025-08-18T19:42:40.6374767Z 
2025-08-18T19:42:40.6374890Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-18T19:42:40.6375106Z 
2025-08-18T19:42:40.6375192Z #### copy\_df\_via\_temp
2025-08-18T19:42:40.6375338Z 
2025-08-18T19:42:40.6375411Z ```python
2025-08-18T19:42:40.6375606Z def copy_df_via_temp(engine: Engine,
2025-08-18T19:42:40.6375885Z                      df: pd.DataFrame,
2025-08-18T19:42:40.6376171Z                      target_table: str,
2025-08-18T19:42:40.6376434Z                      *,
2025-08-18T19:42:40.6376702Z                      target_schema: Optional[str] = None,
2025-08-18T19:42:40.6377039Z                      columns: Sequence[str],
2025-08-18T19:42:40.6377367Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-18T19:42:40.6377700Z                      analyze_after: bool = False,
2025-08-18T19:42:40.6378016Z                      connection: Any | None = None) -> int
2025-08-18T19:42:40.6378301Z ```
2025-08-18T19:42:40.6378405Z 
2025-08-18T19:42:40.6378585Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-18T19:42:40.6378864Z 
2025-08-18T19:42:40.6379066Z <a id="ingest.tests.test_smoke"></a>
2025-08-18T19:42:40.6379256Z 
2025-08-18T19:42:40.6379347Z # ingest.tests.test\_smoke
2025-08-18T19:42:40.6379509Z 
2025-08-18T19:42:40.6379600Z <a id="ingest.tests"></a>
2025-08-18T19:42:40.6379748Z 
2025-08-18T19:42:40.6379826Z # ingest.tests
2025-08-18T19:42:40.6379949Z 
2025-08-18T19:42:40.6380047Z <a id="ingest.upload_router"></a>
2025-08-18T19:42:40.6380223Z 
2025-08-18T19:42:40.6380316Z # ingest.upload\_router
2025-08-18T19:42:40.6380459Z 
2025-08-18T19:42:40.6380558Z <a id="ingest.email_watcher"></a>
2025-08-18T19:42:40.6380852Z 
2025-08-18T19:42:40.6380936Z # ingest.email\_watcher
2025-08-18T19:42:40.6381073Z 
2025-08-18T19:42:40.6381174Z <a id="ingest.email_watcher.main"></a>
2025-08-18T19:42:40.6381371Z 
2025-08-18T19:42:40.6381443Z #### main
2025-08-18T19:42:40.6381545Z 
2025-08-18T19:42:40.6381626Z ```python
2025-08-18T19:42:40.6381817Z def main() -> dict[str, str]
2025-08-18T19:42:40.6382052Z ```
2025-08-18T19:42:40.6382148Z 
2025-08-18T19:42:40.6382314Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-18T19:42:40.6382589Z 
2025-08-18T19:42:40.6382740Z Returns {"status": "success"} when processing completes.
2025-08-18T19:42:40.6382991Z 
2025-08-18T19:42:40.6383079Z <a id="ingest.tasks"></a>
2025-08-18T19:42:40.6383234Z 
2025-08-18T19:42:40.6383312Z # ingest.tasks
2025-08-18T19:42:40.6383430Z 
2025-08-18T19:42:40.6383544Z <a id="ingest.tasks.task_import_file"></a>
2025-08-18T19:42:40.6383750Z 
2025-08-18T19:42:40.6383838Z #### task\_import\_file
2025-08-18T19:42:40.6383988Z 
2025-08-18T19:42:40.6384061Z ```python
2025-08-18T19:42:40.6384307Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-18T19:42:40.6384646Z def task_import_file(self: Any,
2025-08-18T19:42:40.6384893Z                      uri: str,
2025-08-18T19:42:40.6385158Z                      report_type: Optional[str] = None,
2025-08-18T19:42:40.6385481Z                      force: bool = False) -> Dict[str, Any]
2025-08-18T19:42:40.6385774Z ```
2025-08-18T19:42:40.6385870Z 
2025-08-18T19:42:40.6386024Z Import a file into Postgres using existing ETL pipeline.
2025-08-18T19:42:40.6386282Z 
2025-08-18T19:42:40.6386375Z <a id="ingest.celery_app"></a>
2025-08-18T19:42:40.6386548Z 
2025-08-18T19:42:40.6386631Z # ingest.celery\_app
2025-08-18T19:42:40.6386775Z 
2025-08-18T19:42:40.6386871Z <a id="ingest.ingest_router"></a>
2025-08-18T19:42:40.6387049Z 
2025-08-18T19:42:40.6387139Z # ingest.ingest\_router
2025-08-18T19:42:40.6387280Z 
2025-08-18T19:42:40.6387481Z <a id="logistics_etl"></a>
2025-08-18T19:42:40.6387644Z 
2025-08-18T19:42:40.6387722Z # logistics\_etl
2025-08-18T19:42:40.6387846Z 
2025-08-18T19:42:40.6387933Z Daily logistics ETL job.
2025-08-18T19:42:40.6388085Z 
2025-08-18T19:42:40.6388179Z <a id="logistics_etl.__main__"></a>
2025-08-18T19:42:40.6388362Z 
2025-08-18T19:42:40.6388456Z # logistics\_etl.\_\_main\_\_
2025-08-18T19:42:40.6388617Z 
2025-08-18T19:42:40.6388706Z <a id="logistics_etl.dsn"></a>
2025-08-18T19:42:40.6388874Z 
2025-08-18T19:42:40.6389057Z # logistics\_etl.dsn
2025-08-18T19:42:40.6389189Z 
2025-08-18T19:42:40.6389324Z Local DSN builder to avoid cross-service dependency.
2025-08-18T19:42:40.6389573Z 
2025-08-18T19:42:40.6389677Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-18T19:42:40.6389877Z 
2025-08-18T19:42:40.6389960Z #### build\_dsn
2025-08-18T19:42:40.6390069Z 
2025-08-18T19:42:40.6390140Z ```python
2025-08-18T19:42:40.6390335Z def build_dsn(sync: bool = True) -> str
2025-08-18T19:42:40.6390579Z ```
2025-08-18T19:42:40.6390676Z 
2025-08-18T19:42:40.6390835Z Return a Postgres DSN assembled from environment variables.
2025-08-18T19:42:40.6391089Z 
2025-08-18T19:42:40.6391250Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-18T19:42:40.6391685Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-18T19:42:40.6392072Z error when any required variable is missing.
2025-08-18T19:42:40.6392269Z 
2025-08-18T19:42:40.6392370Z <a id="logistics_etl.tests.conftest"></a>
2025-08-18T19:42:40.6392566Z 
2025-08-18T19:42:40.6392655Z # logistics\_etl.tests.conftest
2025-08-18T19:42:40.6392813Z 
2025-08-18T19:42:40.6392924Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-18T19:42:40.6393136Z 
2025-08-18T19:42:40.6393231Z # logistics\_etl.tests.test\_repository
2025-08-18T19:42:40.6393412Z 
2025-08-18T19:42:40.6393548Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-18T19:42:40.6393737Z 
2025-08-18T19:42:40.6393826Z # logistics\_etl.tests.test\_cron
2025-08-18T19:42:40.6393996Z 
2025-08-18T19:42:40.6394105Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-18T19:42:40.6394416Z 
2025-08-18T19:42:40.6394515Z # logistics\_etl.tests.test\_imports
2025-08-18T19:42:40.6394696Z 
2025-08-18T19:42:40.6394796Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-18T19:42:40.6394986Z 
2025-08-18T19:42:40.6395082Z # logistics\_etl.tests.test\_smoke
2025-08-18T19:42:40.6395249Z 
2025-08-18T19:42:40.6395349Z <a id="logistics_etl.tests.test_client"></a>
2025-08-18T19:42:40.6395544Z 
2025-08-18T19:42:40.6395633Z # logistics\_etl.tests.test\_client
2025-08-18T19:42:40.6395804Z 
2025-08-18T19:42:40.6395892Z <a id="logistics_etl.tests"></a>
2025-08-18T19:42:40.6396060Z 
2025-08-18T19:42:40.6396138Z # logistics\_etl.tests
2025-08-18T19:42:40.6396267Z 
2025-08-18T19:42:40.6396360Z <a id="logistics_etl.flow"></a>
2025-08-18T19:42:40.6396514Z 
2025-08-18T19:42:40.6396592Z # logistics\_etl.flow
2025-08-18T19:42:40.6396726Z 
2025-08-18T19:42:40.6396816Z <a id="logistics_etl.client"></a>
2025-08-18T19:42:40.6396984Z 
2025-08-18T19:42:40.6397063Z # logistics\_etl.client
2025-08-18T19:42:40.6397206Z 
2025-08-18T19:42:40.6397289Z <a id="logistics_etl.cron"></a>
2025-08-18T19:42:40.6397441Z 
2025-08-18T19:42:40.6397522Z # logistics\_etl.cron
2025-08-18T19:42:40.6397647Z 
2025-08-18T19:42:40.6397731Z <a id="logistics_etl.db"></a>
2025-08-18T19:42:40.6397882Z 
2025-08-18T19:42:40.6397963Z # logistics\_etl.db
2025-08-18T19:42:40.6398082Z 
2025-08-18T19:42:40.6398177Z <a id="logistics_etl.repository"></a>
2025-08-18T19:42:40.6398363Z 
2025-08-18T19:42:40.6398447Z # logistics\_etl.repository
2025-08-18T19:42:40.6398595Z 
2025-08-18T19:42:40.6398678Z <a id="alert_bot"></a>
2025-08-18T19:42:40.6398805Z 
2025-08-18T19:42:40.6398874Z # alert\_bot
2025-08-18T19:42:40.6399111Z 
2025-08-18T19:42:40.6399212Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-18T19:42:40.6399393Z 
2025-08-18T19:42:40.6399479Z # alert\_bot.tests.test\_smoke
2025-08-18T19:42:40.6399641Z 
2025-08-18T19:42:40.6399723Z <a id="alert_bot.tests"></a>
2025-08-18T19:42:40.6399992Z 
2025-08-18T19:42:40.6400071Z # alert\_bot.tests
2025-08-18T19:42:40.6400194Z 
2025-08-18T19:42:40.6400280Z <a id="alert_bot.alert_bot"></a>
2025-08-18T19:42:40.6400439Z 
2025-08-18T19:42:40.6416056Z # alert\_bot.alert\_bot
2025-08-18T19:42:40.6416375Z 
2025-08-18T19:42:40.6416517Z <a id="alert_bot.rules"></a>
2025-08-18T19:42:40.6416774Z 
2025-08-18T19:42:40.6416900Z # alert\_bot.rules
2025-08-18T19:42:40.6417072Z 
2025-08-18T19:42:40.6417145Z <a id="common"></a>
2025-08-18T19:42:40.6417263Z 
2025-08-18T19:42:40.6417328Z # common
2025-08-18T19:42:40.6417419Z 
2025-08-18T19:42:40.6417498Z <a id="common.dsn"></a>
2025-08-18T19:42:40.6417629Z 
2025-08-18T19:42:40.6417697Z # common.dsn
2025-08-18T19:42:40.6417800Z 
2025-08-18T19:42:40.6417895Z <a id="common.dsn.build_dsn"></a>
2025-08-18T19:42:40.6418058Z 
2025-08-18T19:42:40.6418127Z #### build\_dsn
2025-08-18T19:42:40.6418234Z 
2025-08-18T19:42:40.6418307Z ```python
2025-08-18T19:42:40.6418492Z def build_dsn(sync: bool = True) -> str
2025-08-18T19:42:40.6418752Z ```
2025-08-18T19:42:40.6418843Z 
2025-08-18T19:42:40.6419153Z Return a Postgres DSN, validating required variables.
2025-08-18T19:42:40.6419379Z 
2025-08-18T19:42:40.6419575Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-18T19:42:40.6420039Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-18T19:42:40.6420469Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-18T19:42:40.6420795Z missing.
2025-08-18T19:42:40.6420885Z 
2025-08-18T19:42:40.6420972Z <a id="common.models_vendor"></a>
2025-08-18T19:42:40.6421139Z 
2025-08-18T19:42:40.6421215Z # common.models\_vendor
2025-08-18T19:42:40.6421340Z 
2025-08-18T19:42:40.6421438Z <a id="common.models_vendor.Vendor"></a>
2025-08-18T19:42:40.6421612Z 
2025-08-18T19:42:40.6421680Z ## Vendor Objects
2025-08-18T19:42:40.6421790Z 
2025-08-18T19:42:40.6421861Z ```python
2025-08-18T19:42:40.6422018Z class Vendor(Base)
2025-08-18T19:42:40.6422191Z ```
2025-08-18T19:42:40.6422282Z 
2025-08-18T19:42:40.6422557Z Vendor of inventory items.
2025-08-18T19:42:40.6422713Z 
2025-08-18T19:42:40.6422824Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-18T19:42:40.6423035Z 
2025-08-18T19:42:40.6423119Z ## VendorPrice Objects
2025-08-18T19:42:40.6423252Z 
2025-08-18T19:42:40.6423320Z ```python
2025-08-18T19:42:40.6423501Z class VendorPrice(Base)
2025-08-18T19:42:40.6423695Z ```
2025-08-18T19:42:40.6423790Z 
2025-08-18T19:42:40.6423900Z Association table linking vendors to pricing.
2025-08-18T19:42:40.6424105Z 
2025-08-18T19:42:40.6424188Z <a id="common.db_url"></a>
2025-08-18T19:42:40.6424340Z 
2025-08-18T19:42:40.6424413Z # common.db\_url
2025-08-18T19:42:40.6424528Z 
2025-08-18T19:42:40.6424625Z <a id="common.db_url.build_url"></a>
2025-08-18T19:42:40.6424800Z 
2025-08-18T19:42:40.6424871Z #### build\_url
2025-08-18T19:42:40.6424981Z 
2025-08-18T19:42:40.6425061Z ```python
2025-08-18T19:42:40.6425250Z def build_url(async_: bool = True) -> str
2025-08-18T19:42:40.6425511Z ```
2025-08-18T19:42:40.6425605Z 
2025-08-18T19:42:40.6425713Z Return Postgres DSN from env or PG_* parts.
2025-08-18T19:42:40.6425914Z 
2025-08-18T19:42:40.6425998Z <a id="common.keepa"></a>
2025-08-18T19:42:40.6426139Z 
2025-08-18T19:42:40.6426217Z # common.keepa
2025-08-18T19:42:40.6426325Z 
2025-08-18T19:42:40.6426405Z <a id="common.llm"></a>
2025-08-18T19:42:40.6426537Z 
2025-08-18T19:42:40.6426606Z # common.llm
2025-08-18T19:42:40.6426709Z 
2025-08-18T19:42:40.6426793Z <a id="common.settings"></a>
2025-08-18T19:42:40.6426954Z 
2025-08-18T19:42:40.6427027Z # common.settings
2025-08-18T19:42:40.6427142Z 
2025-08-18T19:42:40.6427226Z <a id="common.db"></a>
2025-08-18T19:42:40.6427352Z 
2025-08-18T19:42:40.6427421Z # common.db
2025-08-18T19:42:40.6427519Z 
2025-08-18T19:42:40.6427624Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-18T19:42:40.6427813Z 
2025-08-18T19:42:40.6427896Z #### build\_sqlalchemy\_url
2025-08-18T19:42:40.6428044Z 
2025-08-18T19:42:40.6428113Z ```python
2025-08-18T19:42:40.6428421Z def build_sqlalchemy_url() -> str
2025-08-18T19:42:40.6428665Z ```
2025-08-18T19:42:40.6428759Z 
2025-08-18T19:42:40.6428866Z Return Postgres URL for SQLAlchemy engines.
2025-08-18T19:42:40.6429169Z 
2025-08-18T19:42:40.6429266Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-18T19:42:40.6429457Z 
2025-08-18T19:42:40.6429536Z #### build\_asyncpg\_dsn
2025-08-18T19:42:40.6429671Z 
2025-08-18T19:42:40.6429738Z ```python
2025-08-18T19:42:40.6429926Z def build_asyncpg_dsn() -> str
2025-08-18T19:42:40.6430148Z ```
2025-08-18T19:42:40.6430243Z 
2025-08-18T19:42:40.6430386Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-18T19:42:40.6430625Z 
2025-08-18T19:42:40.6430721Z <a id="common.db.refresh_mvs"></a>
2025-08-18T19:42:40.6430890Z 
2025-08-18T19:42:40.6430962Z #### refresh\_mvs
2025-08-18T19:42:40.6431081Z 
2025-08-18T19:42:40.6431149Z ```python
2025-08-18T19:42:40.6431360Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-18T19:42:40.6431644Z ```
2025-08-18T19:42:40.6431739Z 
2025-08-18T19:42:40.6431887Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-18T19:42:40.6432142Z 
2025-08-18T19:42:40.6432225Z <a id="common.config"></a>
2025-08-18T19:42:40.6432369Z 
2025-08-18T19:42:40.6432448Z # common.config
2025-08-18T19:42:40.6432567Z 
2025-08-18T19:42:40.6432647Z <a id="common.base"></a>
2025-08-18T19:42:40.6432786Z 
2025-08-18T19:42:40.6432857Z # common.base
2025-08-18T19:42:40.6432963Z 
2025-08-18T19:42:40.6433048Z <a id="common.base.Base"></a>
2025-08-18T19:42:40.6433205Z 
2025-08-18T19:42:40.6433274Z ## Base Objects
2025-08-18T19:42:40.6433375Z 
2025-08-18T19:42:40.6433445Z ```python
2025-08-18T19:42:40.6433615Z class Base(DeclarativeBase)
2025-08-18T19:42:40.6433815Z ```
2025-08-18T19:42:40.6433896Z 
2025-08-18T19:42:40.6433982Z Base class for SQLAlchemy models.
2025-08-18T19:42:40.6434143Z 
2025-08-18T19:42:40.6434216Z <a id="repricer"></a>
2025-08-18T19:42:40.6434336Z 
2025-08-18T19:42:40.6434400Z # repricer
2025-08-18T19:42:40.6434505Z 
2025-08-18T19:42:40.6434597Z <a id="repricer.app.schemas"></a>
2025-08-18T19:42:40.6434879Z 
2025-08-18T19:42:40.6434963Z # repricer.app.schemas
2025-08-18T19:42:40.6435088Z 
2025-08-18T19:42:40.6435172Z <a id="repricer.app.deps"></a>
2025-08-18T19:42:40.6435324Z 
2025-08-18T19:42:40.6435399Z # repricer.app.deps
2025-08-18T19:42:40.6435513Z 
2025-08-18T19:42:40.6435630Z Placeholder module for Keepa / SP-API clients.
2025-08-18T19:42:40.6435832Z 
2025-08-18T19:42:40.6435917Z <a id="repricer.app.logic"></a>
2025-08-18T19:42:40.6436065Z 
2025-08-18T19:42:40.6436151Z # repricer.app.logic
2025-08-18T19:42:40.6436270Z 
2025-08-18T19:42:40.6436369Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-18T19:42:40.6436561Z 
2025-08-18T19:42:40.6436628Z #### MIN\_MARGIN
2025-08-18T19:42:40.6436730Z 
2025-08-18T19:42:40.6436793Z 15 % ROI
2025-08-18T19:42:40.6436887Z 
2025-08-18T19:42:40.6436989Z <a id="repricer.app.logic.compute_price"></a>
2025-08-18T19:42:40.6437177Z 
2025-08-18T19:42:40.6437253Z #### compute\_price
2025-08-18T19:42:40.6437368Z 
2025-08-18T19:42:40.6437438Z ```python
2025-08-18T19:42:40.6437693Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-18T19:42:40.6438008Z ```
2025-08-18T19:42:40.6438094Z 
2025-08-18T19:42:40.6438203Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-18T19:42:40.6438491Z Replace with real competitive logic later.
2025-08-18T19:42:40.6438679Z 
2025-08-18T19:42:40.6438761Z <a id="repricer.app.main"></a>
2025-08-18T19:42:40.6439029Z 
2025-08-18T19:42:40.6439111Z # repricer.app.main
2025-08-18T19:42:40.6439222Z 
2025-08-18T19:42:40.6439301Z <a id="repricer.app"></a>
2025-08-18T19:42:40.6439438Z 
2025-08-18T19:42:40.6439506Z # repricer.app
2025-08-18T19:42:40.6439608Z 
2025-08-18T19:42:40.6439698Z <a id="repricer.tests.test_imports"></a>
2025-08-18T19:42:40.6439875Z 
2025-08-18T19:42:40.6439956Z # repricer.tests.test\_imports
2025-08-18T19:42:40.6440099Z 
2025-08-18T19:42:40.6440191Z <a id="repricer.tests.test_smoke"></a>
2025-08-18T19:42:40.6440361Z 
2025-08-18T19:42:40.6440575Z # repricer.tests.test\_smoke
2025-08-18T19:42:40.6440722Z 
2025-08-18T19:42:40.6440807Z <a id="repricer.tests"></a>
2025-08-18T19:42:40.6440943Z 
2025-08-18T19:42:40.6441015Z # repricer.tests
2025-08-18T19:42:40.6441131Z 
2025-08-18T19:42:40.6441199Z <a id="db"></a>
2025-08-18T19:42:40.6441303Z 
2025-08-18T19:42:40.6441371Z # db
2025-08-18T19:42:40.6441458Z 
2025-08-18T19:42:40.6441542Z <a id="db.utils.views"></a>
2025-08-18T19:42:40.6441683Z 
2025-08-18T19:42:40.6441757Z # db.utils.views
2025-08-18T19:42:40.6441866Z 
2025-08-18T19:42:40.6441961Z <a id="db.utils.views.replace_view"></a>
2025-08-18T19:42:40.6442144Z 
2025-08-18T19:42:40.6442247Z #### replace\_view
2025-08-18T19:42:40.6442368Z 
2025-08-18T19:42:40.6442432Z ```python
2025-08-18T19:42:40.6442641Z def replace_view(name: str, new_sql: str) -> None
2025-08-18T19:42:40.6442898Z ```
2025-08-18T19:42:40.6442982Z 
2025-08-18T19:42:40.6443080Z Drop and recreate a SQL view atomically.
2025-08-18T19:42:40.6443253Z 
2025-08-18T19:42:40.6443330Z <a id="db.utils"></a>
2025-08-18T19:42:40.6443456Z 
2025-08-18T19:42:40.6443518Z # db.utils
2025-08-18T19:42:40.6443605Z 
2025-08-18T19:42:40.6443682Z <a id="price_importer"></a>
2025-08-18T19:42:40.6443820Z 
2025-08-18T19:42:40.6443888Z # price\_importer
2025-08-18T19:42:40.6443994Z 
2025-08-18T19:42:40.6444099Z <a id="price_importer.services_common.dsn"></a>
2025-08-18T19:42:40.6444284Z 
2025-08-18T19:42:40.6444374Z # price\_importer.services\_common.dsn
2025-08-18T19:42:40.6444544Z 
2025-08-18T19:42:40.6444667Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-18T19:42:40.6444877Z 
2025-08-18T19:42:40.6444940Z #### build\_dsn
2025-08-18T19:42:40.6445045Z 
2025-08-18T19:42:40.6445107Z ```python
2025-08-18T19:42:40.6445281Z def build_dsn(sync: bool = True) -> str
2025-08-18T19:42:40.6445498Z ```
2025-08-18T19:42:40.6445579Z 
2025-08-18T19:42:40.6445649Z Return safe DSN.
2025-08-18T19:42:40.6445752Z 
2025-08-18T19:42:40.6446098Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-18T19:42:40.6446316Z 
2025-08-18T19:42:40.6446612Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-18T19:42:40.6446828Z 
2025-08-18T19:42:40.6446971Z # price\_importer.services\_common.models\_vendor
2025-08-18T19:42:40.6447161Z 
2025-08-18T19:42:40.6447266Z <a id="price_importer.services_common.db_url"></a>
2025-08-18T19:42:40.6447452Z 
2025-08-18T19:42:40.6447552Z # price\_importer.services\_common.db\_url
2025-08-18T19:42:40.6447723Z 
2025-08-18T19:42:40.6447855Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-18T19:42:40.6448090Z 
2025-08-18T19:42:40.6448156Z #### build\_url
2025-08-18T19:42:40.6448261Z 
2025-08-18T19:42:40.6448332Z ```python
2025-08-18T19:42:40.6448505Z def build_url(async_: bool = True) -> str
2025-08-18T19:42:40.6448745Z ```
2025-08-18T19:42:40.6448833Z 
2025-08-18T19:42:40.6449037Z Return Postgres DSN from env or PG_* parts.
2025-08-18T19:42:40.6449227Z 
2025-08-18T19:42:40.6449339Z <a id="price_importer.services_common.keepa"></a>
2025-08-18T19:42:40.6449541Z 
2025-08-18T19:42:40.6449636Z # price\_importer.services\_common.keepa
2025-08-18T19:42:40.6449812Z 
2025-08-18T19:42:40.6449912Z <a id="price_importer.services_common.llm"></a>
2025-08-18T19:42:40.6450094Z 
2025-08-18T19:42:40.6450189Z # price\_importer.services\_common.llm
2025-08-18T19:42:40.6450355Z 
2025-08-18T19:42:40.6450467Z <a id="price_importer.services_common.settings"></a>
2025-08-18T19:42:40.6450668Z 
2025-08-18T19:42:40.6450762Z # price\_importer.services\_common.settings
2025-08-18T19:42:40.6450933Z 
2025-08-18T19:42:40.6451030Z <a id="price_importer.services_common.db"></a>
2025-08-18T19:42:40.6451212Z 
2025-08-18T19:42:40.6451297Z # price\_importer.services\_common.db
2025-08-18T19:42:40.6451456Z 
2025-08-18T19:42:40.6451614Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-18T19:42:40.6451857Z 
2025-08-18T19:42:40.6451932Z #### build\_sqlalchemy\_url
2025-08-18T19:42:40.6452067Z 
2025-08-18T19:42:40.6452129Z ```python
2025-08-18T19:42:40.6452297Z def build_sqlalchemy_url() -> str
2025-08-18T19:42:40.6452637Z ```
2025-08-18T19:42:40.6452718Z 
2025-08-18T19:42:40.6452816Z Return Postgres URL for SQLAlchemy engines.
2025-08-18T19:42:40.6452999Z 
2025-08-18T19:42:40.6453143Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-18T19:42:40.6453372Z 
2025-08-18T19:42:40.6453451Z #### build\_asyncpg\_dsn
2025-08-18T19:42:40.6453575Z 
2025-08-18T19:42:40.6453635Z ```python
2025-08-18T19:42:40.6453807Z def build_asyncpg_dsn() -> str
2025-08-18T19:42:40.6454003Z ```
2025-08-18T19:42:40.6454088Z 
2025-08-18T19:42:40.6454214Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-18T19:42:40.6454426Z 
2025-08-18T19:42:40.6454556Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-18T19:42:40.6454766Z 
2025-08-18T19:42:40.6454834Z #### refresh\_mvs
2025-08-18T19:42:40.6454944Z 
2025-08-18T19:42:40.6455004Z ```python
2025-08-18T19:42:40.6455195Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-18T19:42:40.6455455Z ```
2025-08-18T19:42:40.6455534Z 
2025-08-18T19:42:40.6455672Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-18T19:42:40.6455896Z 
2025-08-18T19:42:40.6455991Z <a id="price_importer.services_common"></a>
2025-08-18T19:42:40.6456164Z 
2025-08-18T19:42:40.6456260Z # price\_importer.services\_common
2025-08-18T19:42:40.6456416Z 
2025-08-18T19:42:40.6456521Z <a id="price_importer.services_common.base"></a>
2025-08-18T19:42:40.6456710Z 
2025-08-18T19:42:40.6456799Z # price\_importer.services\_common.base
2025-08-18T19:42:40.6456963Z 
2025-08-18T19:42:40.6457050Z <a id="price_importer.normaliser"></a>
2025-08-18T19:42:40.6457220Z 
2025-08-18T19:42:40.6457302Z # price\_importer.normaliser
2025-08-18T19:42:40.6457442Z 
2025-08-18T19:42:40.6457551Z <a id="price_importer.common.models_vendor"></a>
2025-08-18T19:42:40.6457736Z 
2025-08-18T19:42:40.6457823Z # price\_importer.common.models\_vendor
2025-08-18T19:42:40.6457991Z 
2025-08-18T19:42:40.6458081Z <a id="price_importer.common.db_url"></a>
2025-08-18T19:42:40.6458258Z 
2025-08-18T19:42:40.6458458Z # price\_importer.common.db\_url
2025-08-18T19:42:40.6458613Z 
2025-08-18T19:42:40.6458717Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-18T19:42:40.6458999Z 
2025-08-18T19:42:40.6459073Z #### make\_dsn
2025-08-18T19:42:40.6459175Z 
2025-08-18T19:42:40.6459238Z ```python
2025-08-18T19:42:40.6459415Z def make_dsn(async_: bool = False) -> str
2025-08-18T19:42:40.6459643Z ```
2025-08-18T19:42:40.6459731Z 
2025-08-18T19:42:40.6459851Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-18T19:42:40.6460052Z 
2025-08-18T19:42:40.6460166Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-18T19:42:40.6460354Z 
2025-08-18T19:42:40.6460417Z #### build\_url
2025-08-18T19:42:40.6460516Z 
2025-08-18T19:42:40.6460582Z ```python
2025-08-18T19:42:40.6460753Z def build_url(async_: bool = False) -> str
2025-08-18T19:42:40.6460982Z ```
2025-08-18T19:42:40.6461064Z 
2025-08-18T19:42:40.6461183Z Return Postgres DSN built from environment variables.
2025-08-18T19:42:40.6461396Z 
2025-08-18T19:42:40.6461488Z <a id="price_importer.common"></a>
2025-08-18T19:42:40.6461641Z 
2025-08-18T19:42:40.6461723Z # price\_importer.common
2025-08-18T19:42:40.6461850Z 
2025-08-18T19:42:40.6461938Z <a id="price_importer.common.base"></a>
2025-08-18T19:42:40.6462107Z 
2025-08-18T19:42:40.6462187Z # price\_importer.common.base
2025-08-18T19:42:40.6462327Z 
2025-08-18T19:42:40.6462420Z <a id="price_importer.tests.conftest"></a>
2025-08-18T19:42:40.6462598Z 
2025-08-18T19:42:40.6462682Z # price\_importer.tests.conftest
2025-08-18T19:42:40.6462827Z 
2025-08-18T19:42:40.6462929Z <a id="price_importer.tests.test_reader"></a>
2025-08-18T19:42:40.6463105Z 
2025-08-18T19:42:40.6463190Z # price\_importer.tests.test\_reader
2025-08-18T19:42:40.6463351Z 
2025-08-18T19:42:40.6463449Z <a id="price_importer.tests.test_imports"></a>
2025-08-18T19:42:40.6463627Z 
2025-08-18T19:42:40.6463714Z # price\_importer.tests.test\_imports
2025-08-18T19:42:40.6463879Z 
2025-08-18T19:42:40.6464094Z <a id="price_importer.tests.test_smoke"></a>
2025-08-18T19:42:40.6464273Z 
2025-08-18T19:42:40.6464364Z # price\_importer.tests.test\_smoke
2025-08-18T19:42:40.6464520Z 
2025-08-18T19:42:40.6464632Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-18T19:42:40.6464823Z 
2025-08-18T19:42:40.6464911Z # price\_importer.tests.test\_normaliser
2025-08-18T19:42:40.6465080Z 
2025-08-18T19:42:40.6465162Z <a id="price_importer.tests"></a>
2025-08-18T19:42:40.6465316Z 
2025-08-18T19:42:40.6465389Z # price\_importer.tests
2025-08-18T19:42:40.6465512Z 
2025-08-18T19:42:40.6465602Z <a id="price_importer.reader"></a>
2025-08-18T19:42:40.6465779Z 
2025-08-18T19:42:40.6465854Z # price\_importer.reader
2025-08-18T19:42:40.6465984Z 
2025-08-18T19:42:40.6466072Z <a id="price_importer.repository"></a>
2025-08-18T19:42:40.6466234Z 
2025-08-18T19:42:40.6466317Z # price\_importer.repository
2025-08-18T19:42:40.6466462Z 
2025-08-18T19:42:40.6466545Z <a id="price_importer.import"></a>
2025-08-18T19:42:40.6466693Z 
2025-08-18T19:42:40.6466782Z # price\_importer.import
2025-08-18T19:42:40.6466908Z 
2025-08-18T19:42:40.6466977Z <a id="fees_h10"></a>
2025-08-18T19:42:40.6467098Z 
2025-08-18T19:42:40.6467161Z # fees\_h10
2025-08-18T19:42:40.6467254Z 
2025-08-18T19:42:40.6467329Z <a id="fees_h10.worker"></a>
2025-08-18T19:42:40.6467467Z 
2025-08-18T19:42:40.6467533Z # fees\_h10.worker
2025-08-18T19:42:40.6467640Z 
2025-08-18T19:42:40.6467740Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-18T19:42:40.6467916Z 
2025-08-18T19:42:40.6467987Z #### list\_active\_asins
2025-08-18T19:42:40.6468105Z 
2025-08-18T19:42:40.6468173Z ```python
2025-08-18T19:42:40.6468339Z def list_active_asins() -> list[str]
2025-08-18T19:42:40.6468563Z ```
2025-08-18T19:42:40.6468643Z 
2025-08-18T19:42:40.6468754Z Return known ASINs or an empty list if unavailable.
2025-08-18T19:42:40.6469051Z 
2025-08-18T19:42:40.6469135Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-18T19:42:40.6469292Z 
2025-08-18T19:42:40.6469376Z # fees\_h10.tests.test\_smoke
2025-08-18T19:42:40.6469517Z 
2025-08-18T19:42:40.6469704Z <a id="fees_h10.tests"></a>
2025-08-18T19:42:40.6469840Z 
2025-08-18T19:42:40.6469904Z # fees\_h10.tests
2025-08-18T19:42:40.6470005Z 
2025-08-18T19:42:40.6470080Z <a id="fees_h10.client"></a>
2025-08-18T19:42:40.6470216Z 
2025-08-18T19:42:40.6470279Z # fees\_h10.client
2025-08-18T19:42:40.6470382Z 
2025-08-18T19:42:40.6470467Z <a id="fees_h10.repository"></a>
2025-08-18T19:42:40.6470611Z 
2025-08-18T19:42:40.6470681Z # fees\_h10.repository
2025-08-18T19:42:40.6470797Z 
2025-08-18T19:42:40.6470872Z <a id="emailer"></a>
2025-08-18T19:42:40.6470982Z 
2025-08-18T19:42:40.6471043Z # emailer
2025-08-18T19:42:40.6471139Z 
2025-08-18T19:42:40.6471236Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-18T19:42:40.6471413Z 
2025-08-18T19:42:40.6471505Z # emailer.tests.test\_import\_emailer
2025-08-18T19:42:40.6471663Z 
2025-08-18T19:42:40.6471751Z <a id="emailer.tests.test_smoke"></a>
2025-08-18T19:42:40.6471906Z 
2025-08-18T19:42:40.6471991Z # emailer.tests.test\_smoke
2025-08-18T19:42:40.6472133Z 
2025-08-18T19:42:40.6472210Z <a id="emailer.tests"></a>
2025-08-18T19:42:40.6472344Z 
2025-08-18T19:42:40.6472410Z # emailer.tests
2025-08-18T19:42:40.6472514Z 
2025-08-18T19:42:40.6472615Z <a id="emailer.generate_body"></a>
2025-08-18T19:42:40.6472763Z 
2025-08-18T19:42:40.6472839Z # emailer.generate\_body
2025-08-18T19:42:40.6472964Z 
2025-08-18T19:42:40.6473043Z <a id="llm_server"></a>
2025-08-18T19:42:40.6473160Z 
2025-08-18T19:42:40.6473222Z # llm\_server
2025-08-18T19:42:40.6473323Z 
2025-08-18T19:42:40.6473397Z <a id="llm_server.app"></a>
2025-08-18T19:42:40.6473526Z 
2025-08-18T19:42:40.6473590Z # llm\_server.app
2025-08-18T19:42:40.6473704Z 
