2025-08-19T12:13:58.7720585Z ##[group]Run pydoc-markdown
2025-08-19T12:13:58.7720919Z [36;1mpydoc-markdown[0m
2025-08-19T12:13:58.7762815Z shell: /usr/bin/bash -e {0}
2025-08-19T12:13:58.7763084Z env:
2025-08-19T12:13:58.7763361Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T12:13:58.7763860Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-19T12:13:58.7764331Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T12:13:58.7764742Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T12:13:58.7765151Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T12:13:58.7765559Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-19T12:13:58.7765903Z ##[endgroup]
2025-08-19T12:13:59.1144062Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-19T12:13:59.1144986Z Unknown key(s) "{'output_directory'}" at:
2025-08-19T12:13:59.1145495Z In "pydoc-markdown.yml"
2025-08-19T12:13:59.1145918Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-19T12:13:59.1147025Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-19T12:13:59.1147844Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-19T12:13:59.1148406Z 
2025-08-19T12:13:59.4547446Z <a id="__init__"></a>
2025-08-19T12:13:59.4547937Z 
2025-08-19T12:13:59.4548109Z # \_\_init\_\_
2025-08-19T12:13:59.4548382Z 
2025-08-19T12:13:59.4548549Z <a id="api"></a>
2025-08-19T12:13:59.4548799Z 
2025-08-19T12:13:59.4548982Z # api
2025-08-19T12:13:59.4549187Z 
2025-08-19T12:13:59.4549361Z <a id="api.errors"></a>
2025-08-19T12:13:59.4549668Z 
2025-08-19T12:13:59.4549859Z # api.errors
2025-08-19T12:13:59.4550117Z 
2025-08-19T12:13:59.4550325Z <a id="api.sentry_config"></a>
2025-08-19T12:13:59.4550706Z 
2025-08-19T12:13:59.4550911Z # api.sentry\_config
2025-08-19T12:13:59.4551228Z 
2025-08-19T12:13:59.4551445Z <a id="api.tests.test_stats_contracts"></a>
2025-08-19T12:13:59.4551889Z 
2025-08-19T12:13:59.4552063Z # api.tests.test\_stats\_contracts
2025-08-19T12:13:59.4552449Z 
2025-08-19T12:13:59.4552645Z <a id="api.tests.test_sentry_scrub"></a>
2025-08-19T12:13:59.4552973Z 
2025-08-19T12:13:59.4553137Z # api.tests.test\_sentry\_scrub
2025-08-19T12:13:59.4553430Z 
2025-08-19T12:13:59.4553611Z <a id="api.tests.test_roi_basic_auth"></a>
2025-08-19T12:13:59.4553848Z 
2025-08-19T12:13:59.4553968Z # api.tests.test\_roi\_basic\_auth
2025-08-19T12:13:59.4554162Z 
2025-08-19T12:13:59.4554280Z <a id="api.tests.test_errors_json"></a>
2025-08-19T12:13:59.4554501Z 
2025-08-19T12:13:59.4554622Z # api.tests.test\_errors\_json
2025-08-19T12:13:59.4554801Z 
2025-08-19T12:13:59.4555004Z <a id="api.tests.test_llm"></a>
2025-08-19T12:13:59.4555201Z 
2025-08-19T12:13:59.4555300Z # api.tests.test\_llm
2025-08-19T12:13:59.4555451Z 
2025-08-19T12:13:59.4555582Z <a id="api.tests.test_roi_filters"></a>
2025-08-19T12:13:59.4555793Z 
2025-08-19T12:13:59.4555895Z # api.tests.test\_roi\_filters
2025-08-19T12:13:59.4556264Z 
2025-08-19T12:13:59.4556401Z <a id="api.tests.test_sentry_event"></a>
2025-08-19T12:13:59.4556994Z 
2025-08-19T12:13:59.4557102Z # api.tests.test\_sentry\_event
2025-08-19T12:13:59.4557296Z 
2025-08-19T12:13:59.4557458Z <a id="api.tests.test_sentry_event.DummyTransport"></a>
2025-08-19T12:13:59.4557721Z 
2025-08-19T12:13:59.4557848Z ## DummyTransport Objects
2025-08-19T12:13:59.4558010Z 
2025-08-19T12:13:59.4558098Z ```python
2025-08-19T12:13:59.4558336Z class DummyTransport()
2025-08-19T12:13:59.4558574Z ```
2025-08-19T12:13:59.4558686Z 
2025-08-19T12:13:59.4558920Z <a id="api.tests.test_sentry_event.DummyTransport.capture_envelope"></a>
2025-08-19T12:13:59.4559258Z 
2025-08-19T12:13:59.4559352Z #### capture\_envelope
2025-08-19T12:13:59.4559509Z 
2025-08-19T12:13:59.4559600Z ```python
2025-08-19T12:13:59.4559843Z def capture_envelope(envelope)
2025-08-19T12:13:59.4560097Z ```
2025-08-19T12:13:59.4560204Z 
2025-08-19T12:13:59.4560379Z Capture events sent as envelopes by Sentry SDK >= 2.0.
2025-08-19T12:13:59.4560638Z 
2025-08-19T12:13:59.4560745Z <a id="api.tests.test_cors"></a>
2025-08-19T12:13:59.4561228Z 
2025-08-19T12:13:59.4561321Z # api.tests.test\_cors
2025-08-19T12:13:59.4561467Z 
2025-08-19T12:13:59.4561584Z <a id="api.tests.test_imports"></a>
2025-08-19T12:13:59.4561780Z 
2025-08-19T12:13:59.4561866Z # api.tests.test\_imports
2025-08-19T12:13:59.4562001Z 
2025-08-19T12:13:59.4562108Z <a id="api.tests.test_rate_limit"></a>
2025-08-19T12:13:59.4562275Z 
2025-08-19T12:13:59.4562368Z # api.tests.test\_rate\_limit
2025-08-19T12:13:59.4562527Z 
2025-08-19T12:13:59.4562633Z <a id="api.tests.test_rate_limit.app"></a>
2025-08-19T12:13:59.4562815Z 
2025-08-19T12:13:59.4562889Z #### app
2025-08-19T12:13:59.4563001Z 
2025-08-19T12:13:59.4563072Z noqa: E402
2025-08-19T12:13:59.4563170Z 
2025-08-19T12:13:59.4563284Z <a id="api.tests.test_entrypoint"></a>
2025-08-19T12:13:59.4563449Z 
2025-08-19T12:13:59.4563541Z # api.tests.test\_entrypoint
2025-08-19T12:13:59.4563703Z 
2025-08-19T12:13:59.4563806Z <a id="api.tests.test_health"></a>
2025-08-19T12:13:59.4563976Z 
2025-08-19T12:13:59.4564071Z # api.tests.test\_health
2025-08-19T12:13:59.4564220Z 
2025-08-19T12:13:59.4564310Z <a id="api.tests.test_score"></a>
2025-08-19T12:13:59.4564469Z 
2025-08-19T12:13:59.4564562Z # api.tests.test\_score
2025-08-19T12:13:59.4564694Z 
2025-08-19T12:13:59.4564780Z <a id="api.logging_config"></a>
2025-08-19T12:13:59.4564921Z 
2025-08-19T12:13:59.4565012Z # api.logging\_config
2025-08-19T12:13:59.4565135Z 
2025-08-19T12:13:59.4565223Z <a id="api.migrations.env"></a>
2025-08-19T12:13:59.4565388Z 
2025-08-19T12:13:59.4565473Z # api.migrations.env
2025-08-19T12:13:59.4565594Z 
2025-08-19T12:13:59.4565732Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-19T12:13:59.4565940Z 
2025-08-19T12:13:59.4566188Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-19T12:13:59.4566382Z 
2025-08-19T12:13:59.4566509Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-19T12:13:59.4566703Z 
2025-08-19T12:13:59.4566804Z # api.migrations.versions.0004\_fee\_cron
2025-08-19T12:13:59.4567012Z 
2025-08-19T12:13:59.4567168Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-19T12:13:59.4567410Z 
2025-08-19T12:13:59.4567569Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-19T12:13:59.4567795Z 
2025-08-19T12:13:59.4567923Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-19T12:13:59.4568142Z 
2025-08-19T12:13:59.4568256Z # api.migrations.versions.0003\_vendor\_prices
2025-08-19T12:13:59.4568442Z 
2025-08-19T12:13:59.4568563Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-19T12:13:59.4568780Z 
2025-08-19T12:13:59.4568890Z # api.migrations.versions.0024\_create\_buybox
2025-08-19T12:13:59.4569081Z 
2025-08-19T12:13:59.4569229Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-19T12:13:59.4569440Z 
2025-08-19T12:13:59.4569558Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-19T12:13:59.4569766Z 
2025-08-19T12:13:59.4569886Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-19T12:13:59.4570368Z 
2025-08-19T12:13:59.4570505Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-19T12:13:59.4570744Z 
2025-08-19T12:13:59.4570888Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-19T12:13:59.4571131Z 
2025-08-19T12:13:59.4571250Z # api.migrations.versions.0020\_unified\_schema
2025-08-19T12:13:59.4571445Z 
2025-08-19T12:13:59.4571612Z <a id="api.migrations.versions.0025_pr4_indexes_loadlog"></a>
2025-08-19T12:13:59.4571840Z 
2025-08-19T12:13:59.4571968Z # api.migrations.versions.0025\_pr4\_indexes\_loadlog
2025-08-19T12:13:59.4572190Z 
2025-08-19T12:13:59.4572328Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-19T12:13:59.4572543Z 
2025-08-19T12:13:59.4572659Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-19T12:13:59.4572863Z 
2025-08-19T12:13:59.4573007Z <a id="api.migrations.versions.0026_amazon_new_reports"></a>
2025-08-19T12:13:59.4573231Z 
2025-08-19T12:13:59.4573369Z # api.migrations.versions.0026\_amazon\_new\_reports
2025-08-19T12:13:59.4573756Z 
2025-08-19T12:13:59.4573877Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-19T12:13:59.4574088Z 
2025-08-19T12:13:59.4574189Z # api.migrations.versions.0001\_baseline
2025-08-19T12:13:59.4574365Z 
2025-08-19T12:13:59.4574466Z <a id="api.migrations.versions"></a>
2025-08-19T12:13:59.4574648Z 
2025-08-19T12:13:59.4574740Z # api.migrations.versions
2025-08-19T12:13:59.4574881Z 
2025-08-19T12:13:59.4574989Z <a id="api.migrations"></a>
2025-08-19T12:13:59.4575129Z 
2025-08-19T12:13:59.4575209Z # api.migrations
2025-08-19T12:13:59.4575528Z 
2025-08-19T12:13:59.4575660Z <a id="api.db"></a>
2025-08-19T12:13:59.4575865Z 
2025-08-19T12:13:59.4575991Z # api.db
2025-08-19T12:13:59.4576352Z 
2025-08-19T12:13:59.4576514Z <a id="api.routes.score"></a>
2025-08-19T12:13:59.4576799Z 
2025-08-19T12:13:59.4576958Z # api.routes.score
2025-08-19T12:13:59.4577167Z 
2025-08-19T12:13:59.4577320Z <a id="api.routes.stats"></a>
2025-08-19T12:13:59.4577603Z 
2025-08-19T12:13:59.4577744Z # api.routes.stats
2025-08-19T12:13:59.4577890Z 
2025-08-19T12:13:59.4577984Z <a id="api.routes.roi"></a>
2025-08-19T12:13:59.4578141Z 
2025-08-19T12:13:59.4578219Z # api.routes.roi
2025-08-19T12:13:59.4578336Z 
2025-08-19T12:13:59.4578441Z <a id="api.routes.health"></a>
2025-08-19T12:13:59.4578588Z 
2025-08-19T12:13:59.4578669Z # api.routes.health
2025-08-19T12:13:59.4578790Z 
2025-08-19T12:13:59.4578914Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-19T12:13:59.4579095Z 
2025-08-19T12:13:59.4579172Z #### MAX\_SKEW
2025-08-19T12:13:59.4579291Z 
2025-08-19T12:13:59.4579368Z seconds
2025-08-19T12:13:59.4579466Z 
2025-08-19T12:13:59.4579565Z <a id="api.routes.health.health"></a>
2025-08-19T12:13:59.4579757Z 
2025-08-19T12:13:59.4579834Z #### health
2025-08-19T12:13:59.4579934Z 
2025-08-19T12:13:59.4580027Z ```python
2025-08-19T12:13:59.4580249Z @router.get("/health", include_in_schema=False)
2025-08-19T12:13:59.4580715Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-19T12:13:59.4581080Z ```
2025-08-19T12:13:59.4581206Z 
2025-08-19T12:13:59.4581338Z Return 200 when DB reachable and clocks are in sync.
2025-08-19T12:13:59.4581547Z 
2025-08-19T12:13:59.4581665Z <a id="api.routes.repository"></a>
2025-08-19T12:13:59.4581833Z 
2025-08-19T12:13:59.4581920Z # api.routes.repository
2025-08-19T12:13:59.4582055Z 
2025-08-19T12:13:59.4582153Z <a id="api.routes"></a>
2025-08-19T12:13:59.4582279Z 
2025-08-19T12:13:59.4582350Z # api.routes
2025-08-19T12:13:59.4582472Z 
2025-08-19T12:13:59.4582566Z <a id="api.models.fee"></a>
2025-08-19T12:13:59.4582705Z 
2025-08-19T12:13:59.4582780Z # api.models.fee
2025-08-19T12:13:59.4582913Z 
2025-08-19T12:13:59.4582993Z <a id="api.models"></a>
2025-08-19T12:13:59.4583119Z 
2025-08-19T12:13:59.4583203Z # api.models
2025-08-19T12:13:59.4583308Z 
2025-08-19T12:13:59.4583403Z <a id="api.roi_repository"></a>
2025-08-19T12:13:59.4583574Z 
2025-08-19T12:13:59.4583660Z # api.roi\_repository
2025-08-19T12:13:59.4583788Z 
2025-08-19T12:13:59.4583867Z <a id="api.main"></a>
2025-08-19T12:13:59.4584195Z 
2025-08-19T12:13:59.4584273Z # api.main
2025-08-19T12:13:59.4584387Z 
2025-08-19T12:13:59.4584475Z <a id="api.main.ready"></a>
2025-08-19T12:13:59.4584614Z 
2025-08-19T12:13:59.4584689Z #### ready
2025-08-19T12:13:59.4584804Z 
2025-08-19T12:13:59.4584877Z ```python
2025-08-19T12:13:59.4585156Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-19T12:13:59.4585631Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-19T12:13:59.4586025Z                                                                       str]
2025-08-19T12:13:59.4586456Z ```
2025-08-19T12:13:59.4586564Z 
2025-08-19T12:13:59.4586670Z Return 200 only when migrations are at head.
2025-08-19T12:13:59.4586854Z 
2025-08-19T12:13:59.4586936Z <a id="api.config"></a>
2025-08-19T12:13:59.4587076Z 
2025-08-19T12:13:59.4587158Z # api.config
2025-08-19T12:13:59.4587265Z 
2025-08-19T12:13:59.4587370Z <a id="api.security"></a>
2025-08-19T12:13:59.4587513Z 
2025-08-19T12:13:59.4587722Z # api.security
2025-08-19T12:13:59.4587843Z 
2025-08-19T12:13:59.4587937Z <a id="etl"></a>
2025-08-19T12:13:59.4588046Z 
2025-08-19T12:13:59.4588114Z # etl
2025-08-19T12:13:59.4588222Z 
2025-08-19T12:13:59.4588313Z <a id="etl.fba_fee_ingestor"></a>
2025-08-19T12:13:59.4588470Z 
2025-08-19T12:13:59.4588567Z # etl.fba\_fee\_ingestor
2025-08-19T12:13:59.4588698Z 
2025-08-19T12:13:59.4588788Z <a id="etl.sp_fees_ingestor"></a>
2025-08-19T12:13:59.4588945Z 
2025-08-19T12:13:59.4589050Z # etl.sp\_fees\_ingestor
2025-08-19T12:13:59.4589181Z 
2025-08-19T12:13:59.4589274Z <a id="etl.keepa_ingestor"></a>
2025-08-19T12:13:59.4589446Z 
2025-08-19T12:13:59.4589531Z # etl.keepa\_ingestor
2025-08-19T12:13:59.4589652Z 
2025-08-19T12:13:59.4589729Z <a id="etl.db"></a>
2025-08-19T12:13:59.4589858Z 
2025-08-19T12:13:59.4589932Z # etl.db
2025-08-19T12:13:59.4590031Z 
2025-08-19T12:13:59.4590142Z <a id="etl.dialects.schemas"></a>
2025-08-19T12:13:59.4590303Z 
2025-08-19T12:13:59.4590399Z # etl.dialects.schemas
2025-08-19T12:13:59.4590559Z 
2025-08-19T12:13:59.4590677Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-19T12:13:59.4590872Z 
2025-08-19T12:13:59.4590971Z # etl.dialects.amazon\_reimbursements
2025-08-19T12:13:59.4591163Z 
2025-08-19T12:13:59.4591273Z <a id="etl.dialects.amazon_ads_sp_cost"></a>
2025-08-19T12:13:59.4591451Z 
2025-08-19T12:13:59.4591560Z # etl.dialects.amazon\_ads\_sp\_cost
2025-08-19T12:13:59.4591725Z 
2025-08-19T12:13:59.4591823Z <a id="etl.dialects.test_generic"></a>
2025-08-19T12:13:59.4592014Z 
2025-08-19T12:13:59.4592105Z # etl.dialects.test\_generic
2025-08-19T12:13:59.4592253Z 
2025-08-19T12:13:59.4592358Z <a id="etl.dialects.amazon_returns"></a>
2025-08-19T12:13:59.4592550Z 
2025-08-19T12:13:59.4592647Z # etl.dialects.amazon\_returns
2025-08-19T12:13:59.4592797Z 
2025-08-19T12:13:59.4592916Z <a id="etl.dialects.amazon_fee_preview"></a>
2025-08-19T12:13:59.4593095Z 
2025-08-19T12:13:59.4593190Z # etl.dialects.amazon\_fee\_preview
2025-08-19T12:13:59.4593370Z 
2025-08-19T12:13:59.4593491Z <a id="etl.dialects.amazon_inventory_ledger"></a>
2025-08-19T12:13:59.4593691Z 
2025-08-19T12:13:59.4593789Z # etl.dialects.amazon\_inventory\_ledger
2025-08-19T12:13:59.4594250Z 
2025-08-19T12:13:59.4594425Z <a id="etl.dialects.amazon_settlements"></a>
2025-08-19T12:13:59.4594642Z 
2025-08-19T12:13:59.4594763Z # etl.dialects.amazon\_settlements
2025-08-19T12:13:59.4594930Z 
2025-08-19T12:13:59.4595021Z <a id="etl.dialects"></a>
2025-08-19T12:13:59.4595172Z 
2025-08-19T12:13:59.4595248Z # etl.dialects
2025-08-19T12:13:59.4595355Z 
2025-08-19T12:13:59.4595433Z <a id="ingest"></a>
2025-08-19T12:13:59.4595563Z 
2025-08-19T12:13:59.4595631Z # ingest
2025-08-19T12:13:59.4595731Z 
2025-08-19T12:13:59.4595834Z <a id="ingest.maintenance"></a>
2025-08-19T12:13:59.4595986Z 
2025-08-19T12:13:59.4596232Z # ingest.maintenance
2025-08-19T12:13:59.4596358Z 
2025-08-19T12:13:59.4596468Z <a id="ingest.copy_loader"></a>
2025-08-19T12:13:59.4596615Z 
2025-08-19T12:13:59.4596700Z # ingest.copy\_loader
2025-08-19T12:13:59.4596860Z 
2025-08-19T12:13:59.4597113Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-19T12:13:59.4597307Z 
2025-08-19T12:13:59.4597407Z #### copy\_df\_via\_temp
2025-08-19T12:13:59.4597539Z 
2025-08-19T12:13:59.4597610Z ```python
2025-08-19T12:13:59.4597807Z def copy_df_via_temp(engine: Engine,
2025-08-19T12:13:59.4598062Z                      df: pd.DataFrame,
2025-08-19T12:13:59.4598324Z                      target_table: str,
2025-08-19T12:13:59.4598568Z                      *,
2025-08-19T12:13:59.4598805Z                      target_schema: Optional[str] = None,
2025-08-19T12:13:59.4599087Z                      columns: Sequence[str],
2025-08-19T12:13:59.4599387Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-19T12:13:59.4599694Z                      analyze_after: bool = False,
2025-08-19T12:13:59.4599970Z                      connection: Any | None = None) -> int
2025-08-19T12:13:59.4600233Z ```
2025-08-19T12:13:59.4600333Z 
2025-08-19T12:13:59.4600503Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-19T12:13:59.4600895Z 
2025-08-19T12:13:59.4600995Z <a id="ingest.tests.test_smoke"></a>
2025-08-19T12:13:59.4601164Z 
2025-08-19T12:13:59.4601265Z # ingest.tests.test\_smoke
2025-08-19T12:13:59.4601408Z 
2025-08-19T12:13:59.4601494Z <a id="ingest.tests"></a>
2025-08-19T12:13:59.4601628Z 
2025-08-19T12:13:59.4601715Z # ingest.tests
2025-08-19T12:13:59.4601825Z 
2025-08-19T12:13:59.4601917Z <a id="ingest.upload_router"></a>
2025-08-19T12:13:59.4602095Z 
2025-08-19T12:13:59.4602181Z # ingest.upload\_router
2025-08-19T12:13:59.4602308Z 
2025-08-19T12:13:59.4602397Z <a id="ingest.email_watcher"></a>
2025-08-19T12:13:59.4602568Z 
2025-08-19T12:13:59.4602654Z # ingest.email\_watcher
2025-08-19T12:13:59.4602778Z 
2025-08-19T12:13:59.4602885Z <a id="ingest.email_watcher.main"></a>
2025-08-19T12:13:59.4603057Z 
2025-08-19T12:13:59.4603133Z #### main
2025-08-19T12:13:59.4603244Z 
2025-08-19T12:13:59.4603315Z ```python
2025-08-19T12:13:59.4603498Z def main() -> dict[str, str]
2025-08-19T12:13:59.4603750Z ```
2025-08-19T12:13:59.4603842Z 
2025-08-19T12:13:59.4604003Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-19T12:13:59.4604261Z 
2025-08-19T12:13:59.4604409Z Returns {"status": "success"} when processing completes.
2025-08-19T12:13:59.4604631Z 
2025-08-19T12:13:59.4604741Z <a id="ingest.tasks"></a>
2025-08-19T12:13:59.4604874Z 
2025-08-19T12:13:59.4604950Z # ingest.tasks
2025-08-19T12:13:59.4605068Z 
2025-08-19T12:13:59.4605175Z <a id="ingest.tasks.task_import_file"></a>
2025-08-19T12:13:59.4605362Z 
2025-08-19T12:13:59.4605445Z #### task\_import\_file
2025-08-19T12:13:59.4605583Z 
2025-08-19T12:13:59.4605653Z ```python
2025-08-19T12:13:59.4605901Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-19T12:13:59.4606398Z def task_import_file(self: Any,
2025-08-19T12:13:59.4606626Z                      uri: str,
2025-08-19T12:13:59.4606873Z                      report_type: str | None = None,
2025-08-19T12:13:59.4607156Z                      force: bool = False) -> dict[str, Any]
2025-08-19T12:13:59.4607443Z ```
2025-08-19T12:13:59.4607534Z 
2025-08-19T12:13:59.4607689Z Import a file into Postgres using existing ETL pipeline.
2025-08-19T12:13:59.4607902Z 
2025-08-19T12:13:59.4607992Z <a id="ingest.celery_app"></a>
2025-08-19T12:13:59.4608141Z 
2025-08-19T12:13:59.4608239Z # ingest.celery\_app
2025-08-19T12:13:59.4608361Z 
2025-08-19T12:13:59.4608452Z <a id="ingest.ingest_router"></a>
2025-08-19T12:13:59.4608618Z 
2025-08-19T12:13:59.4608703Z # ingest.ingest\_router
2025-08-19T12:13:59.4608828Z 
2025-08-19T12:13:59.4608913Z <a id="logistics_etl"></a>
2025-08-19T12:13:59.4609057Z 
2025-08-19T12:13:59.4609131Z # logistics\_etl
2025-08-19T12:13:59.4609276Z 
2025-08-19T12:13:59.4609380Z Daily logistics ETL job.
2025-08-19T12:13:59.4609517Z 
2025-08-19T12:13:59.4609605Z <a id="logistics_etl.__main__"></a>
2025-08-19T12:13:59.4609783Z 
2025-08-19T12:13:59.4609868Z # logistics\_etl.\_\_main\_\_
2025-08-19T12:13:59.4610016Z 
2025-08-19T12:13:59.4610105Z <a id="logistics_etl.dsn"></a>
2025-08-19T12:13:59.4610671Z 
2025-08-19T12:13:59.4610816Z # logistics\_etl.dsn
2025-08-19T12:13:59.4611045Z 
2025-08-19T12:13:59.4611299Z Local DSN builder to avoid cross-service dependency.
2025-08-19T12:13:59.4611688Z 
2025-08-19T12:13:59.4611867Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-19T12:13:59.4612158Z 
2025-08-19T12:13:59.4612235Z #### build\_dsn
2025-08-19T12:13:59.4612354Z 
2025-08-19T12:13:59.4612435Z ```python
2025-08-19T12:13:59.4612651Z def build_dsn(sync: bool = True) -> str
2025-08-19T12:13:59.4612906Z ```
2025-08-19T12:13:59.4612996Z 
2025-08-19T12:13:59.4613147Z Return a Postgres DSN assembled from environment variables.
2025-08-19T12:13:59.4613389Z 
2025-08-19T12:13:59.4613572Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-19T12:13:59.4613989Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-19T12:13:59.4614372Z error when any required variable is missing.
2025-08-19T12:13:59.4614556Z 
2025-08-19T12:13:59.4615191Z <a id="logistics_etl.tests.conftest"></a>
2025-08-19T12:13:59.4615413Z 
2025-08-19T12:13:59.4615514Z # logistics\_etl.tests.conftest
2025-08-19T12:13:59.4615682Z 
2025-08-19T12:13:59.4615814Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-19T12:13:59.4616016Z 
2025-08-19T12:13:59.4616234Z # logistics\_etl.tests.test\_repository
2025-08-19T12:13:59.4616427Z 
2025-08-19T12:13:59.4616538Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-19T12:13:59.4616732Z 
2025-08-19T12:13:59.4616825Z # logistics\_etl.tests.test\_cron
2025-08-19T12:13:59.4616999Z 
2025-08-19T12:13:59.4617115Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-19T12:13:59.4617307Z 
2025-08-19T12:13:59.4617417Z # logistics\_etl.tests.test\_imports
2025-08-19T12:13:59.4617580Z 
2025-08-19T12:13:59.4617679Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-19T12:13:59.4617870Z 
2025-08-19T12:13:59.4617967Z # logistics\_etl.tests.test\_smoke
2025-08-19T12:13:59.4618126Z 
2025-08-19T12:13:59.4618228Z <a id="logistics_etl.tests.test_client"></a>
2025-08-19T12:13:59.4618442Z 
2025-08-19T12:13:59.4618537Z # logistics\_etl.tests.test\_client
2025-08-19T12:13:59.4618698Z 
2025-08-19T12:13:59.4618813Z <a id="logistics_etl.tests"></a>
2025-08-19T12:13:59.4618967Z 
2025-08-19T12:13:59.4619048Z # logistics\_etl.tests
2025-08-19T12:13:59.4619193Z 
2025-08-19T12:13:59.4619281Z <a id="logistics_etl.flow"></a>
2025-08-19T12:13:59.4619429Z 
2025-08-19T12:13:59.4619513Z # logistics\_etl.flow
2025-08-19T12:13:59.4619650Z 
2025-08-19T12:13:59.4619746Z <a id="logistics_etl.client"></a>
2025-08-19T12:13:59.4619903Z 
2025-08-19T12:13:59.4619998Z # logistics\_etl.client
2025-08-19T12:13:59.4620126Z 
2025-08-19T12:13:59.4620218Z <a id="logistics_etl.cron"></a>
2025-08-19T12:13:59.4620373Z 
2025-08-19T12:13:59.4620454Z # logistics\_etl.cron
2025-08-19T12:13:59.4620572Z 
2025-08-19T12:13:59.4620660Z <a id="logistics_etl.db"></a>
2025-08-19T12:13:59.4620820Z 
2025-08-19T12:13:59.4620898Z # logistics\_etl.db
2025-08-19T12:13:59.4621021Z 
2025-08-19T12:13:59.4621138Z <a id="logistics_etl.repository"></a>
2025-08-19T12:13:59.4621306Z 
2025-08-19T12:13:59.4651686Z # logistics\_etl.repository
2025-08-19T12:13:59.4652032Z 
2025-08-19T12:13:59.4652197Z <a id="alert_bot"></a>
2025-08-19T12:13:59.4652465Z 
2025-08-19T12:13:59.4652630Z # alert\_bot
2025-08-19T12:13:59.4652843Z 
2025-08-19T12:13:59.4653036Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-19T12:13:59.4653397Z 
2025-08-19T12:13:59.4653595Z # alert\_bot.tests.test\_smoke
2025-08-19T12:13:59.4653907Z 
2025-08-19T12:13:59.4654016Z <a id="alert_bot.tests"></a>
2025-08-19T12:13:59.4654221Z 
2025-08-19T12:13:59.4654331Z # alert\_bot.tests
2025-08-19T12:13:59.4654473Z 
2025-08-19T12:13:59.4654586Z <a id="alert_bot.alert_bot"></a>
2025-08-19T12:13:59.4654783Z 
2025-08-19T12:13:59.4654881Z # alert\_bot.alert\_bot
2025-08-19T12:13:59.4655037Z 
2025-08-19T12:13:59.4655137Z <a id="alert_bot.rules"></a>
2025-08-19T12:13:59.4655328Z 
2025-08-19T12:13:59.4655418Z # alert\_bot.rules
2025-08-19T12:13:59.4655775Z 
2025-08-19T12:13:59.4655882Z <a id="common"></a>
2025-08-19T12:13:59.4656030Z 
2025-08-19T12:13:59.4656300Z # common
2025-08-19T12:13:59.4656417Z 
2025-08-19T12:13:59.4656531Z <a id="common.dsn"></a>
2025-08-19T12:13:59.4656688Z 
2025-08-19T12:13:59.4656774Z # common.dsn
2025-08-19T12:13:59.4656917Z 
2025-08-19T12:13:59.4657030Z <a id="common.dsn.build_dsn"></a>
2025-08-19T12:13:59.4657228Z 
2025-08-19T12:13:59.4657329Z #### build\_dsn
2025-08-19T12:13:59.4657463Z 
2025-08-19T12:13:59.4657551Z ```python
2025-08-19T12:13:59.4657792Z def build_dsn(sync: bool = True) -> str
2025-08-19T12:13:59.4658080Z ```
2025-08-19T12:13:59.4658192Z 
2025-08-19T12:13:59.4658368Z Return a Postgres DSN, validating required variables.
2025-08-19T12:13:59.4658640Z 
2025-08-19T12:13:59.4658883Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-19T12:13:59.4659465Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-19T12:13:59.4660011Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-19T12:13:59.4660650Z missing.
2025-08-19T12:13:59.4660771Z 
2025-08-19T12:13:59.4660897Z <a id="common.models_vendor"></a>
2025-08-19T12:13:59.4661090Z 
2025-08-19T12:13:59.4661190Z # common.models\_vendor
2025-08-19T12:13:59.4661360Z 
2025-08-19T12:13:59.4661481Z <a id="common.models_vendor.Vendor"></a>
2025-08-19T12:13:59.4661766Z 
2025-08-19T12:13:59.4661853Z ## Vendor Objects
2025-08-19T12:13:59.4661972Z 
2025-08-19T12:13:59.4662048Z ```python
2025-08-19T12:13:59.4662247Z class Vendor(Base)
2025-08-19T12:13:59.4662427Z ```
2025-08-19T12:13:59.4662518Z 
2025-08-19T12:13:59.4662627Z Vendor of inventory items.
2025-08-19T12:13:59.4662769Z 
2025-08-19T12:13:59.4662877Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-19T12:13:59.4663076Z 
2025-08-19T12:13:59.4663160Z ## VendorPrice Objects
2025-08-19T12:13:59.4663288Z 
2025-08-19T12:13:59.4663368Z ```python
2025-08-19T12:13:59.4663546Z class VendorPrice(Base)
2025-08-19T12:13:59.4663754Z ```
2025-08-19T12:13:59.4663866Z 
2025-08-19T12:13:59.4663980Z Association table linking vendors to pricing.
2025-08-19T12:13:59.4664187Z 
2025-08-19T12:13:59.4664269Z <a id="common.db_url"></a>
2025-08-19T12:13:59.4664405Z 
2025-08-19T12:13:59.4664483Z # common.db\_url
2025-08-19T12:13:59.4664614Z 
2025-08-19T12:13:59.4664709Z <a id="common.db_url.build_url"></a>
2025-08-19T12:13:59.4664871Z 
2025-08-19T12:13:59.4664958Z #### build\_url
2025-08-19T12:13:59.4665065Z 
2025-08-19T12:13:59.4665135Z ```python
2025-08-19T12:13:59.4665339Z def build_url(async_: bool = True) -> str
2025-08-19T12:13:59.4665588Z ```
2025-08-19T12:13:59.4665693Z 
2025-08-19T12:13:59.4665803Z Return Postgres DSN from env or PG_* parts.
2025-08-19T12:13:59.4665991Z 
2025-08-19T12:13:59.4666197Z <a id="common.keepa"></a>
2025-08-19T12:13:59.4666350Z 
2025-08-19T12:13:59.4666430Z # common.keepa
2025-08-19T12:13:59.4666541Z 
2025-08-19T12:13:59.4666637Z <a id="common.llm"></a>
2025-08-19T12:13:59.4666762Z 
2025-08-19T12:13:59.4666836Z # common.llm
2025-08-19T12:13:59.4666970Z 
2025-08-19T12:13:59.4667062Z <a id="common.settings"></a>
2025-08-19T12:13:59.4667208Z 
2025-08-19T12:13:59.4667283Z # common.settings
2025-08-19T12:13:59.4667413Z 
2025-08-19T12:13:59.4667487Z <a id="common.db"></a>
2025-08-19T12:13:59.4667607Z 
2025-08-19T12:13:59.4667695Z # common.db
2025-08-19T12:13:59.4667791Z 
2025-08-19T12:13:59.4667890Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-19T12:13:59.4668069Z 
2025-08-19T12:13:59.4668171Z #### build\_sqlalchemy\_url
2025-08-19T12:13:59.4668305Z 
2025-08-19T12:13:59.4668380Z ```python
2025-08-19T12:13:59.4668582Z def build_sqlalchemy_url() -> str
2025-08-19T12:13:59.4668801Z ```
2025-08-19T12:13:59.4668907Z 
2025-08-19T12:13:59.4669020Z Return Postgres URL for SQLAlchemy engines.
2025-08-19T12:13:59.4669203Z 
2025-08-19T12:13:59.4669318Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-19T12:13:59.4669493Z 
2025-08-19T12:13:59.4669579Z #### build\_asyncpg\_dsn
2025-08-19T12:13:59.4669723Z 
2025-08-19T12:13:59.4669799Z ```python
2025-08-19T12:13:59.4670134Z def build_asyncpg_dsn() -> str
2025-08-19T12:13:59.4670359Z ```
2025-08-19T12:13:59.4670450Z 
2025-08-19T12:13:59.4670590Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-19T12:13:59.4670823Z 
2025-08-19T12:13:59.4670916Z <a id="common.db.refresh_mvs"></a>
2025-08-19T12:13:59.4671077Z 
2025-08-19T12:13:59.4671169Z #### refresh\_mvs
2025-08-19T12:13:59.4671292Z 
2025-08-19T12:13:59.4671364Z ```python
2025-08-19T12:13:59.4671602Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-19T12:13:59.4671867Z ```
2025-08-19T12:13:59.4671965Z 
2025-08-19T12:13:59.4672109Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-19T12:13:59.4672336Z 
2025-08-19T12:13:59.4672433Z <a id="common.config"></a>
2025-08-19T12:13:59.4672570Z 
2025-08-19T12:13:59.4672645Z # common.config
2025-08-19T12:13:59.4672761Z 
2025-08-19T12:13:59.4672858Z <a id="common.base"></a>
2025-08-19T12:13:59.4672993Z 
2025-08-19T12:13:59.4673065Z # common.base
2025-08-19T12:13:59.4673319Z 
2025-08-19T12:13:59.4673410Z <a id="common.base.Base"></a>
2025-08-19T12:13:59.4673569Z 
2025-08-19T12:13:59.4673647Z ## Base Objects
2025-08-19T12:13:59.4673775Z 
2025-08-19T12:13:59.4673853Z ```python
2025-08-19T12:13:59.4674052Z class Base(DeclarativeBase)
2025-08-19T12:13:59.4674267Z ```
2025-08-19T12:13:59.4674362Z 
2025-08-19T12:13:59.4674466Z Base class for SQLAlchemy models.
2025-08-19T12:13:59.4674625Z 
2025-08-19T12:13:59.4674705Z <a id="repricer"></a>
2025-08-19T12:13:59.4674846Z 
2025-08-19T12:13:59.4674918Z # repricer
2025-08-19T12:13:59.4675017Z 
2025-08-19T12:13:59.4675110Z <a id="repricer.app.schemas"></a>
2025-08-19T12:13:59.4675280Z 
2025-08-19T12:13:59.4675363Z # repricer.app.schemas
2025-08-19T12:13:59.4675489Z 
2025-08-19T12:13:59.4675594Z <a id="repricer.app.deps"></a>
2025-08-19T12:13:59.4675747Z 
2025-08-19T12:13:59.4675829Z # repricer.app.deps
2025-08-19T12:13:59.4675957Z 
2025-08-19T12:13:59.4676177Z Placeholder module for Keepa / SP-API clients.
2025-08-19T12:13:59.4676392Z 
2025-08-19T12:13:59.4676498Z <a id="repricer.app.logic"></a>
2025-08-19T12:13:59.4676669Z 
2025-08-19T12:13:59.4676752Z # repricer.app.logic
2025-08-19T12:13:59.4676878Z 
2025-08-19T12:13:59.4677001Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-19T12:13:59.4677190Z 
2025-08-19T12:13:59.4677260Z #### MIN\_MARGIN
2025-08-19T12:13:59.4677380Z 
2025-08-19T12:13:59.4677446Z 15 % ROI
2025-08-19T12:13:59.4677540Z 
2025-08-19T12:13:59.4677654Z <a id="repricer.app.logic.compute_price"></a>
2025-08-19T12:13:59.4677854Z 
2025-08-19T12:13:59.4677929Z #### compute\_price
2025-08-19T12:13:59.4678043Z 
2025-08-19T12:13:59.4678129Z ```python
2025-08-19T12:13:59.4678400Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-19T12:13:59.4678734Z ```
2025-08-19T12:13:59.4678827Z 
2025-08-19T12:13:59.4678947Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-19T12:13:59.4679261Z Replace with real competitive logic later.
2025-08-19T12:13:59.4679437Z 
2025-08-19T12:13:59.4679528Z <a id="repricer.app.main"></a>
2025-08-19T12:13:59.4679710Z 
2025-08-19T12:13:59.4679797Z # repricer.app.main
2025-08-19T12:13:59.4679912Z 
2025-08-19T12:13:59.4680012Z <a id="repricer.app"></a>
2025-08-19T12:13:59.4680150Z 
2025-08-19T12:13:59.4680227Z # repricer.app
2025-08-19T12:13:59.4680346Z 
2025-08-19T12:13:59.4680449Z <a id="repricer.tests.test_imports"></a>
2025-08-19T12:13:59.4680626Z 
2025-08-19T12:13:59.4680717Z # repricer.tests.test\_imports
2025-08-19T12:13:59.4680880Z 
2025-08-19T12:13:59.4680982Z <a id="repricer.tests.test_smoke"></a>
2025-08-19T12:13:59.4681156Z 
2025-08-19T12:13:59.4681265Z # repricer.tests.test\_smoke
2025-08-19T12:13:59.4681414Z 
2025-08-19T12:13:59.4681498Z <a id="repricer.tests"></a>
2025-08-19T12:13:59.4681638Z 
2025-08-19T12:13:59.4681736Z # repricer.tests
2025-08-19T12:13:59.4681850Z 
2025-08-19T12:13:59.4681922Z <a id="db"></a>
2025-08-19T12:13:59.4682054Z 
2025-08-19T12:13:59.4682127Z # db
2025-08-19T12:13:59.4682224Z 
2025-08-19T12:13:59.4682332Z <a id="db.utils.views"></a>
2025-08-19T12:13:59.4682634Z 
2025-08-19T12:13:59.4682712Z # db.utils.views
2025-08-19T12:13:59.4682823Z 
2025-08-19T12:13:59.4682931Z <a id="db.utils.views.replace_view"></a>
2025-08-19T12:13:59.4683106Z 
2025-08-19T12:13:59.4683180Z #### replace\_view
2025-08-19T12:13:59.4683310Z 
2025-08-19T12:13:59.4683382Z ```python
2025-08-19T12:13:59.4683585Z def replace_view(name: str, new_sql: str) -> None
2025-08-19T12:13:59.4683869Z ```
2025-08-19T12:13:59.4683966Z 
2025-08-19T12:13:59.4684078Z Drop and recreate a SQL view atomically.
2025-08-19T12:13:59.4684253Z 
2025-08-19T12:13:59.4684335Z <a id="db.utils"></a>
2025-08-19T12:13:59.4684459Z 
2025-08-19T12:13:59.4684543Z # db.utils
2025-08-19T12:13:59.4684650Z 
2025-08-19T12:13:59.4684737Z <a id="price_importer"></a>
2025-08-19T12:13:59.4684894Z 
2025-08-19T12:13:59.4684971Z # price\_importer
2025-08-19T12:13:59.4685084Z 
2025-08-19T12:13:59.4685196Z <a id="price_importer.services_common.dsn"></a>
2025-08-19T12:13:59.4685408Z 
2025-08-19T12:13:59.4685507Z # price\_importer.services\_common.dsn
2025-08-19T12:13:59.4685822Z 
2025-08-19T12:13:59.4685980Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-19T12:13:59.4686292Z 
2025-08-19T12:13:59.4686368Z #### build\_dsn
2025-08-19T12:13:59.4686497Z 
2025-08-19T12:13:59.4686567Z ```python
2025-08-19T12:13:59.4686770Z def build_dsn(sync: bool = True) -> str
2025-08-19T12:13:59.4687024Z ```
2025-08-19T12:13:59.4687117Z 
2025-08-19T12:13:59.4687204Z Return safe DSN.
2025-08-19T12:13:59.4687314Z 
2025-08-19T12:13:59.4687786Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-19T12:13:59.4687999Z 
2025-08-19T12:13:59.4688153Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-19T12:13:59.4688368Z 
2025-08-19T12:13:59.4688491Z # price\_importer.services\_common.models\_vendor
2025-08-19T12:13:59.4688696Z 
2025-08-19T12:13:59.4688805Z <a id="price_importer.services_common.db_url"></a>
2025-08-19T12:13:59.4689003Z 
2025-08-19T12:13:59.4689117Z # price\_importer.services\_common.db\_url
2025-08-19T12:13:59.4689321Z 
2025-08-19T12:13:59.4689467Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-19T12:13:59.4689703Z 
2025-08-19T12:13:59.4689786Z #### build\_url
2025-08-19T12:13:59.4689897Z 
2025-08-19T12:13:59.4689979Z ```python
2025-08-19T12:13:59.4690192Z def build_url(async_: bool = True) -> str
2025-08-19T12:13:59.4690439Z ```
2025-08-19T12:13:59.4690542Z 
2025-08-19T12:13:59.4690646Z Return Postgres DSN from env or PG_* parts.
2025-08-19T12:13:59.4690836Z 
2025-08-19T12:13:59.4690967Z <a id="price_importer.services_common.keepa"></a>
2025-08-19T12:13:59.4691156Z 
2025-08-19T12:13:59.4691259Z # price\_importer.services\_common.keepa
2025-08-19T12:13:59.4691449Z 
2025-08-19T12:13:59.4691556Z <a id="price_importer.services_common.llm"></a>
2025-08-19T12:13:59.4691745Z 
2025-08-19T12:13:59.4691843Z # price\_importer.services\_common.llm
2025-08-19T12:13:59.4692025Z 
2025-08-19T12:13:59.4692145Z <a id="price_importer.services_common.settings"></a>
2025-08-19T12:13:59.4692358Z 
2025-08-19T12:13:59.4692484Z # price\_importer.services\_common.settings
2025-08-19T12:13:59.4692668Z 
2025-08-19T12:13:59.4692777Z <a id="price_importer.services_common.db"></a>
2025-08-19T12:13:59.4692987Z 
2025-08-19T12:13:59.4693089Z # price\_importer.services\_common.db
2025-08-19T12:13:59.4693266Z 
2025-08-19T12:13:59.4693446Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-19T12:13:59.4693692Z 
2025-08-19T12:13:59.4693778Z #### build\_sqlalchemy\_url
2025-08-19T12:13:59.4693915Z 
2025-08-19T12:13:59.4694004Z ```python
2025-08-19T12:13:59.4694187Z def build_sqlalchemy_url() -> str
2025-08-19T12:13:59.4694419Z ```
2025-08-19T12:13:59.4694519Z 
2025-08-19T12:13:59.4694620Z Return Postgres URL for SQLAlchemy engines.
2025-08-19T12:13:59.4694813Z 
2025-08-19T12:13:59.4694965Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-19T12:13:59.4695203Z 
2025-08-19T12:13:59.4695298Z #### build\_asyncpg\_dsn
2025-08-19T12:13:59.4695437Z 
2025-08-19T12:13:59.4695526Z ```python
2025-08-19T12:13:59.4695886Z def build_asyncpg_dsn() -> str
2025-08-19T12:13:59.4696220Z ```
2025-08-19T12:13:59.4696325Z 
2025-08-19T12:13:59.4696469Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-19T12:13:59.4696686Z 
2025-08-19T12:13:59.4696824Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-19T12:13:59.4697051Z 
2025-08-19T12:13:59.4697127Z #### refresh\_mvs
2025-08-19T12:13:59.4697240Z 
2025-08-19T12:13:59.4697329Z ```python
2025-08-19T12:13:59.4697537Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-19T12:13:59.4697806Z ```
2025-08-19T12:13:59.4697893Z 
2025-08-19T12:13:59.4698039Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-19T12:13:59.4698273Z 
2025-08-19T12:13:59.4698380Z <a id="price_importer.services_common"></a>
2025-08-19T12:13:59.4698562Z 
2025-08-19T12:13:59.4698666Z # price\_importer.services\_common
2025-08-19T12:13:59.4698825Z 
2025-08-19T12:13:59.4698947Z <a id="price_importer.services_common.base"></a>
2025-08-19T12:13:59.4699285Z 
2025-08-19T12:13:59.4699398Z # price\_importer.services\_common.base
2025-08-19T12:13:59.4699576Z 
2025-08-19T12:13:59.4699679Z <a id="price_importer.normaliser"></a>
2025-08-19T12:13:59.4699864Z 
2025-08-19T12:13:59.4699963Z # price\_importer.normaliser
2025-08-19T12:13:59.4700114Z 
2025-08-19T12:13:59.4700246Z <a id="price_importer.common.models_vendor"></a>
2025-08-19T12:13:59.4700448Z 
2025-08-19T12:13:59.4700547Z # price\_importer.common.models\_vendor
2025-08-19T12:13:59.4700720Z 
2025-08-19T12:13:59.4700840Z <a id="price_importer.common.db_url"></a>
2025-08-19T12:13:59.4701017Z 
2025-08-19T12:13:59.4701111Z # price\_importer.common.db\_url
2025-08-19T12:13:59.4701286Z 
2025-08-19T12:13:59.4701405Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-19T12:13:59.4701602Z 
2025-08-19T12:13:59.4701691Z #### make\_dsn
2025-08-19T12:13:59.4701801Z 
2025-08-19T12:13:59.4701874Z ```python
2025-08-19T12:13:59.4702077Z def make_dsn(async_: bool = False) -> str
2025-08-19T12:13:59.4702333Z ```
2025-08-19T12:13:59.4702434Z 
2025-08-19T12:13:59.4702560Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-19T12:13:59.4702765Z 
2025-08-19T12:13:59.4702887Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-19T12:13:59.4703105Z 
2025-08-19T12:13:59.4703182Z #### build\_url
2025-08-19T12:13:59.4703292Z 
2025-08-19T12:13:59.4703382Z ```python
2025-08-19T12:13:59.4703576Z def build_url(async_: bool = False) -> str
2025-08-19T12:13:59.4703845Z ```
2025-08-19T12:13:59.4703933Z 
2025-08-19T12:13:59.4704063Z Return Postgres DSN built from environment variables.
2025-08-19T12:13:59.4704288Z 
2025-08-19T12:13:59.4704382Z <a id="price_importer.common"></a>
2025-08-19T12:13:59.4704543Z 
2025-08-19T12:13:59.4704628Z # price\_importer.common
2025-08-19T12:13:59.4704780Z 
2025-08-19T12:13:59.4704878Z <a id="price_importer.common.base"></a>
2025-08-19T12:13:59.4705049Z 
2025-08-19T12:13:59.4705155Z # price\_importer.common.base
2025-08-19T12:13:59.4705306Z 
2025-08-19T12:13:59.4705423Z <a id="price_importer.tests.conftest"></a>
2025-08-19T12:13:59.4705625Z 
2025-08-19T12:13:59.4705717Z # price\_importer.tests.conftest
2025-08-19T12:13:59.4705873Z 
2025-08-19T12:13:59.4705983Z <a id="price_importer.tests.test_reader"></a>
2025-08-19T12:13:59.4706286Z 
2025-08-19T12:13:59.4706385Z # price\_importer.tests.test\_reader
2025-08-19T12:13:59.4706556Z 
2025-08-19T12:13:59.4706683Z <a id="price_importer.tests.test_imports"></a>
2025-08-19T12:13:59.4706873Z 
2025-08-19T12:13:59.4706972Z # price\_importer.tests.test\_imports
2025-08-19T12:13:59.4707160Z 
2025-08-19T12:13:59.4707264Z <a id="price_importer.tests.test_smoke"></a>
2025-08-19T12:13:59.4707446Z 
2025-08-19T12:13:59.4707540Z # price\_importer.tests.test\_smoke
2025-08-19T12:13:59.4707721Z 
2025-08-19T12:13:59.4707833Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-19T12:13:59.4708065Z 
2025-08-19T12:13:59.4708182Z # price\_importer.tests.test\_normaliser
2025-08-19T12:13:59.4708355Z 
2025-08-19T12:13:59.4708448Z <a id="price_importer.tests"></a>
2025-08-19T12:13:59.4708774Z 
2025-08-19T12:13:59.4708862Z # price\_importer.tests
2025-08-19T12:13:59.4708995Z 
2025-08-19T12:13:59.4709104Z <a id="price_importer.reader"></a>
2025-08-19T12:13:59.4709266Z 
2025-08-19T12:13:59.4709356Z # price\_importer.reader
2025-08-19T12:13:59.4709491Z 
2025-08-19T12:13:59.4709602Z <a id="price_importer.repository"></a>
2025-08-19T12:13:59.4709773Z 
2025-08-19T12:13:59.4709865Z # price\_importer.repository
2025-08-19T12:13:59.4710028Z 
2025-08-19T12:13:59.4710119Z <a id="price_importer.import"></a>
2025-08-19T12:13:59.4710278Z 
2025-08-19T12:13:59.4710370Z # price\_importer.import
2025-08-19T12:13:59.4710519Z 
2025-08-19T12:13:59.4710603Z <a id="fees_h10"></a>
2025-08-19T12:13:59.4710724Z 
2025-08-19T12:13:59.4710811Z # fees\_h10
2025-08-19T12:13:59.4710915Z 
2025-08-19T12:13:59.4711004Z <a id="fees_h10.worker"></a>
2025-08-19T12:13:59.4711160Z 
2025-08-19T12:13:59.4711239Z # fees\_h10.worker
2025-08-19T12:13:59.4711355Z 
2025-08-19T12:13:59.4711579Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-19T12:13:59.4711795Z 
2025-08-19T12:13:59.4711879Z #### list\_active\_asins
2025-08-19T12:13:59.4712007Z 
2025-08-19T12:13:59.4712093Z ```python
2025-08-19T12:13:59.4712279Z def list_active_asins() -> list[str]
2025-08-19T12:13:59.4712526Z ```
2025-08-19T12:13:59.4712616Z 
2025-08-19T12:13:59.4712740Z Return known ASINs or an empty list if unavailable.
2025-08-19T12:13:59.4712960Z 
2025-08-19T12:13:59.4713055Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-19T12:13:59.4713220Z 
2025-08-19T12:13:59.4713310Z # fees\_h10.tests.test\_smoke
2025-08-19T12:13:59.4713471Z 
2025-08-19T12:13:59.4713556Z <a id="fees_h10.tests"></a>
2025-08-19T12:13:59.4713695Z 
2025-08-19T12:13:59.4713785Z # fees\_h10.tests
2025-08-19T12:13:59.4713897Z 
2025-08-19T12:13:59.4713985Z <a id="fees_h10.client"></a>
2025-08-19T12:13:59.4714139Z 
2025-08-19T12:13:59.4714211Z # fees\_h10.client
2025-08-19T12:13:59.4714323Z 
2025-08-19T12:13:59.4714411Z <a id="fees_h10.repository"></a>
2025-08-19T12:13:59.4714591Z 
2025-08-19T12:13:59.4714671Z # fees\_h10.repository
2025-08-19T12:13:59.4714795Z 
2025-08-19T12:13:59.4714887Z <a id="emailer"></a>
2025-08-19T12:13:59.4715007Z 
2025-08-19T12:13:59.4715078Z # emailer
2025-08-19T12:13:59.4715186Z 
2025-08-19T12:13:59.4715294Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-19T12:13:59.4715479Z 
2025-08-19T12:13:59.4715574Z # emailer.tests.test\_import\_emailer
2025-08-19T12:13:59.4715753Z 
2025-08-19T12:13:59.4715854Z <a id="emailer.tests.test_smoke"></a>
2025-08-19T12:13:59.4716022Z 
2025-08-19T12:13:59.4716223Z # emailer.tests.test\_smoke
2025-08-19T12:13:59.4716373Z 
2025-08-19T12:13:59.4716459Z <a id="emailer.tests"></a>
2025-08-19T12:13:59.4716612Z 
2025-08-19T12:13:59.4716687Z # emailer.tests
2025-08-19T12:13:59.4716796Z 
2025-08-19T12:13:59.4716886Z <a id="emailer.generate_body"></a>
2025-08-19T12:13:59.4717064Z 
2025-08-19T12:13:59.4717150Z # emailer.generate\_body
2025-08-19T12:13:59.4717282Z 
2025-08-19T12:13:59.4717374Z <a id="llm_server"></a>
2025-08-19T12:13:59.4717516Z 
2025-08-19T12:13:59.4717589Z # llm\_server
2025-08-19T12:13:59.4717695Z 
2025-08-19T12:13:59.4717797Z <a id="llm_server.app"></a>
2025-08-19T12:13:59.4717933Z 
2025-08-19T12:13:59.4718006Z # llm\_server.app
2025-08-19T12:13:59.4718131Z 
