2025-08-18T20:23:09.7339214Z ##[group]Run pydoc-markdown
2025-08-18T20:23:09.7339528Z [36;1mpydoc-markdown[0m
2025-08-18T20:23:09.7381562Z shell: /usr/bin/bash -e {0}
2025-08-18T20:23:09.7381792Z env:
2025-08-18T20:23:09.7382032Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T20:23:09.7382432Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-18T20:23:09.7382824Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T20:23:09.7383178Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T20:23:09.7383523Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T20:23:09.7383872Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-18T20:23:09.7384151Z ##[endgroup]
2025-08-18T20:23:10.0673360Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-18T20:23:10.0674281Z Unknown key(s) "{'output_directory'}" at:
2025-08-18T20:23:10.0674746Z In "pydoc-markdown.yml"
2025-08-18T20:23:10.0675165Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-18T20:23:10.0675873Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-18T20:23:10.0676646Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-18T20:23:10.0677171Z 
2025-08-18T20:23:10.3842817Z <a id="__init__"></a>
2025-08-18T20:23:10.3843224Z 
2025-08-18T20:23:10.3843350Z # \_\_init\_\_
2025-08-18T20:23:10.3843541Z 
2025-08-18T20:23:10.3843672Z <a id="api"></a>
2025-08-18T20:23:10.3843880Z 
2025-08-18T20:23:10.3843991Z # api
2025-08-18T20:23:10.3844151Z 
2025-08-18T20:23:10.3844304Z <a id="api.errors"></a>
2025-08-18T20:23:10.3844540Z 
2025-08-18T20:23:10.3844663Z # api.errors
2025-08-18T20:23:10.3844845Z 
2025-08-18T20:23:10.3844998Z <a id="api.sentry_config"></a>
2025-08-18T20:23:10.3845261Z 
2025-08-18T20:23:10.3845395Z # api.sentry\_config
2025-08-18T20:23:10.3845622Z 
2025-08-18T20:23:10.3845793Z <a id="api.tests.test_sentry_scrub"></a>
2025-08-18T20:23:10.3846108Z 
2025-08-18T20:23:10.3846260Z # api.tests.test\_sentry\_scrub
2025-08-18T20:23:10.3846564Z 
2025-08-18T20:23:10.3846718Z <a id="api.tests.test_errors_json"></a>
2025-08-18T20:23:10.3847036Z 
2025-08-18T20:23:10.3847192Z # api.tests.test\_errors\_json
2025-08-18T20:23:10.3847452Z 
2025-08-18T20:23:10.3847594Z <a id="api.tests.test_llm"></a>
2025-08-18T20:23:10.3847855Z 
2025-08-18T20:23:10.3847984Z # api.tests.test\_llm
2025-08-18T20:23:10.3848203Z 
2025-08-18T20:23:10.3848373Z <a id="api.tests.test_sentry_event"></a>
2025-08-18T20:23:10.3848682Z 
2025-08-18T20:23:10.3848835Z # api.tests.test\_sentry\_event
2025-08-18T20:23:10.3849103Z 
2025-08-18T20:23:10.3849269Z <a id="api.tests.test_cors"></a>
2025-08-18T20:23:10.3849538Z 
2025-08-18T20:23:10.3850022Z # api.tests.test\_cors
2025-08-18T20:23:10.3850262Z 
2025-08-18T20:23:10.3850422Z <a id="api.tests.test_imports"></a>
2025-08-18T20:23:10.3850717Z 
2025-08-18T20:23:10.3850863Z # api.tests.test\_imports
2025-08-18T20:23:10.3851102Z 
2025-08-18T20:23:10.3851260Z <a id="api.tests.test_rate_limit"></a>
2025-08-18T20:23:10.3851957Z 
2025-08-18T20:23:10.3852118Z # api.tests.test\_rate\_limit
2025-08-18T20:23:10.3852375Z 
2025-08-18T20:23:10.3852550Z <a id="api.tests.test_rate_limit.app"></a>
2025-08-18T20:23:10.3852918Z 
2025-08-18T20:23:10.3853045Z #### app
2025-08-18T20:23:10.3853202Z 
2025-08-18T20:23:10.3853315Z noqa: E402
2025-08-18T20:23:10.3853488Z 
2025-08-18T20:23:10.3853644Z <a id="api.tests.test_entrypoint"></a>
2025-08-18T20:23:10.3853942Z 
2025-08-18T20:23:10.3854096Z # api.tests.test\_entrypoint
2025-08-18T20:23:10.3854349Z 
2025-08-18T20:23:10.3854505Z <a id="api.tests.test_health"></a>
2025-08-18T20:23:10.3854810Z 
2025-08-18T20:23:10.3854954Z # api.tests.test\_health
2025-08-18T20:23:10.3855190Z 
2025-08-18T20:23:10.3855338Z <a id="api.logging_config"></a>
2025-08-18T20:23:10.3855612Z 
2025-08-18T20:23:10.3855745Z # api.logging\_config
2025-08-18T20:23:10.3855965Z 
2025-08-18T20:23:10.3856122Z <a id="api.migrations.env"></a>
2025-08-18T20:23:10.3856386Z 
2025-08-18T20:23:10.3856522Z # api.migrations.env
2025-08-18T20:23:10.3857096Z 
2025-08-18T20:23:10.3857322Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-18T20:23:10.3857699Z 
2025-08-18T20:23:10.3857896Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-18T20:23:10.3858248Z 
2025-08-18T20:23:10.3858450Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-18T20:23:10.3858804Z 
2025-08-18T20:23:10.3858985Z # api.migrations.versions.0004\_fee\_cron
2025-08-18T20:23:10.3859304Z 
2025-08-18T20:23:10.3859590Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-18T20:23:10.3860266Z 
2025-08-18T20:23:10.3860534Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-18T20:23:10.3860949Z 
2025-08-18T20:23:10.3861191Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-18T20:23:10.3861584Z 
2025-08-18T20:23:10.3861795Z # api.migrations.versions.0003\_vendor\_prices
2025-08-18T20:23:10.3862144Z 
2025-08-18T20:23:10.3862376Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-18T20:23:10.3862769Z 
2025-08-18T20:23:10.3862960Z # api.migrations.versions.0024\_create\_buybox
2025-08-18T20:23:10.3863305Z 
2025-08-18T20:23:10.3863541Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-18T20:23:10.3863924Z 
2025-08-18T20:23:10.3864133Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-18T20:23:10.3864489Z 
2025-08-18T20:23:10.3864710Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-18T20:23:10.3865083Z 
2025-08-18T20:23:10.3865283Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-18T20:23:10.3865624Z 
2025-08-18T20:23:10.3865851Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-18T20:23:10.3866230Z 
2025-08-18T20:23:10.3866424Z # api.migrations.versions.0020\_unified\_schema
2025-08-18T20:23:10.3866764Z 
2025-08-18T20:23:10.3867022Z <a id="api.migrations.versions.0025_pr4_indexes_loadlog"></a>
2025-08-18T20:23:10.3867424Z 
2025-08-18T20:23:10.3867643Z # api.migrations.versions.0025\_pr4\_indexes\_loadlog
2025-08-18T20:23:10.3868023Z 
2025-08-18T20:23:10.3868265Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-18T20:23:10.3868644Z 
2025-08-18T20:23:10.3868838Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-18T20:23:10.3869202Z 
2025-08-18T20:23:10.3869449Z <a id="api.migrations.versions.0026_amazon_new_reports"></a>
2025-08-18T20:23:10.3870063Z 
2025-08-18T20:23:10.3870306Z # api.migrations.versions.0026\_amazon\_new\_reports
2025-08-18T20:23:10.3870679Z 
2025-08-18T20:23:10.3870879Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-18T20:23:10.3871241Z 
2025-08-18T20:23:10.3871414Z # api.migrations.versions.0001\_baseline
2025-08-18T20:23:10.3871725Z 
2025-08-18T20:23:10.3871885Z <a id="api.migrations.versions"></a>
2025-08-18T20:23:10.3872206Z 
2025-08-18T20:23:10.3872351Z # api.migrations.versions
2025-08-18T20:23:10.3872598Z 
2025-08-18T20:23:10.3872748Z <a id="api.migrations"></a>
2025-08-18T20:23:10.3872995Z 
2025-08-18T20:23:10.3873120Z # api.migrations
2025-08-18T20:23:10.3873320Z 
2025-08-18T20:23:10.3873688Z <a id="api.db"></a>
2025-08-18T20:23:10.3873892Z 
2025-08-18T20:23:10.3874001Z # api.db
2025-08-18T20:23:10.3874164Z 
2025-08-18T20:23:10.3874306Z <a id="api.routes.stats"></a>
2025-08-18T20:23:10.3874558Z 
2025-08-18T20:23:10.3874693Z # api.routes.stats
2025-08-18T20:23:10.3874907Z 
2025-08-18T20:23:10.3875063Z <a id="api.routes.stats.kpi"></a>
2025-08-18T20:23:10.3875489Z 
2025-08-18T20:23:10.3875609Z #### kpi
2025-08-18T20:23:10.3875780Z 
2025-08-18T20:23:10.3875909Z ```python
2025-08-18T20:23:10.3876219Z @router.get("/stats/kpi")
2025-08-18T20:23:10.3876644Z def kpi() -> List[Dict[str, int]]
2025-08-18T20:23:10.3877012Z ```
2025-08-18T20:23:10.3877173Z 
2025-08-18T20:23:10.3877317Z Return KPI metrics (mock).
2025-08-18T20:23:10.3877558Z 
2025-08-18T20:23:10.3877735Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-18T20:23:10.3878072Z 
2025-08-18T20:23:10.3878196Z #### roi\_by\_vendor
2025-08-18T20:23:10.3878397Z 
2025-08-18T20:23:10.3878525Z ```python
2025-08-18T20:23:10.3878830Z @router.get("/stats/roi_by_vendor")
2025-08-18T20:23:10.3879529Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-18T20:23:10.3880201Z ```
2025-08-18T20:23:10.3880362Z 
2025-08-18T20:23:10.3880507Z Return ROI percent by vendor.
2025-08-18T20:23:10.3880770Z 
2025-08-18T20:23:10.3880942Z <a id="api.routes.stats.roi_trend"></a>
2025-08-18T20:23:10.3881283Z 
2025-08-18T20:23:10.3881412Z #### roi\_trend
2025-08-18T20:23:10.3881597Z 
2025-08-18T20:23:10.3881724Z ```python
2025-08-18T20:23:10.3882027Z @router.get("/stats/roi_trend")
2025-08-18T20:23:10.3882476Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-18T20:23:10.3882901Z ```
2025-08-18T20:23:10.3883061Z 
2025-08-18T20:23:10.3883194Z Return 30-day ROI trend.
2025-08-18T20:23:10.3883425Z 
2025-08-18T20:23:10.3883563Z <a id="api.routes.roi"></a>
2025-08-18T20:23:10.3883818Z 
2025-08-18T20:23:10.3883940Z # api.routes.roi
2025-08-18T20:23:10.3884130Z 
2025-08-18T20:23:10.3884284Z <a id="api.routes.health"></a>
2025-08-18T20:23:10.3884540Z 
2025-08-18T20:23:10.3884686Z # api.routes.health
2025-08-18T20:23:10.3884892Z 
2025-08-18T20:23:10.3885057Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-18T20:23:10.3885363Z 
2025-08-18T20:23:10.3885475Z #### MAX\_SKEW
2025-08-18T20:23:10.3885662Z 
2025-08-18T20:23:10.3885770Z seconds
2025-08-18T20:23:10.3885923Z 
2025-08-18T20:23:10.3886093Z <a id="api.routes.health.health"></a>
2025-08-18T20:23:10.3886393Z 
2025-08-18T20:23:10.3886505Z #### health
2025-08-18T20:23:10.3886669Z 
2025-08-18T20:23:10.3886789Z ```python
2025-08-18T20:23:10.3887140Z @router.get("/health", include_in_schema=False)
2025-08-18T20:23:10.3887837Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-18T20:23:10.3888451Z ```
2025-08-18T20:23:10.3888604Z 
2025-08-18T20:23:10.3888811Z Return 200 when DB reachable and clocks are in sync.
2025-08-18T20:23:10.3889167Z 
2025-08-18T20:23:10.3889338Z <a id="api.routes.repository"></a>
2025-08-18T20:23:10.3889807Z 
2025-08-18T20:23:10.3889957Z # api.routes.repository
2025-08-18T20:23:10.3890218Z 
2025-08-18T20:23:10.3890352Z <a id="api.routes"></a>
2025-08-18T20:23:10.3890572Z 
2025-08-18T20:23:10.3890693Z # api.routes
2025-08-18T20:23:10.3890881Z 
2025-08-18T20:23:10.3891026Z <a id="api.models.fee"></a>
2025-08-18T20:23:10.3891279Z 
2025-08-18T20:23:10.3891414Z # api.models.fee
2025-08-18T20:23:10.3891612Z 
2025-08-18T20:23:10.3891744Z <a id="api.models"></a>
2025-08-18T20:23:10.3891964Z 
2025-08-18T20:23:10.3892087Z # api.models
2025-08-18T20:23:10.3892258Z 
2025-08-18T20:23:10.3892405Z <a id="api.roi_repository"></a>
2025-08-18T20:23:10.3892682Z 
2025-08-18T20:23:10.3892798Z # api.roi\_repository
2025-08-18T20:23:10.3892994Z 
2025-08-18T20:23:10.3893110Z <a id="api.main"></a>
2025-08-18T20:23:10.3893308Z 
2025-08-18T20:23:10.3893414Z # api.main
2025-08-18T20:23:10.3893565Z 
2025-08-18T20:23:10.3893698Z <a id="api.main.ready"></a>
2025-08-18T20:23:10.3893929Z 
2025-08-18T20:23:10.3894037Z #### ready
2025-08-18T20:23:10.3894204Z 
2025-08-18T20:23:10.3894314Z ```python
2025-08-18T20:23:10.3895018Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-18T20:23:10.3895834Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-18T20:23:10.3896485Z                                                                       str]
2025-08-18T20:23:10.3896903Z ```
2025-08-18T20:23:10.3897051Z 
2025-08-18T20:23:10.3897240Z Return 200 only when migrations are at head.
2025-08-18T20:23:10.3897565Z 
2025-08-18T20:23:10.3897697Z <a id="api.config"></a>
2025-08-18T20:23:10.3897931Z 
2025-08-18T20:23:10.3898053Z # api.config
2025-08-18T20:23:10.3898232Z 
2025-08-18T20:23:10.3898352Z <a id="etl"></a>
2025-08-18T20:23:10.3898550Z 
2025-08-18T20:23:10.3898656Z # etl
2025-08-18T20:23:10.3898813Z 
2025-08-18T20:23:10.3898963Z <a id="etl.fba_fee_ingestor"></a>
2025-08-18T20:23:10.3899238Z 
2025-08-18T20:23:10.3899369Z # etl.fba\_fee\_ingestor
2025-08-18T20:23:10.3899851Z 
2025-08-18T20:23:10.3900015Z <a id="etl.sp_fees_ingestor"></a>
2025-08-18T20:23:10.3900508Z 
2025-08-18T20:23:10.3900649Z # etl.sp\_fees\_ingestor
2025-08-18T20:23:10.3900886Z 
2025-08-18T20:23:10.3901031Z <a id="etl.keepa_ingestor"></a>
2025-08-18T20:23:10.3901290Z 
2025-08-18T20:23:10.3901423Z # etl.keepa\_ingestor
2025-08-18T20:23:10.3901636Z 
2025-08-18T20:23:10.3901757Z <a id="etl.db"></a>
2025-08-18T20:23:10.3901951Z 
2025-08-18T20:23:10.3902071Z # etl.db
2025-08-18T20:23:10.3902226Z 
2025-08-18T20:23:10.3902377Z <a id="etl.dialects.schemas"></a>
2025-08-18T20:23:10.3902659Z 
2025-08-18T20:23:10.3902792Z # etl.dialects.schemas
2025-08-18T20:23:10.3903171Z 
2025-08-18T20:23:10.3903594Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-18T20:23:10.3904010Z 
2025-08-18T20:23:10.3904174Z # etl.dialects.amazon\_reimbursements
2025-08-18T20:23:10.3904485Z 
2025-08-18T20:23:10.3904662Z <a id="etl.dialects.amazon_ads_sp_cost"></a>
2025-08-18T20:23:10.3904980Z 
2025-08-18T20:23:10.3905134Z # etl.dialects.amazon\_ads\_sp\_cost
2025-08-18T20:23:10.3905429Z 
2025-08-18T20:23:10.3905596Z <a id="etl.dialects.amazon_returns"></a>
2025-08-18T20:23:10.3905928Z 
2025-08-18T20:23:10.3906078Z # etl.dialects.amazon\_returns
2025-08-18T20:23:10.3906331Z 
2025-08-18T20:23:10.3906509Z <a id="etl.dialects.amazon_fee_preview"></a>
2025-08-18T20:23:10.3906845Z 
2025-08-18T20:23:10.3906999Z # etl.dialects.amazon\_fee\_preview
2025-08-18T20:23:10.3907287Z 
2025-08-18T20:23:10.3907477Z <a id="etl.dialects.amazon_inventory_ledger"></a>
2025-08-18T20:23:10.3907827Z 
2025-08-18T20:23:10.3907991Z # etl.dialects.amazon\_inventory\_ledger
2025-08-18T20:23:10.3908303Z 
2025-08-18T20:23:10.3908490Z <a id="etl.dialects.amazon_settlements"></a>
2025-08-18T20:23:10.3908822Z 
2025-08-18T20:23:10.3908978Z # etl.dialects.amazon\_settlements
2025-08-18T20:23:10.3909267Z 
2025-08-18T20:23:10.3909402Z <a id="etl.dialects"></a>
2025-08-18T20:23:10.3909807Z 
2025-08-18T20:23:10.3909934Z # etl.dialects
2025-08-18T20:23:10.3910132Z 
2025-08-18T20:23:10.3910258Z <a id="ingest"></a>
2025-08-18T20:23:10.3910460Z 
2025-08-18T20:23:10.3910597Z # ingest
2025-08-18T20:23:10.3910759Z 
2025-08-18T20:23:10.3910911Z <a id="ingest.maintenance"></a>
2025-08-18T20:23:10.3911183Z 
2025-08-18T20:23:10.3911334Z # ingest.maintenance
2025-08-18T20:23:10.3911552Z 
2025-08-18T20:23:10.3911698Z <a id="ingest.copy_loader"></a>
2025-08-18T20:23:10.3911969Z 
2025-08-18T20:23:10.3912100Z # ingest.copy\_loader
2025-08-18T20:23:10.3912315Z 
2025-08-18T20:23:10.3912512Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-18T20:23:10.3912857Z 
2025-08-18T20:23:10.3912990Z #### copy\_df\_via\_temp
2025-08-18T20:23:10.3913220Z 
2025-08-18T20:23:10.3913343Z ```python
2025-08-18T20:23:10.3913650Z def copy_df_via_temp(engine: Engine,
2025-08-18T20:23:10.3914090Z                      df: pd.DataFrame,
2025-08-18T20:23:10.3914511Z                      target_table: str,
2025-08-18T20:23:10.3914917Z                      *,
2025-08-18T20:23:10.3915291Z                      target_schema: Optional[str] = None,
2025-08-18T20:23:10.3915776Z                      columns: Sequence[str],
2025-08-18T20:23:10.3916512Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-18T20:23:10.3917031Z                      analyze_after: bool = False,
2025-08-18T20:23:10.3917524Z                      connection: Any | None = None) -> int
2025-08-18T20:23:10.3917948Z ```
2025-08-18T20:23:10.3918105Z 
2025-08-18T20:23:10.3918387Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-18T20:23:10.3918819Z 
2025-08-18T20:23:10.3918973Z <a id="ingest.tests.test_smoke"></a>
2025-08-18T20:23:10.3919274Z 
2025-08-18T20:23:10.3919412Z # ingest.tests.test\_smoke
2025-08-18T20:23:10.3919828Z 
2025-08-18T20:23:10.3919984Z <a id="ingest.tests"></a>
2025-08-18T20:23:10.3920223Z 
2025-08-18T20:23:10.3920341Z # ingest.tests
2025-08-18T20:23:10.3920535Z 
2025-08-18T20:23:10.3920683Z <a id="ingest.upload_router"></a>
2025-08-18T20:23:10.3920956Z 
2025-08-18T20:23:10.3921093Z # ingest.upload\_router
2025-08-18T20:23:10.3921332Z 
2025-08-18T20:23:10.3921482Z <a id="ingest.email_watcher"></a>
2025-08-18T20:23:10.3922026Z 
2025-08-18T20:23:10.3922181Z # ingest.email\_watcher
2025-08-18T20:23:10.3922413Z 
2025-08-18T20:23:10.3922577Z <a id="ingest.email_watcher.main"></a>
2025-08-18T20:23:10.3922890Z 
2025-08-18T20:23:10.3923003Z #### main
2025-08-18T20:23:10.3923163Z 
2025-08-18T20:23:10.3923280Z ```python
2025-08-18T20:23:10.3923589Z def main() -> dict[str, str]
2025-08-18T20:23:10.3923935Z ```
2025-08-18T20:23:10.3924093Z 
2025-08-18T20:23:10.3924416Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-18T20:23:10.3924839Z 
2025-08-18T20:23:10.3925082Z Returns {"status": "success"} when processing completes.
2025-08-18T20:23:10.3925472Z 
2025-08-18T20:23:10.3925609Z <a id="ingest.tasks"></a>
2025-08-18T20:23:10.3925850Z 
2025-08-18T20:23:10.3925966Z # ingest.tasks
2025-08-18T20:23:10.3926147Z 
2025-08-18T20:23:10.3926321Z <a id="ingest.tasks.task_import_file"></a>
2025-08-18T20:23:10.3926647Z 
2025-08-18T20:23:10.3926778Z #### task\_import\_file
2025-08-18T20:23:10.3927011Z 
2025-08-18T20:23:10.3927132Z ```python
2025-08-18T20:23:10.3927509Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-18T20:23:10.3928031Z def task_import_file(self: Any,
2025-08-18T20:23:10.3928414Z                      uri: str,
2025-08-18T20:23:10.3928817Z                      report_type: Optional[str] = None,
2025-08-18T20:23:10.3929304Z                      force: bool = False) -> Dict[str, Any]
2025-08-18T20:23:10.3929973Z ```
2025-08-18T20:23:10.3930135Z 
2025-08-18T20:23:10.3930383Z Import a file into Postgres using existing ETL pipeline.
2025-08-18T20:23:10.3930769Z 
2025-08-18T20:23:10.3930922Z <a id="ingest.celery_app"></a>
2025-08-18T20:23:10.3931189Z 
2025-08-18T20:23:10.3931322Z # ingest.celery\_app
2025-08-18T20:23:10.3931548Z 
2025-08-18T20:23:10.3931703Z <a id="ingest.ingest_router"></a>
2025-08-18T20:23:10.3931984Z 
2025-08-18T20:23:10.3932125Z # ingest.ingest\_router
2025-08-18T20:23:10.3932363Z 
2025-08-18T20:23:10.3932498Z <a id="logistics_etl"></a>
2025-08-18T20:23:10.3932754Z 
2025-08-18T20:23:10.3932884Z # logistics\_etl
2025-08-18T20:23:10.3933075Z 
2025-08-18T20:23:10.3933213Z Daily logistics ETL job.
2025-08-18T20:23:10.3933453Z 
2025-08-18T20:23:10.3933601Z <a id="logistics_etl.__main__"></a>
2025-08-18T20:23:10.3933882Z 
2025-08-18T20:23:10.3934017Z # logistics\_etl.\_\_main\_\_
2025-08-18T20:23:10.3934280Z 
2025-08-18T20:23:10.3934420Z <a id="logistics_etl.dsn"></a>
2025-08-18T20:23:10.3934677Z 
2025-08-18T20:23:10.3934815Z # logistics\_etl.dsn
2025-08-18T20:23:10.3935023Z 
2025-08-18T20:23:10.3935236Z Local DSN builder to avoid cross-service dependency.
2025-08-18T20:23:10.3935618Z 
2025-08-18T20:23:10.3935778Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-18T20:23:10.3936089Z 
2025-08-18T20:23:10.3936202Z #### build\_dsn
2025-08-18T20:23:10.3936396Z 
2025-08-18T20:23:10.3936509Z ```python
2025-08-18T20:23:10.3936830Z def build_dsn(sync: bool = True) -> str
2025-08-18T20:23:10.3937231Z ```
2025-08-18T20:23:10.3937379Z 
2025-08-18T20:23:10.3937652Z Return a Postgres DSN assembled from environment variables.
2025-08-18T20:23:10.3938303Z 
2025-08-18T20:23:10.3938579Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-18T20:23:10.3939311Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-18T20:23:10.3940181Z error when any required variable is missing.
2025-08-18T20:23:10.3940527Z 
2025-08-18T20:23:10.3940704Z <a id="logistics_etl.tests.conftest"></a>
2025-08-18T20:23:10.3941025Z 
2025-08-18T20:23:10.3941188Z # logistics\_etl.tests.conftest
2025-08-18T20:23:10.3941462Z 
2025-08-18T20:23:10.3941659Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-18T20:23:10.3942018Z 
2025-08-18T20:23:10.3942182Z # logistics\_etl.tests.test\_repository
2025-08-18T20:23:10.3942485Z 
2025-08-18T20:23:10.3942654Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-18T20:23:10.3942985Z 
2025-08-18T20:23:10.3943134Z # logistics\_etl.tests.test\_cron
2025-08-18T20:23:10.3943410Z 
2025-08-18T20:23:10.3943602Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-18T20:23:10.3944162Z 
2025-08-18T20:23:10.3944318Z # logistics\_etl.tests.test\_imports
2025-08-18T20:23:10.3944618Z 
2025-08-18T20:23:10.3944790Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-18T20:23:10.3945113Z 
2025-08-18T20:23:10.3945265Z # logistics\_etl.tests.test\_smoke
2025-08-18T20:23:10.3945556Z 
2025-08-18T20:23:10.3945730Z <a id="logistics_etl.tests.test_client"></a>
2025-08-18T20:23:10.3946050Z 
2025-08-18T20:23:10.3946207Z # logistics\_etl.tests.test\_client
2025-08-18T20:23:10.3946498Z 
2025-08-18T20:23:10.3946648Z <a id="logistics_etl.tests"></a>
2025-08-18T20:23:10.3946932Z 
2025-08-18T20:23:10.3947069Z # logistics\_etl.tests
2025-08-18T20:23:10.3947295Z 
2025-08-18T20:23:10.3947445Z <a id="logistics_etl.flow"></a>
2025-08-18T20:23:10.3947720Z 
2025-08-18T20:23:10.3947848Z # logistics\_etl.flow
2025-08-18T20:23:10.3948062Z 
2025-08-18T20:23:10.3948217Z <a id="logistics_etl.client"></a>
2025-08-18T20:23:10.3948493Z 
2025-08-18T20:23:10.3948627Z # logistics\_etl.client
2025-08-18T20:23:10.3948883Z 
2025-08-18T20:23:10.3949023Z <a id="logistics_etl.cron"></a>
2025-08-18T20:23:10.3949285Z 
2025-08-18T20:23:10.3949413Z # logistics\_etl.cron
2025-08-18T20:23:10.3949821Z 
2025-08-18T20:23:10.3949968Z <a id="logistics_etl.db"></a>
2025-08-18T20:23:10.3950226Z 
2025-08-18T20:23:10.3950358Z # logistics\_etl.db
2025-08-18T20:23:10.3950555Z 
2025-08-18T20:23:10.3950712Z <a id="logistics_etl.repository"></a>
2025-08-18T20:23:10.3950995Z 
2025-08-18T20:23:10.3951128Z # logistics\_etl.repository
2025-08-18T20:23:10.3951360Z 
2025-08-18T20:23:10.3951478Z <a id="alert_bot"></a>
2025-08-18T20:23:10.3951688Z 
2025-08-18T20:23:10.3951801Z # alert\_bot
2025-08-18T20:23:10.3951978Z 
2025-08-18T20:23:10.3952158Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-18T20:23:10.3952464Z 
2025-08-18T20:23:10.3952606Z # alert\_bot.tests.test\_smoke
2025-08-18T20:23:10.3952860Z 
2025-08-18T20:23:10.3953006Z <a id="alert_bot.tests"></a>
2025-08-18T20:23:10.3953256Z 
2025-08-18T20:23:10.3953418Z # alert\_bot.tests
2025-08-18T20:23:10.3953615Z 
2025-08-18T20:23:10.3953761Z <a id="alert_bot.alert_bot"></a>
2025-08-18T20:23:10.3954046Z 
2025-08-18T20:23:10.3983363Z # alert\_bot.alert\_bot
2025-08-18T20:23:10.3983636Z 
2025-08-18T20:23:10.3983782Z <a id="alert_bot.rules"></a>
2025-08-18T20:23:10.3984024Z 
2025-08-18T20:23:10.3984129Z # alert\_bot.rules
2025-08-18T20:23:10.3984315Z 
2025-08-18T20:23:10.3984423Z <a id="common"></a>
2025-08-18T20:23:10.3984595Z 
2025-08-18T20:23:10.3984689Z # common
2025-08-18T20:23:10.3984836Z 
2025-08-18T20:23:10.3984950Z <a id="common.dsn"></a>
2025-08-18T20:23:10.3985148Z 
2025-08-18T20:23:10.3985270Z # common.dsn
2025-08-18T20:23:10.3985430Z 
2025-08-18T20:23:10.3985563Z <a id="common.dsn.build_dsn"></a>
2025-08-18T20:23:10.3985798Z 
2025-08-18T20:23:10.3985904Z #### build\_dsn
2025-08-18T20:23:10.3986058Z 
2025-08-18T20:23:10.3986239Z ```python
2025-08-18T20:23:10.3986525Z def build_dsn(sync: bool = True) -> str
2025-08-18T20:23:10.3986881Z ```
2025-08-18T20:23:10.3987260Z 
2025-08-18T20:23:10.3987461Z Return a Postgres DSN, validating required variables.
2025-08-18T20:23:10.3987796Z 
2025-08-18T20:23:10.3988093Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-18T20:23:10.3988778Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-18T20:23:10.3989424Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-18T20:23:10.3990466Z missing.
2025-08-18T20:23:10.3990656Z 
2025-08-18T20:23:10.3990799Z <a id="common.models_vendor"></a>
2025-08-18T20:23:10.3991064Z 
2025-08-18T20:23:10.3991192Z # common.models\_vendor
2025-08-18T20:23:10.3991396Z 
2025-08-18T20:23:10.3991544Z <a id="common.models_vendor.Vendor"></a>
2025-08-18T20:23:10.3991826Z 
2025-08-18T20:23:10.3991942Z ## Vendor Objects
2025-08-18T20:23:10.3992115Z 
2025-08-18T20:23:10.3992227Z ```python
2025-08-18T20:23:10.3992546Z class Vendor(Base)
2025-08-18T20:23:10.3992815Z ```
2025-08-18T20:23:10.3992953Z 
2025-08-18T20:23:10.3993300Z Vendor of inventory items.
2025-08-18T20:23:10.3993515Z 
2025-08-18T20:23:10.3993682Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-18T20:23:10.3993977Z 
2025-08-18T20:23:10.3994091Z ## VendorPrice Objects
2025-08-18T20:23:10.3994276Z 
2025-08-18T20:23:10.3994380Z ```python
2025-08-18T20:23:10.3994632Z class VendorPrice(Base)
2025-08-18T20:23:10.3994919Z ```
2025-08-18T20:23:10.3995046Z 
2025-08-18T20:23:10.3995209Z Association table linking vendors to pricing.
2025-08-18T20:23:10.3995510Z 
2025-08-18T20:23:10.3995626Z <a id="common.db_url"></a>
2025-08-18T20:23:10.3995829Z 
2025-08-18T20:23:10.3995937Z # common.db\_url
2025-08-18T20:23:10.3996103Z 
2025-08-18T20:23:10.3996232Z <a id="common.db_url.build_url"></a>
2025-08-18T20:23:10.3996488Z 
2025-08-18T20:23:10.3996588Z #### build\_url
2025-08-18T20:23:10.3996750Z 
2025-08-18T20:23:10.3996846Z ```python
2025-08-18T20:23:10.3997126Z def build_url(async_: bool = True) -> str
2025-08-18T20:23:10.3997487Z ```
2025-08-18T20:23:10.3997625Z 
2025-08-18T20:23:10.3997783Z Return Postgres DSN from env or PG_* parts.
2025-08-18T20:23:10.3998066Z 
2025-08-18T20:23:10.3998192Z <a id="common.keepa"></a>
2025-08-18T20:23:10.3998394Z 
2025-08-18T20:23:10.3998500Z # common.keepa
2025-08-18T20:23:10.3998668Z 
2025-08-18T20:23:10.3998781Z <a id="common.llm"></a>
2025-08-18T20:23:10.3998970Z 
2025-08-18T20:23:10.3999070Z # common.llm
2025-08-18T20:23:10.3999227Z 
2025-08-18T20:23:10.3999349Z <a id="common.settings"></a>
2025-08-18T20:23:10.3999568Z 
2025-08-18T20:23:10.3999898Z # common.settings
2025-08-18T20:23:10.4000065Z 
2025-08-18T20:23:10.4000174Z <a id="common.db"></a>
2025-08-18T20:23:10.4000354Z 
2025-08-18T20:23:10.4000461Z # common.db
2025-08-18T20:23:10.4000604Z 
2025-08-18T20:23:10.4000748Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-18T20:23:10.4001031Z 
2025-08-18T20:23:10.4001149Z #### build\_sqlalchemy\_url
2025-08-18T20:23:10.4001356Z 
2025-08-18T20:23:10.4001462Z ```python
2025-08-18T20:23:10.4001730Z def build_sqlalchemy_url() -> str
2025-08-18T20:23:10.4002073Z ```
2025-08-18T20:23:10.4002169Z 
2025-08-18T20:23:10.4002280Z Return Postgres URL for SQLAlchemy engines.
2025-08-18T20:23:10.4002492Z 
2025-08-18T20:23:10.4002597Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-18T20:23:10.4002796Z 
2025-08-18T20:23:10.4002883Z #### build\_asyncpg\_dsn
2025-08-18T20:23:10.4003035Z 
2025-08-18T20:23:10.4003111Z ```python
2025-08-18T20:23:10.4003315Z def build_asyncpg_dsn() -> str
2025-08-18T20:23:10.4003548Z ```
2025-08-18T20:23:10.4003642Z 
2025-08-18T20:23:10.4003800Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-18T20:23:10.4004063Z 
2025-08-18T20:23:10.4004161Z <a id="common.db.refresh_mvs"></a>
2025-08-18T20:23:10.4004348Z 
2025-08-18T20:23:10.4004425Z #### refresh\_mvs
2025-08-18T20:23:10.4004547Z 
2025-08-18T20:23:10.4004621Z ```python
2025-08-18T20:23:10.4004855Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-18T20:23:10.4005158Z ```
2025-08-18T20:23:10.4005252Z 
2025-08-18T20:23:10.4005413Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-18T20:23:10.4005835Z 
2025-08-18T20:23:10.4005931Z <a id="common.config"></a>
2025-08-18T20:23:10.4006083Z 
2025-08-18T20:23:10.4006161Z # common.config
2025-08-18T20:23:10.4006287Z 
2025-08-18T20:23:10.4006373Z <a id="common.base"></a>
2025-08-18T20:23:10.4006516Z 
2025-08-18T20:23:10.4006592Z # common.base
2025-08-18T20:23:10.4006713Z 
2025-08-18T20:23:10.4006806Z <a id="common.base.Base"></a>
2025-08-18T20:23:10.4006973Z 
2025-08-18T20:23:10.4007053Z ## Base Objects
2025-08-18T20:23:10.4007171Z 
2025-08-18T20:23:10.4007244Z ```python
2025-08-18T20:23:10.4007445Z class Base(DeclarativeBase)
2025-08-18T20:23:10.4007673Z ```
2025-08-18T20:23:10.4007776Z 
2025-08-18T20:23:10.4007874Z Base class for SQLAlchemy models.
2025-08-18T20:23:10.4008054Z 
2025-08-18T20:23:10.4008139Z <a id="repricer"></a>
2025-08-18T20:23:10.4008283Z 
2025-08-18T20:23:10.4008358Z # repricer
2025-08-18T20:23:10.4008466Z 
2025-08-18T20:23:10.4008576Z <a id="repricer.app.schemas"></a>
2025-08-18T20:23:10.4008878Z 
2025-08-18T20:23:10.4008968Z # repricer.app.schemas
2025-08-18T20:23:10.4009116Z 
2025-08-18T20:23:10.4009214Z <a id="repricer.app.deps"></a>
2025-08-18T20:23:10.4009384Z 
2025-08-18T20:23:10.4009470Z # repricer.app.deps
2025-08-18T20:23:10.4009792Z 
2025-08-18T20:23:10.4009968Z Placeholder module for Keepa / SP-API clients.
2025-08-18T20:23:10.4010193Z 
2025-08-18T20:23:10.4010295Z <a id="repricer.app.logic"></a>
2025-08-18T20:23:10.4010464Z 
2025-08-18T20:23:10.4010551Z # repricer.app.logic
2025-08-18T20:23:10.4010692Z 
2025-08-18T20:23:10.4010807Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-18T20:23:10.4011017Z 
2025-08-18T20:23:10.4011093Z #### MIN\_MARGIN
2025-08-18T20:23:10.4011218Z 
2025-08-18T20:23:10.4011293Z 15 % ROI
2025-08-18T20:23:10.4011395Z 
2025-08-18T20:23:10.4011522Z <a id="repricer.app.logic.compute_price"></a>
2025-08-18T20:23:10.4011740Z 
2025-08-18T20:23:10.4011821Z #### compute\_price
2025-08-18T20:23:10.4011945Z 
2025-08-18T20:23:10.4012030Z ```python
2025-08-18T20:23:10.4012325Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-18T20:23:10.4012698Z ```
2025-08-18T20:23:10.4012794Z 
2025-08-18T20:23:10.4012920Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-18T20:23:10.4013259Z Replace with real competitive logic later.
2025-08-18T20:23:10.4013467Z 
2025-08-18T20:23:10.4013568Z <a id="repricer.app.main"></a>
2025-08-18T20:23:10.4013737Z 
2025-08-18T20:23:10.4013822Z # repricer.app.main
2025-08-18T20:23:10.4013953Z 
2025-08-18T20:23:10.4014043Z <a id="repricer.app"></a>
2025-08-18T20:23:10.4014193Z 
2025-08-18T20:23:10.4014271Z # repricer.app
2025-08-18T20:23:10.4014395Z 
2025-08-18T20:23:10.4014502Z <a id="repricer.tests.test_imports"></a>
2025-08-18T20:23:10.4014704Z 
2025-08-18T20:23:10.4014805Z # repricer.tests.test\_imports
2025-08-18T20:23:10.4014972Z 
2025-08-18T20:23:10.4015077Z <a id="repricer.tests.test_smoke"></a>
2025-08-18T20:23:10.4015276Z 
2025-08-18T20:23:10.4015371Z # repricer.tests.test\_smoke
2025-08-18T20:23:10.4015548Z 
2025-08-18T20:23:10.4015639Z <a id="repricer.tests"></a>
2025-08-18T20:23:10.4015805Z 
2025-08-18T20:23:10.4015885Z # repricer.tests
2025-08-18T20:23:10.4016009Z 
2025-08-18T20:23:10.4016091Z <a id="db"></a>
2025-08-18T20:23:10.4016209Z 
2025-08-18T20:23:10.4016281Z # db
2025-08-18T20:23:10.4016379Z 
2025-08-18T20:23:10.4016475Z <a id="db.utils.views"></a>
2025-08-18T20:23:10.4016627Z 
2025-08-18T20:23:10.4016704Z # db.utils.views
2025-08-18T20:23:10.4016833Z 
2025-08-18T20:23:10.4016939Z <a id="db.utils.views.replace_view"></a>
2025-08-18T20:23:10.4017140Z 
2025-08-18T20:23:10.4017223Z #### replace\_view
2025-08-18T20:23:10.4017354Z 
2025-08-18T20:23:10.4017427Z ```python
2025-08-18T20:23:10.4017654Z def replace_view(name: str, new_sql: str) -> None
2025-08-18T20:23:10.4017947Z ```
2025-08-18T20:23:10.4018043Z 
2025-08-18T20:23:10.4018153Z Drop and recreate a SQL view atomically.
2025-08-18T20:23:10.4018330Z 
2025-08-18T20:23:10.4018401Z <a id="db.utils"></a>
2025-08-18T20:23:10.4018724Z 
2025-08-18T20:23:10.4018789Z # db.utils
2025-08-18T20:23:10.4018880Z 
2025-08-18T20:23:10.4018966Z <a id="price_importer"></a>
2025-08-18T20:23:10.4019098Z 
2025-08-18T20:23:10.4019167Z # price\_importer
2025-08-18T20:23:10.4019275Z 
2025-08-18T20:23:10.4019388Z <a id="price_importer.services_common.dsn"></a>
2025-08-18T20:23:10.4019575Z 
2025-08-18T20:23:10.4019817Z # price\_importer.services\_common.dsn
2025-08-18T20:23:10.4019989Z 
2025-08-18T20:23:10.4020112Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-18T20:23:10.4020320Z 
2025-08-18T20:23:10.4020389Z #### build\_dsn
2025-08-18T20:23:10.4020488Z 
2025-08-18T20:23:10.4020550Z ```python
2025-08-18T20:23:10.4020730Z def build_dsn(sync: bool = True) -> str
2025-08-18T20:23:10.4020950Z ```
2025-08-18T20:23:10.4021036Z 
2025-08-18T20:23:10.4021109Z Return safe DSN.
2025-08-18T20:23:10.4021212Z 
2025-08-18T20:23:10.4021558Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-18T20:23:10.4021770Z 
2025-08-18T20:23:10.4022043Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-18T20:23:10.4022247Z 
2025-08-18T20:23:10.4022361Z # price\_importer.services\_common.models\_vendor
2025-08-18T20:23:10.4022552Z 
2025-08-18T20:23:10.4022657Z <a id="price_importer.services_common.db_url"></a>
2025-08-18T20:23:10.4022851Z 
2025-08-18T20:23:10.4022943Z # price\_importer.services\_common.db\_url
2025-08-18T20:23:10.4023113Z 
2025-08-18T20:23:10.4023244Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-18T20:23:10.4023465Z 
2025-08-18T20:23:10.4023532Z #### build\_url
2025-08-18T20:23:10.4023631Z 
2025-08-18T20:23:10.4023699Z ```python
2025-08-18T20:23:10.4023870Z def build_url(async_: bool = True) -> str
2025-08-18T20:23:10.4024093Z ```
2025-08-18T20:23:10.4024214Z 
2025-08-18T20:23:10.4024384Z Return Postgres DSN from env or PG_* parts.
2025-08-18T20:23:10.4024652Z 
2025-08-18T20:23:10.4024758Z <a id="price_importer.services_common.keepa"></a>
2025-08-18T20:23:10.4024939Z 
2025-08-18T20:23:10.4025038Z # price\_importer.services\_common.keepa
2025-08-18T20:23:10.4025211Z 
2025-08-18T20:23:10.4025307Z <a id="price_importer.services_common.llm"></a>
2025-08-18T20:23:10.4025484Z 
2025-08-18T20:23:10.4025578Z # price\_importer.services\_common.llm
2025-08-18T20:23:10.4025736Z 
2025-08-18T20:23:10.4025847Z <a id="price_importer.services_common.settings"></a>
2025-08-18T20:23:10.4026040Z 
2025-08-18T20:23:10.4026134Z # price\_importer.services\_common.settings
2025-08-18T20:23:10.4026301Z 
2025-08-18T20:23:10.4026399Z <a id="price_importer.services_common.db"></a>
2025-08-18T20:23:10.4026580Z 
2025-08-18T20:23:10.4026668Z # price\_importer.services\_common.db
2025-08-18T20:23:10.4026825Z 
2025-08-18T20:23:10.4026983Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-18T20:23:10.4027219Z 
2025-08-18T20:23:10.4027297Z #### build\_sqlalchemy\_url
2025-08-18T20:23:10.4027435Z 
2025-08-18T20:23:10.4027497Z ```python
2025-08-18T20:23:10.4027664Z def build_sqlalchemy_url() -> str
2025-08-18T20:23:10.4027884Z ```
2025-08-18T20:23:10.4027966Z 
2025-08-18T20:23:10.4028066Z Return Postgres URL for SQLAlchemy engines.
2025-08-18T20:23:10.4028234Z 
2025-08-18T20:23:10.4028375Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-18T20:23:10.4028603Z 
2025-08-18T20:23:10.4028678Z #### build\_asyncpg\_dsn
2025-08-18T20:23:10.4028802Z 
2025-08-18T20:23:10.4028868Z ```python
2025-08-18T20:23:10.4029037Z def build_asyncpg_dsn() -> str
2025-08-18T20:23:10.4029230Z ```
2025-08-18T20:23:10.4029316Z 
2025-08-18T20:23:10.4029437Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-18T20:23:10.4029847Z 
2025-08-18T20:23:10.4029996Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-18T20:23:10.4030200Z 
2025-08-18T20:23:10.4030266Z #### refresh\_mvs
2025-08-18T20:23:10.4030374Z 
2025-08-18T20:23:10.4030434Z ```python
2025-08-18T20:23:10.4030621Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-18T20:23:10.4030867Z ```
2025-08-18T20:23:10.4030949Z 
2025-08-18T20:23:10.4031230Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-18T20:23:10.4031442Z 
2025-08-18T20:23:10.4031534Z <a id="price_importer.services_common"></a>
2025-08-18T20:23:10.4031701Z 
2025-08-18T20:23:10.4031790Z # price\_importer.services\_common
2025-08-18T20:23:10.4031942Z 
2025-08-18T20:23:10.4032043Z <a id="price_importer.services_common.base"></a>
2025-08-18T20:23:10.4032229Z 
2025-08-18T20:23:10.4032314Z # price\_importer.services\_common.base
2025-08-18T20:23:10.4032475Z 
2025-08-18T20:23:10.4032569Z <a id="price_importer.normaliser"></a>
2025-08-18T20:23:10.4032727Z 
2025-08-18T20:23:10.4032808Z # price\_importer.normaliser
2025-08-18T20:23:10.4032946Z 
2025-08-18T20:23:10.4033051Z <a id="price_importer.common.models_vendor"></a>
2025-08-18T20:23:10.4033231Z 
2025-08-18T20:23:10.4033315Z # price\_importer.common.models\_vendor
2025-08-18T20:23:10.4033479Z 
2025-08-18T20:23:10.4033567Z <a id="price_importer.common.db_url"></a>
2025-08-18T20:23:10.4033732Z 
2025-08-18T20:23:10.4033941Z # price\_importer.common.db\_url
2025-08-18T20:23:10.4034087Z 
2025-08-18T20:23:10.4034189Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-18T20:23:10.4034369Z 
2025-08-18T20:23:10.4034443Z #### make\_dsn
2025-08-18T20:23:10.4034538Z 
2025-08-18T20:23:10.4034598Z ```python
2025-08-18T20:23:10.4034769Z def make_dsn(async_: bool = False) -> str
2025-08-18T20:23:10.4034985Z ```
2025-08-18T20:23:10.4035071Z 
2025-08-18T20:23:10.4035189Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-18T20:23:10.4035396Z 
2025-08-18T20:23:10.4035515Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-18T20:23:10.4035707Z 
2025-08-18T20:23:10.4035769Z #### build\_url
2025-08-18T20:23:10.4035873Z 
2025-08-18T20:23:10.4035935Z ```python
2025-08-18T20:23:10.4036104Z def build_url(async_: bool = False) -> str
2025-08-18T20:23:10.4036330Z ```
2025-08-18T20:23:10.4036408Z 
2025-08-18T20:23:10.4036529Z Return Postgres DSN built from environment variables.
2025-08-18T20:23:10.4036732Z 
2025-08-18T20:23:10.4036826Z <a id="price_importer.common"></a>
2025-08-18T20:23:10.4036975Z 
2025-08-18T20:23:10.4037059Z # price\_importer.common
2025-08-18T20:23:10.4037182Z 
2025-08-18T20:23:10.4037271Z <a id="price_importer.common.base"></a>
2025-08-18T20:23:10.4037439Z 
2025-08-18T20:23:10.4037521Z # price\_importer.common.base
2025-08-18T20:23:10.4037658Z 
2025-08-18T20:23:10.4037750Z <a id="price_importer.tests.conftest"></a>
2025-08-18T20:23:10.4037926Z 
2025-08-18T20:23:10.4038012Z # price\_importer.tests.conftest
2025-08-18T20:23:10.4038157Z 
2025-08-18T20:23:10.4038260Z <a id="price_importer.tests.test_reader"></a>
2025-08-18T20:23:10.4038434Z 
2025-08-18T20:23:10.4038520Z # price\_importer.tests.test\_reader
2025-08-18T20:23:10.4038696Z 
2025-08-18T20:23:10.4038794Z <a id="price_importer.tests.test_imports"></a>
2025-08-18T20:23:10.4038969Z 
2025-08-18T20:23:10.4039057Z # price\_importer.tests.test\_imports
2025-08-18T20:23:10.4039222Z 
2025-08-18T20:23:10.4039316Z <a id="price_importer.tests.test_smoke"></a>
2025-08-18T20:23:10.4039498Z 
2025-08-18T20:23:10.4039589Z # price\_importer.tests.test\_smoke
2025-08-18T20:23:10.4039857Z 
2025-08-18T20:23:10.4039962Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-18T20:23:10.4040149Z 
2025-08-18T20:23:10.4040238Z # price\_importer.tests.test\_normaliser
2025-08-18T20:23:10.4040402Z 
2025-08-18T20:23:10.4040484Z <a id="price_importer.tests"></a>
2025-08-18T20:23:10.4040636Z 
2025-08-18T20:23:10.4040709Z # price\_importer.tests
2025-08-18T20:23:10.4040828Z 
2025-08-18T20:23:10.4040915Z <a id="price_importer.reader"></a>
2025-08-18T20:23:10.4041096Z 
2025-08-18T20:23:10.4041172Z # price\_importer.reader
2025-08-18T20:23:10.4041301Z 
2025-08-18T20:23:10.4041388Z <a id="price_importer.repository"></a>
2025-08-18T20:23:10.4041547Z 
2025-08-18T20:23:10.4041634Z # price\_importer.repository
2025-08-18T20:23:10.4041774Z 
2025-08-18T20:23:10.4041856Z <a id="price_importer.import"></a>
2025-08-18T20:23:10.4042003Z 
2025-08-18T20:23:10.4042084Z # price\_importer.import
2025-08-18T20:23:10.4042340Z 
2025-08-18T20:23:10.4042410Z <a id="fees_h10"></a>
2025-08-18T20:23:10.4042527Z 
2025-08-18T20:23:10.4042589Z # fees\_h10
2025-08-18T20:23:10.4042679Z 
2025-08-18T20:23:10.4042752Z <a id="fees_h10.worker"></a>
2025-08-18T20:23:10.4042886Z 
2025-08-18T20:23:10.4042951Z # fees\_h10.worker
2025-08-18T20:23:10.4043056Z 
2025-08-18T20:23:10.4043156Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-18T20:23:10.4043328Z 
2025-08-18T20:23:10.4043398Z #### list\_active\_asins
2025-08-18T20:23:10.4043520Z 
2025-08-18T20:23:10.4043582Z ```python
2025-08-18T20:23:10.4043748Z def list_active_asins() -> list[str]
2025-08-18T20:23:10.4043962Z ```
2025-08-18T20:23:10.4044043Z 
2025-08-18T20:23:10.4044154Z Return known ASINs or an empty list if unavailable.
2025-08-18T20:23:10.4044351Z 
2025-08-18T20:23:10.4044434Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-18T20:23:10.4044592Z 
2025-08-18T20:23:10.4044683Z # fees\_h10.tests.test\_smoke
2025-08-18T20:23:10.4044817Z 
2025-08-18T20:23:10.4045011Z <a id="fees_h10.tests"></a>
2025-08-18T20:23:10.4045148Z 
2025-08-18T20:23:10.4045212Z # fees\_h10.tests
2025-08-18T20:23:10.4045312Z 
2025-08-18T20:23:10.4045386Z <a id="fees_h10.client"></a>
2025-08-18T20:23:10.4045524Z 
2025-08-18T20:23:10.4045593Z # fees\_h10.client
2025-08-18T20:23:10.4045695Z 
2025-08-18T20:23:10.4045781Z <a id="fees_h10.repository"></a>
2025-08-18T20:23:10.4045921Z 
2025-08-18T20:23:10.4045993Z # fees\_h10.repository
2025-08-18T20:23:10.4046115Z 
2025-08-18T20:23:10.4046184Z <a id="emailer"></a>
2025-08-18T20:23:10.4046295Z 
2025-08-18T20:23:10.4046357Z # emailer
2025-08-18T20:23:10.4046451Z 
2025-08-18T20:23:10.4046548Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-18T20:23:10.4046720Z 
2025-08-18T20:23:10.4046813Z # emailer.tests.test\_import\_emailer
2025-08-18T20:23:10.4046971Z 
2025-08-18T20:23:10.4047057Z <a id="emailer.tests.test_smoke"></a>
2025-08-18T20:23:10.4047216Z 
2025-08-18T20:23:10.4047295Z # emailer.tests.test\_smoke
2025-08-18T20:23:10.4047433Z 
2025-08-18T20:23:10.4047515Z <a id="emailer.tests"></a>
2025-08-18T20:23:10.4047655Z 
2025-08-18T20:23:10.4047721Z # emailer.tests
2025-08-18T20:23:10.4047824Z 
2025-08-18T20:23:10.4047913Z <a id="emailer.generate_body"></a>
2025-08-18T20:23:10.4048063Z 
2025-08-18T20:23:10.4048139Z # emailer.generate\_body
2025-08-18T20:23:10.4048264Z 
2025-08-18T20:23:10.4048344Z <a id="llm_server"></a>
2025-08-18T20:23:10.4048458Z 
2025-08-18T20:23:10.4048521Z # llm\_server
2025-08-18T20:23:10.4048622Z 
2025-08-18T20:23:10.4048699Z <a id="llm_server.app"></a>
2025-08-18T20:23:10.4048827Z 
2025-08-18T20:23:10.4048900Z # llm\_server.app
2025-08-18T20:23:10.4049004Z 
