2025-08-19T21:12:56.2397645Z ##[group]Run pydoc-markdown
2025-08-19T21:12:56.2397941Z [36;1mpydoc-markdown[0m
2025-08-19T21:12:56.2439507Z shell: /usr/bin/bash -e {0}
2025-08-19T21:12:56.2439758Z env:
2025-08-19T21:12:56.2440001Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T21:12:56.2440417Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-19T21:12:56.2440819Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T21:12:56.2441158Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T21:12:56.2441513Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T21:12:56.2441857Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-19T21:12:56.2442146Z ##[endgroup]
2025-08-19T21:12:56.5942097Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-19T21:12:56.5942671Z Unknown key(s) "{'output_directory'}" at:
2025-08-19T21:12:56.5943442Z In "pydoc-markdown.yml"
2025-08-19T21:12:56.5943956Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-19T21:12:56.5944473Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-19T21:12:56.5945027Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-19T21:12:56.5945396Z 
2025-08-19T21:12:56.9441518Z <a id="__init__"></a>
2025-08-19T21:12:56.9441977Z 
2025-08-19T21:12:56.9442144Z # \_\_init\_\_
2025-08-19T21:12:56.9442385Z 
2025-08-19T21:12:56.9442522Z <a id="api"></a>
2025-08-19T21:12:56.9442730Z 
2025-08-19T21:12:56.9442814Z # api
2025-08-19T21:12:56.9443072Z 
2025-08-19T21:12:56.9443177Z <a id="api.errors"></a>
2025-08-19T21:12:56.9443362Z 
2025-08-19T21:12:56.9443451Z # api.errors
2025-08-19T21:12:56.9443592Z 
2025-08-19T21:12:56.9443710Z <a id="api.sentry_config"></a>
2025-08-19T21:12:56.9443903Z 
2025-08-19T21:12:56.9444004Z # api.sentry\_config
2025-08-19T21:12:56.9444166Z 
2025-08-19T21:12:56.9444297Z <a id="api.tests.test_stats_contracts"></a>
2025-08-19T21:12:56.9444532Z 
2025-08-19T21:12:56.9444952Z # api.tests.test\_stats\_contracts
2025-08-19T21:12:56.9445185Z 
2025-08-19T21:12:56.9445303Z <a id="api.tests.test_sentry_scrub"></a>
2025-08-19T21:12:56.9445529Z 
2025-08-19T21:12:56.9445642Z # api.tests.test\_sentry\_scrub
2025-08-19T21:12:56.9445827Z 
2025-08-19T21:12:56.9445949Z <a id="api.tests.test_roi_basic_auth"></a>
2025-08-19T21:12:56.9446177Z 
2025-08-19T21:12:56.9446283Z # api.tests.test\_roi\_basic\_auth
2025-08-19T21:12:56.9446478Z 
2025-08-19T21:12:56.9446593Z <a id="api.tests.test_errors_json"></a>
2025-08-19T21:12:56.9446814Z 
2025-08-19T21:12:56.9446915Z # api.tests.test\_errors\_json
2025-08-19T21:12:56.9447096Z 
2025-08-19T21:12:56.9447203Z <a id="api.tests.test_llm"></a>
2025-08-19T21:12:56.9447384Z 
2025-08-19T21:12:56.9447477Z # api.tests.test\_llm
2025-08-19T21:12:56.9447635Z 
2025-08-19T21:12:56.9447750Z <a id="api.tests.test_roi_filters"></a>
2025-08-19T21:12:56.9447959Z 
2025-08-19T21:12:56.9448058Z # api.tests.test\_roi\_filters
2025-08-19T21:12:56.9448245Z 
2025-08-19T21:12:56.9448367Z <a id="api.tests.test_sentry_event"></a>
2025-08-19T21:12:56.9448589Z 
2025-08-19T21:12:56.9448705Z # api.tests.test\_sentry\_event
2025-08-19T21:12:56.9448886Z 
2025-08-19T21:12:56.9449044Z <a id="api.tests.test_sentry_event.DummyTransport"></a>
2025-08-19T21:12:56.9449317Z 
2025-08-19T21:12:56.9449419Z ## DummyTransport Objects
2025-08-19T21:12:56.9449587Z 
2025-08-19T21:12:56.9449672Z ```python
2025-08-19T21:12:56.9449900Z class DummyTransport()
2025-08-19T21:12:56.9450137Z ```
2025-08-19T21:12:56.9450257Z 
2025-08-19T21:12:56.9450481Z <a id="api.tests.test_sentry_event.DummyTransport.capture_envelope"></a>
2025-08-19T21:12:56.9450823Z 
2025-08-19T21:12:56.9450924Z #### capture\_envelope
2025-08-19T21:12:56.9451076Z 
2025-08-19T21:12:56.9451161Z ```python
2025-08-19T21:12:56.9451392Z def capture_envelope(envelope)
2025-08-19T21:12:56.9451653Z ```
2025-08-19T21:12:56.9451766Z 
2025-08-19T21:12:56.9451928Z Capture events sent as envelopes by Sentry SDK >= 2.0.
2025-08-19T21:12:56.9452201Z 
2025-08-19T21:12:56.9452314Z <a id="api.tests.test_cors"></a>
2025-08-19T21:12:56.9452730Z 
2025-08-19T21:12:56.9452828Z # api.tests.test\_cors
2025-08-19T21:12:56.9453212Z 
2025-08-19T21:12:56.9453333Z <a id="api.tests.test_imports"></a>
2025-08-19T21:12:56.9453537Z 
2025-08-19T21:12:56.9453641Z # api.tests.test\_imports
2025-08-19T21:12:56.9453812Z 
2025-08-19T21:12:56.9453924Z <a id="api.tests.test_rate_limit"></a>
2025-08-19T21:12:56.9454134Z 
2025-08-19T21:12:56.9454242Z # api.tests.test\_rate\_limit
2025-08-19T21:12:56.9454423Z 
2025-08-19T21:12:56.9454545Z <a id="api.tests.test_rate_limit.app"></a>
2025-08-19T21:12:56.9454768Z 
2025-08-19T21:12:56.9454856Z #### app
2025-08-19T21:12:56.9454969Z 
2025-08-19T21:12:56.9455054Z noqa: E402
2025-08-19T21:12:56.9455175Z 
2025-08-19T21:12:56.9455289Z <a id="api.tests.test_entrypoint"></a>
2025-08-19T21:12:56.9455500Z 
2025-08-19T21:12:56.9455604Z # api.tests.test\_entrypoint
2025-08-19T21:12:56.9455788Z 
2025-08-19T21:12:56.9455895Z <a id="api.tests.test_health"></a>
2025-08-19T21:12:56.9456112Z 
2025-08-19T21:12:56.9456218Z # api.tests.test\_health
2025-08-19T21:12:56.9456381Z 
2025-08-19T21:12:56.9456486Z <a id="api.tests.test_score"></a>
2025-08-19T21:12:56.9456683Z 
2025-08-19T21:12:56.9456778Z # api.tests.test\_score
2025-08-19T21:12:56.9456934Z 
2025-08-19T21:12:56.9457035Z <a id="api.logging_config"></a>
2025-08-19T21:12:56.9457222Z 
2025-08-19T21:12:56.9457314Z # api.logging\_config
2025-08-19T21:12:56.9457464Z 
2025-08-19T21:12:56.9457573Z <a id="api.migrations.env"></a>
2025-08-19T21:12:56.9457756Z 
2025-08-19T21:12:56.9457852Z # api.migrations.env
2025-08-19T21:12:56.9458004Z 
2025-08-19T21:12:56.9458151Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-19T21:12:56.9458405Z 
2025-08-19T21:12:56.9458538Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-19T21:12:56.9458785Z 
2025-08-19T21:12:56.9458932Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-19T21:12:56.9459180Z 
2025-08-19T21:12:56.9459305Z # api.migrations.versions.0004\_fee\_cron
2025-08-19T21:12:56.9459630Z 
2025-08-19T21:12:56.9459793Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-19T21:12:56.9460046Z 
2025-08-19T21:12:56.9460182Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-19T21:12:56.9460399Z 
2025-08-19T21:12:56.9460523Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-19T21:12:56.9460733Z 
2025-08-19T21:12:56.9460842Z # api.migrations.versions.0003\_vendor\_prices
2025-08-19T21:12:56.9461027Z 
2025-08-19T21:12:56.9461147Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-19T21:12:56.9461340Z 
2025-08-19T21:12:56.9461478Z # api.migrations.versions.0024\_create\_buybox
2025-08-19T21:12:56.9461663Z 
2025-08-19T21:12:56.9461791Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-19T21:12:56.9461997Z 
2025-08-19T21:12:56.9462114Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-19T21:12:56.9462305Z 
2025-08-19T21:12:56.9462433Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-19T21:12:56.9462686Z 
2025-08-19T21:12:56.9462795Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-19T21:12:56.9463347Z 
2025-08-19T21:12:56.9463486Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-19T21:12:56.9463691Z 
2025-08-19T21:12:56.9463798Z # api.migrations.versions.0020\_unified\_schema
2025-08-19T21:12:56.9463996Z 
2025-08-19T21:12:56.9464132Z <a id="api.migrations.versions.0025_pr4_indexes_loadlog"></a>
2025-08-19T21:12:56.9464349Z 
2025-08-19T21:12:56.9464468Z # api.migrations.versions.0025\_pr4\_indexes\_loadlog
2025-08-19T21:12:56.9464674Z 
2025-08-19T21:12:56.9464797Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-19T21:12:56.9465000Z 
2025-08-19T21:12:56.9465115Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-19T21:12:56.9465304Z 
2025-08-19T21:12:56.9465439Z <a id="api.migrations.versions.0026_amazon_new_reports"></a>
2025-08-19T21:12:56.9465661Z 
2025-08-19T21:12:56.9465779Z # api.migrations.versions.0026\_amazon\_new\_reports
2025-08-19T21:12:56.9466145Z 
2025-08-19T21:12:56.9466263Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-19T21:12:56.9466451Z 
2025-08-19T21:12:56.9466543Z # api.migrations.versions.0001\_baseline
2025-08-19T21:12:56.9466712Z 
2025-08-19T21:12:56.9466814Z <a id="api.migrations.versions"></a>
2025-08-19T21:12:56.9466973Z 
2025-08-19T21:12:56.9467056Z # api.migrations.versions
2025-08-19T21:12:56.9467200Z 
2025-08-19T21:12:56.9467278Z <a id="api.migrations"></a>
2025-08-19T21:12:56.9467411Z 
2025-08-19T21:12:56.9467491Z # api.migrations
2025-08-19T21:12:56.9467622Z 
2025-08-19T21:12:56.9467690Z <a id="api.db"></a>
2025-08-19T21:12:56.9467798Z 
2025-08-19T21:12:56.9467870Z # api.db
2025-08-19T21:12:56.9467958Z 
2025-08-19T21:12:56.9468037Z <a id="api.routes.score"></a>
2025-08-19T21:12:56.9468181Z 
2025-08-19T21:12:56.9468250Z # api.routes.score
2025-08-19T21:12:56.9468357Z 
2025-08-19T21:12:56.9468434Z <a id="api.routes.stats"></a>
2025-08-19T21:12:56.9468577Z 
2025-08-19T21:12:56.9468650Z # api.routes.stats
2025-08-19T21:12:56.9468772Z 
2025-08-19T21:12:56.9468852Z <a id="api.routes.roi"></a>
2025-08-19T21:12:56.9468980Z 
2025-08-19T21:12:56.9469046Z # api.routes.roi
2025-08-19T21:12:56.9469152Z 
2025-08-19T21:12:56.9469232Z <a id="api.routes.health"></a>
2025-08-19T21:12:56.9469369Z 
2025-08-19T21:12:56.9469439Z # api.routes.health
2025-08-19T21:12:56.9469553Z 
2025-08-19T21:12:56.9469644Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-19T21:12:56.9469807Z 
2025-08-19T21:12:56.9469878Z #### MAX\_SKEW
2025-08-19T21:12:56.9469976Z 
2025-08-19T21:12:56.9470038Z seconds
2025-08-19T21:12:56.9470123Z 
2025-08-19T21:12:56.9470221Z <a id="api.routes.health.health"></a>
2025-08-19T21:12:56.9470381Z 
2025-08-19T21:12:56.9470444Z #### health
2025-08-19T21:12:56.9470542Z 
2025-08-19T21:12:56.9470607Z ```python
2025-08-19T21:12:56.9470806Z @router.get("/health", include_in_schema=False)
2025-08-19T21:12:56.9471216Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-19T21:12:56.9471688Z ```
2025-08-19T21:12:56.9471779Z 
2025-08-19T21:12:56.9471895Z Return 200 when DB reachable and clocks are in sync.
2025-08-19T21:12:56.9472100Z 
2025-08-19T21:12:56.9472187Z <a id="api.routes.repository"></a>
2025-08-19T21:12:56.9472343Z 
2025-08-19T21:12:56.9472421Z # api.routes.repository
2025-08-19T21:12:56.9472551Z 
2025-08-19T21:12:56.9472624Z <a id="api.routes"></a>
2025-08-19T21:12:56.9472740Z 
2025-08-19T21:12:56.9472811Z # api.routes
2025-08-19T21:12:56.9473226Z 
2025-08-19T21:12:56.9473312Z <a id="api.models.fee"></a>
2025-08-19T21:12:56.9473450Z 
2025-08-19T21:12:56.9473525Z # api.models.fee
2025-08-19T21:12:56.9473629Z 
2025-08-19T21:12:56.9473701Z <a id="api.models"></a>
2025-08-19T21:12:56.9473822Z 
2025-08-19T21:12:56.9473885Z # api.models
2025-08-19T21:12:56.9473979Z 
2025-08-19T21:12:56.9474063Z <a id="api.roi_repository"></a>
2025-08-19T21:12:56.9474204Z 
2025-08-19T21:12:56.9474276Z # api.roi\_repository
2025-08-19T21:12:56.9474388Z 
2025-08-19T21:12:56.9474468Z <a id="api.main"></a>
2025-08-19T21:12:56.9474589Z 
2025-08-19T21:12:56.9474660Z # api.main
2025-08-19T21:12:56.9474752Z 
2025-08-19T21:12:56.9474830Z <a id="api.main.ready"></a>
2025-08-19T21:12:56.9474964Z 
2025-08-19T21:12:56.9475025Z #### ready
2025-08-19T21:12:56.9475112Z 
2025-08-19T21:12:56.9475175Z ```python
2025-08-19T21:12:56.9475446Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-19T21:12:56.9475880Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-19T21:12:56.9476227Z                                                                       str]
2025-08-19T21:12:56.9476464Z ```
2025-08-19T21:12:56.9476548Z 
2025-08-19T21:12:56.9476645Z Return 200 only when migrations are at head.
2025-08-19T21:12:56.9476827Z 
2025-08-19T21:12:56.9476901Z <a id="api.config"></a>
2025-08-19T21:12:56.9477020Z 
2025-08-19T21:12:56.9477090Z # api.config
2025-08-19T21:12:56.9477183Z 
2025-08-19T21:12:56.9477259Z <a id="api.security"></a>
2025-08-19T21:12:56.9477398Z 
2025-08-19T21:12:56.9477600Z # api.security
2025-08-19T21:12:56.9477701Z 
2025-08-19T21:12:56.9477766Z <a id="etl"></a>
2025-08-19T21:12:56.9477874Z 
2025-08-19T21:12:56.9477935Z # etl
2025-08-19T21:12:56.9478021Z 
2025-08-19T21:12:56.9478113Z <a id="etl.fba_fee_ingestor"></a>
2025-08-19T21:12:56.9478259Z 
2025-08-19T21:12:56.9478332Z # etl.fba\_fee\_ingestor
2025-08-19T21:12:56.9478454Z 
2025-08-19T21:12:56.9478539Z <a id="etl.sp_fees_ingestor"></a>
2025-08-19T21:12:56.9478685Z 
2025-08-19T21:12:56.9478756Z # etl.sp\_fees\_ingestor
2025-08-19T21:12:56.9478883Z 
2025-08-19T21:12:56.9478961Z <a id="etl.keepa_ingestor"></a>
2025-08-19T21:12:56.9479096Z 
2025-08-19T21:12:56.9479171Z # etl.keepa\_ingestor
2025-08-19T21:12:56.9479283Z 
2025-08-19T21:12:56.9479349Z <a id="etl.db"></a>
2025-08-19T21:12:56.9479454Z 
2025-08-19T21:12:56.9479525Z # etl.db
2025-08-19T21:12:56.9479614Z 
2025-08-19T21:12:56.9479695Z <a id="etl.dialects.schemas"></a>
2025-08-19T21:12:56.9479849Z 
2025-08-19T21:12:56.9479927Z # etl.dialects.schemas
2025-08-19T21:12:56.9480050Z 
2025-08-19T21:12:56.9480155Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-19T21:12:56.9480347Z 
2025-08-19T21:12:56.9480439Z # etl.dialects.amazon\_reimbursements
2025-08-19T21:12:56.9480598Z 
2025-08-19T21:12:56.9480700Z <a id="etl.dialects.amazon_ads_sp_cost"></a>
2025-08-19T21:12:56.9480870Z 
2025-08-19T21:12:56.9480955Z # etl.dialects.amazon\_ads\_sp\_cost
2025-08-19T21:12:56.9481114Z 
2025-08-19T21:12:56.9481203Z <a id="etl.dialects.test_generic"></a>
2025-08-19T21:12:56.9481363Z 
2025-08-19T21:12:56.9481443Z # etl.dialects.test\_generic
2025-08-19T21:12:56.9481582Z 
2025-08-19T21:12:56.9481671Z <a id="etl.dialects.amazon_returns"></a>
2025-08-19T21:12:56.9481834Z 
2025-08-19T21:12:56.9481920Z # etl.dialects.amazon\_returns
2025-08-19T21:12:56.9482059Z 
2025-08-19T21:12:56.9482154Z <a id="etl.dialects.amazon_fee_preview"></a>
2025-08-19T21:12:56.9482329Z 
2025-08-19T21:12:56.9482412Z # etl.dialects.amazon\_fee\_preview
2025-08-19T21:12:56.9482685Z 
2025-08-19T21:12:56.9482796Z <a id="etl.dialects.amazon_inventory_ledger"></a>
2025-08-19T21:12:56.9483208Z 
2025-08-19T21:12:56.9483302Z # etl.dialects.amazon\_inventory\_ledger
2025-08-19T21:12:56.9483470Z 
2025-08-19T21:12:56.9483572Z <a id="etl.dialects.amazon_settlements"></a>
2025-08-19T21:12:56.9483741Z 
2025-08-19T21:12:56.9483827Z # etl.dialects.amazon\_settlements
2025-08-19T21:12:56.9483984Z 
2025-08-19T21:12:56.9484062Z <a id="etl.dialects"></a>
2025-08-19T21:12:56.9484190Z 
2025-08-19T21:12:56.9484255Z # etl.dialects
2025-08-19T21:12:56.9484360Z 
2025-08-19T21:12:56.9484426Z <a id="ingest"></a>
2025-08-19T21:12:56.9484532Z 
2025-08-19T21:12:56.9484602Z # ingest
2025-08-19T21:12:56.9484726Z 
2025-08-19T21:12:56.9484814Z <a id="ingest.maintenance"></a>
2025-08-19T21:12:56.9484959Z 
2025-08-19T21:12:56.9485031Z # ingest.maintenance
2025-08-19T21:12:56.9485153Z 
2025-08-19T21:12:56.9485234Z <a id="ingest.copy_loader"></a>
2025-08-19T21:12:56.9485368Z 
2025-08-19T21:12:56.9485444Z # ingest.copy\_loader
2025-08-19T21:12:56.9485572Z 
2025-08-19T21:12:56.9485674Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-19T21:12:56.9485855Z 
2025-08-19T21:12:56.9485940Z #### copy\_df\_via\_temp
2025-08-19T21:12:56.9486060Z 
2025-08-19T21:12:56.9486123Z ```python
2025-08-19T21:12:56.9486299Z def copy_df_via_temp(engine: Engine,
2025-08-19T21:12:56.9486530Z                      df: pd.DataFrame,
2025-08-19T21:12:56.9486765Z                      target_table: str,
2025-08-19T21:12:56.9486993Z                      *,
2025-08-19T21:12:56.9487207Z                      target_schema: Optional[str] = None,
2025-08-19T21:12:56.9487476Z                      columns: Sequence[str],
2025-08-19T21:12:56.9487746Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-19T21:12:56.9488030Z                      analyze_after: bool = False,
2025-08-19T21:12:56.9488288Z                      connection: Any | None = None) -> int
2025-08-19T21:12:56.9488527Z ```
2025-08-19T21:12:56.9488614Z 
2025-08-19T21:12:56.9488775Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-19T21:12:56.9489163Z 
2025-08-19T21:12:56.9489252Z <a id="ingest.tests.test_smoke"></a>
2025-08-19T21:12:56.9489412Z 
2025-08-19T21:12:56.9489500Z # ingest.tests.test\_smoke
2025-08-19T21:12:56.9489628Z 
2025-08-19T21:12:56.9489704Z <a id="ingest.tests"></a>
2025-08-19T21:12:56.9489837Z 
2025-08-19T21:12:56.9489903Z # ingest.tests
2025-08-19T21:12:56.9490004Z 
2025-08-19T21:12:56.9490087Z <a id="ingest.upload_router"></a>
2025-08-19T21:12:56.9490242Z 
2025-08-19T21:12:56.9490317Z # ingest.upload\_router
2025-08-19T21:12:56.9490437Z 
2025-08-19T21:12:56.9490527Z <a id="ingest.email_watcher"></a>
2025-08-19T21:12:56.9490670Z 
2025-08-19T21:12:56.9490743Z # ingest.email\_watcher
2025-08-19T21:12:56.9490863Z 
2025-08-19T21:12:56.9490951Z <a id="ingest.email_watcher.main"></a>
2025-08-19T21:12:56.9491112Z 
2025-08-19T21:12:56.9491175Z #### main
2025-08-19T21:12:56.9491270Z 
2025-08-19T21:12:56.9491332Z ```python
2025-08-19T21:12:56.9491508Z def main() -> dict[str, str]
2025-08-19T21:12:56.9491708Z ```
2025-08-19T21:12:56.9491793Z 
2025-08-19T21:12:56.9491938Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-19T21:12:56.9492157Z 
2025-08-19T21:12:56.9492283Z Returns {"status": "success"} when processing completes.
2025-08-19T21:12:56.9492496Z 
2025-08-19T21:12:56.9492571Z <a id="ingest.tasks"></a>
2025-08-19T21:12:56.9492697Z 
2025-08-19T21:12:56.9492764Z # ingest.tasks
2025-08-19T21:12:56.9492991Z 
2025-08-19T21:12:56.9493090Z <a id="ingest.tasks.task_import_file"></a>
2025-08-19T21:12:56.9493262Z 
2025-08-19T21:12:56.9493340Z #### task\_import\_file
2025-08-19T21:12:56.9493456Z 
2025-08-19T21:12:56.9493517Z ```python
2025-08-19T21:12:56.9493727Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-19T21:12:56.9494018Z def task_import_file(self: Any,
2025-08-19T21:12:56.9494227Z                      uri: str,
2025-08-19T21:12:56.9494449Z                      report_type: str | None = None,
2025-08-19T21:12:56.9494839Z                      force: bool = False) -> dict[str, Any]
2025-08-19T21:12:56.9495075Z ```
2025-08-19T21:12:56.9495157Z 
2025-08-19T21:12:56.9495292Z Import a file into Postgres using existing ETL pipeline.
2025-08-19T21:12:56.9495497Z 
2025-08-19T21:12:56.9495579Z <a id="ingest.celery_app"></a>
2025-08-19T21:12:56.9495724Z 
2025-08-19T21:12:56.9495795Z # ingest.celery\_app
2025-08-19T21:12:56.9495907Z 
2025-08-19T21:12:56.9495990Z <a id="ingest.ingest_router"></a>
2025-08-19T21:12:56.9496148Z 
2025-08-19T21:12:56.9496221Z # ingest.ingest\_router
2025-08-19T21:12:56.9496340Z 
2025-08-19T21:12:56.9496424Z <a id="logistics_etl"></a>
2025-08-19T21:12:56.9496551Z 
2025-08-19T21:12:56.9496616Z # logistics\_etl
2025-08-19T21:12:56.9496726Z 
2025-08-19T21:12:56.9496800Z Daily logistics ETL job.
2025-08-19T21:12:56.9496920Z 
2025-08-19T21:12:56.9496999Z <a id="logistics_etl.__main__"></a>
2025-08-19T21:12:56.9497154Z 
2025-08-19T21:12:56.9497231Z # logistics\_etl.\_\_main\_\_
2025-08-19T21:12:56.9497371Z 
2025-08-19T21:12:56.9497460Z <a id="logistics_etl.dsn"></a>
2025-08-19T21:12:56.9497594Z 
2025-08-19T21:12:56.9497662Z # logistics\_etl.dsn
2025-08-19T21:12:56.9497777Z 
2025-08-19T21:12:56.9497891Z Local DSN builder to avoid cross-service dependency.
2025-08-19T21:12:56.9498087Z 
2025-08-19T21:12:56.9498176Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-19T21:12:56.9498343Z 
2025-08-19T21:12:56.9498406Z #### build\_dsn
2025-08-19T21:12:56.9498506Z 
2025-08-19T21:12:56.9498577Z ```python
2025-08-19T21:12:56.9498749Z def build_dsn(sync: bool = True) -> str
2025-08-19T21:12:56.9498972Z ```
2025-08-19T21:12:56.9499053Z 
2025-08-19T21:12:56.9499190Z Return a Postgres DSN assembled from environment variables.
2025-08-19T21:12:56.9499415Z 
2025-08-19T21:12:56.9499558Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-19T21:12:56.9499939Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-19T21:12:56.9500284Z error when any required variable is missing.
2025-08-19T21:12:56.9500462Z 
2025-08-19T21:12:56.9500688Z <a id="logistics_etl.tests.conftest"></a>
2025-08-19T21:12:56.9500856Z 
2025-08-19T21:12:56.9500938Z # logistics\_etl.tests.conftest
2025-08-19T21:12:56.9501087Z 
2025-08-19T21:12:56.9501193Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-19T21:12:56.9501375Z 
2025-08-19T21:12:56.9501463Z # logistics\_etl.tests.test\_repository
2025-08-19T21:12:56.9501635Z 
2025-08-19T21:12:56.9501726Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-19T21:12:56.9501895Z 
2025-08-19T21:12:56.9501984Z # logistics\_etl.tests.test\_cron
2025-08-19T21:12:56.9502132Z 
2025-08-19T21:12:56.9502231Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-19T21:12:56.9502411Z 
2025-08-19T21:12:56.9502493Z # logistics\_etl.tests.test\_imports
2025-08-19T21:12:56.9502648Z 
2025-08-19T21:12:56.9502740Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-19T21:12:56.9503030Z 
2025-08-19T21:12:56.9503114Z # logistics\_etl.tests.test\_smoke
2025-08-19T21:12:56.9503269Z 
2025-08-19T21:12:56.9503368Z <a id="logistics_etl.tests.test_client"></a>
2025-08-19T21:12:56.9503543Z 
2025-08-19T21:12:56.9503623Z # logistics\_etl.tests.test\_client
2025-08-19T21:12:56.9503780Z 
2025-08-19T21:12:56.9503860Z <a id="logistics_etl.tests"></a>
2025-08-19T21:12:56.9504002Z 
2025-08-19T21:12:56.9504073Z # logistics\_etl.tests
2025-08-19T21:12:56.9504197Z 
2025-08-19T21:12:56.9504274Z <a id="logistics_etl.flow"></a>
2025-08-19T21:12:56.9504413Z 
2025-08-19T21:12:56.9504494Z # logistics\_etl.flow
2025-08-19T21:12:56.9504607Z 
2025-08-19T21:12:56.9504689Z <a id="logistics_etl.client"></a>
2025-08-19T21:12:56.9504837Z 
2025-08-19T21:12:56.9504909Z # logistics\_etl.client
2025-08-19T21:12:56.9505027Z 
2025-08-19T21:12:56.9505103Z <a id="logistics_etl.cron"></a>
2025-08-19T21:12:56.9505250Z 
2025-08-19T21:12:56.9505320Z # logistics\_etl.cron
2025-08-19T21:12:56.9505432Z 
2025-08-19T21:12:56.9505515Z <a id="logistics_etl.db"></a>
2025-08-19T21:12:56.9505651Z 
2025-08-19T21:12:56.9505719Z # logistics\_etl.db
2025-08-19T21:12:56.9505962Z 
2025-08-19T21:12:56.9506051Z <a id="logistics_etl.repository"></a>
2025-08-19T21:12:56.9506208Z 
2025-08-19T21:12:56.9570836Z # logistics\_etl.repository
2025-08-19T21:12:56.9571144Z 
2025-08-19T21:12:56.9571301Z <a id="alert_bot"></a>
2025-08-19T21:12:56.9571549Z 
2025-08-19T21:12:56.9571695Z # alert\_bot
2025-08-19T21:12:56.9571898Z 
2025-08-19T21:12:56.9572086Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-19T21:12:56.9572370Z 
2025-08-19T21:12:56.9572480Z # alert\_bot.tests.test\_smoke
2025-08-19T21:12:56.9572663Z 
2025-08-19T21:12:56.9572769Z <a id="alert_bot.tests"></a>
2025-08-19T21:12:56.9573209Z 
2025-08-19T21:12:56.9573306Z # alert\_bot.tests
2025-08-19T21:12:56.9573448Z 
2025-08-19T21:12:56.9573558Z <a id="alert_bot.alert_bot"></a>
2025-08-19T21:12:56.9573738Z 
2025-08-19T21:12:56.9573828Z # alert\_bot.alert\_bot
2025-08-19T21:12:56.9573988Z 
2025-08-19T21:12:56.9574081Z <a id="alert_bot.rules"></a>
2025-08-19T21:12:56.9574243Z 
2025-08-19T21:12:56.9574347Z # alert\_bot.rules
2025-08-19T21:12:56.9574482Z 
2025-08-19T21:12:56.9574564Z <a id="common"></a>
2025-08-19T21:12:56.9574696Z 
2025-08-19T21:12:56.9574780Z # common
2025-08-19T21:12:56.9574891Z 
2025-08-19T21:12:56.9574981Z <a id="common.dsn"></a>
2025-08-19T21:12:56.9575133Z 
2025-08-19T21:12:56.9575210Z # common.dsn
2025-08-19T21:12:56.9575330Z 
2025-08-19T21:12:56.9575435Z <a id="common.dsn.build_dsn"></a>
2025-08-19T21:12:56.9575628Z 
2025-08-19T21:12:56.9575711Z #### build\_dsn
2025-08-19T21:12:56.9575836Z 
2025-08-19T21:12:56.9575923Z ```python
2025-08-19T21:12:56.9576142Z def build_dsn(sync: bool = True) -> str
2025-08-19T21:12:56.9576426Z ```
2025-08-19T21:12:56.9576533Z 
2025-08-19T21:12:56.9576689Z Return a Postgres DSN, validating required variables.
2025-08-19T21:12:56.9576955Z 
2025-08-19T21:12:56.9577186Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-19T21:12:56.9577724Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-19T21:12:56.9578253Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-19T21:12:56.9579085Z missing.
2025-08-19T21:12:56.9579206Z 
2025-08-19T21:12:56.9579300Z <a id="common.models_vendor"></a>
2025-08-19T21:12:56.9579458Z 
2025-08-19T21:12:56.9579532Z # common.models\_vendor
2025-08-19T21:12:56.9579652Z 
2025-08-19T21:12:56.9579739Z <a id="common.models_vendor.Vendor"></a>
2025-08-19T21:12:56.9579911Z 
2025-08-19T21:12:56.9579980Z ## Vendor Objects
2025-08-19T21:12:56.9580085Z 
2025-08-19T21:12:56.9580155Z ```python
2025-08-19T21:12:56.9580308Z class Vendor(Base)
2025-08-19T21:12:56.9580474Z ```
2025-08-19T21:12:56.9580556Z 
2025-08-19T21:12:56.9580636Z Vendor of inventory items.
2025-08-19T21:12:56.9580775Z 
2025-08-19T21:12:56.9580874Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-19T21:12:56.9581052Z 
2025-08-19T21:12:56.9581125Z ## VendorPrice Objects
2025-08-19T21:12:56.9581250Z 
2025-08-19T21:12:56.9581311Z ```python
2025-08-19T21:12:56.9581475Z class VendorPrice(Base)
2025-08-19T21:12:56.9581650Z ```
2025-08-19T21:12:56.9581737Z 
2025-08-19T21:12:56.9581842Z Association table linking vendors to pricing.
2025-08-19T21:12:56.9582017Z 
2025-08-19T21:12:56.9582090Z <a id="common.db_url"></a>
2025-08-19T21:12:56.9582222Z 
2025-08-19T21:12:56.9582287Z # common.db\_url
2025-08-19T21:12:56.9582392Z 
2025-08-19T21:12:56.9582476Z <a id="common.db_url.build_url"></a>
2025-08-19T21:12:56.9582635Z 
2025-08-19T21:12:56.9582697Z #### build\_url
2025-08-19T21:12:56.9582797Z 
2025-08-19T21:12:56.9582983Z ```python
2025-08-19T21:12:56.9583157Z def build_url(async_: bool = True) -> str
2025-08-19T21:12:56.9583386Z ```
2025-08-19T21:12:56.9583467Z 
2025-08-19T21:12:56.9583564Z Return Postgres DSN from env or PG_* parts.
2025-08-19T21:12:56.9583746Z 
2025-08-19T21:12:56.9583823Z <a id="common.keepa"></a>
2025-08-19T21:12:56.9583951Z 
2025-08-19T21:12:56.9584024Z # common.keepa
2025-08-19T21:12:56.9584126Z 
2025-08-19T21:12:56.9584196Z <a id="common.llm"></a>
2025-08-19T21:12:56.9584442Z 
2025-08-19T21:12:56.9584514Z # common.llm
2025-08-19T21:12:56.9584618Z 
2025-08-19T21:12:56.9584699Z <a id="common.settings"></a>
2025-08-19T21:12:56.9584845Z 
2025-08-19T21:12:56.9584913Z # common.settings
2025-08-19T21:12:56.9585019Z 
2025-08-19T21:12:56.9585090Z <a id="common.db"></a>
2025-08-19T21:12:56.9585212Z 
2025-08-19T21:12:56.9585275Z # common.db
2025-08-19T21:12:56.9585367Z 
2025-08-19T21:12:56.9585467Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-19T21:12:56.9585636Z 
2025-08-19T21:12:56.9585711Z #### build\_sqlalchemy\_url
2025-08-19T21:12:56.9585851Z 
2025-08-19T21:12:56.9585915Z ```python
2025-08-19T21:12:56.9586085Z def build_sqlalchemy_url() -> str
2025-08-19T21:12:56.9586296Z ```
2025-08-19T21:12:56.9586375Z 
2025-08-19T21:12:56.9586470Z Return Postgres URL for SQLAlchemy engines.
2025-08-19T21:12:56.9586646Z 
2025-08-19T21:12:56.9586734Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-19T21:12:56.9586898Z 
2025-08-19T21:12:56.9586979Z #### build\_asyncpg\_dsn
2025-08-19T21:12:56.9587108Z 
2025-08-19T21:12:56.9587174Z ```python
2025-08-19T21:12:56.9587347Z def build_asyncpg_dsn() -> str
2025-08-19T21:12:56.9587540Z ```
2025-08-19T21:12:56.9587642Z 
2025-08-19T21:12:56.9587767Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-19T21:12:56.9587977Z 
2025-08-19T21:12:56.9588067Z <a id="common.db.refresh_mvs"></a>
2025-08-19T21:12:56.9588218Z 
2025-08-19T21:12:56.9588284Z #### refresh\_mvs
2025-08-19T21:12:56.9588388Z 
2025-08-19T21:12:56.9588460Z ```python
2025-08-19T21:12:56.9588654Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-19T21:12:56.9588918Z ```
2025-08-19T21:12:56.9588996Z 
2025-08-19T21:12:56.9589131Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-19T21:12:56.9589350Z 
2025-08-19T21:12:56.9589424Z <a id="common.config"></a>
2025-08-19T21:12:56.9589551Z 
2025-08-19T21:12:56.9589628Z # common.config
2025-08-19T21:12:56.9589730Z 
2025-08-19T21:12:56.9589803Z <a id="common.base"></a>
2025-08-19T21:12:56.9589931Z 
2025-08-19T21:12:56.9590000Z # common.base
2025-08-19T21:12:56.9590242Z 
2025-08-19T21:12:56.9590321Z <a id="common.base.Base"></a>
2025-08-19T21:12:56.9590464Z 
2025-08-19T21:12:56.9590526Z ## Base Objects
2025-08-19T21:12:56.9590623Z 
2025-08-19T21:12:56.9590689Z ```python
2025-08-19T21:12:56.9590850Z class Base(DeclarativeBase)
2025-08-19T21:12:56.9591046Z ```
2025-08-19T21:12:56.9591126Z 
2025-08-19T21:12:56.9591207Z Base class for SQLAlchemy models.
2025-08-19T21:12:56.9591357Z 
2025-08-19T21:12:56.9591427Z <a id="repricer"></a>
2025-08-19T21:12:56.9591541Z 
2025-08-19T21:12:56.9591604Z # repricer
2025-08-19T21:12:56.9591701Z 
2025-08-19T21:12:56.9591786Z <a id="repricer.app.schemas"></a>
2025-08-19T21:12:56.9591933Z 
2025-08-19T21:12:56.9592014Z # repricer.app.schemas
2025-08-19T21:12:56.9592136Z 
2025-08-19T21:12:56.9592219Z <a id="repricer.app.deps"></a>
2025-08-19T21:12:56.9592357Z 
2025-08-19T21:12:56.9592435Z # repricer.app.deps
2025-08-19T21:12:56.9592546Z 
2025-08-19T21:12:56.9592661Z Placeholder module for Keepa / SP-API clients.
2025-08-19T21:12:56.9592978Z 
2025-08-19T21:12:56.9593062Z <a id="repricer.app.logic"></a>
2025-08-19T21:12:56.9593203Z 
2025-08-19T21:12:56.9593282Z # repricer.app.logic
2025-08-19T21:12:56.9593395Z 
2025-08-19T21:12:56.9593492Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-19T21:12:56.9593663Z 
2025-08-19T21:12:56.9593733Z #### MIN\_MARGIN
2025-08-19T21:12:56.9593834Z 
2025-08-19T21:12:56.9593894Z 15 % ROI
2025-08-19T21:12:56.9593988Z 
2025-08-19T21:12:56.9594088Z <a id="repricer.app.logic.compute_price"></a>
2025-08-19T21:12:56.9594263Z 
2025-08-19T21:12:56.9594333Z #### compute\_price
2025-08-19T21:12:56.9594447Z 
2025-08-19T21:12:56.9594509Z ```python
2025-08-19T21:12:56.9594758Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-19T21:12:56.9595052Z ```
2025-08-19T21:12:56.9595134Z 
2025-08-19T21:12:56.9595246Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-19T21:12:56.9595517Z Replace with real competitive logic later.
2025-08-19T21:12:56.9595856Z 
2025-08-19T21:12:56.9595937Z <a id="repricer.app.main"></a>
2025-08-19T21:12:56.9596081Z 
2025-08-19T21:12:56.9596158Z # repricer.app.main
2025-08-19T21:12:56.9596265Z 
2025-08-19T21:12:56.9596339Z <a id="repricer.app"></a>
2025-08-19T21:12:56.9596467Z 
2025-08-19T21:12:56.9596541Z # repricer.app
2025-08-19T21:12:56.9596641Z 
2025-08-19T21:12:56.9596731Z <a id="repricer.tests.test_imports"></a>
2025-08-19T21:12:56.9596905Z 
2025-08-19T21:12:56.9596988Z # repricer.tests.test\_imports
2025-08-19T21:12:56.9597127Z 
2025-08-19T21:12:56.9597214Z <a id="repricer.tests.test_smoke"></a>
2025-08-19T21:12:56.9597381Z 
2025-08-19T21:12:56.9597463Z # repricer.tests.test\_smoke
2025-08-19T21:12:56.9597598Z 
2025-08-19T21:12:56.9597683Z <a id="repricer.tests"></a>
2025-08-19T21:12:56.9597815Z 
2025-08-19T21:12:56.9597881Z # repricer.tests
2025-08-19T21:12:56.9597994Z 
2025-08-19T21:12:56.9598058Z <a id="db"></a>
2025-08-19T21:12:56.9598156Z 
2025-08-19T21:12:56.9598217Z # db
2025-08-19T21:12:56.9598307Z 
2025-08-19T21:12:56.9598387Z <a id="db.utils.views"></a>
2025-08-19T21:12:56.9598521Z 
2025-08-19T21:12:56.9598595Z # db.utils.views
2025-08-19T21:12:56.9598697Z 
2025-08-19T21:12:56.9598787Z <a id="db.utils.views.replace_view"></a>
2025-08-19T21:12:56.9598964Z 
2025-08-19T21:12:56.9599032Z #### replace\_view
2025-08-19T21:12:56.9599139Z 
2025-08-19T21:12:56.9599201Z ```python
2025-08-19T21:12:56.9599410Z def replace_view(name: str, new_sql: str) -> None
2025-08-19T21:12:56.9599660Z ```
2025-08-19T21:12:56.9599753Z 
2025-08-19T21:12:56.9599844Z Drop and recreate a SQL view atomically.
2025-08-19T21:12:56.9600010Z 
2025-08-19T21:12:56.9600089Z <a id="db.utils"></a>
2025-08-19T21:12:56.9600205Z 
2025-08-19T21:12:56.9600268Z # db.utils
2025-08-19T21:12:56.9600366Z 
2025-08-19T21:12:56.9600443Z <a id="price_importer"></a>
2025-08-19T21:12:56.9600576Z 
2025-08-19T21:12:56.9600645Z # price\_importer
2025-08-19T21:12:56.9600761Z 
2025-08-19T21:12:56.9600868Z <a id="price_importer.services_common.dsn"></a>
2025-08-19T21:12:56.9601059Z 
2025-08-19T21:12:56.9601156Z # price\_importer.services\_common.dsn
2025-08-19T21:12:56.9601585Z 
2025-08-19T21:12:56.9601715Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-19T21:12:56.9601925Z 
2025-08-19T21:12:56.9601989Z #### build\_dsn
2025-08-19T21:12:56.9602090Z 
2025-08-19T21:12:56.9602154Z ```python
2025-08-19T21:12:56.9602328Z def build_dsn(sync: bool = True) -> str
2025-08-19T21:12:56.9602544Z ```
2025-08-19T21:12:56.9602631Z 
2025-08-19T21:12:56.9602697Z Return safe DSN.
2025-08-19T21:12:56.9602800Z 
2025-08-19T21:12:56.9603347Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-19T21:12:56.9603551Z 
2025-08-19T21:12:56.9603675Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-19T21:12:56.9603888Z 
2025-08-19T21:12:56.9604000Z # price\_importer.services\_common.models\_vendor
2025-08-19T21:12:56.9604187Z 
2025-08-19T21:12:56.9604290Z <a id="price_importer.services_common.db_url"></a>
2025-08-19T21:12:56.9604480Z 
2025-08-19T21:12:56.9604581Z # price\_importer.services\_common.db\_url
2025-08-19T21:12:56.9604757Z 
2025-08-19T21:12:56.9604891Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-19T21:12:56.9605104Z 
2025-08-19T21:12:56.9605169Z #### build\_url
2025-08-19T21:12:56.9605273Z 
2025-08-19T21:12:56.9605337Z ```python
2025-08-19T21:12:56.9605508Z def build_url(async_: bool = True) -> str
2025-08-19T21:12:56.9605731Z ```
2025-08-19T21:12:56.9605813Z 
2025-08-19T21:12:56.9605916Z Return Postgres DSN from env or PG_* parts.
2025-08-19T21:12:56.9606086Z 
2025-08-19T21:12:56.9606190Z <a id="price_importer.services_common.keepa"></a>
2025-08-19T21:12:56.9606379Z 
2025-08-19T21:12:56.9606471Z # price\_importer.services\_common.keepa
2025-08-19T21:12:56.9606633Z 
2025-08-19T21:12:56.9606730Z <a id="price_importer.services_common.llm"></a>
2025-08-19T21:12:56.9606914Z 
2025-08-19T21:12:56.9607002Z # price\_importer.services\_common.llm
2025-08-19T21:12:56.9607160Z 
2025-08-19T21:12:56.9607278Z <a id="price_importer.services_common.settings"></a>
2025-08-19T21:12:56.9607602Z 
2025-08-19T21:12:56.9607698Z # price\_importer.services\_common.settings
2025-08-19T21:12:56.9607873Z 
2025-08-19T21:12:56.9607972Z <a id="price_importer.services_common.db"></a>
2025-08-19T21:12:56.9608146Z 
2025-08-19T21:12:56.9608234Z # price\_importer.services\_common.db
2025-08-19T21:12:56.9608396Z 
2025-08-19T21:12:56.9608547Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-19T21:12:56.9608779Z 
2025-08-19T21:12:56.9608860Z #### build\_sqlalchemy\_url
2025-08-19T21:12:56.9608989Z 
2025-08-19T21:12:56.9609058Z ```python
2025-08-19T21:12:56.9609234Z def build_sqlalchemy_url() -> str
2025-08-19T21:12:56.9609439Z ```
2025-08-19T21:12:56.9609531Z 
2025-08-19T21:12:56.9609623Z Return Postgres URL for SQLAlchemy engines.
2025-08-19T21:12:56.9609791Z 
2025-08-19T21:12:56.9609931Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-19T21:12:56.9610162Z 
2025-08-19T21:12:56.9610235Z #### build\_asyncpg\_dsn
2025-08-19T21:12:56.9610366Z 
2025-08-19T21:12:56.9610443Z ```python
2025-08-19T21:12:56.9610611Z def build_asyncpg_dsn() -> str
2025-08-19T21:12:56.9610814Z ```
2025-08-19T21:12:56.9610894Z 
2025-08-19T21:12:56.9611022Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-19T21:12:56.9611247Z 
2025-08-19T21:12:56.9611381Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-19T21:12:56.9611591Z 
2025-08-19T21:12:56.9611665Z #### refresh\_mvs
2025-08-19T21:12:56.9611769Z 
2025-08-19T21:12:56.9611841Z ```python
2025-08-19T21:12:56.9612059Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-19T21:12:56.9612304Z ```
2025-08-19T21:12:56.9612392Z 
2025-08-19T21:12:56.9612526Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-19T21:12:56.9612737Z 
2025-08-19T21:12:56.9612832Z <a id="price_importer.services_common"></a>
2025-08-19T21:12:56.9613241Z 
2025-08-19T21:12:56.9613331Z # price\_importer.services\_common
2025-08-19T21:12:56.9613487Z 
2025-08-19T21:12:56.9613597Z <a id="price_importer.services_common.base"></a>
2025-08-19T21:12:56.9613920Z 
2025-08-19T21:12:56.9614017Z # price\_importer.services\_common.base
2025-08-19T21:12:56.9614189Z 
2025-08-19T21:12:56.9614279Z <a id="price_importer.normaliser"></a>
2025-08-19T21:12:56.9614442Z 
2025-08-19T21:12:56.9614526Z # price\_importer.normaliser
2025-08-19T21:12:56.9614672Z 
2025-08-19T21:12:56.9614786Z <a id="price_importer.common.models_vendor"></a>
2025-08-19T21:12:56.9614974Z 
2025-08-19T21:12:56.9615069Z # price\_importer.common.models\_vendor
2025-08-19T21:12:56.9615229Z 
2025-08-19T21:12:56.9615321Z <a id="price_importer.common.db_url"></a>
2025-08-19T21:12:56.9615494Z 
2025-08-19T21:12:56.9615579Z # price\_importer.common.db\_url
2025-08-19T21:12:56.9615725Z 
2025-08-19T21:12:56.9615829Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-19T21:12:56.9616019Z 
2025-08-19T21:12:56.9616084Z #### make\_dsn
2025-08-19T21:12:56.9616183Z 
2025-08-19T21:12:56.9616256Z ```python
2025-08-19T21:12:56.9616430Z def make_dsn(async_: bool = False) -> str
2025-08-19T21:12:56.9616668Z ```
2025-08-19T21:12:56.9616752Z 
2025-08-19T21:12:56.9616870Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-19T21:12:56.9617074Z 
2025-08-19T21:12:56.9617180Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-19T21:12:56.9617363Z 
2025-08-19T21:12:56.9617434Z #### build\_url
2025-08-19T21:12:56.9617536Z 
2025-08-19T21:12:56.9617600Z ```python
2025-08-19T21:12:56.9617784Z def build_url(async_: bool = False) -> str
2025-08-19T21:12:56.9618005Z ```
2025-08-19T21:12:56.9618095Z 
2025-08-19T21:12:56.9618214Z Return Postgres DSN built from environment variables.
2025-08-19T21:12:56.9618410Z 
2025-08-19T21:12:56.9618496Z <a id="price_importer.common"></a>
2025-08-19T21:12:56.9618653Z 
2025-08-19T21:12:56.9618731Z # price\_importer.common
2025-08-19T21:12:56.9618858Z 
2025-08-19T21:12:56.9618958Z <a id="price_importer.common.base"></a>
2025-08-19T21:12:56.9619129Z 
2025-08-19T21:12:56.9619213Z # price\_importer.common.base
2025-08-19T21:12:56.9619540Z 
2025-08-19T21:12:56.9619643Z <a id="price_importer.tests.conftest"></a>
2025-08-19T21:12:56.9619815Z 
2025-08-19T21:12:56.9619901Z # price\_importer.tests.conftest
2025-08-19T21:12:56.9620054Z 
2025-08-19T21:12:56.9620152Z <a id="price_importer.tests.test_reader"></a>
2025-08-19T21:12:56.9620327Z 
2025-08-19T21:12:56.9620418Z # price\_importer.tests.test\_reader
2025-08-19T21:12:56.9620575Z 
2025-08-19T21:12:56.9620674Z <a id="price_importer.tests.test_imports"></a>
2025-08-19T21:12:56.9620853Z 
2025-08-19T21:12:56.9620942Z # price\_importer.tests.test\_imports
2025-08-19T21:12:56.9621098Z 
2025-08-19T21:12:56.9621194Z <a id="price_importer.tests.test_smoke"></a>
2025-08-19T21:12:56.9621370Z 
2025-08-19T21:12:56.9621455Z # price\_importer.tests.test\_smoke
2025-08-19T21:12:56.9621612Z 
2025-08-19T21:12:56.9621722Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-19T21:12:56.9621933Z 
2025-08-19T21:12:56.9622025Z # price\_importer.tests.test\_normaliser
2025-08-19T21:12:56.9622211Z 
2025-08-19T21:12:56.9622313Z <a id="price_importer.tests"></a>
2025-08-19T21:12:56.9622464Z 
2025-08-19T21:12:56.9622539Z # price\_importer.tests
2025-08-19T21:12:56.9622667Z 
2025-08-19T21:12:56.9622753Z <a id="price_importer.reader"></a>
2025-08-19T21:12:56.9623020Z 
2025-08-19T21:12:56.9623103Z # price\_importer.reader
2025-08-19T21:12:56.9623228Z 
2025-08-19T21:12:56.9623319Z <a id="price_importer.repository"></a>
2025-08-19T21:12:56.9623512Z 
2025-08-19T21:12:56.9623592Z # price\_importer.repository
2025-08-19T21:12:56.9623731Z 
2025-08-19T21:12:56.9623814Z <a id="price_importer.import"></a>
2025-08-19T21:12:56.9623967Z 
2025-08-19T21:12:56.9624044Z # price\_importer.import
2025-08-19T21:12:56.9624167Z 
2025-08-19T21:12:56.9624247Z <a id="fees_h10"></a>
2025-08-19T21:12:56.9624359Z 
2025-08-19T21:12:56.9624424Z # fees\_h10
2025-08-19T21:12:56.9624518Z 
2025-08-19T21:12:56.9624600Z <a id="fees_h10.worker"></a>
2025-08-19T21:12:56.9624732Z 
2025-08-19T21:12:56.9624799Z # fees\_h10.worker
2025-08-19T21:12:56.9624920Z 
2025-08-19T21:12:56.9625202Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-19T21:12:56.9625377Z 
2025-08-19T21:12:56.9625459Z #### list\_active\_asins
2025-08-19T21:12:56.9625581Z 
2025-08-19T21:12:56.9625643Z ```python
2025-08-19T21:12:56.9625817Z def list_active_asins() -> list[str]
2025-08-19T21:12:56.9626024Z ```
2025-08-19T21:12:56.9626117Z 
2025-08-19T21:12:56.9626227Z Return known ASINs or an empty list if unavailable.
2025-08-19T21:12:56.9626417Z 
2025-08-19T21:12:56.9626500Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-19T21:12:56.9626661Z 
2025-08-19T21:12:56.9626740Z # fees\_h10.tests.test\_smoke
2025-08-19T21:12:56.9626873Z 
2025-08-19T21:12:56.9626953Z <a id="fees_h10.tests"></a>
2025-08-19T21:12:56.9627083Z 
2025-08-19T21:12:56.9627147Z # fees\_h10.tests
2025-08-19T21:12:56.9627253Z 
2025-08-19T21:12:56.9627333Z <a id="fees_h10.client"></a>
2025-08-19T21:12:56.9627462Z 
2025-08-19T21:12:56.9627528Z # fees\_h10.client
2025-08-19T21:12:56.9627636Z 
2025-08-19T21:12:56.9627720Z <a id="fees_h10.repository"></a>
2025-08-19T21:12:56.9627869Z 
2025-08-19T21:12:56.9627947Z # fees\_h10.repository
2025-08-19T21:12:56.9628062Z 
2025-08-19T21:12:56.9628164Z <a id="fees_h10.repository.upsert_fees_raw"></a>
2025-08-19T21:12:56.9628344Z 
2025-08-19T21:12:56.9628420Z #### upsert\_fees\_raw
2025-08-19T21:12:56.9628534Z 
2025-08-19T21:12:56.9628597Z ```python
2025-08-19T21:12:56.9628769Z def upsert_fees_raw(engine: Engine,
2025-08-19T21:12:56.9629007Z                     rows: Iterable[Mapping[str, Any]],
2025-08-19T21:12:56.9629245Z                     *,
2025-08-19T21:12:56.9629470Z                     testing: bool = False) -> Optional[Dict[str, int]]
2025-08-19T21:12:56.9629732Z ```
2025-08-19T21:12:56.9629813Z 
2025-08-19T21:12:56.9629898Z Idempotent upsert for fees.
2025-08-19T21:12:56.9630032Z 
2025-08-19T21:12:56.9630180Z TESTING-only: returns counts for inserted/updated/skipped rows.
2025-08-19T21:12:56.9630521Z Assumes logical key (asin, marketplace, fee_type).
2025-08-19T21:12:56.9630948Z Only updates when one of the mutable fields changes.
2025-08-19T21:12:56.9631152Z 
2025-08-19T21:12:56.9631221Z <a id="emailer"></a>
2025-08-19T21:12:56.9631332Z 
2025-08-19T21:12:56.9631400Z # emailer
2025-08-19T21:12:56.9631486Z 
2025-08-19T21:12:56.9631586Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-19T21:12:56.9631772Z 
2025-08-19T21:12:56.9631860Z # emailer.tests.test\_import\_emailer
2025-08-19T21:12:56.9632019Z 
2025-08-19T21:12:56.9632105Z <a id="emailer.tests.test_smoke"></a>
2025-08-19T21:12:56.9632264Z 
2025-08-19T21:12:56.9632343Z # emailer.tests.test\_smoke
2025-08-19T21:12:56.9632476Z 
2025-08-19T21:12:56.9632558Z <a id="emailer.tests"></a>
2025-08-19T21:12:56.9632685Z 
2025-08-19T21:12:56.9632750Z # emailer.tests
2025-08-19T21:12:56.9632945Z 
2025-08-19T21:12:56.9633038Z <a id="emailer.generate_body"></a>
2025-08-19T21:12:56.9633191Z 
2025-08-19T21:12:56.9633266Z # emailer.generate\_body
2025-08-19T21:12:56.9633397Z 
2025-08-19T21:12:56.9633469Z <a id="llm_server"></a>
2025-08-19T21:12:56.9633591Z 
2025-08-19T21:12:56.9633668Z # llm\_server
2025-08-19T21:12:56.9633765Z 
2025-08-19T21:12:56.9633841Z <a id="llm_server.app"></a>
2025-08-19T21:12:56.9633970Z 
2025-08-19T21:12:56.9634048Z # llm\_server.app
2025-08-19T21:12:56.9634151Z 
