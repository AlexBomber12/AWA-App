2025-08-17T22:17:33.1074187Z ##[group]Run pydoc-markdown
2025-08-17T22:17:33.1074514Z [36;1mpydoc-markdown[0m
2025-08-17T22:17:33.1116637Z shell: /usr/bin/bash -e {0}
2025-08-17T22:17:33.1116888Z env:
2025-08-17T22:17:33.1117139Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T22:17:33.1117910Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-17T22:17:33.1118335Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T22:17:33.1118714Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T22:17:33.1119087Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T22:17:33.1119469Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-17T22:17:33.1119798Z ##[endgroup]
2025-08-17T22:17:33.4579585Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-17T22:17:33.4580457Z Unknown key(s) "{'output_directory'}" at:
2025-08-17T22:17:33.4581104Z In "pydoc-markdown.yml"
2025-08-17T22:17:33.4581725Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-17T22:17:33.4582647Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-17T22:17:33.4583439Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-17T22:17:33.4583989Z 
2025-08-17T22:17:33.7787508Z <a id="__init__"></a>
2025-08-17T22:17:33.7787910Z 
2025-08-17T22:17:33.7788070Z # \_\_init\_\_
2025-08-17T22:17:33.7788264Z 
2025-08-17T22:17:33.7788394Z <a id="api"></a>
2025-08-17T22:17:33.7788592Z 
2025-08-17T22:17:33.7788726Z # api
2025-08-17T22:17:33.7788898Z 
2025-08-17T22:17:33.7789067Z <a id="api.tests.test_llm"></a>
2025-08-17T22:17:33.7789380Z 
2025-08-17T22:17:33.7789536Z # api.tests.test\_llm
2025-08-17T22:17:33.7789767Z 
2025-08-17T22:17:33.7789937Z <a id="api.tests.test_imports"></a>
2025-08-17T22:17:33.7790247Z 
2025-08-17T22:17:33.7790395Z # api.tests.test\_imports
2025-08-17T22:17:33.7790640Z 
2025-08-17T22:17:33.7790820Z <a id="api.tests.test_entrypoint"></a>
2025-08-17T22:17:33.7791142Z 
2025-08-17T22:17:33.7791303Z # api.tests.test\_entrypoint
2025-08-17T22:17:33.7791655Z 
2025-08-17T22:17:33.7791814Z <a id="api.tests.test_health"></a>
2025-08-17T22:17:33.7792103Z 
2025-08-17T22:17:33.7792267Z # api.tests.test\_health
2025-08-17T22:17:33.7792541Z 
2025-08-17T22:17:33.7792699Z <a id="api.migrations.env"></a>
2025-08-17T22:17:33.7792994Z 
2025-08-17T22:17:33.7793151Z # api.migrations.env
2025-08-17T22:17:33.7793369Z 
2025-08-17T22:17:33.7793605Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-17T22:17:33.7794072Z 
2025-08-17T22:17:33.7794307Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-17T22:17:33.7794704Z 
2025-08-17T22:17:33.7795254Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-17T22:17:33.7795703Z 
2025-08-17T22:17:33.7795927Z # api.migrations.versions.0004\_fee\_cron
2025-08-17T22:17:33.7796337Z 
2025-08-17T22:17:33.7796712Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-17T22:17:33.7797477Z 
2025-08-17T22:17:33.7797880Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-17T22:17:33.7798663Z 
2025-08-17T22:17:33.7798845Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-17T22:17:33.7799147Z 
2025-08-17T22:17:33.7799305Z # api.migrations.versions.0003\_vendor\_prices
2025-08-17T22:17:33.7799577Z 
2025-08-17T22:17:33.7799751Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-17T22:17:33.7800049Z 
2025-08-17T22:17:33.7800195Z # api.migrations.versions.0024\_create\_buybox
2025-08-17T22:17:33.7800457Z 
2025-08-17T22:17:33.7800634Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-17T22:17:33.7800942Z 
2025-08-17T22:17:33.7801100Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-17T22:17:33.7801371Z 
2025-08-17T22:17:33.7801547Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-17T22:17:33.7801828Z 
2025-08-17T22:17:33.7801978Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-17T22:17:33.7802250Z 
2025-08-17T22:17:33.7802427Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-17T22:17:33.7802989Z 
2025-08-17T22:17:33.7803141Z # api.migrations.versions.0020\_unified\_schema
2025-08-17T22:17:33.7803420Z 
2025-08-17T22:17:33.7803613Z <a id="api.migrations.versions.0025_pr4_indexes_loadlog"></a>
2025-08-17T22:17:33.7803930Z 
2025-08-17T22:17:33.7804111Z # api.migrations.versions.0025\_pr4\_indexes\_loadlog
2025-08-17T22:17:33.7804399Z 
2025-08-17T22:17:33.7804578Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-17T22:17:33.7804881Z 
2025-08-17T22:17:33.7805035Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-17T22:17:33.7805307Z 
2025-08-17T22:17:33.7805505Z <a id="api.migrations.versions.0026_amazon_new_reports"></a>
2025-08-17T22:17:33.7805820Z 
2025-08-17T22:17:33.7805985Z # api.migrations.versions.0026\_amazon\_new\_reports
2025-08-17T22:17:33.7806277Z 
2025-08-17T22:17:33.7806428Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-17T22:17:33.7806700Z 
2025-08-17T22:17:33.7806829Z # api.migrations.versions.0001\_baseline
2025-08-17T22:17:33.7807092Z 
2025-08-17T22:17:33.7807411Z <a id="api.migrations.versions"></a>
2025-08-17T22:17:33.7807651Z 
2025-08-17T22:17:33.7807773Z # api.migrations.versions
2025-08-17T22:17:33.7807959Z 
2025-08-17T22:17:33.7808070Z <a id="api.migrations"></a>
2025-08-17T22:17:33.7808257Z 
2025-08-17T22:17:33.7808364Z # api.migrations
2025-08-17T22:17:33.7808506Z 
2025-08-17T22:17:33.7808573Z <a id="api.db"></a>
2025-08-17T22:17:33.7808690Z 
2025-08-17T22:17:33.7808757Z # api.db
2025-08-17T22:17:33.7808845Z 
2025-08-17T22:17:33.7808931Z <a id="api.routes.stats"></a>
2025-08-17T22:17:33.7809071Z 
2025-08-17T22:17:33.7809142Z # api.routes.stats
2025-08-17T22:17:33.7809250Z 
2025-08-17T22:17:33.7809346Z <a id="api.routes.stats.kpi"></a>
2025-08-17T22:17:33.7809501Z 
2025-08-17T22:17:33.7809564Z #### kpi
2025-08-17T22:17:33.7809658Z 
2025-08-17T22:17:33.7809731Z ```python
2025-08-17T22:17:33.7809903Z @router.get("/stats/kpi")
2025-08-17T22:17:33.7810163Z def kpi() -> List[Dict[str, int]]
2025-08-17T22:17:33.7810390Z ```
2025-08-17T22:17:33.7810480Z 
2025-08-17T22:17:33.7810560Z Return KPI metrics (mock).
2025-08-17T22:17:33.7810692Z 
2025-08-17T22:17:33.7810801Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-17T22:17:33.7810982Z 
2025-08-17T22:17:33.7811053Z #### roi\_by\_vendor
2025-08-17T22:17:33.7811176Z 
2025-08-17T22:17:33.7811241Z ```python
2025-08-17T22:17:33.7811414Z @router.get("/stats/roi_by_vendor")
2025-08-17T22:17:33.7811674Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-17T22:17:33.7811919Z ```
2025-08-17T22:17:33.7812003Z 
2025-08-17T22:17:33.7812085Z Return ROI percent by vendor.
2025-08-17T22:17:33.7812232Z 
2025-08-17T22:17:33.7812333Z <a id="api.routes.stats.roi_trend"></a>
2025-08-17T22:17:33.7812505Z 
2025-08-17T22:17:33.7812571Z #### roi\_trend
2025-08-17T22:17:33.7812685Z 
2025-08-17T22:17:33.7812750Z ```python
2025-08-17T22:17:33.7812916Z @router.get("/stats/roi_trend")
2025-08-17T22:17:33.7813163Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-17T22:17:33.7813496Z ```
2025-08-17T22:17:33.7813752Z 
2025-08-17T22:17:33.7813832Z Return 30-day ROI trend.
2025-08-17T22:17:33.7813971Z 
2025-08-17T22:17:33.7814049Z <a id="api.routes.roi"></a>
2025-08-17T22:17:33.7814185Z 
2025-08-17T22:17:33.7814268Z # api.routes.roi
2025-08-17T22:17:33.7814375Z 
2025-08-17T22:17:33.7814458Z <a id="api.routes.health"></a>
2025-08-17T22:17:33.7814603Z 
2025-08-17T22:17:33.7814683Z # api.routes.health
2025-08-17T22:17:33.7814794Z 
2025-08-17T22:17:33.7814888Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-17T22:17:33.7815062Z 
2025-08-17T22:17:33.7815133Z #### MAX\_SKEW
2025-08-17T22:17:33.7815234Z 
2025-08-17T22:17:33.7815296Z seconds
2025-08-17T22:17:33.7815387Z 
2025-08-17T22:17:33.7815479Z <a id="api.routes.health.health"></a>
2025-08-17T22:17:33.7815645Z 
2025-08-17T22:17:33.7815716Z #### health
2025-08-17T22:17:33.7815808Z 
2025-08-17T22:17:33.7815873Z ```python
2025-08-17T22:17:33.7816081Z @router.get("/health", include_in_schema=False)
2025-08-17T22:17:33.7816464Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-17T22:17:33.7816975Z ```
2025-08-17T22:17:33.7817086Z 
2025-08-17T22:17:33.7817344Z Return 200 when DB reachable and clocks are in sync.
2025-08-17T22:17:33.7817559Z 
2025-08-17T22:17:33.7817649Z <a id="api.routes.repository"></a>
2025-08-17T22:17:33.7817805Z 
2025-08-17T22:17:33.7817902Z # api.routes.repository
2025-08-17T22:17:33.7818029Z 
2025-08-17T22:17:33.7818104Z <a id="api.routes"></a>
2025-08-17T22:17:33.7818230Z 
2025-08-17T22:17:33.7818297Z # api.routes
2025-08-17T22:17:33.7818400Z 
2025-08-17T22:17:33.7818484Z <a id="api.models.fee"></a>
2025-08-17T22:17:33.7818631Z 
2025-08-17T22:17:33.7818699Z # api.models.fee
2025-08-17T22:17:33.7818806Z 
2025-08-17T22:17:33.7818888Z <a id="api.models"></a>
2025-08-17T22:17:33.7819005Z 
2025-08-17T22:17:33.7819070Z # api.models
2025-08-17T22:17:33.7819171Z 
2025-08-17T22:17:33.7819252Z <a id="api.roi_repository"></a>
2025-08-17T22:17:33.7819391Z 
2025-08-17T22:17:33.7819463Z # api.roi\_repository
2025-08-17T22:17:33.7819600Z 
2025-08-17T22:17:33.7819669Z <a id="api.main"></a>
2025-08-17T22:17:33.7819779Z 
2025-08-17T22:17:33.7819847Z # api.main
2025-08-17T22:17:33.7819938Z 
2025-08-17T22:17:33.7820014Z <a id="api.main.ready"></a>
2025-08-17T22:17:33.7820146Z 
2025-08-17T22:17:33.7820214Z #### ready
2025-08-17T22:17:33.7820301Z 
2025-08-17T22:17:33.7820365Z ```python
2025-08-17T22:17:33.7820642Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-17T22:17:33.7821088Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-17T22:17:33.7821447Z                                                                       str]
2025-08-17T22:17:33.7821683Z ```
2025-08-17T22:17:33.7821769Z 
2025-08-17T22:17:33.7821867Z Return 200 only when migrations are at head.
2025-08-17T22:17:33.7822050Z 
2025-08-17T22:17:33.7822123Z <a id="api.config"></a>
2025-08-17T22:17:33.7822247Z 
2025-08-17T22:17:33.7822312Z # api.config
2025-08-17T22:17:33.7822416Z 
2025-08-17T22:17:33.7822492Z <a id="etl"></a>
2025-08-17T22:17:33.7822597Z 
2025-08-17T22:17:33.7822663Z # etl
2025-08-17T22:17:33.7822752Z 
2025-08-17T22:17:33.7822834Z <a id="etl.fba_fee_ingestor"></a>
2025-08-17T22:17:33.7822986Z 
2025-08-17T22:17:33.7823068Z # etl.fba\_fee\_ingestor
2025-08-17T22:17:33.7823193Z 
2025-08-17T22:17:33.7823275Z <a id="etl.sp_fees_ingestor"></a>
2025-08-17T22:17:33.7823430Z 
2025-08-17T22:17:33.7823503Z # etl.sp\_fees\_ingestor
2025-08-17T22:17:33.7823622Z 
2025-08-17T22:17:33.7823701Z <a id="etl.keepa_ingestor"></a>
2025-08-17T22:17:33.7823849Z 
2025-08-17T22:17:33.7823920Z # etl.keepa\_ingestor
2025-08-17T22:17:33.7824037Z 
2025-08-17T22:17:33.7824112Z <a id="etl.db"></a>
2025-08-17T22:17:33.7824218Z 
2025-08-17T22:17:33.7824283Z # etl.db
2025-08-17T22:17:33.7824380Z 
2025-08-17T22:17:33.7824463Z <a id="etl.dialects.schemas"></a>
2025-08-17T22:17:33.7824612Z 
2025-08-17T22:17:33.7824690Z # etl.dialects.schemas
2025-08-17T22:17:33.7824816Z 
2025-08-17T22:17:33.7824925Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-17T22:17:33.7825241Z 
2025-08-17T22:17:33.7825338Z # etl.dialects.amazon\_reimbursements
2025-08-17T22:17:33.7825502Z 
2025-08-17T22:17:33.7825600Z <a id="etl.dialects.amazon_ads_sp_cost"></a>
2025-08-17T22:17:33.7825781Z 
2025-08-17T22:17:33.7825868Z # etl.dialects.amazon\_ads\_sp\_cost
2025-08-17T22:17:33.7826028Z 
2025-08-17T22:17:33.7826118Z <a id="etl.dialects.amazon_returns"></a>
2025-08-17T22:17:33.7826291Z 
2025-08-17T22:17:33.7826373Z # etl.dialects.amazon\_returns
2025-08-17T22:17:33.7826511Z 
2025-08-17T22:17:33.7826613Z <a id="etl.dialects.amazon_fee_preview"></a>
2025-08-17T22:17:33.7826783Z 
2025-08-17T22:17:33.7826868Z # etl.dialects.amazon\_fee\_preview
2025-08-17T22:17:33.7827026Z 
2025-08-17T22:17:33.7827131Z <a id="etl.dialects.amazon_inventory_ledger"></a>
2025-08-17T22:17:33.7827422Z 
2025-08-17T22:17:33.7827512Z # etl.dialects.amazon\_inventory\_ledger
2025-08-17T22:17:33.7827681Z 
2025-08-17T22:17:33.7827776Z <a id="etl.dialects.amazon_settlements"></a>
2025-08-17T22:17:33.7828072Z 
2025-08-17T22:17:33.7828167Z # etl.dialects.amazon\_settlements
2025-08-17T22:17:33.7828320Z 
2025-08-17T22:17:33.7828396Z <a id="etl.dialects"></a>
2025-08-17T22:17:33.7828533Z 
2025-08-17T22:17:33.7828600Z # etl.dialects
2025-08-17T22:17:33.7828701Z 
2025-08-17T22:17:33.7828769Z <a id="ingest"></a>
2025-08-17T22:17:33.7828887Z 
2025-08-17T22:17:33.7828949Z # ingest
2025-08-17T22:17:33.7829035Z 
2025-08-17T22:17:33.7829126Z <a id="ingest.maintenance"></a>
2025-08-17T22:17:33.7829269Z 
2025-08-17T22:17:33.7829340Z # ingest.maintenance
2025-08-17T22:17:33.7829453Z 
2025-08-17T22:17:33.7829540Z <a id="ingest.copy_loader"></a>
2025-08-17T22:17:33.7829676Z 
2025-08-17T22:17:33.7829749Z # ingest.copy\_loader
2025-08-17T22:17:33.7829875Z 
2025-08-17T22:17:33.7829976Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-17T22:17:33.7830158Z 
2025-08-17T22:17:33.7830240Z #### copy\_df\_via\_temp
2025-08-17T22:17:33.7830362Z 
2025-08-17T22:17:33.7830425Z ```python
2025-08-17T22:17:33.7830607Z def copy_df_via_temp(engine: Engine,
2025-08-17T22:17:33.7830847Z                      df: pd.DataFrame,
2025-08-17T22:17:33.7831081Z                      target_table: str,
2025-08-17T22:17:33.7831296Z                      *,
2025-08-17T22:17:33.7831505Z                      target_schema: Optional[str] = None,
2025-08-17T22:17:33.7831763Z                      columns: Sequence[str],
2025-08-17T22:17:33.7832036Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-17T22:17:33.7832354Z                      analyze_after: bool = False,
2025-08-17T22:17:33.7832610Z                      connection: Any | None = None) -> int
2025-08-17T22:17:33.7832850Z ```
2025-08-17T22:17:33.7832933Z 
2025-08-17T22:17:33.7833094Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-17T22:17:33.7833328Z 
2025-08-17T22:17:33.7833415Z <a id="ingest.tests.test_smoke"></a>
2025-08-17T22:17:33.7833574Z 
2025-08-17T22:17:33.7833660Z # ingest.tests.test\_smoke
2025-08-17T22:17:33.7833794Z 
2025-08-17T22:17:33.7833874Z <a id="ingest.tests"></a>
2025-08-17T22:17:33.7834228Z 
2025-08-17T22:17:33.7834374Z # ingest.tests
2025-08-17T22:17:33.7834516Z 
2025-08-17T22:17:33.7834608Z <a id="ingest.upload_router"></a>
2025-08-17T22:17:33.7834758Z 
2025-08-17T22:17:33.7834838Z # ingest.upload\_router
2025-08-17T22:17:33.7834958Z 
2025-08-17T22:17:33.7835049Z <a id="ingest.email_watcher"></a>
2025-08-17T22:17:33.7835192Z 
2025-08-17T22:17:33.7835264Z # ingest.email\_watcher
2025-08-17T22:17:33.7835386Z 
2025-08-17T22:17:33.7835475Z <a id="ingest.email_watcher.main"></a>
2025-08-17T22:17:33.7835636Z 
2025-08-17T22:17:33.7835698Z #### main
2025-08-17T22:17:33.7835794Z 
2025-08-17T22:17:33.7835859Z ```python
2025-08-17T22:17:33.7836032Z def main() -> dict[str, str]
2025-08-17T22:17:33.7836228Z ```
2025-08-17T22:17:33.7836311Z 
2025-08-17T22:17:33.7836457Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-17T22:17:33.7836675Z 
2025-08-17T22:17:33.7836801Z Returns {"status": "success"} when processing completes.
2025-08-17T22:17:33.7837147Z 
2025-08-17T22:17:33.7837353Z <a id="ingest.tasks"></a>
2025-08-17T22:17:33.7837482Z 
2025-08-17T22:17:33.7837555Z # ingest.tasks
2025-08-17T22:17:33.7837657Z 
2025-08-17T22:17:33.7837752Z <a id="ingest.tasks.task_import_file"></a>
2025-08-17T22:17:33.7837931Z 
2025-08-17T22:17:33.7838012Z #### task\_import\_file
2025-08-17T22:17:33.7838131Z 
2025-08-17T22:17:33.7838196Z ```python
2025-08-17T22:17:33.7838414Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-17T22:17:33.7838687Z def task_import_file(self,
2025-08-17T22:17:33.7838887Z                      uri: str,
2025-08-17T22:17:33.7839109Z                      report_type: Optional[str] = None,
2025-08-17T22:17:33.7839379Z                      force: bool = False) -> Dict[str, Any]
2025-08-17T22:17:33.7839619Z ```
2025-08-17T22:17:33.7839702Z 
2025-08-17T22:17:33.7839831Z Import a file into Postgres using existing ETL pipeline.
2025-08-17T22:17:33.7840042Z 
2025-08-17T22:17:33.7840122Z <a id="ingest.celery_app"></a>
2025-08-17T22:17:33.7840386Z 
2025-08-17T22:17:33.7840458Z # ingest.celery\_app
2025-08-17T22:17:33.7840582Z 
2025-08-17T22:17:33.7840663Z <a id="ingest.ingest_router"></a>
2025-08-17T22:17:33.7840809Z 
2025-08-17T22:17:33.7840890Z # ingest.ingest\_router
2025-08-17T22:17:33.7841005Z 
2025-08-17T22:17:33.7841082Z <a id="logistics_etl"></a>
2025-08-17T22:17:33.7841214Z 
2025-08-17T22:17:33.7841282Z # logistics\_etl
2025-08-17T22:17:33.7841389Z 
2025-08-17T22:17:33.7841466Z Daily logistics ETL job.
2025-08-17T22:17:33.7841595Z 
2025-08-17T22:17:33.7841677Z <a id="logistics_etl.__main__"></a>
2025-08-17T22:17:33.7841826Z 
2025-08-17T22:17:33.7841908Z # logistics\_etl.\_\_main\_\_
2025-08-17T22:17:33.7842045Z 
2025-08-17T22:17:33.7842125Z <a id="logistics_etl.dsn"></a>
2025-08-17T22:17:33.7842261Z 
2025-08-17T22:17:33.7842338Z # logistics\_etl.dsn
2025-08-17T22:17:33.7842450Z 
2025-08-17T22:17:33.7842565Z Local DSN builder to avoid cross-service dependency.
2025-08-17T22:17:33.7842775Z 
2025-08-17T22:17:33.7842874Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-17T22:17:33.7843039Z 
2025-08-17T22:17:33.7843113Z #### build\_dsn
2025-08-17T22:17:33.7843214Z 
2025-08-17T22:17:33.7843277Z ```python
2025-08-17T22:17:33.7843458Z def build_dsn(sync: bool = True) -> str
2025-08-17T22:17:33.7843681Z ```
2025-08-17T22:17:33.7843780Z 
2025-08-17T22:17:33.7843917Z Return a Postgres DSN assembled from environment variables.
2025-08-17T22:17:33.7844150Z 
2025-08-17T22:17:33.7844302Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-17T22:17:33.7844697Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-17T22:17:33.7845040Z error when any required variable is missing.
2025-08-17T22:17:33.7845214Z 
2025-08-17T22:17:33.7845313Z <a id="logistics_etl.tests.conftest"></a>
2025-08-17T22:17:33.7845484Z 
2025-08-17T22:17:33.7845569Z # logistics\_etl.tests.conftest
2025-08-17T22:17:33.7845720Z 
2025-08-17T22:17:33.7845823Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-17T22:17:33.7846020Z 
2025-08-17T22:17:33.7846120Z # logistics\_etl.tests.test\_repository
2025-08-17T22:17:33.7846284Z 
2025-08-17T22:17:33.7846374Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-17T22:17:33.7846542Z 
2025-08-17T22:17:33.7846636Z # logistics\_etl.tests.test\_cron
2025-08-17T22:17:33.7846784Z 
2025-08-17T22:17:33.7846884Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-17T22:17:33.7847068Z 
2025-08-17T22:17:33.7847156Z # logistics\_etl.tests.test\_imports
2025-08-17T22:17:33.7847425Z 
2025-08-17T22:17:33.7847531Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-17T22:17:33.7847703Z 
2025-08-17T22:17:33.7847788Z # logistics\_etl.tests.test\_smoke
2025-08-17T22:17:33.7847947Z 
2025-08-17T22:17:33.7848052Z <a id="logistics_etl.tests.test_client"></a>
2025-08-17T22:17:33.7848220Z 
2025-08-17T22:17:33.7848306Z # logistics\_etl.tests.test\_client
2025-08-17T22:17:33.7848466Z 
2025-08-17T22:17:33.7848549Z <a id="logistics_etl.tests"></a>
2025-08-17T22:17:33.7848694Z 
2025-08-17T22:17:33.7848916Z # logistics\_etl.tests
2025-08-17T22:17:33.7849041Z 
2025-08-17T22:17:33.7849125Z <a id="logistics_etl.flow"></a>
2025-08-17T22:17:33.7849264Z 
2025-08-17T22:17:33.7849342Z # logistics\_etl.flow
2025-08-17T22:17:33.7849459Z 
2025-08-17T22:17:33.7849540Z <a id="logistics_etl.client"></a>
2025-08-17T22:17:33.7849693Z 
2025-08-17T22:17:33.7849767Z # logistics\_etl.client
2025-08-17T22:17:33.7849885Z 
2025-08-17T22:17:33.7849963Z <a id="logistics_etl.cron"></a>
2025-08-17T22:17:33.7850104Z 
2025-08-17T22:17:33.7850174Z # logistics\_etl.cron
2025-08-17T22:17:33.7850287Z 
2025-08-17T22:17:33.7850375Z <a id="logistics_etl.db"></a>
2025-08-17T22:17:33.7850512Z 
2025-08-17T22:17:33.7850585Z # logistics\_etl.db
2025-08-17T22:17:33.7850698Z 
2025-08-17T22:17:33.7850787Z <a id="logistics_etl.repository"></a>
2025-08-17T22:17:33.7850944Z 
2025-08-17T22:17:33.7851023Z # logistics\_etl.repository
2025-08-17T22:17:33.7851165Z 
2025-08-17T22:17:33.7851237Z <a id="alert_bot"></a>
2025-08-17T22:17:33.7851467Z 
2025-08-17T22:17:33.7851550Z # alert\_bot
2025-08-17T22:17:33.7851646Z 
2025-08-17T22:17:33.7851731Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-17T22:17:33.7851900Z 
2025-08-17T22:17:33.7851979Z # alert\_bot.tests.test\_smoke
2025-08-17T22:17:33.7852118Z 
2025-08-17T22:17:33.7852196Z <a id="alert_bot.tests"></a>
2025-08-17T22:17:33.7852336Z 
2025-08-17T22:17:33.7852402Z # alert\_bot.tests
2025-08-17T22:17:33.7852508Z 
2025-08-17T22:17:33.7852594Z <a id="alert_bot.alert_bot"></a>
2025-08-17T22:17:33.7852735Z 
2025-08-17T22:17:33.7852805Z # alert\_bot.alert\_bot
2025-08-17T22:17:33.7852922Z 
2025-08-17T22:17:33.7853002Z <a id="alert_bot.rules"></a>
2025-08-17T22:17:33.7853133Z 
2025-08-17T22:17:33.7853201Z # alert\_bot.rules
2025-08-17T22:17:33.7853311Z 
2025-08-17T22:17:33.7853377Z <a id="common"></a>
2025-08-17T22:17:33.7853481Z 
2025-08-17T22:17:33.7853552Z # common
2025-08-17T22:17:33.7853638Z 
2025-08-17T22:17:33.7853708Z <a id="common.dsn"></a>
2025-08-17T22:17:33.7853823Z 
2025-08-17T22:17:33.7853904Z # common.dsn
2025-08-17T22:17:33.7854000Z 
2025-08-17T22:17:33.7854082Z <a id="common.dsn.build_dsn"></a>
2025-08-17T22:17:33.7854234Z 
2025-08-17T22:17:33.7854298Z #### build\_dsn
2025-08-17T22:17:33.7854397Z 
2025-08-17T22:17:33.7854460Z ```python
2025-08-17T22:17:33.7854640Z def build_dsn(sync: bool = True) -> str
2025-08-17T22:17:33.7854861Z ```
2025-08-17T22:17:33.7854946Z 
2025-08-17T22:17:33.7855067Z Return a Postgres DSN, validating required variables.
2025-08-17T22:17:33.7855271Z 
2025-08-17T22:17:33.7855467Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-17T22:17:33.7855905Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-17T22:17:33.7856323Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-17T22:17:33.7856632Z missing.
2025-08-17T22:17:33.7856728Z 
2025-08-17T22:17:33.7856811Z <a id="common.models_vendor"></a>
2025-08-17T22:17:33.7856962Z 
2025-08-17T22:17:33.7888938Z # common.models\_vendor
2025-08-17T22:17:33.7889304Z 
2025-08-17T22:17:33.7889501Z <a id="common.models_vendor.Vendor"></a>
2025-08-17T22:17:33.7889872Z 
2025-08-17T22:17:33.7890024Z ## Vendor Objects
2025-08-17T22:17:33.7890243Z 
2025-08-17T22:17:33.7890383Z ```python
2025-08-17T22:17:33.7890714Z class Vendor(Base)
2025-08-17T22:17:33.7891055Z ```
2025-08-17T22:17:33.7891238Z 
2025-08-17T22:17:33.7891405Z Vendor of inventory items.
2025-08-17T22:17:33.7891708Z 
2025-08-17T22:17:33.7891920Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-17T22:17:33.7892315Z 
2025-08-17T22:17:33.7892468Z ## VendorPrice Objects
2025-08-17T22:17:33.7892718Z 
2025-08-17T22:17:33.7892858Z ```python
2025-08-17T22:17:33.7893189Z class VendorPrice(Base)
2025-08-17T22:17:33.7893571Z ```
2025-08-17T22:17:33.7893747Z 
2025-08-17T22:17:33.7893970Z Association table linking vendors to pricing.
2025-08-17T22:17:33.7894272Z 
2025-08-17T22:17:33.7894369Z <a id="common.db_url"></a>
2025-08-17T22:17:33.7894532Z 
2025-08-17T22:17:33.7894623Z # common.db\_url
2025-08-17T22:17:33.7894965Z 
2025-08-17T22:17:33.7895069Z <a id="common.db_url.build_url"></a>
2025-08-17T22:17:33.7895266Z 
2025-08-17T22:17:33.7895351Z #### build\_url
2025-08-17T22:17:33.7895478Z 
2025-08-17T22:17:33.7895558Z ```python
2025-08-17T22:17:33.7895781Z def build_url(async_: bool = True) -> str
2025-08-17T22:17:33.7896055Z ```
2025-08-17T22:17:33.7896168Z 
2025-08-17T22:17:33.7896292Z Return Postgres DSN from env or PG_* parts.
2025-08-17T22:17:33.7896509Z 
2025-08-17T22:17:33.7896619Z <a id="common.keepa"></a>
2025-08-17T22:17:33.7896780Z 
2025-08-17T22:17:33.7896865Z # common.keepa
2025-08-17T22:17:33.7896990Z 
2025-08-17T22:17:33.7897089Z <a id="common.llm"></a>
2025-08-17T22:17:33.7897456Z 
2025-08-17T22:17:33.7897539Z # common.llm
2025-08-17T22:17:33.7897670Z 
2025-08-17T22:17:33.7897776Z <a id="common.settings"></a>
2025-08-17T22:17:33.7897946Z 
2025-08-17T22:17:33.7898043Z # common.settings
2025-08-17T22:17:33.7898170Z 
2025-08-17T22:17:33.7898242Z <a id="common.db"></a>
2025-08-17T22:17:33.7898519Z 
2025-08-17T22:17:33.7898594Z # common.db
2025-08-17T22:17:33.7898687Z 
2025-08-17T22:17:33.7898780Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-17T22:17:33.7898956Z 
2025-08-17T22:17:33.7899033Z #### build\_sqlalchemy\_url
2025-08-17T22:17:33.7899164Z 
2025-08-17T22:17:33.7899229Z ```python
2025-08-17T22:17:33.7899412Z def build_sqlalchemy_url() -> str
2025-08-17T22:17:33.7899623Z ```
2025-08-17T22:17:33.7899706Z 
2025-08-17T22:17:33.7899802Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T22:17:33.7899975Z 
2025-08-17T22:17:33.7900075Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-17T22:17:33.7900243Z 
2025-08-17T22:17:33.7900316Z #### build\_asyncpg\_dsn
2025-08-17T22:17:33.7900449Z 
2025-08-17T22:17:33.7900512Z ```python
2025-08-17T22:17:33.7900680Z def build_asyncpg_dsn() -> str
2025-08-17T22:17:33.7900882Z ```
2025-08-17T22:17:33.7900964Z 
2025-08-17T22:17:33.7901096Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T22:17:33.7901304Z 
2025-08-17T22:17:33.7901402Z <a id="common.db.refresh_mvs"></a>
2025-08-17T22:17:33.7901560Z 
2025-08-17T22:17:33.7901626Z #### refresh\_mvs
2025-08-17T22:17:33.7901731Z 
2025-08-17T22:17:33.7901796Z ```python
2025-08-17T22:17:33.7901997Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T22:17:33.7902242Z ```
2025-08-17T22:17:33.7902329Z 
2025-08-17T22:17:33.7902463Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T22:17:33.7902676Z 
2025-08-17T22:17:33.7902759Z <a id="common.config"></a>
2025-08-17T22:17:33.7902887Z 
2025-08-17T22:17:33.7902954Z # common.config
2025-08-17T22:17:33.7903064Z 
2025-08-17T22:17:33.7903138Z <a id="common.base"></a>
2025-08-17T22:17:33.7903258Z 
2025-08-17T22:17:33.7903322Z # common.base
2025-08-17T22:17:33.7903429Z 
2025-08-17T22:17:33.7903509Z <a id="common.base.Base"></a>
2025-08-17T22:17:33.7903646Z 
2025-08-17T22:17:33.7903718Z ## Base Objects
2025-08-17T22:17:33.7903818Z 
2025-08-17T22:17:33.7903878Z ```python
2025-08-17T22:17:33.7904048Z class Base(DeclarativeBase)
2025-08-17T22:17:33.7904244Z ```
2025-08-17T22:17:33.7904332Z 
2025-08-17T22:17:33.7904416Z Base class for SQLAlchemy models.
2025-08-17T22:17:33.7904562Z 
2025-08-17T22:17:33.7904634Z <a id="repricer"></a>
2025-08-17T22:17:33.7904758Z 
2025-08-17T22:17:33.7904822Z # repricer
2025-08-17T22:17:33.7904913Z 
2025-08-17T22:17:33.7905006Z <a id="repricer.app.schemas"></a>
2025-08-17T22:17:33.7905153Z 
2025-08-17T22:17:33.7905230Z # repricer.app.schemas
2025-08-17T22:17:33.7905358Z 
2025-08-17T22:17:33.7905441Z <a id="repricer.app.deps"></a>
2025-08-17T22:17:33.7905583Z 
2025-08-17T22:17:33.7905656Z # repricer.app.deps
2025-08-17T22:17:33.7905774Z 
2025-08-17T22:17:33.7905894Z Placeholder module for Keepa / SP-API clients.
2025-08-17T22:17:33.7906077Z 
2025-08-17T22:17:33.7906166Z <a id="repricer.app.logic"></a>
2025-08-17T22:17:33.7906310Z 
2025-08-17T22:17:33.7906385Z # repricer.app.logic
2025-08-17T22:17:33.7906499Z 
2025-08-17T22:17:33.7906608Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-17T22:17:33.7906948Z 
2025-08-17T22:17:33.7907013Z #### MIN\_MARGIN
2025-08-17T22:17:33.7907123Z 
2025-08-17T22:17:33.7907184Z 15 % ROI
2025-08-17T22:17:33.7907391Z 
2025-08-17T22:17:33.7907500Z <a id="repricer.app.logic.compute_price"></a>
2025-08-17T22:17:33.7907676Z 
2025-08-17T22:17:33.7907743Z #### compute\_price
2025-08-17T22:17:33.7907849Z 
2025-08-17T22:17:33.7907918Z ```python
2025-08-17T22:17:33.7908164Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-17T22:17:33.7908464Z ```
2025-08-17T22:17:33.7908597Z 
2025-08-17T22:17:33.7908702Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-17T22:17:33.7908979Z Replace with real competitive logic later.
2025-08-17T22:17:33.7909148Z 
2025-08-17T22:17:33.7909236Z <a id="repricer.app.main"></a>
2025-08-17T22:17:33.7909377Z 
2025-08-17T22:17:33.7909448Z # repricer.app.main
2025-08-17T22:17:33.7909558Z 
2025-08-17T22:17:33.7909633Z <a id="repricer.app"></a>
2025-08-17T22:17:33.7909759Z 
2025-08-17T22:17:33.7909826Z # repricer.app
2025-08-17T22:17:33.7910068Z 
2025-08-17T22:17:33.7910161Z <a id="repricer.tests.test_imports"></a>
2025-08-17T22:17:33.7910328Z 
2025-08-17T22:17:33.7910414Z # repricer.tests.test\_imports
2025-08-17T22:17:33.7910551Z 
2025-08-17T22:17:33.7910641Z <a id="repricer.tests.test_smoke"></a>
2025-08-17T22:17:33.7910801Z 
2025-08-17T22:17:33.7910887Z # repricer.tests.test\_smoke
2025-08-17T22:17:33.7911025Z 
2025-08-17T22:17:33.7911101Z <a id="repricer.tests"></a>
2025-08-17T22:17:33.7911237Z 
2025-08-17T22:17:33.7911306Z # repricer.tests
2025-08-17T22:17:33.7911412Z 
2025-08-17T22:17:33.7911482Z <a id="db"></a>
2025-08-17T22:17:33.7911582Z 
2025-08-17T22:17:33.7911642Z # db
2025-08-17T22:17:33.7911726Z 
2025-08-17T22:17:33.7911810Z <a id="db.utils.views"></a>
2025-08-17T22:17:33.7911936Z 
2025-08-17T22:17:33.7912002Z # db.utils.views
2025-08-17T22:17:33.7912108Z 
2025-08-17T22:17:33.7912200Z <a id="db.utils.views.replace_view"></a>
2025-08-17T22:17:33.7912365Z 
2025-08-17T22:17:33.7912433Z #### replace\_view
2025-08-17T22:17:33.7912556Z 
2025-08-17T22:17:33.7912618Z ```python
2025-08-17T22:17:33.7912817Z def replace_view(name: str, new_sql: str) -> None
2025-08-17T22:17:33.7913059Z ```
2025-08-17T22:17:33.7913142Z 
2025-08-17T22:17:33.7913239Z Drop and recreate a SQL view atomically.
2025-08-17T22:17:33.7913403Z 
2025-08-17T22:17:33.7913474Z <a id="db.utils"></a>
2025-08-17T22:17:33.7913593Z 
2025-08-17T22:17:33.7913656Z # db.utils
2025-08-17T22:17:33.7913747Z 
2025-08-17T22:17:33.7913826Z <a id="price_importer"></a>
2025-08-17T22:17:33.7913966Z 
2025-08-17T22:17:33.7914036Z # price\_importer
2025-08-17T22:17:33.7914141Z 
2025-08-17T22:17:33.7914257Z <a id="price_importer.services_common.dsn"></a>
2025-08-17T22:17:33.7914438Z 
2025-08-17T22:17:33.7914528Z # price\_importer.services\_common.dsn
2025-08-17T22:17:33.7914698Z 
2025-08-17T22:17:33.7914822Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-17T22:17:33.7915025Z 
2025-08-17T22:17:33.7915087Z #### build\_dsn
2025-08-17T22:17:33.7915193Z 
2025-08-17T22:17:33.7915264Z ```python
2025-08-17T22:17:33.7915447Z def build_dsn(sync: bool = True) -> str
2025-08-17T22:17:33.7915667Z ```
2025-08-17T22:17:33.7915751Z 
2025-08-17T22:17:33.7915825Z Return safe DSN.
2025-08-17T22:17:33.7915927Z 
2025-08-17T22:17:33.7916311Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-17T22:17:33.7916518Z 
2025-08-17T22:17:33.7916643Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-17T22:17:33.7916845Z 
2025-08-17T22:17:33.7916962Z # price\_importer.services\_common.models\_vendor
2025-08-17T22:17:33.7917148Z 
2025-08-17T22:17:33.7917398Z <a id="price_importer.services_common.db_url"></a>
2025-08-17T22:17:33.7917583Z 
2025-08-17T22:17:33.7917689Z # price\_importer.services\_common.db\_url
2025-08-17T22:17:33.7917858Z 
2025-08-17T22:17:33.7917998Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-17T22:17:33.7918217Z 
2025-08-17T22:17:33.7918285Z #### build\_url
2025-08-17T22:17:33.7918382Z 
2025-08-17T22:17:33.7918454Z ```python
2025-08-17T22:17:33.7918768Z def build_url(async_: bool = True) -> str
2025-08-17T22:17:33.7919003Z ```
2025-08-17T22:17:33.7919086Z 
2025-08-17T22:17:33.7919184Z Return Postgres DSN from env or PG_* parts.
2025-08-17T22:17:33.7919363Z 
2025-08-17T22:17:33.7919472Z <a id="price_importer.services_common.keepa"></a>
2025-08-17T22:17:33.7919657Z 
2025-08-17T22:17:33.7919748Z # price\_importer.services\_common.keepa
2025-08-17T22:17:33.7919919Z 
2025-08-17T22:17:33.7920018Z <a id="price_importer.services_common.llm"></a>
2025-08-17T22:17:33.7920198Z 
2025-08-17T22:17:33.7920296Z # price\_importer.services\_common.llm
2025-08-17T22:17:33.7920455Z 
2025-08-17T22:17:33.7920569Z <a id="price_importer.services_common.settings"></a>
2025-08-17T22:17:33.7920765Z 
2025-08-17T22:17:33.7920859Z # price\_importer.services\_common.settings
2025-08-17T22:17:33.7921029Z 
2025-08-17T22:17:33.7921125Z <a id="price_importer.services_common.db"></a>
2025-08-17T22:17:33.7921304Z 
2025-08-17T22:17:33.7921393Z # price\_importer.services\_common.db
2025-08-17T22:17:33.7921674Z 
2025-08-17T22:17:33.7921836Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-17T22:17:33.7922071Z 
2025-08-17T22:17:33.7922144Z #### build\_sqlalchemy\_url
2025-08-17T22:17:33.7922280Z 
2025-08-17T22:17:33.7922342Z ```python
2025-08-17T22:17:33.7922509Z def build_sqlalchemy_url() -> str
2025-08-17T22:17:33.7922721Z ```
2025-08-17T22:17:33.7922800Z 
2025-08-17T22:17:33.7922900Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T22:17:33.7923070Z 
2025-08-17T22:17:33.7923211Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-17T22:17:33.7923433Z 
2025-08-17T22:17:33.7923514Z #### build\_asyncpg\_dsn
2025-08-17T22:17:33.7923639Z 
2025-08-17T22:17:33.7923703Z ```python
2025-08-17T22:17:33.7923873Z def build_asyncpg_dsn() -> str
2025-08-17T22:17:33.7924070Z ```
2025-08-17T22:17:33.7924155Z 
2025-08-17T22:17:33.7924282Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T22:17:33.7924490Z 
2025-08-17T22:17:33.7924633Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-17T22:17:33.7924837Z 
2025-08-17T22:17:33.7924903Z #### refresh\_mvs
2025-08-17T22:17:33.7925016Z 
2025-08-17T22:17:33.7925076Z ```python
2025-08-17T22:17:33.7925269Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T22:17:33.7925516Z ```
2025-08-17T22:17:33.7925596Z 
2025-08-17T22:17:33.7925734Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T22:17:33.7925947Z 
2025-08-17T22:17:33.7926042Z <a id="price_importer.services_common"></a>
2025-08-17T22:17:33.7926214Z 
2025-08-17T22:17:33.7926308Z # price\_importer.services\_common
2025-08-17T22:17:33.7926461Z 
2025-08-17T22:17:33.7926563Z <a id="price_importer.services_common.base"></a>
2025-08-17T22:17:33.7926755Z 
2025-08-17T22:17:33.7926846Z # price\_importer.services\_common.base
2025-08-17T22:17:33.7927010Z 
2025-08-17T22:17:33.7927108Z <a id="price_importer.normaliser"></a>
2025-08-17T22:17:33.7927378Z 
2025-08-17T22:17:33.7927462Z # price\_importer.normaliser
2025-08-17T22:17:33.7927622Z 
2025-08-17T22:17:33.7927742Z <a id="price_importer.common.models_vendor"></a>
2025-08-17T22:17:33.7927937Z 
2025-08-17T22:17:33.7928035Z # price\_importer.common.models\_vendor
2025-08-17T22:17:33.7928208Z 
2025-08-17T22:17:33.7928302Z <a id="price_importer.common.db_url"></a>
2025-08-17T22:17:33.7928474Z 
2025-08-17T22:17:33.7928567Z # price\_importer.common.db\_url
2025-08-17T22:17:33.7928716Z 
2025-08-17T22:17:33.7928822Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-17T22:17:33.7929006Z 
2025-08-17T22:17:33.7929078Z #### make\_dsn
2025-08-17T22:17:33.7929182Z 
2025-08-17T22:17:33.7929247Z ```python
2025-08-17T22:17:33.7929429Z def make_dsn(async_: bool = False) -> str
2025-08-17T22:17:33.7929659Z ```
2025-08-17T22:17:33.7929750Z 
2025-08-17T22:17:33.7929870Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-17T22:17:33.7930067Z 
2025-08-17T22:17:33.7930182Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-17T22:17:33.7930500Z 
2025-08-17T22:17:33.7930566Z #### build\_url
2025-08-17T22:17:33.7930674Z 
2025-08-17T22:17:33.7930737Z ```python
2025-08-17T22:17:33.7930912Z def build_url(async_: bool = False) -> str
2025-08-17T22:17:33.7931146Z ```
2025-08-17T22:17:33.7931228Z 
2025-08-17T22:17:33.7931353Z Return Postgres DSN built from environment variables.
2025-08-17T22:17:33.7931560Z 
2025-08-17T22:17:33.7931646Z <a id="price_importer.common"></a>
2025-08-17T22:17:33.7931803Z 
2025-08-17T22:17:33.7931891Z # price\_importer.common
2025-08-17T22:17:33.7932028Z 
2025-08-17T22:17:33.7932124Z <a id="price_importer.common.base"></a>
2025-08-17T22:17:33.7932299Z 
2025-08-17T22:17:33.7932383Z # price\_importer.common.base
2025-08-17T22:17:33.7932526Z 
2025-08-17T22:17:33.7932628Z <a id="price_importer.tests.conftest"></a>
2025-08-17T22:17:33.7932808Z 
2025-08-17T22:17:33.7932894Z # price\_importer.tests.conftest
2025-08-17T22:17:33.7933039Z 
2025-08-17T22:17:33.7933149Z <a id="price_importer.tests.test_reader"></a>
2025-08-17T22:17:33.7933446Z 
2025-08-17T22:17:33.7933532Z # price\_importer.tests.test\_reader
2025-08-17T22:17:33.7933694Z 
2025-08-17T22:17:33.7933796Z <a id="price_importer.tests.test_imports"></a>
2025-08-17T22:17:33.7933972Z 
2025-08-17T22:17:33.7934060Z # price\_importer.tests.test\_imports
2025-08-17T22:17:33.7934227Z 
2025-08-17T22:17:33.7934326Z <a id="price_importer.tests.test_smoke"></a>
2025-08-17T22:17:33.7934499Z 
2025-08-17T22:17:33.7934594Z # price\_importer.tests.test\_smoke
2025-08-17T22:17:33.7934753Z 
2025-08-17T22:17:33.7934859Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-17T22:17:33.7935049Z 
2025-08-17T22:17:33.7935141Z # price\_importer.tests.test\_normaliser
2025-08-17T22:17:33.7935308Z 
2025-08-17T22:17:33.7935390Z <a id="price_importer.tests"></a>
2025-08-17T22:17:33.7935543Z 
2025-08-17T22:17:33.7935619Z # price\_importer.tests
2025-08-17T22:17:33.7935740Z 
2025-08-17T22:17:33.7935830Z <a id="price_importer.reader"></a>
2025-08-17T22:17:33.7935981Z 
2025-08-17T22:17:33.7936057Z # price\_importer.reader
2025-08-17T22:17:33.7936200Z 
2025-08-17T22:17:33.7936290Z <a id="price_importer.repository"></a>
2025-08-17T22:17:33.7936453Z 
2025-08-17T22:17:33.7936536Z # price\_importer.repository
2025-08-17T22:17:33.7936677Z 
2025-08-17T22:17:33.7936759Z <a id="price_importer.import"></a>
2025-08-17T22:17:33.7936910Z 
2025-08-17T22:17:33.7936993Z # price\_importer.import
2025-08-17T22:17:33.7937117Z 
2025-08-17T22:17:33.7937311Z <a id="fees_h10"></a>
2025-08-17T22:17:33.7937435Z 
2025-08-17T22:17:33.7937498Z # fees\_h10
2025-08-17T22:17:33.7937588Z 
2025-08-17T22:17:33.7937664Z <a id="fees_h10.worker"></a>
2025-08-17T22:17:33.7937801Z 
2025-08-17T22:17:33.7937868Z # fees\_h10.worker
2025-08-17T22:17:33.7937973Z 
2025-08-17T22:17:33.7938083Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-17T22:17:33.7938259Z 
2025-08-17T22:17:33.7938334Z #### list\_active\_asins
2025-08-17T22:17:33.7938458Z 
2025-08-17T22:17:33.7938530Z ```python
2025-08-17T22:17:33.7938700Z def list_active_asins() -> list[str]
2025-08-17T22:17:33.7938929Z ```
2025-08-17T22:17:33.7939010Z 
2025-08-17T22:17:33.7939124Z Return known ASINs or an empty list if unavailable.
2025-08-17T22:17:33.7939325Z 
2025-08-17T22:17:33.7939409Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-17T22:17:33.7939567Z 
2025-08-17T22:17:33.7939654Z # fees\_h10.tests.test\_smoke
2025-08-17T22:17:33.7939791Z 
2025-08-17T22:17:33.7939868Z <a id="fees_h10.tests"></a>
2025-08-17T22:17:33.7940006Z 
2025-08-17T22:17:33.7940071Z # fees\_h10.tests
2025-08-17T22:17:33.7940232Z 
2025-08-17T22:17:33.7940306Z <a id="fees_h10.client"></a>
2025-08-17T22:17:33.7940437Z 
2025-08-17T22:17:33.7940502Z # fees\_h10.client
2025-08-17T22:17:33.7940613Z 
2025-08-17T22:17:33.7940695Z <a id="fees_h10.repository"></a>
2025-08-17T22:17:33.7940837Z 
2025-08-17T22:17:33.7940915Z # fees\_h10.repository
2025-08-17T22:17:33.7941035Z 
2025-08-17T22:17:33.7941110Z <a id="emailer"></a>
2025-08-17T22:17:33.7941221Z 
2025-08-17T22:17:33.7941294Z # emailer
2025-08-17T22:17:33.7941383Z 
2025-08-17T22:17:33.7941614Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-17T22:17:33.7941806Z 
2025-08-17T22:17:33.7941896Z # emailer.tests.test\_import\_emailer
2025-08-17T22:17:33.7942055Z 
2025-08-17T22:17:33.7942150Z <a id="emailer.tests.test_smoke"></a>
2025-08-17T22:17:33.7942307Z 
2025-08-17T22:17:33.7942388Z # emailer.tests.test\_smoke
2025-08-17T22:17:33.7942526Z 
2025-08-17T22:17:33.7942611Z <a id="emailer.tests"></a>
2025-08-17T22:17:33.7942741Z 
2025-08-17T22:17:33.7942809Z # emailer.tests
2025-08-17T22:17:33.7942919Z 
2025-08-17T22:17:33.7943003Z <a id="emailer.generate_body"></a>
2025-08-17T22:17:33.7943156Z 
2025-08-17T22:17:33.7943233Z # emailer.generate\_body
2025-08-17T22:17:33.7943365Z 
2025-08-17T22:17:33.7943436Z <a id="llm_server"></a>
2025-08-17T22:17:33.7943554Z 
2025-08-17T22:17:33.7943625Z # llm\_server
2025-08-17T22:17:33.7943722Z 
2025-08-17T22:17:33.7943799Z <a id="llm_server.app"></a>
2025-08-17T22:17:33.7943937Z 
2025-08-17T22:17:33.7944004Z # llm\_server.app
2025-08-17T22:17:33.7944233Z 
