2025-08-17T15:49:13.5613386Z ##[group]Run pydoc-markdown
2025-08-17T15:49:13.5613718Z [36;1mpydoc-markdown[0m
2025-08-17T15:49:13.5654341Z shell: /usr/bin/bash -e {0}
2025-08-17T15:49:13.5654592Z env:
2025-08-17T15:49:13.5654829Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T15:49:13.5655234Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-17T15:49:13.5655610Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T15:49:13.5655964Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T15:49:13.5656310Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T15:49:13.5656660Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-17T15:49:13.5656947Z ##[endgroup]
2025-08-17T15:49:13.8489062Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-17T15:49:13.8489720Z Unknown key(s) "{'output_directory'}" at:
2025-08-17T15:49:13.8490059Z In "pydoc-markdown.yml"
2025-08-17T15:49:13.8490370Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-17T15:49:13.8490879Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-17T15:49:13.8491389Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-17T15:49:13.8491737Z 
2025-08-17T15:49:14.0730666Z <a id="__init__"></a>
2025-08-17T15:49:14.0731310Z 
2025-08-17T15:49:14.0731442Z # \_\_init\_\_
2025-08-17T15:49:14.0731655Z 
2025-08-17T15:49:14.0731779Z <a id="api"></a>
2025-08-17T15:49:14.0731983Z 
2025-08-17T15:49:14.0732092Z # api
2025-08-17T15:49:14.0732499Z 
2025-08-17T15:49:14.0732664Z <a id="api.tests.test_llm"></a>
2025-08-17T15:49:14.0732956Z 
2025-08-17T15:49:14.0733108Z # api.tests.test\_llm
2025-08-17T15:49:14.0733339Z 
2025-08-17T15:49:14.0733494Z <a id="api.tests.test_imports"></a>
2025-08-17T15:49:14.0733807Z 
2025-08-17T15:49:14.0734019Z # api.tests.test\_imports
2025-08-17T15:49:14.0734274Z 
2025-08-17T15:49:14.0734439Z <a id="api.tests.test_entrypoint"></a>
2025-08-17T15:49:14.0734767Z 
2025-08-17T15:49:14.0734916Z # api.tests.test\_entrypoint
2025-08-17T15:49:14.0735232Z 
2025-08-17T15:49:14.0735395Z <a id="api.tests.test_health"></a>
2025-08-17T15:49:14.0735686Z 
2025-08-17T15:49:14.0735831Z # api.tests.test\_health
2025-08-17T15:49:14.0736082Z 
2025-08-17T15:49:14.0736238Z <a id="api.migrations.env"></a>
2025-08-17T15:49:14.0736516Z 
2025-08-17T15:49:14.0736634Z # api.migrations.env
2025-08-17T15:49:14.0736839Z 
2025-08-17T15:49:14.0737047Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-17T15:49:14.0737412Z 
2025-08-17T15:49:14.0737605Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-17T15:49:14.0737956Z 
2025-08-17T15:49:14.0738156Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-17T15:49:14.0738533Z 
2025-08-17T15:49:14.0738709Z # api.migrations.versions.0004\_fee\_cron
2025-08-17T15:49:14.0739036Z 
2025-08-17T15:49:14.0739320Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-17T15:49:14.0739782Z 
2025-08-17T15:49:14.0740099Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-17T15:49:14.0740924Z 
2025-08-17T15:49:14.0741168Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-17T15:49:14.0741552Z 
2025-08-17T15:49:14.0741749Z # api.migrations.versions.0003\_vendor\_prices
2025-08-17T15:49:14.0742109Z 
2025-08-17T15:49:14.0742522Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-17T15:49:14.0742913Z 
2025-08-17T15:49:14.0743107Z # api.migrations.versions.0024\_create\_buybox
2025-08-17T15:49:14.0743460Z 
2025-08-17T15:49:14.0743696Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-17T15:49:14.0744088Z 
2025-08-17T15:49:14.0744295Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-17T15:49:14.0744657Z 
2025-08-17T15:49:14.0744878Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-17T15:49:14.0745265Z 
2025-08-17T15:49:14.0745463Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-17T15:49:14.0745813Z 
2025-08-17T15:49:14.0746048Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-17T15:49:14.0746811Z 
2025-08-17T15:49:14.0747020Z # api.migrations.versions.0020\_unified\_schema
2025-08-17T15:49:14.0747378Z 
2025-08-17T15:49:14.0747623Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-17T15:49:14.0748016Z 
2025-08-17T15:49:14.0748219Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-17T15:49:14.0748585Z 
2025-08-17T15:49:14.0748788Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-17T15:49:14.0749148Z 
2025-08-17T15:49:14.0749326Z # api.migrations.versions.0001\_baseline
2025-08-17T15:49:14.0749649Z 
2025-08-17T15:49:14.0749815Z <a id="api.migrations.versions"></a>
2025-08-17T15:49:14.0750129Z 
2025-08-17T15:49:14.0750276Z # api.migrations.versions
2025-08-17T15:49:14.0750521Z 
2025-08-17T15:49:14.0750658Z <a id="api.migrations"></a>
2025-08-17T15:49:14.0750915Z 
2025-08-17T15:49:14.0751038Z # api.migrations
2025-08-17T15:49:14.0751234Z 
2025-08-17T15:49:14.0751363Z <a id="api.db"></a>
2025-08-17T15:49:14.0751564Z 
2025-08-17T15:49:14.0751702Z # api.db
2025-08-17T15:49:14.0751870Z 
2025-08-17T15:49:14.0752026Z <a id="api.routes.stats"></a>
2025-08-17T15:49:14.0752477Z 
2025-08-17T15:49:14.0752614Z # api.routes.stats
2025-08-17T15:49:14.0752836Z 
2025-08-17T15:49:14.0752996Z <a id="api.routes.stats.kpi"></a>
2025-08-17T15:49:14.0753294Z 
2025-08-17T15:49:14.0753420Z #### kpi
2025-08-17T15:49:14.0753584Z 
2025-08-17T15:49:14.0753699Z ```python
2025-08-17T15:49:14.0754014Z @router.get("/stats/kpi")
2025-08-17T15:49:14.0754439Z def kpi() -> List[Dict[str, int]]
2025-08-17T15:49:14.0754829Z ```
2025-08-17T15:49:14.0754984Z 
2025-08-17T15:49:14.0755124Z Return KPI metrics (mock).
2025-08-17T15:49:14.0755381Z 
2025-08-17T15:49:14.0755563Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-17T15:49:14.0755901Z 
2025-08-17T15:49:14.0756026Z #### roi\_by\_vendor
2025-08-17T15:49:14.0756247Z 
2025-08-17T15:49:14.0756362Z ```python
2025-08-17T15:49:14.0756676Z @router.get("/stats/roi_by_vendor")
2025-08-17T15:49:14.0757128Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-17T15:49:14.0757577Z ```
2025-08-17T15:49:14.0757724Z 
2025-08-17T15:49:14.0757874Z Return ROI percent by vendor.
2025-08-17T15:49:14.0758149Z 
2025-08-17T15:49:14.0758314Z <a id="api.routes.stats.roi_trend"></a>
2025-08-17T15:49:14.0758631Z 
2025-08-17T15:49:14.0758748Z #### roi\_trend
2025-08-17T15:49:14.0758945Z 
2025-08-17T15:49:14.0759056Z ```python
2025-08-17T15:49:14.0759365Z @router.get("/stats/roi_trend")
2025-08-17T15:49:14.0759799Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-17T15:49:14.0760245Z ```
2025-08-17T15:49:14.0760393Z 
2025-08-17T15:49:14.0760525Z Return 30-day ROI trend.
2025-08-17T15:49:14.0760768Z 
2025-08-17T15:49:14.0760912Z <a id="api.routes.roi"></a>
2025-08-17T15:49:14.0761162Z 
2025-08-17T15:49:14.0761283Z # api.routes.roi
2025-08-17T15:49:14.0761517Z 
2025-08-17T15:49:14.0761664Z <a id="api.routes.health"></a>
2025-08-17T15:49:14.0762036Z 
2025-08-17T15:49:14.0762161Z # api.routes.health
2025-08-17T15:49:14.0762607Z 
2025-08-17T15:49:14.0762793Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-17T15:49:14.0763349Z 
2025-08-17T15:49:14.0763467Z #### MAX\_SKEW
2025-08-17T15:49:14.0763658Z 
2025-08-17T15:49:14.0763774Z seconds
2025-08-17T15:49:14.0763931Z 
2025-08-17T15:49:14.0764095Z <a id="api.routes.health.health"></a>
2025-08-17T15:49:14.0764416Z 
2025-08-17T15:49:14.0764523Z #### health
2025-08-17T15:49:14.0764694Z 
2025-08-17T15:49:14.0764811Z ```python
2025-08-17T15:49:14.0765179Z @router.get("/health", include_in_schema=False)
2025-08-17T15:49:14.0765895Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-17T15:49:14.0766545Z ```
2025-08-17T15:49:14.0766701Z 
2025-08-17T15:49:14.0766925Z Return 200 when DB reachable and clocks are in sync.
2025-08-17T15:49:14.0767300Z 
2025-08-17T15:49:14.0767462Z <a id="api.routes.repository"></a>
2025-08-17T15:49:14.0767772Z 
2025-08-17T15:49:14.0767912Z # api.routes.repository
2025-08-17T15:49:14.0768147Z 
2025-08-17T15:49:14.0768283Z <a id="api.routes"></a>
2025-08-17T15:49:14.0768793Z 
2025-08-17T15:49:14.0768915Z # api.routes
2025-08-17T15:49:14.0769097Z 
2025-08-17T15:49:14.0769247Z <a id="api.models.fee"></a>
2025-08-17T15:49:14.0769501Z 
2025-08-17T15:49:14.0769624Z # api.models.fee
2025-08-17T15:49:14.0769833Z 
2025-08-17T15:49:14.0769965Z <a id="api.models"></a>
2025-08-17T15:49:14.0770190Z 
2025-08-17T15:49:14.0770304Z # api.models
2025-08-17T15:49:14.0770487Z 
2025-08-17T15:49:14.0770631Z <a id="api.roi_repository"></a>
2025-08-17T15:49:14.0770900Z 
2025-08-17T15:49:14.0771036Z # api.roi\_repository
2025-08-17T15:49:14.0771250Z 
2025-08-17T15:49:14.0771377Z <a id="api.main"></a>
2025-08-17T15:49:14.0771598Z 
2025-08-17T15:49:14.0771711Z # api.main
2025-08-17T15:49:14.0771880Z 
2025-08-17T15:49:14.0772018Z <a id="api.main.ready"></a>
2025-08-17T15:49:14.0772467Z 
2025-08-17T15:49:14.0772589Z #### ready
2025-08-17T15:49:14.0772755Z 
2025-08-17T15:49:14.0772875Z ```python
2025-08-17T15:49:14.0773354Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-17T15:49:14.0774205Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-17T15:49:14.0774873Z                                                                       str]
2025-08-17T15:49:14.0775308Z ```
2025-08-17T15:49:14.0775464Z 
2025-08-17T15:49:14.0775642Z Return 200 only when migrations are at head.
2025-08-17T15:49:14.0775987Z 
2025-08-17T15:49:14.0776125Z <a id="api.config"></a>
2025-08-17T15:49:14.0776355Z 
2025-08-17T15:49:14.0776483Z # api.config
2025-08-17T15:49:14.0776670Z 
2025-08-17T15:49:14.0776792Z <a id="etl"></a>
2025-08-17T15:49:14.0776994Z 
2025-08-17T15:49:14.0777113Z # etl
2025-08-17T15:49:14.0777272Z 
2025-08-17T15:49:14.0777420Z <a id="etl.fba_fee_ingestor"></a>
2025-08-17T15:49:14.0777715Z 
2025-08-17T15:49:14.0777847Z # etl.fba\_fee\_ingestor
2025-08-17T15:49:14.0778078Z 
2025-08-17T15:49:14.0778235Z <a id="etl.sp_fees_ingestor"></a>
2025-08-17T15:49:14.0778513Z 
2025-08-17T15:49:14.0778648Z # etl.sp\_fees\_ingestor
2025-08-17T15:49:14.0778904Z 
2025-08-17T15:49:14.0779055Z <a id="etl.keepa_ingestor"></a>
2025-08-17T15:49:14.0779324Z 
2025-08-17T15:49:14.0779454Z # etl.keepa\_ingestor
2025-08-17T15:49:14.0779678Z 
2025-08-17T15:49:14.0779800Z <a id="etl.db"></a>
2025-08-17T15:49:14.0779995Z 
2025-08-17T15:49:14.0780105Z # etl.db
2025-08-17T15:49:14.0780274Z 
2025-08-17T15:49:14.0780426Z <a id="etl.dialects.schemas"></a>
2025-08-17T15:49:14.0780708Z 
2025-08-17T15:49:14.0780850Z # etl.dialects.schemas
2025-08-17T15:49:14.0781072Z 
2025-08-17T15:49:14.0781267Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-17T15:49:14.0781630Z 
2025-08-17T15:49:14.0781792Z # etl.dialects.amazon\_reimbursements
2025-08-17T15:49:14.0782101Z 
2025-08-17T15:49:14.0782456Z <a id="etl.dialects.amazon_returns"></a>
2025-08-17T15:49:14.0782801Z 
2025-08-17T15:49:14.0782950Z # etl.dialects.amazon\_returns
2025-08-17T15:49:14.0783223Z 
2025-08-17T15:49:14.0783370Z <a id="etl.dialects"></a>
2025-08-17T15:49:14.0783606Z 
2025-08-17T15:49:14.0783722Z # etl.dialects
2025-08-17T15:49:14.0784142Z 
2025-08-17T15:49:14.0784270Z <a id="ingest"></a>
2025-08-17T15:49:14.0784478Z 
2025-08-17T15:49:14.0784590Z # ingest
2025-08-17T15:49:14.0784757Z 
2025-08-17T15:49:14.0784908Z <a id="ingest.copy_loader"></a>
2025-08-17T15:49:14.0785184Z 
2025-08-17T15:49:14.0785321Z # ingest.copy\_loader
2025-08-17T15:49:14.0785534Z 
2025-08-17T15:49:14.0785723Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-17T15:49:14.0786084Z 
2025-08-17T15:49:14.0786235Z #### copy\_df\_via\_temp
2025-08-17T15:49:14.0786480Z 
2025-08-17T15:49:14.0786597Z ```python
2025-08-17T15:49:14.0786929Z def copy_df_via_temp(engine: Engine,
2025-08-17T15:49:14.0787366Z                      df: pd.DataFrame,
2025-08-17T15:49:14.0787804Z                      target_table: str,
2025-08-17T15:49:14.0788217Z                      *,
2025-08-17T15:49:14.0788601Z                      target_schema: Optional[str] = None,
2025-08-17T15:49:14.0789094Z                      columns: Sequence[str],
2025-08-17T15:49:14.0789850Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-17T15:49:14.0790423Z                      analyze_after: bool = False) -> int
2025-08-17T15:49:14.0790868Z ```
2025-08-17T15:49:14.0791022Z 
2025-08-17T15:49:14.0791306Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-17T15:49:14.0791754Z 
2025-08-17T15:49:14.0792097Z The dataframe is first written to a TEMP table created ``LIKE`` the target
2025-08-17T15:49:14.0793124Z including defaults and generated columns.  Data is streamed via ``COPY`` and
2025-08-17T15:49:14.0793951Z then inserted into the final table.  If ``conflict_cols`` is provided an
2025-08-17T15:49:14.0794744Z ``INSERT ... ON CONFLICT DO UPDATE`` is issued for the non-conflicting
2025-08-17T15:49:14.0795385Z columns, otherwise rows are simply appended.
2025-08-17T15:49:14.0795737Z 
2025-08-17T15:49:14.0795935Z Returns the number of rows provided in ``df``.
2025-08-17T15:49:14.0796284Z 
2025-08-17T15:49:14.0796451Z <a id="ingest.tests.test_smoke"></a>
2025-08-17T15:49:14.0796778Z 
2025-08-17T15:49:14.0796923Z # ingest.tests.test\_smoke
2025-08-17T15:49:14.0797194Z 
2025-08-17T15:49:14.0797341Z <a id="ingest.tests"></a>
2025-08-17T15:49:14.0797593Z 
2025-08-17T15:49:14.0797715Z # ingest.tests
2025-08-17T15:49:14.0797915Z 
2025-08-17T15:49:14.0798072Z <a id="ingest.upload_router"></a>
2025-08-17T15:49:14.0798359Z 
2025-08-17T15:49:14.0798505Z # ingest.upload\_router
2025-08-17T15:49:14.0798736Z 
2025-08-17T15:49:14.0798885Z <a id="ingest.email_watcher"></a>
2025-08-17T15:49:14.0799174Z 
2025-08-17T15:49:14.0799305Z # ingest.email\_watcher
2025-08-17T15:49:14.0799532Z 
2025-08-17T15:49:14.0799689Z <a id="ingest.email_watcher.main"></a>
2025-08-17T15:49:14.0800006Z 
2025-08-17T15:49:14.0800118Z #### main
2025-08-17T15:49:14.0800279Z 
2025-08-17T15:49:14.0800402Z ```python
2025-08-17T15:49:14.0800702Z def main() -> dict[str, str]
2025-08-17T15:49:14.0801064Z ```
2025-08-17T15:49:14.0801218Z 
2025-08-17T15:49:14.0801482Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-17T15:49:14.0801933Z 
2025-08-17T15:49:14.0802176Z Returns {"status": "success"} when processing completes.
2025-08-17T15:49:14.0802759Z 
2025-08-17T15:49:14.0802916Z <a id="ingest.ingest_router"></a>
2025-08-17T15:49:14.0803216Z 
2025-08-17T15:49:14.0803356Z # ingest.ingest\_router
2025-08-17T15:49:14.0803589Z 
2025-08-17T15:49:14.0803740Z <a id="logistics_etl"></a>
2025-08-17T15:49:14.0803992Z 
2025-08-17T15:49:14.0804116Z # logistics\_etl
2025-08-17T15:49:14.0804323Z 
2025-08-17T15:49:14.0804460Z Daily logistics ETL job.
2025-08-17T15:49:14.0804698Z 
2025-08-17T15:49:14.0804850Z <a id="logistics_etl.__main__"></a>
2025-08-17T15:49:14.0805156Z 
2025-08-17T15:49:14.0805295Z # logistics\_etl.\_\_main\_\_
2025-08-17T15:49:14.0805556Z 
2025-08-17T15:49:14.0805709Z <a id="logistics_etl.dsn"></a>
2025-08-17T15:49:14.0805969Z 
2025-08-17T15:49:14.0806093Z # logistics\_etl.dsn
2025-08-17T15:49:14.0806304Z 
2025-08-17T15:49:14.0806529Z Local DSN builder to avoid cross-service dependency.
2025-08-17T15:49:14.0807160Z 
2025-08-17T15:49:14.0807332Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-17T15:49:14.0807665Z 
2025-08-17T15:49:14.0807783Z #### build\_dsn
2025-08-17T15:49:14.0807973Z 
2025-08-17T15:49:14.0808094Z ```python
2025-08-17T15:49:14.0808412Z def build_dsn(sync: bool = True) -> str
2025-08-17T15:49:14.0808826Z ```
2025-08-17T15:49:14.0808984Z 
2025-08-17T15:49:14.0809249Z Return a Postgres DSN assembled from environment variables.
2025-08-17T15:49:14.0809688Z 
2025-08-17T15:49:14.0809977Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-17T15:49:14.0810725Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-17T15:49:14.0811388Z error when any required variable is missing.
2025-08-17T15:49:14.0811729Z 
2025-08-17T15:49:14.0811911Z <a id="logistics_etl.tests.conftest"></a>
2025-08-17T15:49:14.0812441Z 
2025-08-17T15:49:14.0812602Z # logistics\_etl.tests.conftest
2025-08-17T15:49:14.0812890Z 
2025-08-17T15:49:14.0813085Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-17T15:49:14.0813696Z 
2025-08-17T15:49:14.0813864Z # logistics\_etl.tests.test\_repository
2025-08-17T15:49:14.0814188Z 
2025-08-17T15:49:14.0814358Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-17T15:49:14.0814684Z 
2025-08-17T15:49:14.0814847Z # logistics\_etl.tests.test\_cron
2025-08-17T15:49:14.0815131Z 
2025-08-17T15:49:14.0815321Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-17T15:49:14.0815671Z 
2025-08-17T15:49:14.0815828Z # logistics\_etl.tests.test\_imports
2025-08-17T15:49:14.0816130Z 
2025-08-17T15:49:14.0816304Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-17T15:49:14.0816641Z 
2025-08-17T15:49:14.0816792Z # logistics\_etl.tests.test\_smoke
2025-08-17T15:49:14.0817079Z 
2025-08-17T15:49:14.0817264Z <a id="logistics_etl.tests.test_client"></a>
2025-08-17T15:49:14.0817595Z 
2025-08-17T15:49:14.0817750Z # logistics\_etl.tests.test\_client
2025-08-17T15:49:14.0818050Z 
2025-08-17T15:49:14.0818198Z <a id="logistics_etl.tests"></a>
2025-08-17T15:49:14.0818492Z 
2025-08-17T15:49:14.0818622Z # logistics\_etl.tests
2025-08-17T15:49:14.0818852Z 
2025-08-17T15:49:14.0818995Z <a id="logistics_etl.flow"></a>
2025-08-17T15:49:14.0819265Z 
2025-08-17T15:49:14.0819405Z # logistics\_etl.flow
2025-08-17T15:49:14.0819630Z 
2025-08-17T15:49:14.0819782Z <a id="logistics_etl.client"></a>
2025-08-17T15:49:14.0820072Z 
2025-08-17T15:49:14.0820208Z # logistics\_etl.client
2025-08-17T15:49:14.0820438Z 
2025-08-17T15:49:14.0820583Z <a id="logistics_etl.cron"></a>
2025-08-17T15:49:14.0820877Z 
2025-08-17T15:49:14.0821005Z # logistics\_etl.cron
2025-08-17T15:49:14.0821230Z 
2025-08-17T15:49:14.0821371Z <a id="logistics_etl.db"></a>
2025-08-17T15:49:14.0821634Z 
2025-08-17T15:49:14.0821770Z # logistics\_etl.db
2025-08-17T15:49:14.0821973Z 
2025-08-17T15:49:14.0822137Z <a id="logistics_etl.repository"></a>
2025-08-17T15:49:14.0822640Z 
2025-08-17T15:49:14.0822787Z # logistics\_etl.repository
2025-08-17T15:49:14.0823042Z 
2025-08-17T15:49:14.0823171Z <a id="alert_bot"></a>
2025-08-17T15:49:14.0823417Z 
2025-08-17T15:49:14.0823530Z # alert\_bot
2025-08-17T15:49:14.0823706Z 
2025-08-17T15:49:14.0823874Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-17T15:49:14.0824184Z 
2025-08-17T15:49:14.0824329Z # alert\_bot.tests.test\_smoke
2025-08-17T15:49:14.0824602Z 
2025-08-17T15:49:14.0824741Z <a id="alert_bot.tests"></a>
2025-08-17T15:49:14.0825000Z 
2025-08-17T15:49:14.0825121Z # alert\_bot.tests
2025-08-17T15:49:14.0825329Z 
2025-08-17T15:49:14.0825474Z <a id="alert_bot.alert_bot"></a>
2025-08-17T15:49:14.0825749Z 
2025-08-17T15:49:14.0825895Z # alert\_bot.alert\_bot
2025-08-17T15:49:14.0826119Z 
2025-08-17T15:49:14.0826256Z <a id="alert_bot.rules"></a>
2025-08-17T15:49:14.0826520Z 
2025-08-17T15:49:14.0826642Z # alert\_bot.rules
2025-08-17T15:49:14.0826840Z 
2025-08-17T15:49:14.0826960Z <a id="common"></a>
2025-08-17T15:49:14.0827167Z 
2025-08-17T15:49:14.0827274Z # common
2025-08-17T15:49:14.0827435Z 
2025-08-17T15:49:14.0827578Z <a id="common.dsn"></a>
2025-08-17T15:49:14.0828069Z 
2025-08-17T15:49:14.0828190Z # common.dsn
2025-08-17T15:49:14.0828372Z 
2025-08-17T15:49:14.0828531Z <a id="common.dsn.build_dsn"></a>
2025-08-17T15:49:14.0828823Z 
2025-08-17T15:49:14.0828943Z #### build\_dsn
2025-08-17T15:49:14.0829145Z 
2025-08-17T15:49:14.0829263Z ```python
2025-08-17T15:49:14.0829592Z def build_dsn(sync: bool = True) -> str
2025-08-17T15:49:14.0830014Z ```
2025-08-17T15:49:14.0830165Z 
2025-08-17T15:49:14.0830401Z Return a Postgres DSN, validating required variables.
2025-08-17T15:49:14.0830796Z 
2025-08-17T15:49:14.0831150Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-17T15:49:14.0831985Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-17T15:49:14.0832963Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-17T15:49:14.0833574Z missing.
2025-08-17T15:49:14.0833736Z 
2025-08-17T15:49:14.0833929Z <a id="common.models_vendor"></a>
2025-08-17T15:49:14.0834212Z 
2025-08-17T15:49:14.0834573Z # common.models\_vendor
2025-08-17T15:49:14.0834816Z 
2025-08-17T15:49:14.0834981Z <a id="common.models_vendor.Vendor"></a>
2025-08-17T15:49:14.0835299Z 
2025-08-17T15:49:14.0835423Z ## Vendor Objects
2025-08-17T15:49:14.0835625Z 
2025-08-17T15:49:14.0835735Z ```python
2025-08-17T15:49:14.0836018Z class Vendor(Base)
2025-08-17T15:49:14.0836312Z ```
2025-08-17T15:49:14.0836463Z 
2025-08-17T15:49:14.0836616Z Vendor of inventory items.
2025-08-17T15:49:14.0836869Z 
2025-08-17T15:49:14.0837058Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-17T15:49:14.0837416Z 
2025-08-17T15:49:14.0837546Z ## VendorPrice Objects
2025-08-17T15:49:14.0837767Z 
2025-08-17T15:49:14.0837880Z ```python
2025-08-17T15:49:14.0838181Z class VendorPrice(Base)
2025-08-17T15:49:14.0838519Z ```
2025-08-17T15:49:14.0838672Z 
2025-08-17T15:49:14.0838866Z Association table linking vendors to pricing.
2025-08-17T15:49:14.0839218Z 
2025-08-17T15:49:14.0839387Z <a id="common.db_url"></a>
2025-08-17T15:49:14.0839669Z 
2025-08-17T15:49:14.0839802Z # common.db\_url
2025-08-17T15:49:14.0840064Z 
2025-08-17T15:49:14.0840222Z <a id="common.db_url.build_url"></a>
2025-08-17T15:49:14.0840517Z 
2025-08-17T15:49:14.0840629Z #### build\_url
2025-08-17T15:49:14.0840817Z 
2025-08-17T15:49:14.0840930Z ```python
2025-08-17T15:49:14.0841249Z def build_url(async_: bool = True) -> str
2025-08-17T15:49:14.0841677Z ```
2025-08-17T15:49:14.0841830Z 
2025-08-17T15:49:14.0842009Z Return Postgres DSN from env or PG_* parts.
2025-08-17T15:49:14.0842520Z 
2025-08-17T15:49:14.0842666Z <a id="common.keepa"></a>
2025-08-17T15:49:14.0842909Z 
2025-08-17T15:49:14.0843037Z # common.keepa
2025-08-17T15:49:14.0843224Z 
2025-08-17T15:49:14.0843357Z <a id="common.llm"></a>
2025-08-17T15:49:14.0843589Z 
2025-08-17T15:49:14.0843703Z # common.llm
2025-08-17T15:49:14.0843879Z 
2025-08-17T15:49:14.0844021Z <a id="common.settings"></a>
2025-08-17T15:49:14.0844290Z 
2025-08-17T15:49:14.0844410Z # common.settings
2025-08-17T15:49:14.0844606Z 
2025-08-17T15:49:14.0844758Z <a id="common.db"></a>
2025-08-17T15:49:14.0844976Z 
2025-08-17T15:49:14.0845094Z # common.db
2025-08-17T15:49:14.0845263Z 
2025-08-17T15:49:14.0845442Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-17T15:49:14.0845769Z 
2025-08-17T15:49:14.0845903Z #### build\_sqlalchemy\_url
2025-08-17T15:49:14.0846157Z 
2025-08-17T15:49:14.0846270Z ```python
2025-08-17T15:49:14.0851894Z def build_sqlalchemy_url() -> str
2025-08-17T15:49:14.0852509Z ```
2025-08-17T15:49:14.0852656Z 
2025-08-17T15:49:14.0852822Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T15:49:14.0853111Z 
2025-08-17T15:49:14.0853265Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-17T15:49:14.0853548Z 
2025-08-17T15:49:14.0853671Z #### build\_asyncpg\_dsn
2025-08-17T15:49:14.0853884Z 
2025-08-17T15:49:14.0853989Z ```python
2025-08-17T15:49:14.0854247Z def build_asyncpg_dsn() -> str
2025-08-17T15:49:14.0854560Z ```
2025-08-17T15:49:14.0854681Z 
2025-08-17T15:49:14.0854879Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T15:49:14.0855507Z 
2025-08-17T15:49:14.0855645Z <a id="common.db.refresh_mvs"></a>
2025-08-17T15:49:14.0855883Z 
2025-08-17T15:49:14.0855983Z #### refresh\_mvs
2025-08-17T15:49:14.0856158Z 
2025-08-17T15:49:14.0856255Z ```python
2025-08-17T15:49:14.0856551Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T15:49:14.0856936Z ```
2025-08-17T15:49:14.0857054Z 
2025-08-17T15:49:14.0857279Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T15:49:14.0857614Z 
2025-08-17T15:49:14.0857727Z <a id="common.config"></a>
2025-08-17T15:49:14.0857929Z 
2025-08-17T15:49:14.0858032Z # common.config
2025-08-17T15:49:14.0858181Z 
2025-08-17T15:49:14.0858296Z <a id="common.base"></a>
2025-08-17T15:49:14.0858479Z 
2025-08-17T15:49:14.0858572Z # common.base
2025-08-17T15:49:14.0858726Z 
2025-08-17T15:49:14.0858856Z <a id="common.base.Base"></a>
2025-08-17T15:49:14.0859071Z 
2025-08-17T15:49:14.0859172Z ## Base Objects
2025-08-17T15:49:14.0859341Z 
2025-08-17T15:49:14.0859434Z ```python
2025-08-17T15:49:14.0859857Z class Base(DeclarativeBase)
2025-08-17T15:49:14.0860159Z ```
2025-08-17T15:49:14.0860281Z 
2025-08-17T15:49:14.0860419Z Base class for SQLAlchemy models.
2025-08-17T15:49:14.0860651Z 
2025-08-17T15:49:14.0860756Z <a id="repricer"></a>
2025-08-17T15:49:14.0860936Z 
2025-08-17T15:49:14.0861038Z # repricer
2025-08-17T15:49:14.0861176Z 
2025-08-17T15:49:14.0861309Z <a id="repricer.app.schemas"></a>
2025-08-17T15:49:14.0861558Z 
2025-08-17T15:49:14.0861684Z # repricer.app.schemas
2025-08-17T15:49:14.0861876Z 
2025-08-17T15:49:14.0861999Z <a id="repricer.app.deps"></a>
2025-08-17T15:49:14.0862388Z 
2025-08-17T15:49:14.0862517Z # repricer.app.deps
2025-08-17T15:49:14.0862715Z 
2025-08-17T15:49:14.0862872Z Placeholder module for Keepa / SP-API clients.
2025-08-17T15:49:14.0863080Z 
2025-08-17T15:49:14.0863168Z <a id="repricer.app.logic"></a>
2025-08-17T15:49:14.0863324Z 
2025-08-17T15:49:14.0863402Z # repricer.app.logic
2025-08-17T15:49:14.0863523Z 
2025-08-17T15:49:14.0863625Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-17T15:49:14.0863881Z 
2025-08-17T15:49:14.0863948Z #### MIN\_MARGIN
2025-08-17T15:49:14.0864054Z 
2025-08-17T15:49:14.0864123Z 15 % ROI
2025-08-17T15:49:14.0864211Z 
2025-08-17T15:49:14.0864316Z <a id="repricer.app.logic.compute_price"></a>
2025-08-17T15:49:14.0864503Z 
2025-08-17T15:49:14.0864571Z #### compute\_price
2025-08-17T15:49:14.0864680Z 
2025-08-17T15:49:14.0864745Z ```python
2025-08-17T15:49:14.0864998Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-17T15:49:14.0865299Z ```
2025-08-17T15:49:14.0865381Z 
2025-08-17T15:49:14.0865489Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-17T15:49:14.0865784Z Replace with real competitive logic later.
2025-08-17T15:49:14.0865961Z 
2025-08-17T15:49:14.0866047Z <a id="repricer.app.main"></a>
2025-08-17T15:49:14.0866196Z 
2025-08-17T15:49:14.0866268Z # repricer.app.main
2025-08-17T15:49:14.0866381Z 
2025-08-17T15:49:14.0866460Z <a id="repricer.app"></a>
2025-08-17T15:49:14.0866599Z 
2025-08-17T15:49:14.0866678Z # repricer.app
2025-08-17T15:49:14.0866780Z 
2025-08-17T15:49:14.0866883Z <a id="repricer.tests.test_imports"></a>
2025-08-17T15:49:14.0867054Z 
2025-08-17T15:49:14.0867135Z # repricer.tests.test\_imports
2025-08-17T15:49:14.0867279Z 
2025-08-17T15:49:14.0867366Z <a id="repricer.tests.test_smoke"></a>
2025-08-17T15:49:14.0867526Z 
2025-08-17T15:49:14.0867607Z # repricer.tests.test\_smoke
2025-08-17T15:49:14.0867751Z 
2025-08-17T15:49:14.0867829Z <a id="repricer.tests"></a>
2025-08-17T15:49:14.0867958Z 
2025-08-17T15:49:14.0868034Z # repricer.tests
2025-08-17T15:49:14.0868139Z 
2025-08-17T15:49:14.0868203Z <a id="db"></a>
2025-08-17T15:49:14.0868308Z 
2025-08-17T15:49:14.0868366Z # db
2025-08-17T15:49:14.0868450Z 
2025-08-17T15:49:14.0868526Z <a id="db.utils.views"></a>
2025-08-17T15:49:14.0868661Z 
2025-08-17T15:49:14.0868732Z # db.utils.views
2025-08-17T15:49:14.0868833Z 
2025-08-17T15:49:14.0868931Z <a id="db.utils.views.replace_view"></a>
2025-08-17T15:49:14.0869098Z 
2025-08-17T15:49:14.0869335Z #### replace\_view
2025-08-17T15:49:14.0869445Z 
2025-08-17T15:49:14.0869515Z ```python
2025-08-17T15:49:14.0869710Z def replace_view(name: str, new_sql: str) -> None
2025-08-17T15:49:14.0869965Z ```
2025-08-17T15:49:14.0870049Z 
2025-08-17T15:49:14.0870141Z Drop and recreate a SQL view atomically.
2025-08-17T15:49:14.0870312Z 
2025-08-17T15:49:14.0870383Z <a id="db.utils"></a>
2025-08-17T15:49:14.0870498Z 
2025-08-17T15:49:14.0870567Z # db.utils
2025-08-17T15:49:14.0870656Z 
2025-08-17T15:49:14.0870735Z <a id="price_importer"></a>
2025-08-17T15:49:14.0870875Z 
2025-08-17T15:49:14.0870945Z # price\_importer
2025-08-17T15:49:14.0871053Z 
2025-08-17T15:49:14.0871159Z <a id="price_importer.services_common.dsn"></a>
2025-08-17T15:49:14.0871351Z 
2025-08-17T15:49:14.0871441Z # price\_importer.services\_common.dsn
2025-08-17T15:49:14.0871605Z 
2025-08-17T15:49:14.0871736Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-17T15:49:14.0871944Z 
2025-08-17T15:49:14.0872009Z #### build\_dsn
2025-08-17T15:49:14.0872416Z 
2025-08-17T15:49:14.0872513Z ```python
2025-08-17T15:49:14.0872694Z def build_dsn(sync: bool = True) -> str
2025-08-17T15:49:14.0872923Z ```
2025-08-17T15:49:14.0873006Z 
2025-08-17T15:49:14.0873072Z Return safe DSN.
2025-08-17T15:49:14.0873183Z 
2025-08-17T15:49:14.0873525Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-17T15:49:14.0873732Z 
2025-08-17T15:49:14.0873868Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-17T15:49:14.0874075Z 
2025-08-17T15:49:14.0874185Z # price\_importer.services\_common.models\_vendor
2025-08-17T15:49:14.0874382Z 
2025-08-17T15:49:14.0874489Z <a id="price_importer.services_common.db_url"></a>
2025-08-17T15:49:14.0874676Z 
2025-08-17T15:49:14.0874772Z # price\_importer.services\_common.db\_url
2025-08-17T15:49:14.0874950Z 
2025-08-17T15:49:14.0875083Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-17T15:49:14.0875302Z 
2025-08-17T15:49:14.0875375Z #### build\_url
2025-08-17T15:49:14.0875492Z 
2025-08-17T15:49:14.0875565Z ```python
2025-08-17T15:49:14.0875746Z def build_url(async_: bool = True) -> str
2025-08-17T15:49:14.0875972Z ```
2025-08-17T15:49:14.0876060Z 
2025-08-17T15:49:14.0876157Z Return Postgres DSN from env or PG_* parts.
2025-08-17T15:49:14.0876332Z 
2025-08-17T15:49:14.0876451Z <a id="price_importer.services_common.keepa"></a>
2025-08-17T15:49:14.0876645Z 
2025-08-17T15:49:14.0876740Z # price\_importer.services\_common.keepa
2025-08-17T15:49:14.0876911Z 
2025-08-17T15:49:14.0877020Z <a id="price_importer.services_common.llm"></a>
2025-08-17T15:49:14.0877203Z 
2025-08-17T15:49:14.0877292Z # price\_importer.services\_common.llm
2025-08-17T15:49:14.0877462Z 
2025-08-17T15:49:14.0877577Z <a id="price_importer.services_common.settings"></a>
2025-08-17T15:49:14.0877771Z 
2025-08-17T15:49:14.0877873Z # price\_importer.services\_common.settings
2025-08-17T15:49:14.0878044Z 
2025-08-17T15:49:14.0878146Z <a id="price_importer.services_common.db"></a>
2025-08-17T15:49:14.0878325Z 
2025-08-17T15:49:14.0878430Z # price\_importer.services\_common.db
2025-08-17T15:49:14.0878589Z 
2025-08-17T15:49:14.0878743Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-17T15:49:14.0878991Z 
2025-08-17T15:49:14.0879067Z #### build\_sqlalchemy\_url
2025-08-17T15:49:14.0879198Z 
2025-08-17T15:49:14.0879268Z ```python
2025-08-17T15:49:14.0879440Z def build_sqlalchemy_url() -> str
2025-08-17T15:49:14.0879651Z ```
2025-08-17T15:49:14.0879734Z 
2025-08-17T15:49:14.0879828Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T15:49:14.0880007Z 
2025-08-17T15:49:14.0880151Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-17T15:49:14.0880377Z 
2025-08-17T15:49:14.0880450Z #### build\_asyncpg\_dsn
2025-08-17T15:49:14.0880585Z 
2025-08-17T15:49:14.0880648Z ```python
2025-08-17T15:49:14.0880822Z def build_asyncpg_dsn() -> str
2025-08-17T15:49:14.0881017Z ```
2025-08-17T15:49:14.0881099Z 
2025-08-17T15:49:14.0881232Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T15:49:14.0881620Z 
2025-08-17T15:49:14.0881760Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-17T15:49:14.0881988Z 
2025-08-17T15:49:14.0882056Z #### refresh\_mvs
2025-08-17T15:49:14.0882163Z 
2025-08-17T15:49:14.0882395Z ```python
2025-08-17T15:49:14.0882633Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T15:49:14.0882888Z ```
2025-08-17T15:49:14.0882971Z 
2025-08-17T15:49:14.0883109Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T15:49:14.0883332Z 
2025-08-17T15:49:14.0883432Z <a id="price_importer.services_common"></a>
2025-08-17T15:49:14.0883605Z 
2025-08-17T15:49:14.0883693Z # price\_importer.services\_common
2025-08-17T15:49:14.0883855Z 
2025-08-17T15:49:14.0883957Z <a id="price_importer.services_common.base"></a>
2025-08-17T15:49:14.0884141Z 
2025-08-17T15:49:14.0884238Z # price\_importer.services\_common.base
2025-08-17T15:49:14.0884403Z 
2025-08-17T15:49:14.0884491Z <a id="price_importer.normaliser"></a>
2025-08-17T15:49:14.0884844Z 
2025-08-17T15:49:14.0884933Z # price\_importer.normaliser
2025-08-17T15:49:14.0885078Z 
2025-08-17T15:49:14.0885183Z <a id="price_importer.common.models_vendor"></a>
2025-08-17T15:49:14.0885374Z 
2025-08-17T15:49:14.0885462Z # price\_importer.common.models\_vendor
2025-08-17T15:49:14.0885626Z 
2025-08-17T15:49:14.0885727Z <a id="price_importer.common.db_url"></a>
2025-08-17T15:49:14.0885896Z 
2025-08-17T15:49:14.0885980Z # price\_importer.common.db\_url
2025-08-17T15:49:14.0886134Z 
2025-08-17T15:49:14.0886240Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-17T15:49:14.0886424Z 
2025-08-17T15:49:14.0886489Z #### make\_dsn
2025-08-17T15:49:14.0886595Z 
2025-08-17T15:49:14.0886657Z ```python
2025-08-17T15:49:14.0886837Z def make_dsn(async_: bool = False) -> str
2025-08-17T15:49:14.0887057Z ```
2025-08-17T15:49:14.0887142Z 
2025-08-17T15:49:14.0887268Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-17T15:49:14.0887468Z 
2025-08-17T15:49:14.0887581Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-17T15:49:14.0887788Z 
2025-08-17T15:49:14.0887852Z #### build\_url
2025-08-17T15:49:14.0887953Z 
2025-08-17T15:49:14.0888015Z ```python
2025-08-17T15:49:14.0888200Z def build_url(async_: bool = False) -> str
2025-08-17T15:49:14.0888434Z ```
2025-08-17T15:49:14.0888515Z 
2025-08-17T15:49:14.0888633Z Return Postgres DSN built from environment variables.
2025-08-17T15:49:14.0888832Z 
2025-08-17T15:49:14.0888923Z <a id="price_importer.common"></a>
2025-08-17T15:49:14.0889075Z 
2025-08-17T15:49:14.0889153Z # price\_importer.common
2025-08-17T15:49:14.0889290Z 
2025-08-17T15:49:14.0889379Z <a id="price_importer.common.base"></a>
2025-08-17T15:49:14.0889544Z 
2025-08-17T15:49:14.0889635Z # price\_importer.common.base
2025-08-17T15:49:14.0889776Z 
2025-08-17T15:49:14.0889872Z <a id="price_importer.tests.conftest"></a>
2025-08-17T15:49:14.0890044Z 
2025-08-17T15:49:14.0890137Z # price\_importer.tests.conftest
2025-08-17T15:49:14.0890284Z 
2025-08-17T15:49:14.0890386Z <a id="price_importer.tests.test_reader"></a>
2025-08-17T15:49:14.0890576Z 
2025-08-17T15:49:14.0890662Z # price\_importer.tests.test\_reader
2025-08-17T15:49:14.0890819Z 
2025-08-17T15:49:14.0890925Z <a id="price_importer.tests.test_imports"></a>
2025-08-17T15:49:14.0891103Z 
2025-08-17T15:49:14.0891191Z # price\_importer.tests.test\_imports
2025-08-17T15:49:14.0891349Z 
2025-08-17T15:49:14.0891451Z <a id="price_importer.tests.test_smoke"></a>
2025-08-17T15:49:14.0891622Z 
2025-08-17T15:49:14.0891707Z # price\_importer.tests.test\_smoke
2025-08-17T15:49:14.0891867Z 
2025-08-17T15:49:14.0891970Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-17T15:49:14.0892154Z 
2025-08-17T15:49:14.0892361Z # price\_importer.tests.test\_normaliser
2025-08-17T15:49:14.0892532Z 
2025-08-17T15:49:14.0892617Z <a id="price_importer.tests"></a>
2025-08-17T15:49:14.0892769Z 
2025-08-17T15:49:14.0892850Z # price\_importer.tests
2025-08-17T15:49:14.0892972Z 
2025-08-17T15:49:14.0893055Z <a id="price_importer.reader"></a>
2025-08-17T15:49:14.0893215Z 
2025-08-17T15:49:14.0893414Z # price\_importer.reader
2025-08-17T15:49:14.0893542Z 
2025-08-17T15:49:14.0893637Z <a id="price_importer.repository"></a>
2025-08-17T15:49:14.0893800Z 
2025-08-17T15:49:14.0893882Z # price\_importer.repository
2025-08-17T15:49:14.0894017Z 
2025-08-17T15:49:14.0894105Z <a id="price_importer.import"></a>
2025-08-17T15:49:14.0894254Z 
2025-08-17T15:49:14.0894329Z # price\_importer.import
2025-08-17T15:49:14.0894459Z 
2025-08-17T15:49:14.0894528Z <a id="fees_h10"></a>
2025-08-17T15:49:14.0894642Z 
2025-08-17T15:49:14.0894711Z # fees\_h10
2025-08-17T15:49:14.0894802Z 
2025-08-17T15:49:14.0894877Z <a id="fees_h10.worker"></a>
2025-08-17T15:49:14.0895010Z 
2025-08-17T15:49:14.0895083Z # fees\_h10.worker
2025-08-17T15:49:14.0895188Z 
2025-08-17T15:49:14.0895284Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-17T15:49:14.0895464Z 
2025-08-17T15:49:14.0895537Z #### list\_active\_asins
2025-08-17T15:49:14.0895655Z 
2025-08-17T15:49:14.0895718Z ```python
2025-08-17T15:49:14.0896012Z def list_active_asins() -> list[str]
2025-08-17T15:49:14.0896228Z ```
2025-08-17T15:49:14.0896310Z 
2025-08-17T15:49:14.0896425Z Return known ASINs or an empty list if unavailable.
2025-08-17T15:49:14.0896619Z 
2025-08-17T15:49:14.0896707Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-17T15:49:14.0896864Z 
2025-08-17T15:49:14.0896943Z # fees\_h10.tests.test\_smoke
2025-08-17T15:49:14.0897085Z 
2025-08-17T15:49:14.0897160Z <a id="fees_h10.tests"></a>
2025-08-17T15:49:14.0897294Z 
2025-08-17T15:49:14.0897366Z # fees\_h10.tests
2025-08-17T15:49:14.0897469Z 
2025-08-17T15:49:14.0897546Z <a id="fees_h10.client"></a>
2025-08-17T15:49:14.0897676Z 
2025-08-17T15:49:14.0897747Z # fees\_h10.client
2025-08-17T15:49:14.0897849Z 
2025-08-17T15:49:14.0897930Z <a id="fees_h10.repository"></a>
2025-08-17T15:49:14.0898081Z 
2025-08-17T15:49:14.0898153Z # fees\_h10.repository
2025-08-17T15:49:14.0898268Z 
2025-08-17T15:49:14.0898337Z <a id="emailer"></a>
2025-08-17T15:49:14.0898468Z 
2025-08-17T15:49:14.0898530Z # emailer
2025-08-17T15:49:14.0898629Z 
2025-08-17T15:49:14.0898737Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-17T15:49:14.0898913Z 
2025-08-17T15:49:14.0899001Z # emailer.tests.test\_import\_emailer
2025-08-17T15:49:14.0899168Z 
2025-08-17T15:49:14.0899255Z <a id="emailer.tests.test_smoke"></a>
2025-08-17T15:49:14.0899411Z 
2025-08-17T15:49:14.0899490Z # emailer.tests.test\_smoke
2025-08-17T15:49:14.0899629Z 
2025-08-17T15:49:14.0899705Z <a id="emailer.tests"></a>
2025-08-17T15:49:14.0899834Z 
2025-08-17T15:49:14.0899907Z # emailer.tests
2025-08-17T15:49:14.0900009Z 
2025-08-17T15:49:14.0900093Z <a id="emailer.generate_body"></a>
2025-08-17T15:49:14.0900249Z 
2025-08-17T15:49:14.0900324Z # emailer.generate\_body
2025-08-17T15:49:14.0900449Z 
2025-08-17T15:49:14.0900520Z <a id="llm_server"></a>
2025-08-17T15:49:14.0900647Z 
2025-08-17T15:49:14.0900710Z # llm\_server
2025-08-17T15:49:14.0900807Z 
2025-08-17T15:49:14.0900891Z <a id="llm_server.app"></a>
2025-08-17T15:49:14.0901019Z 
2025-08-17T15:49:14.0901095Z # llm\_server.app
2025-08-17T15:49:14.0901201Z 
