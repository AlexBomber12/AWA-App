2025-08-17T17:09:53.2522735Z ##[group]Run pydoc-markdown
2025-08-17T17:09:53.2523053Z [36;1mpydoc-markdown[0m
2025-08-17T17:09:53.2562638Z shell: /usr/bin/bash -e {0}
2025-08-17T17:09:53.2562859Z env:
2025-08-17T17:09:53.2563100Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T17:09:53.2563509Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-17T17:09:53.2563903Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T17:09:53.2564239Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T17:09:53.2564580Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T17:09:53.2564917Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-17T17:09:53.2565196Z ##[endgroup]
2025-08-17T17:09:53.6069498Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-17T17:09:53.6070157Z Unknown key(s) "{'output_directory'}" at:
2025-08-17T17:09:53.6070443Z In "pydoc-markdown.yml"
2025-08-17T17:09:53.6070688Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-17T17:09:53.6071399Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-17T17:09:53.6072257Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-17T17:09:53.6072734Z 
2025-08-17T17:09:53.8386682Z <a id="__init__"></a>
2025-08-17T17:09:53.8387129Z 
2025-08-17T17:09:53.8387270Z # \_\_init\_\_
2025-08-17T17:09:53.8387492Z 
2025-08-17T17:09:53.8387645Z <a id="api"></a>
2025-08-17T17:09:53.8387887Z 
2025-08-17T17:09:53.8388041Z # api
2025-08-17T17:09:53.8388240Z 
2025-08-17T17:09:53.8388417Z <a id="api.tests.test_llm"></a>
2025-08-17T17:09:53.8388758Z 
2025-08-17T17:09:53.8388940Z # api.tests.test\_llm
2025-08-17T17:09:53.8389229Z 
2025-08-17T17:09:53.8389442Z <a id="api.tests.test_imports"></a>
2025-08-17T17:09:53.8389814Z 
2025-08-17T17:09:53.8389980Z # api.tests.test\_imports
2025-08-17T17:09:53.8390249Z 
2025-08-17T17:09:53.8390434Z <a id="api.tests.test_entrypoint"></a>
2025-08-17T17:09:53.8390795Z 
2025-08-17T17:09:53.8390979Z # api.tests.test\_entrypoint
2025-08-17T17:09:53.8391211Z 
2025-08-17T17:09:53.8391323Z <a id="api.tests.test_health"></a>
2025-08-17T17:09:53.8391528Z 
2025-08-17T17:09:53.8391633Z # api.tests.test\_health
2025-08-17T17:09:53.8392028Z 
2025-08-17T17:09:53.8392188Z <a id="api.migrations.env"></a>
2025-08-17T17:09:53.8392436Z 
2025-08-17T17:09:53.8392556Z # api.migrations.env
2025-08-17T17:09:53.8392751Z 
2025-08-17T17:09:53.8392957Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-17T17:09:53.8393233Z 
2025-08-17T17:09:53.8393351Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-17T17:09:53.8393560Z 
2025-08-17T17:09:53.8393674Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-17T17:09:53.8393878Z 
2025-08-17T17:09:53.8393979Z # api.migrations.versions.0004\_fee\_cron
2025-08-17T17:09:53.8394160Z 
2025-08-17T17:09:53.8394318Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-17T17:09:53.8394574Z 
2025-08-17T17:09:53.8394716Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-17T17:09:53.8395213Z 
2025-08-17T17:09:53.8395338Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-17T17:09:53.8395559Z 
2025-08-17T17:09:53.8395666Z # api.migrations.versions.0003\_vendor\_prices
2025-08-17T17:09:53.8395858Z 
2025-08-17T17:09:53.8395984Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-17T17:09:53.8396194Z 
2025-08-17T17:09:53.8396299Z # api.migrations.versions.0024\_create\_buybox
2025-08-17T17:09:53.8396507Z 
2025-08-17T17:09:53.8396645Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-17T17:09:53.8396870Z 
2025-08-17T17:09:53.8396982Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-17T17:09:53.8397191Z 
2025-08-17T17:09:53.8397312Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-17T17:09:53.8397521Z 
2025-08-17T17:09:53.8397637Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-17T17:09:53.8397833Z 
2025-08-17T17:09:53.8397958Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-17T17:09:53.8398384Z 
2025-08-17T17:09:53.8398491Z # api.migrations.versions.0020\_unified\_schema
2025-08-17T17:09:53.8398686Z 
2025-08-17T17:09:53.8398817Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-17T17:09:53.8399029Z 
2025-08-17T17:09:53.8399139Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-17T17:09:53.8399341Z 
2025-08-17T17:09:53.8399460Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-17T17:09:53.8399660Z 
2025-08-17T17:09:53.8399754Z # api.migrations.versions.0001\_baseline
2025-08-17T17:09:53.8399938Z 
2025-08-17T17:09:53.8400028Z <a id="api.migrations.versions"></a>
2025-08-17T17:09:53.8400198Z 
2025-08-17T17:09:53.8400286Z # api.migrations.versions
2025-08-17T17:09:53.8400424Z 
2025-08-17T17:09:53.8400506Z <a id="api.migrations"></a>
2025-08-17T17:09:53.8400646Z 
2025-08-17T17:09:53.8400722Z # api.migrations
2025-08-17T17:09:53.8400831Z 
2025-08-17T17:09:53.8400900Z <a id="api.db"></a>
2025-08-17T17:09:53.8401021Z 
2025-08-17T17:09:53.8401096Z # api.db
2025-08-17T17:09:53.8401187Z 
2025-08-17T17:09:53.8401270Z <a id="api.routes.stats"></a>
2025-08-17T17:09:53.8401420Z 
2025-08-17T17:09:53.8401490Z # api.routes.stats
2025-08-17T17:09:53.8401598Z 
2025-08-17T17:09:53.8401693Z <a id="api.routes.stats.kpi"></a>
2025-08-17T17:09:53.8401970Z 
2025-08-17T17:09:53.8402033Z #### kpi
2025-08-17T17:09:53.8402126Z 
2025-08-17T17:09:53.8402194Z ```python
2025-08-17T17:09:53.8402366Z @router.get("/stats/kpi")
2025-08-17T17:09:53.8402609Z def kpi() -> List[Dict[str, int]]
2025-08-17T17:09:53.8402821Z ```
2025-08-17T17:09:53.8402910Z 
2025-08-17T17:09:53.8402989Z Return KPI metrics (mock).
2025-08-17T17:09:53.8403121Z 
2025-08-17T17:09:53.8403228Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-17T17:09:53.8403406Z 
2025-08-17T17:09:53.8403473Z #### roi\_by\_vendor
2025-08-17T17:09:53.8403588Z 
2025-08-17T17:09:53.8403649Z ```python
2025-08-17T17:09:53.8403816Z @router.get("/stats/roi_by_vendor")
2025-08-17T17:09:53.8404064Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-17T17:09:53.8404303Z ```
2025-08-17T17:09:53.8404388Z 
2025-08-17T17:09:53.8404469Z Return ROI percent by vendor.
2025-08-17T17:09:53.8404611Z 
2025-08-17T17:09:53.8404711Z <a id="api.routes.stats.roi_trend"></a>
2025-08-17T17:09:53.8404875Z 
2025-08-17T17:09:53.8404939Z #### roi\_trend
2025-08-17T17:09:53.8405047Z 
2025-08-17T17:09:53.8405106Z ```python
2025-08-17T17:09:53.8405267Z @router.get("/stats/roi_trend")
2025-08-17T17:09:53.8405500Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-17T17:09:53.8405735Z ```
2025-08-17T17:09:53.8405824Z 
2025-08-17T17:09:53.8405898Z Return 30-day ROI trend.
2025-08-17T17:09:53.8406026Z 
2025-08-17T17:09:53.8406112Z <a id="api.routes.roi"></a>
2025-08-17T17:09:53.8406246Z 
2025-08-17T17:09:53.8406313Z # api.routes.roi
2025-08-17T17:09:53.8406494Z 
2025-08-17T17:09:53.8406579Z <a id="api.routes.health"></a>
2025-08-17T17:09:53.8406758Z 
2025-08-17T17:09:53.8406834Z # api.routes.health
2025-08-17T17:09:53.8406945Z 
2025-08-17T17:09:53.8407041Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-17T17:09:53.8407348Z 
2025-08-17T17:09:53.8407410Z #### MAX\_SKEW
2025-08-17T17:09:53.8407509Z 
2025-08-17T17:09:53.8407569Z seconds
2025-08-17T17:09:53.8407657Z 
2025-08-17T17:09:53.8407745Z <a id="api.routes.health.health"></a>
2025-08-17T17:09:53.8407908Z 
2025-08-17T17:09:53.8407974Z #### health
2025-08-17T17:09:53.8408062Z 
2025-08-17T17:09:53.8408125Z ```python
2025-08-17T17:09:53.8408322Z @router.get("/health", include_in_schema=False)
2025-08-17T17:09:53.8408698Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-17T17:09:53.8409040Z ```
2025-08-17T17:09:53.8409122Z 
2025-08-17T17:09:53.8409237Z Return 200 when DB reachable and clocks are in sync.
2025-08-17T17:09:53.8409440Z 
2025-08-17T17:09:53.8409528Z <a id="api.routes.repository"></a>
2025-08-17T17:09:53.8409684Z 
2025-08-17T17:09:53.8409767Z # api.routes.repository
2025-08-17T17:09:53.8409889Z 
2025-08-17T17:09:53.8409959Z <a id="api.routes"></a>
2025-08-17T17:09:53.8410318Z 
2025-08-17T17:09:53.8410384Z # api.routes
2025-08-17T17:09:53.8410483Z 
2025-08-17T17:09:53.8410561Z <a id="api.models.fee"></a>
2025-08-17T17:09:53.8410701Z 
2025-08-17T17:09:53.8410768Z # api.models.fee
2025-08-17T17:09:53.8410872Z 
2025-08-17T17:09:53.8410948Z <a id="api.models"></a>
2025-08-17T17:09:53.8411062Z 
2025-08-17T17:09:53.8411125Z # api.models
2025-08-17T17:09:53.8411216Z 
2025-08-17T17:09:53.8411301Z <a id="api.roi_repository"></a>
2025-08-17T17:09:53.8411441Z 
2025-08-17T17:09:53.8411512Z # api.roi\_repository
2025-08-17T17:09:53.8411633Z 
2025-08-17T17:09:53.8411700Z <a id="api.main"></a>
2025-08-17T17:09:53.8411926Z 
2025-08-17T17:09:53.8411996Z # api.main
2025-08-17T17:09:53.8412087Z 
2025-08-17T17:09:53.8412163Z <a id="api.main.ready"></a>
2025-08-17T17:09:53.8412292Z 
2025-08-17T17:09:53.8412359Z #### ready
2025-08-17T17:09:53.8412446Z 
2025-08-17T17:09:53.8412508Z ```python
2025-08-17T17:09:53.8412775Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-17T17:09:53.8413217Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-17T17:09:53.8413578Z                                                                       str]
2025-08-17T17:09:53.8413814Z ```
2025-08-17T17:09:53.8413896Z 
2025-08-17T17:09:53.8413990Z Return 200 only when migrations are at head.
2025-08-17T17:09:53.8414162Z 
2025-08-17T17:09:53.8414238Z <a id="api.config"></a>
2025-08-17T17:09:53.8414353Z 
2025-08-17T17:09:53.8414464Z # api.config
2025-08-17T17:09:53.8414563Z 
2025-08-17T17:09:53.8414627Z <a id="etl"></a>
2025-08-17T17:09:53.8414725Z 
2025-08-17T17:09:53.8414792Z # etl
2025-08-17T17:09:53.8414879Z 
2025-08-17T17:09:53.8414961Z <a id="etl.fba_fee_ingestor"></a>
2025-08-17T17:09:53.8415105Z 
2025-08-17T17:09:53.8415185Z # etl.fba\_fee\_ingestor
2025-08-17T17:09:53.8415305Z 
2025-08-17T17:09:53.8415383Z <a id="etl.sp_fees_ingestor"></a>
2025-08-17T17:09:53.8415528Z 
2025-08-17T17:09:53.8415599Z # etl.sp\_fees\_ingestor
2025-08-17T17:09:53.8415726Z 
2025-08-17T17:09:53.8415804Z <a id="etl.keepa_ingestor"></a>
2025-08-17T17:09:53.8415944Z 
2025-08-17T17:09:53.8416012Z # etl.keepa\_ingestor
2025-08-17T17:09:53.8416123Z 
2025-08-17T17:09:53.8416191Z <a id="etl.db"></a>
2025-08-17T17:09:53.8416294Z 
2025-08-17T17:09:53.8416353Z # etl.db
2025-08-17T17:09:53.8416442Z 
2025-08-17T17:09:53.8416525Z <a id="etl.dialects.schemas"></a>
2025-08-17T17:09:53.8416667Z 
2025-08-17T17:09:53.8416738Z # etl.dialects.schemas
2025-08-17T17:09:53.8416868Z 
2025-08-17T17:09:53.8416975Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-17T17:09:53.8417173Z 
2025-08-17T17:09:53.8417266Z # etl.dialects.amazon\_reimbursements
2025-08-17T17:09:53.8417425Z 
2025-08-17T17:09:53.8417513Z <a id="etl.dialects.amazon_returns"></a>
2025-08-17T17:09:53.8417684Z 
2025-08-17T17:09:53.8417763Z # etl.dialects.amazon\_returns
2025-08-17T17:09:53.8417901Z 
2025-08-17T17:09:53.8417975Z <a id="etl.dialects"></a>
2025-08-17T17:09:53.8418105Z 
2025-08-17T17:09:53.8418169Z # etl.dialects
2025-08-17T17:09:53.8418400Z 
2025-08-17T17:09:53.8418472Z <a id="ingest"></a>
2025-08-17T17:09:53.8418575Z 
2025-08-17T17:09:53.8418635Z # ingest
2025-08-17T17:09:53.8418718Z 
2025-08-17T17:09:53.8418802Z <a id="ingest.copy_loader"></a>
2025-08-17T17:09:53.8418938Z 
2025-08-17T17:09:53.8419007Z # ingest.copy\_loader
2025-08-17T17:09:53.8419123Z 
2025-08-17T17:09:53.8419221Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-17T17:09:53.8419404Z 
2025-08-17T17:09:53.8419482Z #### copy\_df\_via\_temp
2025-08-17T17:09:53.8419601Z 
2025-08-17T17:09:53.8419664Z ```python
2025-08-17T17:09:53.8419835Z def copy_df_via_temp(engine: Engine,
2025-08-17T17:09:53.8420067Z                      df: pd.DataFrame,
2025-08-17T17:09:53.8420306Z                      target_table: str,
2025-08-17T17:09:53.8420524Z                      *,
2025-08-17T17:09:53.8420734Z                      target_schema: Optional[str] = None,
2025-08-17T17:09:53.8420992Z                      columns: Sequence[str],
2025-08-17T17:09:53.8421381Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-17T17:09:53.8421677Z                      analyze_after: bool = False) -> int
2025-08-17T17:09:53.8422021Z ```
2025-08-17T17:09:53.8422105Z 
2025-08-17T17:09:53.8422265Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-17T17:09:53.8422523Z 
2025-08-17T17:09:53.8422699Z The dataframe is first written to a TEMP table created ``LIKE`` the target
2025-08-17T17:09:53.8423140Z including defaults and generated columns.  Data is streamed via ``COPY`` and
2025-08-17T17:09:53.8423582Z then inserted into the final table.  If ``conflict_cols`` is provided an
2025-08-17T17:09:53.8423986Z ``INSERT ... ON CONFLICT DO UPDATE`` is issued for the non-conflicting
2025-08-17T17:09:53.8424324Z columns, otherwise rows are simply appended.
2025-08-17T17:09:53.8424497Z 
2025-08-17T17:09:53.8424600Z Returns the number of rows provided in ``df``.
2025-08-17T17:09:53.8424784Z 
2025-08-17T17:09:53.8424868Z <a id="ingest.tests.test_smoke"></a>
2025-08-17T17:09:53.8425035Z 
2025-08-17T17:09:53.8425114Z # ingest.tests.test\_smoke
2025-08-17T17:09:53.8425254Z 
2025-08-17T17:09:53.8425330Z <a id="ingest.tests"></a>
2025-08-17T17:09:53.8425457Z 
2025-08-17T17:09:53.8425529Z # ingest.tests
2025-08-17T17:09:53.8425626Z 
2025-08-17T17:09:53.8425709Z <a id="ingest.upload_router"></a>
2025-08-17T17:09:53.8425863Z 
2025-08-17T17:09:53.8425937Z # ingest.upload\_router
2025-08-17T17:09:53.8426053Z 
2025-08-17T17:09:53.8426139Z <a id="ingest.email_watcher"></a>
2025-08-17T17:09:53.8426279Z 
2025-08-17T17:09:53.8426350Z # ingest.email\_watcher
2025-08-17T17:09:53.8426463Z 
2025-08-17T17:09:53.8426558Z <a id="ingest.email_watcher.main"></a>
2025-08-17T17:09:53.8426718Z 
2025-08-17T17:09:53.8426780Z #### main
2025-08-17T17:09:53.8426875Z 
2025-08-17T17:09:53.8426936Z ```python
2025-08-17T17:09:53.8427102Z def main() -> dict[str, str]
2025-08-17T17:09:53.8427296Z ```
2025-08-17T17:09:53.8427380Z 
2025-08-17T17:09:53.8427522Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-17T17:09:53.8427753Z 
2025-08-17T17:09:53.8427880Z Returns {"status": "success"} when processing completes.
2025-08-17T17:09:53.8428083Z 
2025-08-17T17:09:53.8428163Z <a id="ingest.tasks"></a>
2025-08-17T17:09:53.8428284Z 
2025-08-17T17:09:53.8428348Z # ingest.tasks
2025-08-17T17:09:53.8428454Z 
2025-08-17T17:09:53.8428550Z <a id="ingest.tasks.task_import_file"></a>
2025-08-17T17:09:53.8428720Z 
2025-08-17T17:09:53.8428795Z #### task\_import\_file
2025-08-17T17:09:53.8428909Z 
2025-08-17T17:09:53.8428971Z ```python
2025-08-17T17:09:53.8429179Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-17T17:09:53.8429451Z def task_import_file(self,
2025-08-17T17:09:53.8429649Z                      uri: str,
2025-08-17T17:09:53.8429893Z                      report_type: Optional[str] = None) -> Dict[str, Any]
2025-08-17T17:09:53.8430162Z ```
2025-08-17T17:09:53.8430243Z 
2025-08-17T17:09:53.8430372Z Import a file into Postgres using existing ETL pipeline.
2025-08-17T17:09:53.8430716Z 
2025-08-17T17:09:53.8430796Z <a id="ingest.celery_app"></a>
2025-08-17T17:09:53.8430933Z 
2025-08-17T17:09:53.8431011Z # ingest.celery\_app
2025-08-17T17:09:53.8431126Z 
2025-08-17T17:09:53.8431207Z <a id="ingest.ingest_router"></a>
2025-08-17T17:09:53.8431360Z 
2025-08-17T17:09:53.8431431Z # ingest.ingest\_router
2025-08-17T17:09:53.8431546Z 
2025-08-17T17:09:53.8431619Z <a id="logistics_etl"></a>
2025-08-17T17:09:53.8431746Z 
2025-08-17T17:09:53.8432012Z # logistics\_etl
2025-08-17T17:09:53.8432218Z 
2025-08-17T17:09:53.8432304Z Daily logistics ETL job.
2025-08-17T17:09:53.8432428Z 
2025-08-17T17:09:53.8432509Z <a id="logistics_etl.__main__"></a>
2025-08-17T17:09:53.8432670Z 
2025-08-17T17:09:53.8432744Z # logistics\_etl.\_\_main\_\_
2025-08-17T17:09:53.8432875Z 
2025-08-17T17:09:53.8432953Z <a id="logistics_etl.dsn"></a>
2025-08-17T17:09:53.8433088Z 
2025-08-17T17:09:53.8433154Z # logistics\_etl.dsn
2025-08-17T17:09:53.8433265Z 
2025-08-17T17:09:53.8433387Z Local DSN builder to avoid cross-service dependency.
2025-08-17T17:09:53.8433805Z 
2025-08-17T17:09:53.8433894Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-17T17:09:53.8434061Z 
2025-08-17T17:09:53.8434125Z #### build\_dsn
2025-08-17T17:09:53.8434223Z 
2025-08-17T17:09:53.8434283Z ```python
2025-08-17T17:09:53.8434456Z def build_dsn(sync: bool = True) -> str
2025-08-17T17:09:53.8434668Z ```
2025-08-17T17:09:53.8434753Z 
2025-08-17T17:09:53.8434888Z Return a Postgres DSN assembled from environment variables.
2025-08-17T17:09:53.8435110Z 
2025-08-17T17:09:53.8435260Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-17T17:09:53.8435650Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-17T17:09:53.8435993Z error when any required variable is missing.
2025-08-17T17:09:53.8436166Z 
2025-08-17T17:09:53.8436259Z <a id="logistics_etl.tests.conftest"></a>
2025-08-17T17:09:53.8436434Z 
2025-08-17T17:09:53.8436516Z # logistics\_etl.tests.conftest
2025-08-17T17:09:53.8436659Z 
2025-08-17T17:09:53.8436775Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-17T17:09:53.8436961Z 
2025-08-17T17:09:53.8437049Z # logistics\_etl.tests.test\_repository
2025-08-17T17:09:53.8437216Z 
2025-08-17T17:09:53.8437304Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-17T17:09:53.8437471Z 
2025-08-17T17:09:53.8437552Z # logistics\_etl.tests.test\_cron
2025-08-17T17:09:53.8437718Z 
2025-08-17T17:09:53.8437818Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-17T17:09:53.8437991Z 
2025-08-17T17:09:53.8438074Z # logistics\_etl.tests.test\_imports
2025-08-17T17:09:53.8438227Z 
2025-08-17T17:09:53.8438324Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-17T17:09:53.8438604Z 
2025-08-17T17:09:53.8438767Z # logistics\_etl.tests.test\_smoke
2025-08-17T17:09:53.8439029Z 
2025-08-17T17:09:53.8439124Z <a id="logistics_etl.tests.test_client"></a>
2025-08-17T17:09:53.8439293Z 
2025-08-17T17:09:53.8439380Z # logistics\_etl.tests.test\_client
2025-08-17T17:09:53.8439530Z 
2025-08-17T17:09:53.8439610Z <a id="logistics_etl.tests"></a>
2025-08-17T17:09:53.8439765Z 
2025-08-17T17:09:53.8439841Z # logistics\_etl.tests
2025-08-17T17:09:53.8439958Z 
2025-08-17T17:09:53.8440034Z <a id="logistics_etl.flow"></a>
2025-08-17T17:09:53.8440179Z 
2025-08-17T17:09:53.8440248Z # logistics\_etl.flow
2025-08-17T17:09:53.8440362Z 
2025-08-17T17:09:53.8440449Z <a id="logistics_etl.client"></a>
2025-08-17T17:09:53.8440597Z 
2025-08-17T17:09:53.8440668Z # logistics\_etl.client
2025-08-17T17:09:53.8440784Z 
2025-08-17T17:09:53.8440866Z <a id="logistics_etl.cron"></a>
2025-08-17T17:09:53.8441001Z 
2025-08-17T17:09:53.8441070Z # logistics\_etl.cron
2025-08-17T17:09:53.8441186Z 
2025-08-17T17:09:53.8441262Z <a id="logistics_etl.db"></a>
2025-08-17T17:09:53.8441396Z 
2025-08-17T17:09:53.8441470Z # logistics\_etl.db
2025-08-17T17:09:53.8441577Z 
2025-08-17T17:09:53.8441664Z <a id="logistics_etl.repository"></a>
2025-08-17T17:09:53.8441935Z 
2025-08-17T17:09:53.8442021Z # logistics\_etl.repository
2025-08-17T17:09:53.8442153Z 
2025-08-17T17:09:53.8442228Z <a id="alert_bot"></a>
2025-08-17T17:09:53.8442621Z 
2025-08-17T17:09:53.8442687Z # alert\_bot
2025-08-17T17:09:53.8442783Z 
2025-08-17T17:09:53.8442870Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-17T17:09:53.8443039Z 
2025-08-17T17:09:53.8443118Z # alert\_bot.tests.test\_smoke
2025-08-17T17:09:53.8443257Z 
2025-08-17T17:09:53.8443339Z <a id="alert_bot.tests"></a>
2025-08-17T17:09:53.8443473Z 
2025-08-17T17:09:53.8443540Z # alert\_bot.tests
2025-08-17T17:09:53.8443651Z 
2025-08-17T17:09:53.8443730Z <a id="alert_bot.alert_bot"></a>
2025-08-17T17:09:53.8443868Z 
2025-08-17T17:09:53.8443946Z # alert\_bot.alert\_bot
2025-08-17T17:09:53.8444081Z 
2025-08-17T17:09:53.8444154Z <a id="alert_bot.rules"></a>
2025-08-17T17:09:53.8444307Z 
2025-08-17T17:09:53.8444378Z # alert\_bot.rules
2025-08-17T17:09:53.8444480Z 
2025-08-17T17:09:53.8444545Z <a id="common"></a>
2025-08-17T17:09:53.8444650Z 
2025-08-17T17:09:53.8444716Z # common
2025-08-17T17:09:53.8444802Z 
2025-08-17T17:09:53.8444875Z <a id="common.dsn"></a>
2025-08-17T17:09:53.8445112Z 
2025-08-17T17:09:53.8445174Z # common.dsn
2025-08-17T17:09:53.8445267Z 
2025-08-17T17:09:53.8445352Z <a id="common.dsn.build_dsn"></a>
2025-08-17T17:09:53.8445498Z 
2025-08-17T17:09:53.8445561Z #### build\_dsn
2025-08-17T17:09:53.8445659Z 
2025-08-17T17:09:53.8445726Z ```python
2025-08-17T17:09:53.8445897Z def build_dsn(sync: bool = True) -> str
2025-08-17T17:09:53.8446121Z ```
2025-08-17T17:09:53.8446200Z 
2025-08-17T17:09:53.8446320Z Return a Postgres DSN, validating required variables.
2025-08-17T17:09:53.8446531Z 
2025-08-17T17:09:53.8446712Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-17T17:09:53.8447147Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-17T17:09:53.8447562Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-17T17:09:53.8447872Z missing.
2025-08-17T17:09:53.8447958Z 
2025-08-17T17:09:53.8448039Z <a id="common.models_vendor"></a>
2025-08-17T17:09:53.8448197Z 
2025-08-17T17:09:53.8448273Z # common.models\_vendor
2025-08-17T17:09:53.8448390Z 
2025-08-17T17:09:53.8448479Z <a id="common.models_vendor.Vendor"></a>
2025-08-17T17:09:53.8448652Z 
2025-08-17T17:09:53.8448716Z ## Vendor Objects
2025-08-17T17:09:53.8448820Z 
2025-08-17T17:09:53.8448885Z ```python
2025-08-17T17:09:53.8449036Z class Vendor(Base)
2025-08-17T17:09:53.8449197Z ```
2025-08-17T17:09:53.8449278Z 
2025-08-17T17:09:53.8449353Z Vendor of inventory items.
2025-08-17T17:09:53.8449486Z 
2025-08-17T17:09:53.8449587Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-17T17:09:53.8449766Z 
2025-08-17T17:09:53.8449844Z ## VendorPrice Objects
2025-08-17T17:09:53.8449958Z 
2025-08-17T17:09:53.8450017Z ```python
2025-08-17T17:09:53.8450177Z class VendorPrice(Base)
2025-08-17T17:09:53.8450346Z ```
2025-08-17T17:09:53.8450424Z 
2025-08-17T17:09:53.8450530Z Association table linking vendors to pricing.
2025-08-17T17:09:53.8450710Z 
2025-08-17T17:09:53.8450784Z <a id="common.db_url"></a>
2025-08-17T17:09:53.8450925Z 
2025-08-17T17:09:53.8483763Z # common.db\_url
2025-08-17T17:09:53.8484296Z 
2025-08-17T17:09:53.8484540Z <a id="common.db_url.build_url"></a>
2025-08-17T17:09:53.8484838Z 
2025-08-17T17:09:53.8484951Z #### build\_url
2025-08-17T17:09:53.8485117Z 
2025-08-17T17:09:53.8485216Z ```python
2025-08-17T17:09:53.8485507Z def build_url(async_: bool = True) -> str
2025-08-17T17:09:53.8485912Z ```
2025-08-17T17:09:53.8486042Z 
2025-08-17T17:09:53.8486199Z Return Postgres DSN from env or PG_* parts.
2025-08-17T17:09:53.8486479Z 
2025-08-17T17:09:53.8486601Z <a id="common.keepa"></a>
2025-08-17T17:09:53.8486810Z 
2025-08-17T17:09:53.8486914Z # common.keepa
2025-08-17T17:09:53.8487080Z 
2025-08-17T17:09:53.8487192Z <a id="common.llm"></a>
2025-08-17T17:09:53.8487382Z 
2025-08-17T17:09:53.8487484Z # common.llm
2025-08-17T17:09:53.8487636Z 
2025-08-17T17:09:53.8487759Z <a id="common.settings"></a>
2025-08-17T17:09:53.8487971Z 
2025-08-17T17:09:53.8488074Z # common.settings
2025-08-17T17:09:53.8488232Z 
2025-08-17T17:09:53.8488574Z <a id="common.db"></a>
2025-08-17T17:09:53.8488766Z 
2025-08-17T17:09:53.8488865Z # common.db
2025-08-17T17:09:53.8488998Z 
2025-08-17T17:09:53.8489151Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-17T17:09:53.8489409Z 
2025-08-17T17:09:53.8489522Z #### build\_sqlalchemy\_url
2025-08-17T17:09:53.8489718Z 
2025-08-17T17:09:53.8489820Z ```python
2025-08-17T17:09:53.8490073Z def build_sqlalchemy_url() -> str
2025-08-17T17:09:53.8490406Z ```
2025-08-17T17:09:53.8490534Z 
2025-08-17T17:09:53.8490682Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T17:09:53.8490958Z 
2025-08-17T17:09:53.8491087Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-17T17:09:53.8491343Z 
2025-08-17T17:09:53.8491459Z #### build\_asyncpg\_dsn
2025-08-17T17:09:53.8491651Z 
2025-08-17T17:09:53.8491744Z ```python
2025-08-17T17:09:53.8492189Z def build_asyncpg_dsn() -> str
2025-08-17T17:09:53.8492490Z ```
2025-08-17T17:09:53.8492619Z 
2025-08-17T17:09:53.8492817Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T17:09:53.8493382Z 
2025-08-17T17:09:53.8493509Z <a id="common.db.refresh_mvs"></a>
2025-08-17T17:09:53.8493754Z 
2025-08-17T17:09:53.8493853Z #### refresh\_mvs
2025-08-17T17:09:53.8494008Z 
2025-08-17T17:09:53.8494108Z ```python
2025-08-17T17:09:53.8494408Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T17:09:53.8494786Z ```
2025-08-17T17:09:53.8494905Z 
2025-08-17T17:09:53.8495111Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T17:09:53.8495454Z 
2025-08-17T17:09:53.8495577Z <a id="common.config"></a>
2025-08-17T17:09:53.8495787Z 
2025-08-17T17:09:53.8495898Z # common.config
2025-08-17T17:09:53.8496060Z 
2025-08-17T17:09:53.8496169Z <a id="common.base"></a>
2025-08-17T17:09:53.8496352Z 
2025-08-17T17:09:53.8496455Z # common.base
2025-08-17T17:09:53.8496593Z 
2025-08-17T17:09:53.8496709Z <a id="common.base.Base"></a>
2025-08-17T17:09:53.8496923Z 
2025-08-17T17:09:53.8497014Z ## Base Objects
2025-08-17T17:09:53.8497168Z 
2025-08-17T17:09:53.8497259Z ```python
2025-08-17T17:09:53.8497533Z class Base(DeclarativeBase)
2025-08-17T17:09:53.8497825Z ```
2025-08-17T17:09:53.8497950Z 
2025-08-17T17:09:53.8498072Z Base class for SQLAlchemy models.
2025-08-17T17:09:53.8498302Z 
2025-08-17T17:09:53.8498415Z <a id="repricer"></a>
2025-08-17T17:09:53.8498594Z 
2025-08-17T17:09:53.8498686Z # repricer
2025-08-17T17:09:53.8498827Z 
2025-08-17T17:09:53.8498969Z <a id="repricer.app.schemas"></a>
2025-08-17T17:09:53.8499194Z 
2025-08-17T17:09:53.8499313Z # repricer.app.schemas
2025-08-17T17:09:53.8499491Z 
2025-08-17T17:09:53.8499612Z <a id="repricer.app.deps"></a>
2025-08-17T17:09:53.8499828Z 
2025-08-17T17:09:53.8499948Z # repricer.app.deps
2025-08-17T17:09:53.8500127Z 
2025-08-17T17:09:53.8500293Z Placeholder module for Keepa / SP-API clients.
2025-08-17T17:09:53.8500581Z 
2025-08-17T17:09:53.8500700Z <a id="repricer.app.logic"></a>
2025-08-17T17:09:53.8500915Z 
2025-08-17T17:09:53.8501021Z # repricer.app.logic
2025-08-17T17:09:53.8501199Z 
2025-08-17T17:09:53.8501349Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-17T17:09:53.8501633Z 
2025-08-17T17:09:53.8501733Z #### MIN\_MARGIN
2025-08-17T17:09:53.8502083Z 
2025-08-17T17:09:53.8502176Z 15 % ROI
2025-08-17T17:09:53.8502313Z 
2025-08-17T17:09:53.8502460Z <a id="repricer.app.logic.compute_price"></a>
2025-08-17T17:09:53.8502733Z 
2025-08-17T17:09:53.8502839Z #### compute\_price
2025-08-17T17:09:53.8503002Z 
2025-08-17T17:09:53.8503095Z ```python
2025-08-17T17:09:53.8503460Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-17T17:09:53.8503915Z ```
2025-08-17T17:09:53.8504035Z 
2025-08-17T17:09:53.8504199Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-17T17:09:53.8504654Z Replace with real competitive logic later.
2025-08-17T17:09:53.8504922Z 
2025-08-17T17:09:53.8505038Z <a id="repricer.app.main"></a>
2025-08-17T17:09:53.8505258Z 
2025-08-17T17:09:53.8505365Z # repricer.app.main
2025-08-17T17:09:53.8505541Z 
2025-08-17T17:09:53.8505651Z <a id="repricer.app"></a>
2025-08-17T17:09:53.8506035Z 
2025-08-17T17:09:53.8506141Z # repricer.app
2025-08-17T17:09:53.8506291Z 
2025-08-17T17:09:53.8506426Z <a id="repricer.tests.test_imports"></a>
2025-08-17T17:09:53.8506696Z 
2025-08-17T17:09:53.8506814Z # repricer.tests.test\_imports
2025-08-17T17:09:53.8507024Z 
2025-08-17T17:09:53.8507153Z <a id="repricer.tests.test_smoke"></a>
2025-08-17T17:09:53.8507400Z 
2025-08-17T17:09:53.8507529Z # repricer.tests.test\_smoke
2025-08-17T17:09:53.8507753Z 
2025-08-17T17:09:53.8507876Z <a id="repricer.tests"></a>
2025-08-17T17:09:53.8508130Z 
2025-08-17T17:09:53.8508238Z # repricer.tests
2025-08-17T17:09:53.8508403Z 
2025-08-17T17:09:53.8508500Z <a id="db"></a>
2025-08-17T17:09:53.8508663Z 
2025-08-17T17:09:53.8508752Z # db
2025-08-17T17:09:53.8508872Z 
2025-08-17T17:09:53.8508987Z <a id="db.utils.views"></a>
2025-08-17T17:09:53.8509200Z 
2025-08-17T17:09:53.8509314Z # db.utils.views
2025-08-17T17:09:53.8509469Z 
2025-08-17T17:09:53.8509616Z <a id="db.utils.views.replace_view"></a>
2025-08-17T17:09:53.8510052Z 
2025-08-17T17:09:53.8510163Z #### replace\_view
2025-08-17T17:09:53.8510333Z 
2025-08-17T17:09:53.8510426Z ```python
2025-08-17T17:09:53.8510718Z def replace_view(name: str, new_sql: str) -> None
2025-08-17T17:09:53.8511100Z ```
2025-08-17T17:09:53.8511224Z 
2025-08-17T17:09:53.8511371Z Drop and recreate a SQL view atomically.
2025-08-17T17:09:53.8511629Z 
2025-08-17T17:09:53.8511735Z <a id="db.utils"></a>
2025-08-17T17:09:53.8512082Z 
2025-08-17T17:09:53.8512188Z # db.utils
2025-08-17T17:09:53.8512327Z 
2025-08-17T17:09:53.8512446Z <a id="price_importer"></a>
2025-08-17T17:09:53.8512653Z 
2025-08-17T17:09:53.8512754Z # price\_importer
2025-08-17T17:09:53.8512915Z 
2025-08-17T17:09:53.8513072Z <a id="price_importer.services_common.dsn"></a>
2025-08-17T17:09:53.8513366Z 
2025-08-17T17:09:53.8513497Z # price\_importer.services\_common.dsn
2025-08-17T17:09:53.8513744Z 
2025-08-17T17:09:53.8513935Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-17T17:09:53.8514243Z 
2025-08-17T17:09:53.8514348Z #### build\_dsn
2025-08-17T17:09:53.8514509Z 
2025-08-17T17:09:53.8514600Z ```python
2025-08-17T17:09:53.8514855Z def build_dsn(sync: bool = True) -> str
2025-08-17T17:09:53.8515193Z ```
2025-08-17T17:09:53.8515315Z 
2025-08-17T17:09:53.8515418Z Return safe DSN.
2025-08-17T17:09:53.8515570Z 
2025-08-17T17:09:53.8516017Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-17T17:09:53.8516333Z 
2025-08-17T17:09:53.8516530Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-17T17:09:53.8516855Z 
2025-08-17T17:09:53.8517019Z # price\_importer.services\_common.models\_vendor
2025-08-17T17:09:53.8517315Z 
2025-08-17T17:09:53.8517477Z <a id="price_importer.services_common.db_url"></a>
2025-08-17T17:09:53.8517765Z 
2025-08-17T17:09:53.8517917Z # price\_importer.services\_common.db\_url
2025-08-17T17:09:53.8518188Z 
2025-08-17T17:09:53.8518392Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-17T17:09:53.8518741Z 
2025-08-17T17:09:53.8518842Z #### build\_url
2025-08-17T17:09:53.8519016Z 
2025-08-17T17:09:53.8519109Z ```python
2025-08-17T17:09:53.8519376Z def build_url(async_: bool = True) -> str
2025-08-17T17:09:53.8519722Z ```
2025-08-17T17:09:53.8519857Z 
2025-08-17T17:09:53.8520008Z Return Postgres DSN from env or PG_* parts.
2025-08-17T17:09:53.8520283Z 
2025-08-17T17:09:53.8520460Z <a id="price_importer.services_common.keepa"></a>
2025-08-17T17:09:53.8520749Z 
2025-08-17T17:09:53.8520921Z # price\_importer.services\_common.keepa
2025-08-17T17:09:53.8521199Z 
2025-08-17T17:09:53.8521372Z <a id="price_importer.services_common.llm"></a>
2025-08-17T17:09:53.8521650Z 
2025-08-17T17:09:53.8521941Z # price\_importer.services\_common.llm
2025-08-17T17:09:53.8522208Z 
2025-08-17T17:09:53.8522381Z <a id="price_importer.services_common.settings"></a>
2025-08-17T17:09:53.8522686Z 
2025-08-17T17:09:53.8522835Z # price\_importer.services\_common.settings
2025-08-17T17:09:53.8523104Z 
2025-08-17T17:09:53.8523259Z <a id="price_importer.services_common.db"></a>
2025-08-17T17:09:53.8523549Z 
2025-08-17T17:09:53.8523859Z # price\_importer.services\_common.db
2025-08-17T17:09:53.8524113Z 
2025-08-17T17:09:53.8524360Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-17T17:09:53.8524741Z 
2025-08-17T17:09:53.8524857Z #### build\_sqlalchemy\_url
2025-08-17T17:09:53.8525063Z 
2025-08-17T17:09:53.8525165Z ```python
2025-08-17T17:09:53.8525414Z def build_sqlalchemy_url() -> str
2025-08-17T17:09:53.8525738Z ```
2025-08-17T17:09:53.8525866Z 
2025-08-17T17:09:53.8526008Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T17:09:53.8526293Z 
2025-08-17T17:09:53.8526518Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-17T17:09:53.8526866Z 
2025-08-17T17:09:53.8526985Z #### build\_asyncpg\_dsn
2025-08-17T17:09:53.8527170Z 
2025-08-17T17:09:53.8527264Z ```python
2025-08-17T17:09:53.8527523Z def build_asyncpg_dsn() -> str
2025-08-17T17:09:53.8527818Z ```
2025-08-17T17:09:53.8527952Z 
2025-08-17T17:09:53.8528148Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T17:09:53.8528658Z 
2025-08-17T17:09:53.8528856Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-17T17:09:53.8529183Z 
2025-08-17T17:09:53.8529284Z #### refresh\_mvs
2025-08-17T17:09:53.8529448Z 
2025-08-17T17:09:53.8529555Z ```python
2025-08-17T17:09:53.8529872Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T17:09:53.8530258Z ```
2025-08-17T17:09:53.8530383Z 
2025-08-17T17:09:53.8530593Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T17:09:53.8530936Z 
2025-08-17T17:09:53.8531082Z <a id="price_importer.services_common"></a>
2025-08-17T17:09:53.8531349Z 
2025-08-17T17:09:53.8531486Z # price\_importer.services\_common
2025-08-17T17:09:53.8531727Z 
2025-08-17T17:09:53.8532036Z <a id="price_importer.services_common.base"></a>
2025-08-17T17:09:53.8532336Z 
2025-08-17T17:09:53.8532478Z # price\_importer.services\_common.base
2025-08-17T17:09:53.8532737Z 
2025-08-17T17:09:53.8532876Z <a id="price_importer.normaliser"></a>
2025-08-17T17:09:53.8533147Z 
2025-08-17T17:09:53.8533276Z # price\_importer.normaliser
2025-08-17T17:09:53.8533491Z 
2025-08-17T17:09:53.8533661Z <a id="price_importer.common.models_vendor"></a>
2025-08-17T17:09:53.8533955Z 
2025-08-17T17:09:53.8534088Z # price\_importer.common.models\_vendor
2025-08-17T17:09:53.8534332Z 
2025-08-17T17:09:53.8534477Z <a id="price_importer.common.db_url"></a>
2025-08-17T17:09:53.8534732Z 
2025-08-17T17:09:53.8534855Z # price\_importer.common.db\_url
2025-08-17T17:09:53.8535088Z 
2025-08-17T17:09:53.8535250Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-17T17:09:53.8535535Z 
2025-08-17T17:09:53.8535636Z #### make\_dsn
2025-08-17T17:09:53.8535789Z 
2025-08-17T17:09:53.8535884Z ```python
2025-08-17T17:09:53.8536153Z def make_dsn(async_: bool = False) -> str
2025-08-17T17:09:53.8536494Z ```
2025-08-17T17:09:53.8536622Z 
2025-08-17T17:09:53.8536791Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-17T17:09:53.8537097Z 
2025-08-17T17:09:53.8537258Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-17T17:09:53.8537568Z 
2025-08-17T17:09:53.8537665Z #### build\_url
2025-08-17T17:09:53.8537812Z 
2025-08-17T17:09:53.8537908Z ```python
2025-08-17T17:09:53.8538166Z def build_url(async_: bool = False) -> str
2025-08-17T17:09:53.8538521Z ```
2025-08-17T17:09:53.8538645Z 
2025-08-17T17:09:53.8538827Z Return Postgres DSN built from environment variables.
2025-08-17T17:09:53.8539148Z 
2025-08-17T17:09:53.8539279Z <a id="price_importer.common"></a>
2025-08-17T17:09:53.8539527Z 
2025-08-17T17:09:53.8539649Z # price\_importer.common
2025-08-17T17:09:53.8539860Z 
2025-08-17T17:09:53.8540048Z <a id="price_importer.common.base"></a>
2025-08-17T17:09:53.8540313Z 
2025-08-17T17:09:53.8540447Z # price\_importer.common.base
2025-08-17T17:09:53.8540672Z 
2025-08-17T17:09:53.8540828Z <a id="price_importer.tests.conftest"></a>
2025-08-17T17:09:53.8541103Z 
2025-08-17T17:09:53.8541228Z # price\_importer.tests.conftest
2025-08-17T17:09:53.8541451Z 
2025-08-17T17:09:53.8541602Z <a id="price_importer.tests.test_reader"></a>
2025-08-17T17:09:53.8542262Z 
2025-08-17T17:09:53.8542397Z # price\_importer.tests.test\_reader
2025-08-17T17:09:53.8542646Z 
2025-08-17T17:09:53.8542803Z <a id="price_importer.tests.test_imports"></a>
2025-08-17T17:09:53.8543076Z 
2025-08-17T17:09:53.8543206Z # price\_importer.tests.test\_imports
2025-08-17T17:09:53.8543450Z 
2025-08-17T17:09:53.8543593Z <a id="price_importer.tests.test_smoke"></a>
2025-08-17T17:09:53.8543859Z 
2025-08-17T17:09:53.8543984Z # price\_importer.tests.test\_smoke
2025-08-17T17:09:53.8544234Z 
2025-08-17T17:09:53.8544404Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-17T17:09:53.8544698Z 
2025-08-17T17:09:53.8544842Z # price\_importer.tests.test\_normaliser
2025-08-17T17:09:53.8545110Z 
2025-08-17T17:09:53.8545237Z <a id="price_importer.tests"></a>
2025-08-17T17:09:53.8545485Z 
2025-08-17T17:09:53.8545601Z # price\_importer.tests
2025-08-17T17:09:53.8545799Z 
2025-08-17T17:09:53.8545936Z <a id="price_importer.reader"></a>
2025-08-17T17:09:53.8546380Z 
2025-08-17T17:09:53.8546511Z # price\_importer.reader
2025-08-17T17:09:53.8546730Z 
2025-08-17T17:09:53.8546886Z <a id="price_importer.repository"></a>
2025-08-17T17:09:53.8547165Z 
2025-08-17T17:09:53.8547300Z # price\_importer.repository
2025-08-17T17:09:53.8547549Z 
2025-08-17T17:09:53.8547688Z <a id="price_importer.import"></a>
2025-08-17T17:09:53.8547945Z 
2025-08-17T17:09:53.8548068Z # price\_importer.import
2025-08-17T17:09:53.8548285Z 
2025-08-17T17:09:53.8548400Z <a id="fees_h10"></a>
2025-08-17T17:09:53.8548589Z 
2025-08-17T17:09:53.8548696Z # fees\_h10
2025-08-17T17:09:53.8548841Z 
2025-08-17T17:09:53.8548965Z <a id="fees_h10.worker"></a>
2025-08-17T17:09:53.8549196Z 
2025-08-17T17:09:53.8549301Z # fees\_h10.worker
2025-08-17T17:09:53.8549471Z 
2025-08-17T17:09:53.8549630Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-17T17:09:53.8549931Z 
2025-08-17T17:09:53.8550046Z #### list\_active\_asins
2025-08-17T17:09:53.8550247Z 
2025-08-17T17:09:53.8550353Z ```python
2025-08-17T17:09:53.8550643Z def list_active_asins() -> list[str]
2025-08-17T17:09:53.8550992Z ```
2025-08-17T17:09:53.8551122Z 
2025-08-17T17:09:53.8551304Z Return known ASINs or an empty list if unavailable.
2025-08-17T17:09:53.8551626Z 
2025-08-17T17:09:53.8551931Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-17T17:09:53.8552197Z 
2025-08-17T17:09:53.8552321Z # fees\_h10.tests.test\_smoke
2025-08-17T17:09:53.8552546Z 
2025-08-17T17:09:53.8552664Z <a id="fees_h10.tests"></a>
2025-08-17T17:09:53.8552869Z 
2025-08-17T17:09:53.8552978Z # fees\_h10.tests
2025-08-17T17:09:53.8553144Z 
2025-08-17T17:09:53.8553262Z <a id="fees_h10.client"></a>
2025-08-17T17:09:53.8553485Z 
2025-08-17T17:09:53.8553596Z # fees\_h10.client
2025-08-17T17:09:53.8553770Z 
2025-08-17T17:09:53.8553895Z <a id="fees_h10.repository"></a>
2025-08-17T17:09:53.8554133Z 
2025-08-17T17:09:53.8554247Z # fees\_h10.repository
2025-08-17T17:09:53.8554439Z 
2025-08-17T17:09:53.8554552Z <a id="emailer"></a>
2025-08-17T17:09:53.8554735Z 
2025-08-17T17:09:53.8554841Z # emailer
2025-08-17T17:09:53.8554993Z 
2025-08-17T17:09:53.8555167Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-17T17:09:53.8555468Z 
2025-08-17T17:09:53.8555616Z # emailer.tests.test\_import\_emailer
2025-08-17T17:09:53.8555885Z 
2025-08-17T17:09:53.8556025Z <a id="emailer.tests.test_smoke"></a>
2025-08-17T17:09:53.8556291Z 
2025-08-17T17:09:53.8556426Z # emailer.tests.test\_smoke
2025-08-17T17:09:53.8556697Z 
2025-08-17T17:09:53.8556819Z <a id="emailer.tests"></a>
2025-08-17T17:09:53.8557028Z 
2025-08-17T17:09:53.8557141Z # emailer.tests
2025-08-17T17:09:53.8557305Z 
2025-08-17T17:09:53.8557443Z <a id="emailer.generate_body"></a>
2025-08-17T17:09:53.8557710Z 
2025-08-17T17:09:53.8557834Z # emailer.generate\_body
2025-08-17T17:09:53.8558040Z 
2025-08-17T17:09:53.8558167Z <a id="llm_server"></a>
2025-08-17T17:09:53.8558359Z 
2025-08-17T17:09:53.8558461Z # llm\_server
2025-08-17T17:09:53.8558623Z 
2025-08-17T17:09:53.8558753Z <a id="llm_server.app"></a>
2025-08-17T17:09:53.8558978Z 
2025-08-17T17:09:53.8559274Z # llm\_server.app
2025-08-17T17:09:53.8559469Z 
