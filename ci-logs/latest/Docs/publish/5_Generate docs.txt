2025-08-17T21:47:48.7549152Z ##[group]Run pydoc-markdown
2025-08-17T21:47:48.7549459Z [36;1mpydoc-markdown[0m
2025-08-17T21:47:48.7590469Z shell: /usr/bin/bash -e {0}
2025-08-17T21:47:48.7590705Z env:
2025-08-17T21:47:48.7590935Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T21:47:48.7591338Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-17T21:47:48.7591719Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T21:47:48.7592050Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T21:47:48.7592386Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T21:47:48.7592721Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-17T21:47:48.7593001Z ##[endgroup]
2025-08-17T21:47:49.1512243Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-17T21:47:49.1513035Z Unknown key(s) "{'output_directory'}" at:
2025-08-17T21:47:49.1513724Z In "pydoc-markdown.yml"
2025-08-17T21:47:49.1514131Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-17T21:47:49.1514805Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-17T21:47:49.1515531Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-17T21:47:49.1516038Z 
2025-08-17T21:47:49.4354157Z <a id="__init__"></a>
2025-08-17T21:47:49.4354607Z 
2025-08-17T21:47:49.4354745Z # \_\_init\_\_
2025-08-17T21:47:49.4354967Z 
2025-08-17T21:47:49.4355104Z <a id="api"></a>
2025-08-17T21:47:49.4355318Z 
2025-08-17T21:47:49.4355452Z # api
2025-08-17T21:47:49.4355624Z 
2025-08-17T21:47:49.4355793Z <a id="api.tests.test_llm"></a>
2025-08-17T21:47:49.4356086Z 
2025-08-17T21:47:49.4356193Z # api.tests.test\_llm
2025-08-17T21:47:49.4356353Z 
2025-08-17T21:47:49.4356466Z <a id="api.tests.test_imports"></a>
2025-08-17T21:47:49.4356680Z 
2025-08-17T21:47:49.4356779Z # api.tests.test\_imports
2025-08-17T21:47:49.4356944Z 
2025-08-17T21:47:49.4357062Z <a id="api.tests.test_entrypoint"></a>
2025-08-17T21:47:49.4357269Z 
2025-08-17T21:47:49.4357368Z # api.tests.test\_entrypoint
2025-08-17T21:47:49.4357577Z 
2025-08-17T21:47:49.4357684Z <a id="api.tests.test_health"></a>
2025-08-17T21:47:49.4357868Z 
2025-08-17T21:47:49.4357961Z # api.tests.test\_health
2025-08-17T21:47:49.4358130Z 
2025-08-17T21:47:49.4358230Z <a id="api.migrations.env"></a>
2025-08-17T21:47:49.4358402Z 
2025-08-17T21:47:49.4358496Z # api.migrations.env
2025-08-17T21:47:49.4358637Z 
2025-08-17T21:47:49.4358782Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-17T21:47:49.4359037Z 
2025-08-17T21:47:49.4359182Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-17T21:47:49.4359408Z 
2025-08-17T21:47:49.4359543Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-17T21:47:49.4359778Z 
2025-08-17T21:47:49.4359893Z # api.migrations.versions.0004\_fee\_cron
2025-08-17T21:47:49.4360100Z 
2025-08-17T21:47:49.4360293Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-17T21:47:49.4360575Z 
2025-08-17T21:47:49.4360737Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-17T21:47:49.4361384Z 
2025-08-17T21:47:49.4361534Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-17T21:47:49.4361790Z 
2025-08-17T21:47:49.4361922Z # api.migrations.versions.0003\_vendor\_prices
2025-08-17T21:47:49.4362149Z 
2025-08-17T21:47:49.4362293Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-17T21:47:49.4362527Z 
2025-08-17T21:47:49.4362656Z # api.migrations.versions.0024\_create\_buybox
2025-08-17T21:47:49.4362869Z 
2025-08-17T21:47:49.4363017Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-17T21:47:49.4363456Z 
2025-08-17T21:47:49.4363588Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-17T21:47:49.4363815Z 
2025-08-17T21:47:49.4363950Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-17T21:47:49.4364185Z 
2025-08-17T21:47:49.4364312Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-17T21:47:49.4364545Z 
2025-08-17T21:47:49.4364689Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-17T21:47:49.4365110Z 
2025-08-17T21:47:49.4365213Z # api.migrations.versions.0020\_unified\_schema
2025-08-17T21:47:49.4365397Z 
2025-08-17T21:47:49.4365529Z <a id="api.migrations.versions.0025_pr4_indexes_loadlog"></a>
2025-08-17T21:47:49.4365744Z 
2025-08-17T21:47:49.4365860Z # api.migrations.versions.0025\_pr4\_indexes\_loadlog
2025-08-17T21:47:49.4366057Z 
2025-08-17T21:47:49.4366174Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-17T21:47:49.4366369Z 
2025-08-17T21:47:49.4366478Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-17T21:47:49.4366661Z 
2025-08-17T21:47:49.4366793Z <a id="api.migrations.versions.0026_amazon_new_reports"></a>
2025-08-17T21:47:49.4367013Z 
2025-08-17T21:47:49.4367125Z # api.migrations.versions.0026\_amazon\_new\_reports
2025-08-17T21:47:49.4367315Z 
2025-08-17T21:47:49.4367427Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-17T21:47:49.4367613Z 
2025-08-17T21:47:49.4367704Z # api.migrations.versions.0001\_baseline
2025-08-17T21:47:49.4367878Z 
2025-08-17T21:47:49.4367974Z <a id="api.migrations.versions"></a>
2025-08-17T21:47:49.4368132Z 
2025-08-17T21:47:49.4368212Z # api.migrations.versions
2025-08-17T21:47:49.4368346Z 
2025-08-17T21:47:49.4368427Z <a id="api.migrations"></a>
2025-08-17T21:47:49.4368561Z 
2025-08-17T21:47:49.4368633Z # api.migrations
2025-08-17T21:47:49.4368740Z 
2025-08-17T21:47:49.4368806Z <a id="api.db"></a>
2025-08-17T21:47:49.4368911Z 
2025-08-17T21:47:49.4368980Z # api.db
2025-08-17T21:47:49.4369067Z 
2025-08-17T21:47:49.4369147Z <a id="api.routes.stats"></a>
2025-08-17T21:47:49.4369288Z 
2025-08-17T21:47:49.4369357Z # api.routes.stats
2025-08-17T21:47:49.4369461Z 
2025-08-17T21:47:49.4369546Z <a id="api.routes.stats.kpi"></a>
2025-08-17T21:47:49.4369701Z 
2025-08-17T21:47:49.4369763Z #### kpi
2025-08-17T21:47:49.4369851Z 
2025-08-17T21:47:49.4369922Z ```python
2025-08-17T21:47:49.4370088Z @router.get("/stats/kpi")
2025-08-17T21:47:49.4370328Z def kpi() -> List[Dict[str, int]]
2025-08-17T21:47:49.4370533Z ```
2025-08-17T21:47:49.4370627Z 
2025-08-17T21:47:49.4370705Z Return KPI metrics (mock).
2025-08-17T21:47:49.4370832Z 
2025-08-17T21:47:49.4370930Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-17T21:47:49.4371112Z 
2025-08-17T21:47:49.4371180Z #### roi\_by\_vendor
2025-08-17T21:47:49.4371290Z 
2025-08-17T21:47:49.4371359Z ```python
2025-08-17T21:47:49.4371526Z @router.get("/stats/roi_by_vendor")
2025-08-17T21:47:49.4371782Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-17T21:47:49.4372006Z ```
2025-08-17T21:47:49.4372092Z 
2025-08-17T21:47:49.4372173Z Return ROI percent by vendor.
2025-08-17T21:47:49.4372311Z 
2025-08-17T21:47:49.4372399Z <a id="api.routes.stats.roi_trend"></a>
2025-08-17T21:47:49.4372571Z 
2025-08-17T21:47:49.4372635Z #### roi\_trend
2025-08-17T21:47:49.4372734Z 
2025-08-17T21:47:49.4372802Z ```python
2025-08-17T21:47:49.4372967Z @router.get("/stats/roi_trend")
2025-08-17T21:47:49.4373345Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-17T21:47:49.4373606Z ```
2025-08-17T21:47:49.4373928Z 
2025-08-17T21:47:49.4374002Z Return 30-day ROI trend.
2025-08-17T21:47:49.4374130Z 
2025-08-17T21:47:49.4374213Z <a id="api.routes.roi"></a>
2025-08-17T21:47:49.4374345Z 
2025-08-17T21:47:49.4374412Z # api.routes.roi
2025-08-17T21:47:49.4374521Z 
2025-08-17T21:47:49.4374602Z <a id="api.routes.health"></a>
2025-08-17T21:47:49.4374741Z 
2025-08-17T21:47:49.4374809Z # api.routes.health
2025-08-17T21:47:49.4374925Z 
2025-08-17T21:47:49.4375015Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-17T21:47:49.4375177Z 
2025-08-17T21:47:49.4375245Z #### MAX\_SKEW
2025-08-17T21:47:49.4375342Z 
2025-08-17T21:47:49.4375402Z seconds
2025-08-17T21:47:49.4375490Z 
2025-08-17T21:47:49.4375580Z <a id="api.routes.health.health"></a>
2025-08-17T21:47:49.4375740Z 
2025-08-17T21:47:49.4375801Z #### health
2025-08-17T21:47:49.4375894Z 
2025-08-17T21:47:49.4375955Z ```python
2025-08-17T21:47:49.4376151Z @router.get("/health", include_in_schema=False)
2025-08-17T21:47:49.4376518Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-17T21:47:49.4376996Z ```
2025-08-17T21:47:49.4377087Z 
2025-08-17T21:47:49.4377200Z Return 200 when DB reachable and clocks are in sync.
2025-08-17T21:47:49.4377397Z 
2025-08-17T21:47:49.4377485Z <a id="api.routes.repository"></a>
2025-08-17T21:47:49.4377636Z 
2025-08-17T21:47:49.4377713Z # api.routes.repository
2025-08-17T21:47:49.4377837Z 
2025-08-17T21:47:49.4377907Z <a id="api.routes"></a>
2025-08-17T21:47:49.4378019Z 
2025-08-17T21:47:49.4378086Z # api.routes
2025-08-17T21:47:49.4378180Z 
2025-08-17T21:47:49.4378255Z <a id="api.models.fee"></a>
2025-08-17T21:47:49.4378389Z 
2025-08-17T21:47:49.4378454Z # api.models.fee
2025-08-17T21:47:49.4378555Z 
2025-08-17T21:47:49.4378626Z <a id="api.models"></a>
2025-08-17T21:47:49.4378742Z 
2025-08-17T21:47:49.4378806Z # api.models
2025-08-17T21:47:49.4378895Z 
2025-08-17T21:47:49.4378978Z <a id="api.roi_repository"></a>
2025-08-17T21:47:49.4379114Z 
2025-08-17T21:47:49.4379183Z # api.roi\_repository
2025-08-17T21:47:49.4379300Z 
2025-08-17T21:47:49.4379373Z <a id="api.main"></a>
2025-08-17T21:47:49.4379481Z 
2025-08-17T21:47:49.4379543Z # api.main
2025-08-17T21:47:49.4379640Z 
2025-08-17T21:47:49.4379713Z <a id="api.main.ready"></a>
2025-08-17T21:47:49.4379839Z 
2025-08-17T21:47:49.4379904Z #### ready
2025-08-17T21:47:49.4379989Z 
2025-08-17T21:47:49.4380049Z ```python
2025-08-17T21:47:49.4380302Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-17T21:47:49.4380720Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-17T21:47:49.4381060Z                                                                       str]
2025-08-17T21:47:49.4381279Z ```
2025-08-17T21:47:49.4381363Z 
2025-08-17T21:47:49.4381454Z Return 200 only when migrations are at head.
2025-08-17T21:47:49.4381623Z 
2025-08-17T21:47:49.4381698Z <a id="api.config"></a>
2025-08-17T21:47:49.4381813Z 
2025-08-17T21:47:49.4381876Z # api.config
2025-08-17T21:47:49.4381965Z 
2025-08-17T21:47:49.4382041Z <a id="etl"></a>
2025-08-17T21:47:49.4382140Z 
2025-08-17T21:47:49.4382200Z # etl
2025-08-17T21:47:49.4382288Z 
2025-08-17T21:47:49.4382366Z <a id="etl.fba_fee_ingestor"></a>
2025-08-17T21:47:49.4382512Z 
2025-08-17T21:47:49.4382583Z # etl.fba\_fee\_ingestor
2025-08-17T21:47:49.4382709Z 
2025-08-17T21:47:49.4382787Z <a id="etl.sp_fees_ingestor"></a>
2025-08-17T21:47:49.4382926Z 
2025-08-17T21:47:49.4383002Z # etl.sp\_fees\_ingestor
2025-08-17T21:47:49.4383222Z 
2025-08-17T21:47:49.4383304Z <a id="etl.keepa_ingestor"></a>
2025-08-17T21:47:49.4383444Z 
2025-08-17T21:47:49.4383511Z # etl.keepa\_ingestor
2025-08-17T21:47:49.4383620Z 
2025-08-17T21:47:49.4383683Z <a id="etl.db"></a>
2025-08-17T21:47:49.4383793Z 
2025-08-17T21:47:49.4383855Z # etl.db
2025-08-17T21:47:49.4383939Z 
2025-08-17T21:47:49.4384027Z <a id="etl.dialects.schemas"></a>
2025-08-17T21:47:49.4384173Z 
2025-08-17T21:47:49.4384245Z # etl.dialects.schemas
2025-08-17T21:47:49.4384368Z 
2025-08-17T21:47:49.4384475Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-17T21:47:49.4384792Z 
2025-08-17T21:47:49.4384881Z # etl.dialects.amazon\_reimbursements
2025-08-17T21:47:49.4385047Z 
2025-08-17T21:47:49.4385139Z <a id="etl.dialects.amazon_ads_sp_cost"></a>
2025-08-17T21:47:49.4385307Z 
2025-08-17T21:47:49.4385396Z # etl.dialects.amazon\_ads\_sp\_cost
2025-08-17T21:47:49.4385549Z 
2025-08-17T21:47:49.4385643Z <a id="etl.dialects.amazon_returns"></a>
2025-08-17T21:47:49.4385807Z 
2025-08-17T21:47:49.4385886Z # etl.dialects.amazon\_returns
2025-08-17T21:47:49.4386029Z 
2025-08-17T21:47:49.4386121Z <a id="etl.dialects.amazon_fee_preview"></a>
2025-08-17T21:47:49.4386286Z 
2025-08-17T21:47:49.4386376Z # etl.dialects.amazon\_fee\_preview
2025-08-17T21:47:49.4386525Z 
2025-08-17T21:47:49.4386630Z <a id="etl.dialects.amazon_inventory_ledger"></a>
2025-08-17T21:47:49.4386818Z 
2025-08-17T21:47:49.4386906Z # etl.dialects.amazon\_inventory\_ledger
2025-08-17T21:47:49.4387066Z 
2025-08-17T21:47:49.4387157Z <a id="etl.dialects.amazon_settlements"></a>
2025-08-17T21:47:49.4387446Z 
2025-08-17T21:47:49.4387531Z # etl.dialects.amazon\_settlements
2025-08-17T21:47:49.4387679Z 
2025-08-17T21:47:49.4387759Z <a id="etl.dialects"></a>
2025-08-17T21:47:49.4387882Z 
2025-08-17T21:47:49.4387946Z # etl.dialects
2025-08-17T21:47:49.4388047Z 
2025-08-17T21:47:49.4388111Z <a id="ingest"></a>
2025-08-17T21:47:49.4388216Z 
2025-08-17T21:47:49.4388275Z # ingest
2025-08-17T21:47:49.4388365Z 
2025-08-17T21:47:49.4388446Z <a id="ingest.maintenance"></a>
2025-08-17T21:47:49.4388584Z 
2025-08-17T21:47:49.4388659Z # ingest.maintenance
2025-08-17T21:47:49.4388768Z 
2025-08-17T21:47:49.4388843Z <a id="ingest.copy_loader"></a>
2025-08-17T21:47:49.4388983Z 
2025-08-17T21:47:49.4389052Z # ingest.copy\_loader
2025-08-17T21:47:49.4389162Z 
2025-08-17T21:47:49.4389261Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-17T21:47:49.4389443Z 
2025-08-17T21:47:49.4389514Z #### copy\_df\_via\_temp
2025-08-17T21:47:49.4389633Z 
2025-08-17T21:47:49.4389700Z ```python
2025-08-17T21:47:49.4389871Z def copy_df_via_temp(engine: Engine,
2025-08-17T21:47:49.4390109Z                      df: pd.DataFrame,
2025-08-17T21:47:49.4390332Z                      target_table: str,
2025-08-17T21:47:49.4390552Z                      *,
2025-08-17T21:47:49.4390753Z                      target_schema: Optional[str] = None,
2025-08-17T21:47:49.4391012Z                      columns: Sequence[str],
2025-08-17T21:47:49.4391271Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-17T21:47:49.4391548Z                      analyze_after: bool = False,
2025-08-17T21:47:49.4391805Z                      connection: Any | None = None) -> int
2025-08-17T21:47:49.4392032Z ```
2025-08-17T21:47:49.4392115Z 
2025-08-17T21:47:49.4392270Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-17T21:47:49.4392496Z 
2025-08-17T21:47:49.4392583Z <a id="ingest.tests.test_smoke"></a>
2025-08-17T21:47:49.4392747Z 
2025-08-17T21:47:49.4392824Z # ingest.tests.test\_smoke
2025-08-17T21:47:49.4392955Z 
2025-08-17T21:47:49.4393157Z <a id="ingest.tests"></a>
2025-08-17T21:47:49.4393287Z 
2025-08-17T21:47:49.4393351Z # ingest.tests
2025-08-17T21:47:49.4393449Z 
2025-08-17T21:47:49.4393541Z <a id="ingest.upload_router"></a>
2025-08-17T21:47:49.4393683Z 
2025-08-17T21:47:49.4393755Z # ingest.upload\_router
2025-08-17T21:47:49.4393877Z 
2025-08-17T21:47:49.4393955Z <a id="ingest.email_watcher"></a>
2025-08-17T21:47:49.4394096Z 
2025-08-17T21:47:49.4394171Z # ingest.email\_watcher
2025-08-17T21:47:49.4394284Z 
2025-08-17T21:47:49.4394371Z <a id="ingest.email_watcher.main"></a>
2025-08-17T21:47:49.4394530Z 
2025-08-17T21:47:49.4394604Z #### main
2025-08-17T21:47:49.4394690Z 
2025-08-17T21:47:49.4394753Z ```python
2025-08-17T21:47:49.4394925Z def main() -> dict[str, str]
2025-08-17T21:47:49.4395114Z ```
2025-08-17T21:47:49.4395205Z 
2025-08-17T21:47:49.4395341Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-17T21:47:49.4395562Z 
2025-08-17T21:47:49.4395695Z Returns {"status": "success"} when processing completes.
2025-08-17T21:47:49.4396031Z 
2025-08-17T21:47:49.4396139Z <a id="ingest.tasks"></a>
2025-08-17T21:47:49.4396262Z 
2025-08-17T21:47:49.4396327Z # ingest.tasks
2025-08-17T21:47:49.4396434Z 
2025-08-17T21:47:49.4396528Z <a id="ingest.tasks.task_import_file"></a>
2025-08-17T21:47:49.4396698Z 
2025-08-17T21:47:49.4396769Z #### task\_import\_file
2025-08-17T21:47:49.4396891Z 
2025-08-17T21:47:49.4396952Z ```python
2025-08-17T21:47:49.4397156Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-17T21:47:49.4397425Z def task_import_file(self,
2025-08-17T21:47:49.4397622Z                      uri: str,
2025-08-17T21:47:49.4397831Z                      report_type: Optional[str] = None,
2025-08-17T21:47:49.4398129Z                      force: bool = False) -> Dict[str, Any]
2025-08-17T21:47:49.4398355Z ```
2025-08-17T21:47:49.4398442Z 
2025-08-17T21:47:49.4398567Z Import a file into Postgres using existing ETL pipeline.
2025-08-17T21:47:49.4398768Z 
2025-08-17T21:47:49.4398853Z <a id="ingest.celery_app"></a>
2025-08-17T21:47:49.4399111Z 
2025-08-17T21:47:49.4399181Z # ingest.celery\_app
2025-08-17T21:47:49.4399298Z 
2025-08-17T21:47:49.4399379Z <a id="ingest.ingest_router"></a>
2025-08-17T21:47:49.4399522Z 
2025-08-17T21:47:49.4399593Z # ingest.ingest\_router
2025-08-17T21:47:49.4399710Z 
2025-08-17T21:47:49.4399785Z <a id="logistics_etl"></a>
2025-08-17T21:47:49.4399907Z 
2025-08-17T21:47:49.4399980Z # logistics\_etl
2025-08-17T21:47:49.4400082Z 
2025-08-17T21:47:49.4400156Z Daily logistics ETL job.
2025-08-17T21:47:49.4400275Z 
2025-08-17T21:47:49.4400362Z <a id="logistics_etl.__main__"></a>
2025-08-17T21:47:49.4400510Z 
2025-08-17T21:47:49.4400584Z # logistics\_etl.\_\_main\_\_
2025-08-17T21:47:49.4400719Z 
2025-08-17T21:47:49.4400793Z <a id="logistics_etl.dsn"></a>
2025-08-17T21:47:49.4400922Z 
2025-08-17T21:47:49.4400996Z # logistics\_etl.dsn
2025-08-17T21:47:49.4401107Z 
2025-08-17T21:47:49.4401218Z Local DSN builder to avoid cross-service dependency.
2025-08-17T21:47:49.4401411Z 
2025-08-17T21:47:49.4401515Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-17T21:47:49.4401673Z 
2025-08-17T21:47:49.4401735Z #### build\_dsn
2025-08-17T21:47:49.4401839Z 
2025-08-17T21:47:49.4401900Z ```python
2025-08-17T21:47:49.4402066Z def build_dsn(sync: bool = True) -> str
2025-08-17T21:47:49.4402285Z ```
2025-08-17T21:47:49.4402380Z 
2025-08-17T21:47:49.4402513Z Return a Postgres DSN assembled from environment variables.
2025-08-17T21:47:49.4402728Z 
2025-08-17T21:47:49.4402878Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-17T21:47:49.4403359Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-17T21:47:49.4403697Z error when any required variable is missing.
2025-08-17T21:47:49.4403866Z 
2025-08-17T21:47:49.4403958Z <a id="logistics_etl.tests.conftest"></a>
2025-08-17T21:47:49.4404128Z 
2025-08-17T21:47:49.4404210Z # logistics\_etl.tests.conftest
2025-08-17T21:47:49.4404354Z 
2025-08-17T21:47:49.4404462Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-17T21:47:49.4404652Z 
2025-08-17T21:47:49.4404739Z # logistics\_etl.tests.test\_repository
2025-08-17T21:47:49.4404902Z 
2025-08-17T21:47:49.4404992Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-17T21:47:49.4405156Z 
2025-08-17T21:47:49.4405237Z # logistics\_etl.tests.test\_cron
2025-08-17T21:47:49.4405387Z 
2025-08-17T21:47:49.4405482Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-17T21:47:49.4405653Z 
2025-08-17T21:47:49.4405742Z # logistics\_etl.tests.test\_imports
2025-08-17T21:47:49.4405894Z 
2025-08-17T21:47:49.4405984Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-17T21:47:49.4406156Z 
2025-08-17T21:47:49.4406242Z # logistics\_etl.tests.test\_smoke
2025-08-17T21:47:49.4406389Z 
2025-08-17T21:47:49.4406480Z <a id="logistics_etl.tests.test_client"></a>
2025-08-17T21:47:49.4406655Z 
2025-08-17T21:47:49.4406739Z # logistics\_etl.tests.test\_client
2025-08-17T21:47:49.4406891Z 
2025-08-17T21:47:49.4406977Z <a id="logistics_etl.tests"></a>
2025-08-17T21:47:49.4407117Z 
2025-08-17T21:47:49.4407336Z # logistics\_etl.tests
2025-08-17T21:47:49.4407462Z 
2025-08-17T21:47:49.4407539Z <a id="logistics_etl.flow"></a>
2025-08-17T21:47:49.4407673Z 
2025-08-17T21:47:49.4407744Z # logistics\_etl.flow
2025-08-17T21:47:49.4407862Z 
2025-08-17T21:47:49.4407941Z <a id="logistics_etl.client"></a>
2025-08-17T21:47:49.4408082Z 
2025-08-17T21:47:49.4408161Z # logistics\_etl.client
2025-08-17T21:47:49.4408279Z 
2025-08-17T21:47:49.4408354Z <a id="logistics_etl.cron"></a>
2025-08-17T21:47:49.4408496Z 
2025-08-17T21:47:49.4408564Z # logistics\_etl.cron
2025-08-17T21:47:49.4408671Z 
2025-08-17T21:47:49.4408747Z <a id="logistics_etl.db"></a>
2025-08-17T21:47:49.4408886Z 
2025-08-17T21:47:49.4408952Z # logistics\_etl.db
2025-08-17T21:47:49.4409057Z 
2025-08-17T21:47:49.4409147Z <a id="logistics_etl.repository"></a>
2025-08-17T21:47:49.4409303Z 
2025-08-17T21:47:49.4409379Z # logistics\_etl.repository
2025-08-17T21:47:49.4409514Z 
2025-08-17T21:47:49.4409583Z <a id="alert_bot"></a>
2025-08-17T21:47:49.4409805Z 
2025-08-17T21:47:49.4409872Z # alert\_bot
2025-08-17T21:47:49.4409969Z 
2025-08-17T21:47:49.4410052Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-17T21:47:49.4410208Z 
2025-08-17T21:47:49.4410291Z # alert\_bot.tests.test\_smoke
2025-08-17T21:47:49.4410424Z 
2025-08-17T21:47:49.4410497Z <a id="alert_bot.tests"></a>
2025-08-17T21:47:49.4410625Z 
2025-08-17T21:47:49.4410696Z # alert\_bot.tests
2025-08-17T21:47:49.4410802Z 
2025-08-17T21:47:49.4410879Z <a id="alert_bot.alert_bot"></a>
2025-08-17T21:47:49.4411021Z 
2025-08-17T21:47:49.4411092Z # alert\_bot.alert\_bot
2025-08-17T21:47:49.4411204Z 
2025-08-17T21:47:49.4411282Z <a id="alert_bot.rules"></a>
2025-08-17T21:47:49.4411410Z 
2025-08-17T21:47:49.4411474Z # alert\_bot.rules
2025-08-17T21:47:49.4411574Z 
2025-08-17T21:47:49.4411644Z <a id="common"></a>
2025-08-17T21:47:49.4411746Z 
2025-08-17T21:47:49.4411805Z # common
2025-08-17T21:47:49.4411897Z 
2025-08-17T21:47:49.4411967Z <a id="common.dsn"></a>
2025-08-17T21:47:49.4412080Z 
2025-08-17T21:47:49.4412151Z # common.dsn
2025-08-17T21:47:49.4412248Z 
2025-08-17T21:47:49.4412330Z <a id="common.dsn.build_dsn"></a>
2025-08-17T21:47:49.4412472Z 
2025-08-17T21:47:49.4412542Z #### build\_dsn
2025-08-17T21:47:49.4412639Z 
2025-08-17T21:47:49.4412700Z ```python
2025-08-17T21:47:49.4412870Z def build_dsn(sync: bool = True) -> str
2025-08-17T21:47:49.4413202Z ```
2025-08-17T21:47:49.4413295Z 
2025-08-17T21:47:49.4413411Z Return a Postgres DSN, validating required variables.
2025-08-17T21:47:49.4413611Z 
2025-08-17T21:47:49.4413788Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-17T21:47:49.4414217Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-17T21:47:49.4414624Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-17T21:47:49.4414926Z missing.
2025-08-17T21:47:49.4415018Z 
2025-08-17T21:47:49.4415098Z <a id="common.models_vendor"></a>
2025-08-17T21:47:49.4415241Z 
2025-08-17T21:47:49.4450270Z # common.models\_vendor
2025-08-17T21:47:49.4450650Z 
2025-08-17T21:47:49.4450780Z <a id="common.models_vendor.Vendor"></a>
2025-08-17T21:47:49.4451036Z 
2025-08-17T21:47:49.4451121Z ## Vendor Objects
2025-08-17T21:47:49.4451261Z 
2025-08-17T21:47:49.4451350Z ```python
2025-08-17T21:47:49.4451546Z class Vendor(Base)
2025-08-17T21:47:49.4451756Z ```
2025-08-17T21:47:49.4451859Z 
2025-08-17T21:47:49.4451968Z Vendor of inventory items.
2025-08-17T21:47:49.4452137Z 
2025-08-17T21:47:49.4452273Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-17T21:47:49.4452498Z 
2025-08-17T21:47:49.4452588Z ## VendorPrice Objects
2025-08-17T21:47:49.4452741Z 
2025-08-17T21:47:49.4452818Z ```python
2025-08-17T21:47:49.4453009Z class VendorPrice(Base)
2025-08-17T21:47:49.4453434Z ```
2025-08-17T21:47:49.4453536Z 
2025-08-17T21:47:49.4453669Z Association table linking vendors to pricing.
2025-08-17T21:47:49.4453892Z 
2025-08-17T21:47:49.4453983Z <a id="common.db_url"></a>
2025-08-17T21:47:49.4454146Z 
2025-08-17T21:47:49.4454226Z # common.db\_url
2025-08-17T21:47:49.4454586Z 
2025-08-17T21:47:49.4454689Z <a id="common.db_url.build_url"></a>
2025-08-17T21:47:49.4454894Z 
2025-08-17T21:47:49.4454979Z #### build\_url
2025-08-17T21:47:49.4455100Z 
2025-08-17T21:47:49.4455166Z ```python
2025-08-17T21:47:49.4455341Z def build_url(async_: bool = True) -> str
2025-08-17T21:47:49.4455568Z ```
2025-08-17T21:47:49.4455648Z 
2025-08-17T21:47:49.4455745Z Return Postgres DSN from env or PG_* parts.
2025-08-17T21:47:49.4455924Z 
2025-08-17T21:47:49.4456001Z <a id="common.keepa"></a>
2025-08-17T21:47:49.4456126Z 
2025-08-17T21:47:49.4456191Z # common.keepa
2025-08-17T21:47:49.4456294Z 
2025-08-17T21:47:49.4456367Z <a id="common.llm"></a>
2025-08-17T21:47:49.4456484Z 
2025-08-17T21:47:49.4456551Z # common.llm
2025-08-17T21:47:49.4456645Z 
2025-08-17T21:47:49.4456720Z <a id="common.settings"></a>
2025-08-17T21:47:49.4456854Z 
2025-08-17T21:47:49.4456925Z # common.settings
2025-08-17T21:47:49.4457030Z 
2025-08-17T21:47:49.4457098Z <a id="common.db"></a>
2025-08-17T21:47:49.4457336Z 
2025-08-17T21:47:49.4457396Z # common.db
2025-08-17T21:47:49.4457484Z 
2025-08-17T21:47:49.4457581Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-17T21:47:49.4457746Z 
2025-08-17T21:47:49.4457818Z #### build\_sqlalchemy\_url
2025-08-17T21:47:49.4457942Z 
2025-08-17T21:47:49.4458011Z ```python
2025-08-17T21:47:49.4458180Z def build_sqlalchemy_url() -> str
2025-08-17T21:47:49.4458392Z ```
2025-08-17T21:47:49.4458472Z 
2025-08-17T21:47:49.4458565Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T21:47:49.4458738Z 
2025-08-17T21:47:49.4458826Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-17T21:47:49.4458989Z 
2025-08-17T21:47:49.4459069Z #### build\_asyncpg\_dsn
2025-08-17T21:47:49.4459190Z 
2025-08-17T21:47:49.4459251Z ```python
2025-08-17T21:47:49.4459474Z def build_asyncpg_dsn() -> str
2025-08-17T21:47:49.4459665Z ```
2025-08-17T21:47:49.4459752Z 
2025-08-17T21:47:49.4459879Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T21:47:49.4460088Z 
2025-08-17T21:47:49.4460180Z <a id="common.db.refresh_mvs"></a>
2025-08-17T21:47:49.4460333Z 
2025-08-17T21:47:49.4460395Z #### refresh\_mvs
2025-08-17T21:47:49.4460497Z 
2025-08-17T21:47:49.4460566Z ```python
2025-08-17T21:47:49.4460755Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T21:47:49.4461001Z ```
2025-08-17T21:47:49.4461079Z 
2025-08-17T21:47:49.4461212Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T21:47:49.4461429Z 
2025-08-17T21:47:49.4461505Z <a id="common.config"></a>
2025-08-17T21:47:49.4461631Z 
2025-08-17T21:47:49.4461706Z # common.config
2025-08-17T21:47:49.4461808Z 
2025-08-17T21:47:49.4461884Z <a id="common.base"></a>
2025-08-17T21:47:49.4462000Z 
2025-08-17T21:47:49.4462070Z # common.base
2025-08-17T21:47:49.4462166Z 
2025-08-17T21:47:49.4462243Z <a id="common.base.Base"></a>
2025-08-17T21:47:49.4462382Z 
2025-08-17T21:47:49.4462444Z ## Base Objects
2025-08-17T21:47:49.4462540Z 
2025-08-17T21:47:49.4462602Z ```python
2025-08-17T21:47:49.4462770Z class Base(DeclarativeBase)
2025-08-17T21:47:49.4462969Z ```
2025-08-17T21:47:49.4463150Z 
2025-08-17T21:47:49.4463235Z Base class for SQLAlchemy models.
2025-08-17T21:47:49.4463380Z 
2025-08-17T21:47:49.4463457Z <a id="repricer"></a>
2025-08-17T21:47:49.4463569Z 
2025-08-17T21:47:49.4463631Z # repricer
2025-08-17T21:47:49.4463724Z 
2025-08-17T21:47:49.4463807Z <a id="repricer.app.schemas"></a>
2025-08-17T21:47:49.4463949Z 
2025-08-17T21:47:49.4464022Z # repricer.app.schemas
2025-08-17T21:47:49.4464143Z 
2025-08-17T21:47:49.4464225Z <a id="repricer.app.deps"></a>
2025-08-17T21:47:49.4464362Z 
2025-08-17T21:47:49.4464443Z # repricer.app.deps
2025-08-17T21:47:49.4464549Z 
2025-08-17T21:47:49.4464662Z Placeholder module for Keepa / SP-API clients.
2025-08-17T21:47:49.4464845Z 
2025-08-17T21:47:49.4464933Z <a id="repricer.app.logic"></a>
2025-08-17T21:47:49.4465068Z 
2025-08-17T21:47:49.4465140Z # repricer.app.logic
2025-08-17T21:47:49.4465256Z 
2025-08-17T21:47:49.4465350Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-17T21:47:49.4465700Z 
2025-08-17T21:47:49.4465768Z #### MIN\_MARGIN
2025-08-17T21:47:49.4465866Z 
2025-08-17T21:47:49.4465925Z 15 % ROI
2025-08-17T21:47:49.4466017Z 
2025-08-17T21:47:49.4466115Z <a id="repricer.app.logic.compute_price"></a>
2025-08-17T21:47:49.4466291Z 
2025-08-17T21:47:49.4466356Z #### compute\_price
2025-08-17T21:47:49.4466463Z 
2025-08-17T21:47:49.4466523Z ```python
2025-08-17T21:47:49.4466763Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-17T21:47:49.4467057Z ```
2025-08-17T21:47:49.4467134Z 
2025-08-17T21:47:49.4467242Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-17T21:47:49.4467510Z Replace with real competitive logic later.
2025-08-17T21:47:49.4467683Z 
2025-08-17T21:47:49.4467763Z <a id="repricer.app.main"></a>
2025-08-17T21:47:49.4467896Z 
2025-08-17T21:47:49.4467964Z # repricer.app.main
2025-08-17T21:47:49.4468073Z 
2025-08-17T21:47:49.4468150Z <a id="repricer.app"></a>
2025-08-17T21:47:49.4468274Z 
2025-08-17T21:47:49.4468344Z # repricer.app
2025-08-17T21:47:49.4468569Z 
2025-08-17T21:47:49.4468657Z <a id="repricer.tests.test_imports"></a>
2025-08-17T21:47:49.4468824Z 
2025-08-17T21:47:49.4468903Z # repricer.tests.test\_imports
2025-08-17T21:47:49.4469040Z 
2025-08-17T21:47:49.4469126Z <a id="repricer.tests.test_smoke"></a>
2025-08-17T21:47:49.4469291Z 
2025-08-17T21:47:49.4469370Z # repricer.tests.test\_smoke
2025-08-17T21:47:49.4469506Z 
2025-08-17T21:47:49.4469587Z <a id="repricer.tests"></a>
2025-08-17T21:47:49.4469718Z 
2025-08-17T21:47:49.4469785Z # repricer.tests
2025-08-17T21:47:49.4469896Z 
2025-08-17T21:47:49.4469959Z <a id="db"></a>
2025-08-17T21:47:49.4470057Z 
2025-08-17T21:47:49.4470115Z # db
2025-08-17T21:47:49.4470202Z 
2025-08-17T21:47:49.4470275Z <a id="db.utils.views"></a>
2025-08-17T21:47:49.4470398Z 
2025-08-17T21:47:49.4470468Z # db.utils.views
2025-08-17T21:47:49.4470568Z 
2025-08-17T21:47:49.4470656Z <a id="db.utils.views.replace_view"></a>
2025-08-17T21:47:49.4470819Z 
2025-08-17T21:47:49.4470889Z #### replace\_view
2025-08-17T21:47:49.4471000Z 
2025-08-17T21:47:49.4471059Z ```python
2025-08-17T21:47:49.4471253Z def replace_view(name: str, new_sql: str) -> None
2025-08-17T21:47:49.4471487Z ```
2025-08-17T21:47:49.4471575Z 
2025-08-17T21:47:49.4471662Z Drop and recreate a SQL view atomically.
2025-08-17T21:47:49.4471821Z 
2025-08-17T21:47:49.4471894Z <a id="db.utils"></a>
2025-08-17T21:47:49.4472007Z 
2025-08-17T21:47:49.4472068Z # db.utils
2025-08-17T21:47:49.4472154Z 
2025-08-17T21:47:49.4472236Z <a id="price_importer"></a>
2025-08-17T21:47:49.4472363Z 
2025-08-17T21:47:49.4472432Z # price\_importer
2025-08-17T21:47:49.4472544Z 
2025-08-17T21:47:49.4472643Z <a id="price_importer.services_common.dsn"></a>
2025-08-17T21:47:49.4472820Z 
2025-08-17T21:47:49.4472913Z # price\_importer.services\_common.dsn
2025-08-17T21:47:49.4473186Z 
2025-08-17T21:47:49.4473308Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-17T21:47:49.4473507Z 
2025-08-17T21:47:49.4473575Z #### build\_dsn
2025-08-17T21:47:49.4473672Z 
2025-08-17T21:47:49.4473742Z ```python
2025-08-17T21:47:49.4473913Z def build_dsn(sync: bool = True) -> str
2025-08-17T21:47:49.4474121Z ```
2025-08-17T21:47:49.4474207Z 
2025-08-17T21:47:49.4474272Z Return safe DSN.
2025-08-17T21:47:49.4474373Z 
2025-08-17T21:47:49.4474729Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-17T21:47:49.4474926Z 
2025-08-17T21:47:49.4475054Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-17T21:47:49.4475265Z 
2025-08-17T21:47:49.4475373Z # price\_importer.services\_common.models\_vendor
2025-08-17T21:47:49.4475559Z 
2025-08-17T21:47:49.4475668Z <a id="price_importer.services_common.db_url"></a>
2025-08-17T21:47:49.4475855Z 
2025-08-17T21:47:49.4475947Z # price\_importer.services\_common.db\_url
2025-08-17T21:47:49.4476112Z 
2025-08-17T21:47:49.4476246Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-17T21:47:49.4476454Z 
2025-08-17T21:47:49.4476517Z #### build\_url
2025-08-17T21:47:49.4476618Z 
2025-08-17T21:47:49.4476679Z ```python
2025-08-17T21:47:49.4476990Z def build_url(async_: bool = True) -> str
2025-08-17T21:47:49.4477212Z ```
2025-08-17T21:47:49.4477291Z 
2025-08-17T21:47:49.4477387Z Return Postgres DSN from env or PG_* parts.
2025-08-17T21:47:49.4477560Z 
2025-08-17T21:47:49.4477665Z <a id="price_importer.services_common.keepa"></a>
2025-08-17T21:47:49.4477845Z 
2025-08-17T21:47:49.4477940Z # price\_importer.services\_common.keepa
2025-08-17T21:47:49.4478104Z 
2025-08-17T21:47:49.4478205Z <a id="price_importer.services_common.llm"></a>
2025-08-17T21:47:49.4478387Z 
2025-08-17T21:47:49.4478475Z # price\_importer.services\_common.llm
2025-08-17T21:47:49.4478631Z 
2025-08-17T21:47:49.4478747Z <a id="price_importer.services_common.settings"></a>
2025-08-17T21:47:49.4478933Z 
2025-08-17T21:47:49.4479028Z # price\_importer.services\_common.settings
2025-08-17T21:47:49.4479200Z 
2025-08-17T21:47:49.4479305Z <a id="price_importer.services_common.db"></a>
2025-08-17T21:47:49.4479476Z 
2025-08-17T21:47:49.4479564Z # price\_importer.services\_common.db
2025-08-17T21:47:49.4479847Z 
2025-08-17T21:47:49.4479999Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-17T21:47:49.4480234Z 
2025-08-17T21:47:49.4480314Z #### build\_sqlalchemy\_url
2025-08-17T21:47:49.4480445Z 
2025-08-17T21:47:49.4480506Z ```python
2025-08-17T21:47:49.4480683Z def build_sqlalchemy_url() -> str
2025-08-17T21:47:49.4480881Z ```
2025-08-17T21:47:49.4480969Z 
2025-08-17T21:47:49.4481063Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T21:47:49.4481229Z 
2025-08-17T21:47:49.4481368Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-17T21:47:49.4481596Z 
2025-08-17T21:47:49.4481668Z #### build\_asyncpg\_dsn
2025-08-17T21:47:49.4481790Z 
2025-08-17T21:47:49.4481856Z ```python
2025-08-17T21:47:49.4482018Z def build_asyncpg_dsn() -> str
2025-08-17T21:47:49.4482214Z ```
2025-08-17T21:47:49.4482294Z 
2025-08-17T21:47:49.4482417Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T21:47:49.4482628Z 
2025-08-17T21:47:49.4482761Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-17T21:47:49.4482961Z 
2025-08-17T21:47:49.4483033Z #### refresh\_mvs
2025-08-17T21:47:49.4483238Z 
2025-08-17T21:47:49.4483298Z ```python
2025-08-17T21:47:49.4483493Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T21:47:49.4483736Z ```
2025-08-17T21:47:49.4483814Z 
2025-08-17T21:47:49.4483953Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T21:47:49.4484160Z 
2025-08-17T21:47:49.4484252Z <a id="price_importer.services_common"></a>
2025-08-17T21:47:49.4484423Z 
2025-08-17T21:47:49.4484506Z # price\_importer.services\_common
2025-08-17T21:47:49.4484656Z 
2025-08-17T21:47:49.4484763Z <a id="price_importer.services_common.base"></a>
2025-08-17T21:47:49.4484942Z 
2025-08-17T21:47:49.4485030Z # price\_importer.services\_common.base
2025-08-17T21:47:49.4485197Z 
2025-08-17T21:47:49.4485285Z <a id="price_importer.normaliser"></a>
2025-08-17T21:47:49.4485441Z 
2025-08-17T21:47:49.4485521Z # price\_importer.normaliser
2025-08-17T21:47:49.4485670Z 
2025-08-17T21:47:49.4485772Z <a id="price_importer.common.models_vendor"></a>
2025-08-17T21:47:49.4485951Z 
2025-08-17T21:47:49.4486044Z # price\_importer.common.models\_vendor
2025-08-17T21:47:49.4486203Z 
2025-08-17T21:47:49.4486293Z <a id="price_importer.common.db_url"></a>
2025-08-17T21:47:49.4486467Z 
2025-08-17T21:47:49.4486548Z # price\_importer.common.db\_url
2025-08-17T21:47:49.4486691Z 
2025-08-17T21:47:49.4486794Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-17T21:47:49.4486978Z 
2025-08-17T21:47:49.4487041Z #### make\_dsn
2025-08-17T21:47:49.4487137Z 
2025-08-17T21:47:49.4487204Z ```python
2025-08-17T21:47:49.4487373Z def make_dsn(async_: bool = False) -> str
2025-08-17T21:47:49.4487595Z ```
2025-08-17T21:47:49.4487673Z 
2025-08-17T21:47:49.4487787Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-17T21:47:49.4487985Z 
2025-08-17T21:47:49.4488089Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-17T21:47:49.4488399Z 
2025-08-17T21:47:49.4488461Z #### build\_url
2025-08-17T21:47:49.4488564Z 
2025-08-17T21:47:49.4488623Z ```python
2025-08-17T21:47:49.4488798Z def build_url(async_: bool = False) -> str
2025-08-17T21:47:49.4489014Z ```
2025-08-17T21:47:49.4489091Z 
2025-08-17T21:47:49.4489214Z Return Postgres DSN built from environment variables.
2025-08-17T21:47:49.4489407Z 
2025-08-17T21:47:49.4489493Z <a id="price_importer.common"></a>
2025-08-17T21:47:49.4489647Z 
2025-08-17T21:47:49.4489721Z # price\_importer.common
2025-08-17T21:47:49.4489844Z 
2025-08-17T21:47:49.4489934Z <a id="price_importer.common.base"></a>
2025-08-17T21:47:49.4490092Z 
2025-08-17T21:47:49.4490173Z # price\_importer.common.base
2025-08-17T21:47:49.4490311Z 
2025-08-17T21:47:49.4490411Z <a id="price_importer.tests.conftest"></a>
2025-08-17T21:47:49.4490578Z 
2025-08-17T21:47:49.4490663Z # price\_importer.tests.conftest
2025-08-17T21:47:49.4490810Z 
2025-08-17T21:47:49.4490906Z <a id="price_importer.tests.test_reader"></a>
2025-08-17T21:47:49.4491195Z 
2025-08-17T21:47:49.4491284Z # price\_importer.tests.test\_reader
2025-08-17T21:47:49.4491436Z 
2025-08-17T21:47:49.4491534Z <a id="price_importer.tests.test_imports"></a>
2025-08-17T21:47:49.4491705Z 
2025-08-17T21:47:49.4491797Z # price\_importer.tests.test\_imports
2025-08-17T21:47:49.4491948Z 
2025-08-17T21:47:49.4492042Z <a id="price_importer.tests.test_smoke"></a>
2025-08-17T21:47:49.4492213Z 
2025-08-17T21:47:49.4492296Z # price\_importer.tests.test\_smoke
2025-08-17T21:47:49.4492445Z 
2025-08-17T21:47:49.4492553Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-17T21:47:49.4492731Z 
2025-08-17T21:47:49.4492823Z # price\_importer.tests.test\_normaliser
2025-08-17T21:47:49.4492984Z 
2025-08-17T21:47:49.4493185Z <a id="price_importer.tests"></a>
2025-08-17T21:47:49.4493334Z 
2025-08-17T21:47:49.4493407Z # price\_importer.tests
2025-08-17T21:47:49.4493532Z 
2025-08-17T21:47:49.4493612Z <a id="price_importer.reader"></a>
2025-08-17T21:47:49.4493757Z 
2025-08-17T21:47:49.4493836Z # price\_importer.reader
2025-08-17T21:47:49.4493967Z 
2025-08-17T21:47:49.4494053Z <a id="price_importer.repository"></a>
2025-08-17T21:47:49.4494210Z 
2025-08-17T21:47:49.4494296Z # price\_importer.repository
2025-08-17T21:47:49.4494430Z 
2025-08-17T21:47:49.4494511Z <a id="price_importer.import"></a>
2025-08-17T21:47:49.4494661Z 
2025-08-17T21:47:49.4494735Z # price\_importer.import
2025-08-17T21:47:49.4494856Z 
2025-08-17T21:47:49.4494925Z <a id="fees_h10"></a>
2025-08-17T21:47:49.4495041Z 
2025-08-17T21:47:49.4495103Z # fees\_h10
2025-08-17T21:47:49.4495192Z 
2025-08-17T21:47:49.4495270Z <a id="fees_h10.worker"></a>
2025-08-17T21:47:49.4495399Z 
2025-08-17T21:47:49.4495464Z # fees\_h10.worker
2025-08-17T21:47:49.4495570Z 
2025-08-17T21:47:49.4495665Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-17T21:47:49.4495833Z 
2025-08-17T21:47:49.4495903Z #### list\_active\_asins
2025-08-17T21:47:49.4496025Z 
2025-08-17T21:47:49.4496085Z ```python
2025-08-17T21:47:49.4496263Z def list_active_asins() -> list[str]
2025-08-17T21:47:49.4496475Z ```
2025-08-17T21:47:49.4496555Z 
2025-08-17T21:47:49.4496670Z Return known ASINs or an empty list if unavailable.
2025-08-17T21:47:49.4496854Z 
2025-08-17T21:47:49.4496935Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-17T21:47:49.4497094Z 
2025-08-17T21:47:49.4497171Z # fees\_h10.tests.test\_smoke
2025-08-17T21:47:49.4497303Z 
2025-08-17T21:47:49.4497383Z <a id="fees_h10.tests"></a>
2025-08-17T21:47:49.4497508Z 
2025-08-17T21:47:49.4497571Z # fees\_h10.tests
2025-08-17T21:47:49.4497691Z 
2025-08-17T21:47:49.4497770Z <a id="fees_h10.client"></a>
2025-08-17T21:47:49.4497896Z 
2025-08-17T21:47:49.4497959Z # fees\_h10.client
2025-08-17T21:47:49.4498064Z 
2025-08-17T21:47:49.4498143Z <a id="fees_h10.repository"></a>
2025-08-17T21:47:49.4498282Z 
2025-08-17T21:47:49.4498352Z # fees\_h10.repository
2025-08-17T21:47:49.4498470Z 
2025-08-17T21:47:49.4498537Z <a id="emailer"></a>
2025-08-17T21:47:49.4498645Z 
2025-08-17T21:47:49.4498711Z # emailer
2025-08-17T21:47:49.4498797Z 
2025-08-17T21:47:49.4499036Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-17T21:47:49.4499213Z 
2025-08-17T21:47:49.4499298Z # emailer.tests.test\_import\_emailer
2025-08-17T21:47:49.4499450Z 
2025-08-17T21:47:49.4499533Z <a id="emailer.tests.test_smoke"></a>
2025-08-17T21:47:49.4499689Z 
2025-08-17T21:47:49.4499765Z # emailer.tests.test\_smoke
2025-08-17T21:47:49.4499895Z 
2025-08-17T21:47:49.4499978Z <a id="emailer.tests"></a>
2025-08-17T21:47:49.4500106Z 
2025-08-17T21:47:49.4500171Z # emailer.tests
2025-08-17T21:47:49.4500277Z 
2025-08-17T21:47:49.4500357Z <a id="emailer.generate_body"></a>
2025-08-17T21:47:49.4500505Z 
2025-08-17T21:47:49.4500578Z # emailer.generate\_body
2025-08-17T21:47:49.4500706Z 
2025-08-17T21:47:49.4500775Z <a id="llm_server"></a>
2025-08-17T21:47:49.4500890Z 
2025-08-17T21:47:49.4500957Z # llm\_server
2025-08-17T21:47:49.4501051Z 
2025-08-17T21:47:49.4501125Z <a id="llm_server.app"></a>
2025-08-17T21:47:49.4501250Z 
2025-08-17T21:47:49.4501321Z # llm\_server.app
2025-08-17T21:47:49.4501539Z 
