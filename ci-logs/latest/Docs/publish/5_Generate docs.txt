2025-08-17T18:05:22.2461614Z ##[group]Run pydoc-markdown
2025-08-17T18:05:22.2461937Z [36;1mpydoc-markdown[0m
2025-08-17T18:05:22.2503012Z shell: /usr/bin/bash -e {0}
2025-08-17T18:05:22.2503268Z env:
2025-08-17T18:05:22.2503523Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T18:05:22.2503965Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-17T18:05:22.2504368Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T18:05:22.2504732Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T18:05:22.2505087Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T18:05:22.2505444Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-17T18:05:22.2505742Z ##[endgroup]
2025-08-17T18:05:22.6457717Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-17T18:05:22.6458524Z Unknown key(s) "{'output_directory'}" at:
2025-08-17T18:05:22.6458880Z In "pydoc-markdown.yml"
2025-08-17T18:05:22.6459152Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-17T18:05:22.6459906Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-17T18:05:22.6460565Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-17T18:05:22.6461048Z 
2025-08-17T18:05:22.8902202Z <a id="__init__"></a>
2025-08-17T18:05:22.8902537Z 
2025-08-17T18:05:22.8902657Z # \_\_init\_\_
2025-08-17T18:05:22.8902854Z 
2025-08-17T18:05:22.8902984Z <a id="api"></a>
2025-08-17T18:05:22.8903186Z 
2025-08-17T18:05:22.8903300Z # api
2025-08-17T18:05:22.8903464Z 
2025-08-17T18:05:22.8903624Z <a id="api.tests.test_llm"></a>
2025-08-17T18:05:22.8903906Z 
2025-08-17T18:05:22.8904063Z # api.tests.test\_llm
2025-08-17T18:05:22.8904290Z 
2025-08-17T18:05:22.8904440Z <a id="api.tests.test_imports"></a>
2025-08-17T18:05:22.8904725Z 
2025-08-17T18:05:22.8904858Z # api.tests.test\_imports
2025-08-17T18:05:22.8905088Z 
2025-08-17T18:05:22.8905248Z <a id="api.tests.test_entrypoint"></a>
2025-08-17T18:05:22.8905547Z 
2025-08-17T18:05:22.8905645Z # api.tests.test\_entrypoint
2025-08-17T18:05:22.8905847Z 
2025-08-17T18:05:22.8905960Z <a id="api.tests.test_health"></a>
2025-08-17T18:05:22.8906140Z 
2025-08-17T18:05:22.8906231Z # api.tests.test\_health
2025-08-17T18:05:22.8906385Z 
2025-08-17T18:05:22.8906485Z <a id="api.migrations.env"></a>
2025-08-17T18:05:22.8906656Z 
2025-08-17T18:05:22.8906759Z # api.migrations.env
2025-08-17T18:05:22.8906890Z 
2025-08-17T18:05:22.8907024Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-17T18:05:22.8907258Z 
2025-08-17T18:05:22.8907392Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-17T18:05:22.8907603Z 
2025-08-17T18:05:22.8907729Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-17T18:05:22.8907944Z 
2025-08-17T18:05:22.8908435Z # api.migrations.versions.0004\_fee\_cron
2025-08-17T18:05:22.8908726Z 
2025-08-17T18:05:22.8908907Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-17T18:05:22.8909174Z 
2025-08-17T18:05:22.8909334Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-17T18:05:22.8910021Z 
2025-08-17T18:05:22.8910170Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-17T18:05:22.8910401Z 
2025-08-17T18:05:22.8910571Z # api.migrations.versions.0003\_vendor\_prices
2025-08-17T18:05:22.8910871Z 
2025-08-17T18:05:22.8911067Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-17T18:05:22.8911329Z 
2025-08-17T18:05:22.8911454Z # api.migrations.versions.0024\_create\_buybox
2025-08-17T18:05:22.8911658Z 
2025-08-17T18:05:22.8911797Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-17T18:05:22.8912031Z 
2025-08-17T18:05:22.8912156Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-17T18:05:22.8912366Z 
2025-08-17T18:05:22.8912495Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-17T18:05:22.8912716Z 
2025-08-17T18:05:22.8912835Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-17T18:05:22.8913040Z 
2025-08-17T18:05:22.8913182Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-17T18:05:22.8913688Z 
2025-08-17T18:05:22.8913809Z # api.migrations.versions.0020\_unified\_schema
2025-08-17T18:05:22.8914025Z 
2025-08-17T18:05:22.8914162Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-17T18:05:22.8914391Z 
2025-08-17T18:05:22.8914517Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-17T18:05:22.8914731Z 
2025-08-17T18:05:22.8914857Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-17T18:05:22.8915070Z 
2025-08-17T18:05:22.8915184Z # api.migrations.versions.0001\_baseline
2025-08-17T18:05:22.8915378Z 
2025-08-17T18:05:22.8915490Z <a id="api.migrations.versions"></a>
2025-08-17T18:05:22.8915677Z 
2025-08-17T18:05:22.8915770Z # api.migrations.versions
2025-08-17T18:05:22.8915918Z 
2025-08-17T18:05:22.8916019Z <a id="api.migrations"></a>
2025-08-17T18:05:22.8916173Z 
2025-08-17T18:05:22.8916255Z # api.migrations
2025-08-17T18:05:22.8916380Z 
2025-08-17T18:05:22.8916462Z <a id="api.db"></a>
2025-08-17T18:05:22.8916578Z 
2025-08-17T18:05:22.8916664Z # api.db
2025-08-17T18:05:22.8916777Z 
2025-08-17T18:05:22.8916874Z <a id="api.routes.stats"></a>
2025-08-17T18:05:22.8917026Z 
2025-08-17T18:05:22.8917119Z # api.routes.stats
2025-08-17T18:05:22.8917246Z 
2025-08-17T18:05:22.8917349Z <a id="api.routes.stats.kpi"></a>
2025-08-17T18:05:22.8917557Z 
2025-08-17T18:05:22.8917648Z #### kpi
2025-08-17T18:05:22.8917749Z 
2025-08-17T18:05:22.8917832Z ```python
2025-08-17T18:05:22.8918208Z @router.get("/stats/kpi")
2025-08-17T18:05:22.8918576Z def kpi() -> List[Dict[str, int]]
2025-08-17T18:05:22.8918825Z ```
2025-08-17T18:05:22.8918929Z 
2025-08-17T18:05:22.8919027Z Return KPI metrics (mock).
2025-08-17T18:05:22.8919184Z 
2025-08-17T18:05:22.8919291Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-17T18:05:22.8919480Z 
2025-08-17T18:05:22.8919571Z #### roi\_by\_vendor
2025-08-17T18:05:22.8919690Z 
2025-08-17T18:05:22.8919772Z ```python
2025-08-17T18:05:22.8919987Z @router.get("/stats/roi_by_vendor")
2025-08-17T18:05:22.8920257Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-17T18:05:22.8920540Z ```
2025-08-17T18:05:22.8920638Z 
2025-08-17T18:05:22.8920733Z Return ROI percent by vendor.
2025-08-17T18:05:22.8920893Z 
2025-08-17T18:05:22.8921004Z <a id="api.routes.stats.roi_trend"></a>
2025-08-17T18:05:22.8921186Z 
2025-08-17T18:05:22.8921277Z #### roi\_trend
2025-08-17T18:05:22.8921393Z 
2025-08-17T18:05:22.8921475Z ```python
2025-08-17T18:05:22.8921672Z @router.get("/stats/roi_trend")
2025-08-17T18:05:22.8921932Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-17T18:05:22.8922219Z ```
2025-08-17T18:05:22.8922329Z 
2025-08-17T18:05:22.8922416Z Return 30-day ROI trend.
2025-08-17T18:05:22.8922561Z 
2025-08-17T18:05:22.8922654Z <a id="api.routes.roi"></a>
2025-08-17T18:05:22.8922800Z 
2025-08-17T18:05:22.8922888Z # api.routes.roi
2025-08-17T18:05:22.8923084Z 
2025-08-17T18:05:22.8923187Z <a id="api.routes.health"></a>
2025-08-17T18:05:22.8923389Z 
2025-08-17T18:05:22.8923485Z # api.routes.health
2025-08-17T18:05:22.8923610Z 
2025-08-17T18:05:22.8923727Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-17T18:05:22.8924090Z 
2025-08-17T18:05:22.8924175Z #### MAX\_SKEW
2025-08-17T18:05:22.8924304Z 
2025-08-17T18:05:22.8924384Z seconds
2025-08-17T18:05:22.8924486Z 
2025-08-17T18:05:22.8924596Z <a id="api.routes.health.health"></a>
2025-08-17T18:05:22.8924782Z 
2025-08-17T18:05:22.8924869Z #### health
2025-08-17T18:05:22.8924973Z 
2025-08-17T18:05:22.8925072Z ```python
2025-08-17T18:05:22.8925304Z @router.get("/health", include_in_schema=False)
2025-08-17T18:05:22.8925718Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-17T18:05:22.8926101Z ```
2025-08-17T18:05:22.8926208Z 
2025-08-17T18:05:22.8926330Z Return 200 when DB reachable and clocks are in sync.
2025-08-17T18:05:22.8926542Z 
2025-08-17T18:05:22.8926638Z <a id="api.routes.repository"></a>
2025-08-17T18:05:22.8926811Z 
2025-08-17T18:05:22.8926912Z # api.routes.repository
2025-08-17T18:05:22.8927049Z 
2025-08-17T18:05:22.8927143Z <a id="api.routes"></a>
2025-08-17T18:05:22.8927526Z 
2025-08-17T18:05:22.8927605Z # api.routes
2025-08-17T18:05:22.8927721Z 
2025-08-17T18:05:22.8927811Z <a id="api.models.fee"></a>
2025-08-17T18:05:22.8927959Z 
2025-08-17T18:05:22.8928185Z # api.models.fee
2025-08-17T18:05:22.8928310Z 
2025-08-17T18:05:22.8928399Z <a id="api.models"></a>
2025-08-17T18:05:22.8928523Z 
2025-08-17T18:05:22.8928616Z # api.models
2025-08-17T18:05:22.8928723Z 
2025-08-17T18:05:22.8928814Z <a id="api.roi_repository"></a>
2025-08-17T18:05:22.8928962Z 
2025-08-17T18:05:22.8929055Z # api.roi\_repository
2025-08-17T18:05:22.8929185Z 
2025-08-17T18:05:22.8929274Z <a id="api.main"></a>
2025-08-17T18:05:22.8929400Z 
2025-08-17T18:05:22.8929486Z # api.main
2025-08-17T18:05:22.8929596Z 
2025-08-17T18:05:22.8929699Z <a id="api.main.ready"></a>
2025-08-17T18:05:22.8929841Z 
2025-08-17T18:05:22.8929927Z #### ready
2025-08-17T18:05:22.8930040Z 
2025-08-17T18:05:22.8930124Z ```python
2025-08-17T18:05:22.8930417Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-17T18:05:22.8930898Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-17T18:05:22.8931284Z                                                                       str]
2025-08-17T18:05:22.8931566Z ```
2025-08-17T18:05:22.8931658Z 
2025-08-17T18:05:22.8931777Z Return 200 only when migrations are at head.
2025-08-17T18:05:22.8931963Z 
2025-08-17T18:05:22.8932047Z <a id="api.config"></a>
2025-08-17T18:05:22.8932178Z 
2025-08-17T18:05:22.8932272Z # api.config
2025-08-17T18:05:22.8932378Z 
2025-08-17T18:05:22.8932470Z <a id="etl"></a>
2025-08-17T18:05:22.8932595Z 
2025-08-17T18:05:22.8932681Z # etl
2025-08-17T18:05:22.8932781Z 
2025-08-17T18:05:22.8932881Z <a id="etl.fba_fee_ingestor"></a>
2025-08-17T18:05:22.8933051Z 
2025-08-17T18:05:22.8933139Z # etl.fba\_fee\_ingestor
2025-08-17T18:05:22.8933274Z 
2025-08-17T18:05:22.8933373Z <a id="etl.sp_fees_ingestor"></a>
2025-08-17T18:05:22.8933531Z 
2025-08-17T18:05:22.8933627Z # etl.sp\_fees\_ingestor
2025-08-17T18:05:22.8933771Z 
2025-08-17T18:05:22.8933867Z <a id="etl.keepa_ingestor"></a>
2025-08-17T18:05:22.8934024Z 
2025-08-17T18:05:22.8934113Z # etl.keepa\_ingestor
2025-08-17T18:05:22.8934243Z 
2025-08-17T18:05:22.8934330Z <a id="etl.db"></a>
2025-08-17T18:05:22.8934446Z 
2025-08-17T18:05:22.8934539Z # etl.db
2025-08-17T18:05:22.8934645Z 
2025-08-17T18:05:22.8934751Z <a id="etl.dialects.schemas"></a>
2025-08-17T18:05:22.8934919Z 
2025-08-17T18:05:22.8935024Z # etl.dialects.schemas
2025-08-17T18:05:22.8935157Z 
2025-08-17T18:05:22.8935282Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-17T18:05:22.8935491Z 
2025-08-17T18:05:22.8935592Z # etl.dialects.amazon\_reimbursements
2025-08-17T18:05:22.8935770Z 
2025-08-17T18:05:22.8935884Z <a id="etl.dialects.amazon_returns"></a>
2025-08-17T18:05:22.8936068Z 
2025-08-17T18:05:22.8936163Z # etl.dialects.amazon\_returns
2025-08-17T18:05:22.8936319Z 
2025-08-17T18:05:22.8936405Z <a id="etl.dialects"></a>
2025-08-17T18:05:22.8936539Z 
2025-08-17T18:05:22.8936626Z # etl.dialects
2025-08-17T18:05:22.8936883Z 
2025-08-17T18:05:22.8936972Z <a id="ingest"></a>
2025-08-17T18:05:22.8937092Z 
2025-08-17T18:05:22.8937181Z # ingest
2025-08-17T18:05:22.8937284Z 
2025-08-17T18:05:22.8937383Z <a id="ingest.copy_loader"></a>
2025-08-17T18:05:22.8937541Z 
2025-08-17T18:05:22.8937633Z # ingest.copy\_loader
2025-08-17T18:05:22.8937756Z 
2025-08-17T18:05:22.8937872Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-17T18:05:22.8938203Z 
2025-08-17T18:05:22.8938302Z #### copy\_df\_via\_temp
2025-08-17T18:05:22.8938437Z 
2025-08-17T18:05:22.8938518Z ```python
2025-08-17T18:05:22.8938719Z def copy_df_via_temp(engine: Engine,
2025-08-17T18:05:22.8938988Z                      df: pd.DataFrame,
2025-08-17T18:05:22.8939242Z                      target_table: str,
2025-08-17T18:05:22.8939493Z                      *,
2025-08-17T18:05:22.8939722Z                      target_schema: Optional[str] = None,
2025-08-17T18:05:22.8940009Z                      columns: Sequence[str],
2025-08-17T18:05:22.8940419Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-17T18:05:22.8940745Z                      analyze_after: bool = False) -> int
2025-08-17T18:05:22.8941020Z ```
2025-08-17T18:05:22.8941117Z 
2025-08-17T18:05:22.8941293Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-17T18:05:22.8941546Z 
2025-08-17T18:05:22.8941743Z The dataframe is first written to a TEMP table created ``LIKE`` the target
2025-08-17T18:05:22.8942215Z including defaults and generated columns.  Data is streamed via ``COPY`` and
2025-08-17T18:05:22.8942691Z then inserted into the final table.  If ``conflict_cols`` is provided an
2025-08-17T18:05:22.8943130Z ``INSERT ... ON CONFLICT DO UPDATE`` is issued for the non-conflicting
2025-08-17T18:05:22.8943517Z columns, otherwise rows are simply appended.
2025-08-17T18:05:22.8943707Z 
2025-08-17T18:05:22.8943831Z Returns the number of rows provided in ``df``.
2025-08-17T18:05:22.8944027Z 
2025-08-17T18:05:22.8944139Z <a id="ingest.tests.test_smoke"></a>
2025-08-17T18:05:22.8944319Z 
2025-08-17T18:05:22.8944415Z # ingest.tests.test\_smoke
2025-08-17T18:05:22.8944565Z 
2025-08-17T18:05:22.8944658Z <a id="ingest.tests"></a>
2025-08-17T18:05:22.8944793Z 
2025-08-17T18:05:22.8944878Z # ingest.tests
2025-08-17T18:05:22.8945002Z 
2025-08-17T18:05:22.8945110Z <a id="ingest.upload_router"></a>
2025-08-17T18:05:22.8945269Z 
2025-08-17T18:05:22.8945357Z # ingest.upload\_router
2025-08-17T18:05:22.8945496Z 
2025-08-17T18:05:22.8945599Z <a id="ingest.email_watcher"></a>
2025-08-17T18:05:22.8945763Z 
2025-08-17T18:05:22.8945856Z # ingest.email\_watcher
2025-08-17T18:05:22.8945982Z 
2025-08-17T18:05:22.8946088Z <a id="ingest.email_watcher.main"></a>
2025-08-17T18:05:22.8946271Z 
2025-08-17T18:05:22.8946356Z #### main
2025-08-17T18:05:22.8946459Z 
2025-08-17T18:05:22.8946554Z ```python
2025-08-17T18:05:22.8946744Z def main() -> dict[str, str]
2025-08-17T18:05:22.8946977Z ```
2025-08-17T18:05:22.8947077Z 
2025-08-17T18:05:22.8947228Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-17T18:05:22.8947480Z 
2025-08-17T18:05:22.8947616Z Returns {"status": "success"} when processing completes.
2025-08-17T18:05:22.8947841Z 
2025-08-17T18:05:22.8947937Z <a id="ingest.tasks"></a>
2025-08-17T18:05:22.8948194Z 
2025-08-17T18:05:22.8948307Z # ingest.tasks
2025-08-17T18:05:22.8948476Z 
2025-08-17T18:05:22.8948593Z <a id="ingest.tasks.task_import_file"></a>
2025-08-17T18:05:22.8948783Z 
2025-08-17T18:05:22.8948866Z #### task\_import\_file
2025-08-17T18:05:22.8949005Z 
2025-08-17T18:05:22.8949090Z ```python
2025-08-17T18:05:22.8949316Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-17T18:05:22.8949635Z def task_import_file(self,
2025-08-17T18:05:22.8949853Z                      uri: str,
2025-08-17T18:05:22.8950127Z                      report_type: Optional[str] = None) -> Dict[str, Any]
2025-08-17T18:05:22.8950431Z ```
2025-08-17T18:05:22.8950527Z 
2025-08-17T18:05:22.8950672Z Import a file into Postgres using existing ETL pipeline.
2025-08-17T18:05:22.8951046Z 
2025-08-17T18:05:22.8951143Z <a id="ingest.celery_app"></a>
2025-08-17T18:05:22.8951296Z 
2025-08-17T18:05:22.8951389Z # ingest.celery\_app
2025-08-17T18:05:22.8951524Z 
2025-08-17T18:05:22.8951620Z <a id="ingest.ingest_router"></a>
2025-08-17T18:05:22.8951779Z 
2025-08-17T18:05:22.8951872Z # ingest.ingest\_router
2025-08-17T18:05:22.8951998Z 
2025-08-17T18:05:22.8952088Z <a id="logistics_etl"></a>
2025-08-17T18:05:22.8952224Z 
2025-08-17T18:05:22.8952311Z # logistics\_etl
2025-08-17T18:05:22.8952429Z 
2025-08-17T18:05:22.8952519Z Daily logistics ETL job.
2025-08-17T18:05:22.8952660Z 
2025-08-17T18:05:22.8952754Z <a id="logistics_etl.__main__"></a>
2025-08-17T18:05:22.8952918Z 
2025-08-17T18:05:22.8953013Z # logistics\_etl.\_\_main\_\_
2025-08-17T18:05:22.8953162Z 
2025-08-17T18:05:22.8953256Z <a id="logistics_etl.dsn"></a>
2025-08-17T18:05:22.8953411Z 
2025-08-17T18:05:22.8953506Z # logistics\_etl.dsn
2025-08-17T18:05:22.8953633Z 
2025-08-17T18:05:22.8953762Z Local DSN builder to avoid cross-service dependency.
2025-08-17T18:05:22.8954110Z 
2025-08-17T18:05:22.8954215Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-17T18:05:22.8954399Z 
2025-08-17T18:05:22.8954488Z #### build\_dsn
2025-08-17T18:05:22.8954597Z 
2025-08-17T18:05:22.8954685Z ```python
2025-08-17T18:05:22.8954932Z def build_dsn(sync: bool = True) -> str
2025-08-17T18:05:22.8955188Z ```
2025-08-17T18:05:22.8955286Z 
2025-08-17T18:05:22.8955442Z Return a Postgres DSN assembled from environment variables.
2025-08-17T18:05:22.8955680Z 
2025-08-17T18:05:22.8955843Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-17T18:05:22.8956265Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-17T18:05:22.8956641Z error when any required variable is missing.
2025-08-17T18:05:22.8956830Z 
2025-08-17T18:05:22.8956943Z <a id="logistics_etl.tests.conftest"></a>
2025-08-17T18:05:22.8957123Z 
2025-08-17T18:05:22.8957226Z # logistics\_etl.tests.conftest
2025-08-17T18:05:22.8957378Z 
2025-08-17T18:05:22.8957499Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-17T18:05:22.8957709Z 
2025-08-17T18:05:22.8957823Z # logistics\_etl.tests.test\_repository
2025-08-17T18:05:22.8958003Z 
2025-08-17T18:05:22.8958329Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-17T18:05:22.8958573Z 
2025-08-17T18:05:22.8958671Z # logistics\_etl.tests.test\_cron
2025-08-17T18:05:22.8958858Z 
2025-08-17T18:05:22.8958963Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-17T18:05:22.8959161Z 
2025-08-17T18:05:22.8959251Z # logistics\_etl.tests.test\_imports
2025-08-17T18:05:22.8959418Z 
2025-08-17T18:05:22.8959695Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-17T18:05:22.8960036Z 
2025-08-17T18:05:22.8960168Z # logistics\_etl.tests.test\_smoke
2025-08-17T18:05:22.8960332Z 
2025-08-17T18:05:22.8960450Z <a id="logistics_etl.tests.test_client"></a>
2025-08-17T18:05:22.8960636Z 
2025-08-17T18:05:22.8960732Z # logistics\_etl.tests.test\_client
2025-08-17T18:05:22.8960899Z 
2025-08-17T18:05:22.8960990Z <a id="logistics_etl.tests"></a>
2025-08-17T18:05:22.8961158Z 
2025-08-17T18:05:22.8961251Z # logistics\_etl.tests
2025-08-17T18:05:22.8961388Z 
2025-08-17T18:05:22.8961482Z <a id="logistics_etl.flow"></a>
2025-08-17T18:05:22.8961633Z 
2025-08-17T18:05:22.8961731Z # logistics\_etl.flow
2025-08-17T18:05:22.8961859Z 
2025-08-17T18:05:22.8961956Z <a id="logistics_etl.client"></a>
2025-08-17T18:05:22.8962120Z 
2025-08-17T18:05:22.8962211Z # logistics\_etl.client
2025-08-17T18:05:22.8962342Z 
2025-08-17T18:05:22.8962440Z <a id="logistics_etl.cron"></a>
2025-08-17T18:05:22.8962596Z 
2025-08-17T18:05:22.8962689Z # logistics\_etl.cron
2025-08-17T18:05:22.8962821Z 
2025-08-17T18:05:22.8962925Z <a id="logistics_etl.db"></a>
2025-08-17T18:05:22.8963075Z 
2025-08-17T18:05:22.8963167Z # logistics\_etl.db
2025-08-17T18:05:22.8963290Z 
2025-08-17T18:05:22.8963390Z <a id="logistics_etl.repository"></a>
2025-08-17T18:05:22.8963560Z 
2025-08-17T18:05:22.8963652Z # logistics\_etl.repository
2025-08-17T18:05:22.8963804Z 
2025-08-17T18:05:22.8963894Z <a id="alert_bot"></a>
2025-08-17T18:05:22.8964292Z 
2025-08-17T18:05:22.8964381Z # alert\_bot
2025-08-17T18:05:22.8964494Z 
2025-08-17T18:05:22.8964597Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-17T18:05:22.8964777Z 
2025-08-17T18:05:22.8964874Z # alert\_bot.tests.test\_smoke
2025-08-17T18:05:22.8965024Z 
2025-08-17T18:05:22.8965119Z <a id="alert_bot.tests"></a>
2025-08-17T18:05:22.8965269Z 
2025-08-17T18:05:22.8965361Z # alert\_bot.tests
2025-08-17T18:05:22.8965483Z 
2025-08-17T18:05:22.8965585Z <a id="alert_bot.alert_bot"></a>
2025-08-17T18:05:22.8965749Z 
2025-08-17T18:05:22.8965838Z # alert\_bot.alert\_bot
2025-08-17T18:05:22.8965969Z 
2025-08-17T18:05:22.8966060Z <a id="alert_bot.rules"></a>
2025-08-17T18:05:22.8966204Z 
2025-08-17T18:05:22.8966294Z # alert\_bot.rules
2025-08-17T18:05:22.8966421Z 
2025-08-17T18:05:22.8966513Z <a id="common"></a>
2025-08-17T18:05:22.8966632Z 
2025-08-17T18:05:22.8966716Z # common
2025-08-17T18:05:22.8966826Z 
2025-08-17T18:05:22.8966910Z <a id="common.dsn"></a>
2025-08-17T18:05:22.8967350Z 
2025-08-17T18:05:22.8967434Z # common.dsn
2025-08-17T18:05:22.8967546Z 
2025-08-17T18:05:22.8967647Z <a id="common.dsn.build_dsn"></a>
2025-08-17T18:05:22.8967814Z 
2025-08-17T18:05:22.8967901Z #### build\_dsn
2025-08-17T18:05:22.8968012Z 
2025-08-17T18:05:22.8968227Z ```python
2025-08-17T18:05:22.8968427Z def build_dsn(sync: bool = True) -> str
2025-08-17T18:05:22.8968679Z ```
2025-08-17T18:05:22.8968776Z 
2025-08-17T18:05:22.8968913Z Return a Postgres DSN, validating required variables.
2025-08-17T18:05:22.8969131Z 
2025-08-17T18:05:22.8969332Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-17T18:05:22.8969799Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-17T18:05:22.8970242Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-17T18:05:22.8970582Z missing.
2025-08-17T18:05:22.8970689Z 
2025-08-17T18:05:22.8970782Z <a id="common.models_vendor"></a>
2025-08-17T18:05:22.8970949Z 
2025-08-17T18:05:22.8971049Z # common.models\_vendor
2025-08-17T18:05:22.8971182Z 
2025-08-17T18:05:22.8971287Z <a id="common.models_vendor.Vendor"></a>
2025-08-17T18:05:22.8971475Z 
2025-08-17T18:05:22.8971554Z ## Vendor Objects
2025-08-17T18:05:22.8971668Z 
2025-08-17T18:05:22.8971754Z ```python
2025-08-17T18:05:22.8971954Z class Vendor(Base)
2025-08-17T18:05:22.8972142Z ```
2025-08-17T18:05:22.8972246Z 
2025-08-17T18:05:22.8972344Z Vendor of inventory items.
2025-08-17T18:05:22.8972486Z 
2025-08-17T18:05:22.8972607Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-17T18:05:22.8972807Z 
2025-08-17T18:05:22.8972902Z ## VendorPrice Objects
2025-08-17T18:05:22.8973038Z 
2025-08-17T18:05:22.8973120Z ```python
2025-08-17T18:05:22.8973317Z class VendorPrice(Base)
2025-08-17T18:05:22.8973534Z ```
2025-08-17T18:05:22.8973632Z 
2025-08-17T18:05:22.8973742Z Association table linking vendors to pricing.
2025-08-17T18:05:22.8973953Z 
2025-08-17T18:05:22.8974038Z <a id="common.db_url"></a>
2025-08-17T18:05:22.8974186Z 
2025-08-17T18:05:22.9009915Z # common.db\_url
2025-08-17T18:05:22.9010337Z 
2025-08-17T18:05:22.9010595Z <a id="common.db_url.build_url"></a>
2025-08-17T18:05:22.9010902Z 
2025-08-17T18:05:22.9011019Z #### build\_url
2025-08-17T18:05:22.9011195Z 
2025-08-17T18:05:22.9011331Z ```python
2025-08-17T18:05:22.9011639Z def build_url(async_: bool = True) -> str
2025-08-17T18:05:22.9012020Z ```
2025-08-17T18:05:22.9012151Z 
2025-08-17T18:05:22.9012304Z Return Postgres DSN from env or PG_* parts.
2025-08-17T18:05:22.9012611Z 
2025-08-17T18:05:22.9012732Z <a id="common.keepa"></a>
2025-08-17T18:05:22.9012944Z 
2025-08-17T18:05:22.9013061Z # common.keepa
2025-08-17T18:05:22.9013220Z 
2025-08-17T18:05:22.9013334Z <a id="common.llm"></a>
2025-08-17T18:05:22.9013531Z 
2025-08-17T18:05:22.9013640Z # common.llm
2025-08-17T18:05:22.9013786Z 
2025-08-17T18:05:22.9013911Z <a id="common.settings"></a>
2025-08-17T18:05:22.9014145Z 
2025-08-17T18:05:22.9014248Z # common.settings
2025-08-17T18:05:22.9014412Z 
2025-08-17T18:05:22.9014916Z <a id="common.db"></a>
2025-08-17T18:05:22.9015107Z 
2025-08-17T18:05:22.9015208Z # common.db
2025-08-17T18:05:22.9015346Z 
2025-08-17T18:05:22.9015500Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-17T18:05:22.9015858Z 
2025-08-17T18:05:22.9015977Z #### build\_sqlalchemy\_url
2025-08-17T18:05:22.9016191Z 
2025-08-17T18:05:22.9016287Z ```python
2025-08-17T18:05:22.9016549Z def build_sqlalchemy_url() -> str
2025-08-17T18:05:22.9016890Z ```
2025-08-17T18:05:22.9017026Z 
2025-08-17T18:05:22.9017180Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T18:05:22.9017468Z 
2025-08-17T18:05:22.9017607Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-17T18:05:22.9017877Z 
2025-08-17T18:05:22.9017994Z #### build\_asyncpg\_dsn
2025-08-17T18:05:22.9018461Z 
2025-08-17T18:05:22.9018563Z ```python
2025-08-17T18:05:22.9018826Z def build_asyncpg_dsn() -> str
2025-08-17T18:05:22.9019129Z ```
2025-08-17T18:05:22.9019267Z 
2025-08-17T18:05:22.9019473Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T18:05:22.9020112Z 
2025-08-17T18:05:22.9020245Z <a id="common.db.refresh_mvs"></a>
2025-08-17T18:05:22.9020502Z 
2025-08-17T18:05:22.9020606Z #### refresh\_mvs
2025-08-17T18:05:22.9020778Z 
2025-08-17T18:05:22.9020885Z ```python
2025-08-17T18:05:22.9021179Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T18:05:22.9021606Z ```
2025-08-17T18:05:22.9021736Z 
2025-08-17T18:05:22.9021970Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T18:05:22.9022334Z 
2025-08-17T18:05:22.9022450Z <a id="common.config"></a>
2025-08-17T18:05:22.9022650Z 
2025-08-17T18:05:22.9022756Z # common.config
2025-08-17T18:05:22.9022905Z 
2025-08-17T18:05:22.9023013Z <a id="common.base"></a>
2025-08-17T18:05:22.9023213Z 
2025-08-17T18:05:22.9023319Z # common.base
2025-08-17T18:05:22.9023476Z 
2025-08-17T18:05:22.9023593Z <a id="common.base.Base"></a>
2025-08-17T18:05:22.9023895Z 
2025-08-17T18:05:22.9023994Z ## Base Objects
2025-08-17T18:05:22.9024145Z 
2025-08-17T18:05:22.9024246Z ```python
2025-08-17T18:05:22.9024511Z class Base(DeclarativeBase)
2025-08-17T18:05:22.9024809Z ```
2025-08-17T18:05:22.9024931Z 
2025-08-17T18:05:22.9025054Z Base class for SQLAlchemy models.
2025-08-17T18:05:22.9025312Z 
2025-08-17T18:05:22.9025426Z <a id="repricer"></a>
2025-08-17T18:05:22.9025608Z 
2025-08-17T18:05:22.9025703Z # repricer
2025-08-17T18:05:22.9025850Z 
2025-08-17T18:05:22.9025984Z <a id="repricer.app.schemas"></a>
2025-08-17T18:05:22.9026222Z 
2025-08-17T18:05:22.9026348Z # repricer.app.schemas
2025-08-17T18:05:22.9026542Z 
2025-08-17T18:05:22.9026667Z <a id="repricer.app.deps"></a>
2025-08-17T18:05:22.9026902Z 
2025-08-17T18:05:22.9027010Z # repricer.app.deps
2025-08-17T18:05:22.9027178Z 
2025-08-17T18:05:22.9027372Z Placeholder module for Keepa / SP-API clients.
2025-08-17T18:05:22.9027693Z 
2025-08-17T18:05:22.9027817Z <a id="repricer.app.logic"></a>
2025-08-17T18:05:22.9028190Z 
2025-08-17T18:05:22.9028320Z # repricer.app.logic
2025-08-17T18:05:22.9028493Z 
2025-08-17T18:05:22.9028645Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-17T18:05:22.9028944Z 
2025-08-17T18:05:22.9029050Z #### MIN\_MARGIN
2025-08-17T18:05:22.9029211Z 
2025-08-17T18:05:22.9029312Z 15 % ROI
2025-08-17T18:05:22.9029450Z 
2025-08-17T18:05:22.9029601Z <a id="repricer.app.logic.compute_price"></a>
2025-08-17T18:05:22.9029882Z 
2025-08-17T18:05:22.9029998Z #### compute\_price
2025-08-17T18:05:22.9030158Z 
2025-08-17T18:05:22.9030255Z ```python
2025-08-17T18:05:22.9030636Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-17T18:05:22.9031115Z ```
2025-08-17T18:05:22.9031245Z 
2025-08-17T18:05:22.9031405Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-17T18:05:22.9031833Z Replace with real competitive logic later.
2025-08-17T18:05:22.9032106Z 
2025-08-17T18:05:22.9032229Z <a id="repricer.app.main"></a>
2025-08-17T18:05:22.9032449Z 
2025-08-17T18:05:22.9032560Z # repricer.app.main
2025-08-17T18:05:22.9032724Z 
2025-08-17T18:05:22.9032834Z <a id="repricer.app"></a>
2025-08-17T18:05:22.9033256Z 
2025-08-17T18:05:22.9033364Z # repricer.app
2025-08-17T18:05:22.9033515Z 
2025-08-17T18:05:22.9033658Z <a id="repricer.tests.test_imports"></a>
2025-08-17T18:05:22.9033935Z 
2025-08-17T18:05:22.9034065Z # repricer.tests.test\_imports
2025-08-17T18:05:22.9034282Z 
2025-08-17T18:05:22.9034417Z <a id="repricer.tests.test_smoke"></a>
2025-08-17T18:05:22.9034665Z 
2025-08-17T18:05:22.9034785Z # repricer.tests.test\_smoke
2025-08-17T18:05:22.9035000Z 
2025-08-17T18:05:22.9035123Z <a id="repricer.tests"></a>
2025-08-17T18:05:22.9035329Z 
2025-08-17T18:05:22.9035430Z # repricer.tests
2025-08-17T18:05:22.9035611Z 
2025-08-17T18:05:22.9035711Z <a id="db"></a>
2025-08-17T18:05:22.9035866Z 
2025-08-17T18:05:22.9035956Z # db
2025-08-17T18:05:22.9036088Z 
2025-08-17T18:05:22.9036200Z <a id="db.utils.views"></a>
2025-08-17T18:05:22.9036399Z 
2025-08-17T18:05:22.9036507Z # db.utils.views
2025-08-17T18:05:22.9036664Z 
2025-08-17T18:05:22.9036802Z <a id="db.utils.views.replace_view"></a>
2025-08-17T18:05:22.9037271Z 
2025-08-17T18:05:22.9037383Z #### replace\_view
2025-08-17T18:05:22.9037546Z 
2025-08-17T18:05:22.9037647Z ```python
2025-08-17T18:05:22.9037950Z def replace_view(name: str, new_sql: str) -> None
2025-08-17T18:05:22.9038489Z ```
2025-08-17T18:05:22.9038620Z 
2025-08-17T18:05:22.9038756Z Drop and recreate a SQL view atomically.
2025-08-17T18:05:22.9039010Z 
2025-08-17T18:05:22.9039122Z <a id="db.utils"></a>
2025-08-17T18:05:22.9039296Z 
2025-08-17T18:05:22.9039390Z # db.utils
2025-08-17T18:05:22.9039532Z 
2025-08-17T18:05:22.9039654Z <a id="price_importer"></a>
2025-08-17T18:05:22.9039864Z 
2025-08-17T18:05:22.9039965Z # price\_importer
2025-08-17T18:05:22.9040132Z 
2025-08-17T18:05:22.9040285Z <a id="price_importer.services_common.dsn"></a>
2025-08-17T18:05:22.9040581Z 
2025-08-17T18:05:22.9040717Z # price\_importer.services\_common.dsn
2025-08-17T18:05:22.9040977Z 
2025-08-17T18:05:22.9041164Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-17T18:05:22.9041492Z 
2025-08-17T18:05:22.9041600Z #### build\_dsn
2025-08-17T18:05:22.9041756Z 
2025-08-17T18:05:22.9041848Z ```python
2025-08-17T18:05:22.9042107Z def build_dsn(sync: bool = True) -> str
2025-08-17T18:05:22.9042438Z ```
2025-08-17T18:05:22.9042564Z 
2025-08-17T18:05:22.9042665Z Return safe DSN.
2025-08-17T18:05:22.9042831Z 
2025-08-17T18:05:22.9043297Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-17T18:05:22.9043626Z 
2025-08-17T18:05:22.9043822Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-17T18:05:22.9044155Z 
2025-08-17T18:05:22.9044318Z # price\_importer.services\_common.models\_vendor
2025-08-17T18:05:22.9044615Z 
2025-08-17T18:05:22.9044785Z <a id="price_importer.services_common.db_url"></a>
2025-08-17T18:05:22.9045079Z 
2025-08-17T18:05:22.9045216Z # price\_importer.services\_common.db\_url
2025-08-17T18:05:22.9045481Z 
2025-08-17T18:05:22.9045691Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-17T18:05:22.9046035Z 
2025-08-17T18:05:22.9046133Z #### build\_url
2025-08-17T18:05:22.9046325Z 
2025-08-17T18:05:22.9046419Z ```python
2025-08-17T18:05:22.9046679Z def build_url(async_: bool = True) -> str
2025-08-17T18:05:22.9047024Z ```
2025-08-17T18:05:22.9047147Z 
2025-08-17T18:05:22.9047303Z Return Postgres DSN from env or PG_* parts.
2025-08-17T18:05:22.9047583Z 
2025-08-17T18:05:22.9047750Z <a id="price_importer.services_common.keepa"></a>
2025-08-17T18:05:22.9048200Z 
2025-08-17T18:05:22.9048349Z # price\_importer.services\_common.keepa
2025-08-17T18:05:22.9048615Z 
2025-08-17T18:05:22.9048767Z <a id="price_importer.services_common.llm"></a>
2025-08-17T18:05:22.9049052Z 
2025-08-17T18:05:22.9049189Z # price\_importer.services\_common.llm
2025-08-17T18:05:22.9049439Z 
2025-08-17T18:05:22.9049615Z <a id="price_importer.services_common.settings"></a>
2025-08-17T18:05:22.9049915Z 
2025-08-17T18:05:22.9050063Z # price\_importer.services\_common.settings
2025-08-17T18:05:22.9050336Z 
2025-08-17T18:05:22.9050486Z <a id="price_importer.services_common.db"></a>
2025-08-17T18:05:22.9050776Z 
2025-08-17T18:05:22.9051131Z # price\_importer.services\_common.db
2025-08-17T18:05:22.9051389Z 
2025-08-17T18:05:22.9051634Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-17T18:05:22.9052013Z 
2025-08-17T18:05:22.9052136Z #### build\_sqlalchemy\_url
2025-08-17T18:05:22.9052332Z 
2025-08-17T18:05:22.9052422Z ```python
2025-08-17T18:05:22.9052689Z def build_sqlalchemy_url() -> str
2025-08-17T18:05:22.9053008Z ```
2025-08-17T18:05:22.9053145Z 
2025-08-17T18:05:22.9053292Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T18:05:22.9053563Z 
2025-08-17T18:05:22.9053787Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-17T18:05:22.9054144Z 
2025-08-17T18:05:22.9054255Z #### build\_asyncpg\_dsn
2025-08-17T18:05:22.9054444Z 
2025-08-17T18:05:22.9054544Z ```python
2025-08-17T18:05:22.9054788Z def build_asyncpg_dsn() -> str
2025-08-17T18:05:22.9055097Z ```
2025-08-17T18:05:22.9055222Z 
2025-08-17T18:05:22.9055420Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T18:05:22.9055978Z 
2025-08-17T18:05:22.9056177Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-17T18:05:22.9056514Z 
2025-08-17T18:05:22.9056623Z #### refresh\_mvs
2025-08-17T18:05:22.9056782Z 
2025-08-17T18:05:22.9056876Z ```python
2025-08-17T18:05:22.9057182Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T18:05:22.9057572Z ```
2025-08-17T18:05:22.9057703Z 
2025-08-17T18:05:22.9057916Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T18:05:22.9058477Z 
2025-08-17T18:05:22.9058634Z <a id="price_importer.services_common"></a>
2025-08-17T18:05:22.9058921Z 
2025-08-17T18:05:22.9059049Z # price\_importer.services\_common
2025-08-17T18:05:22.9059282Z 
2025-08-17T18:05:22.9059443Z <a id="price_importer.services_common.base"></a>
2025-08-17T18:05:22.9059730Z 
2025-08-17T18:05:22.9059863Z # price\_importer.services\_common.base
2025-08-17T18:05:22.9060121Z 
2025-08-17T18:05:22.9060257Z <a id="price_importer.normaliser"></a>
2025-08-17T18:05:22.9060534Z 
2025-08-17T18:05:22.9060657Z # price\_importer.normaliser
2025-08-17T18:05:22.9060874Z 
2025-08-17T18:05:22.9061030Z <a id="price_importer.common.models_vendor"></a>
2025-08-17T18:05:22.9061319Z 
2025-08-17T18:05:22.9061462Z # price\_importer.common.models\_vendor
2025-08-17T18:05:22.9061718Z 
2025-08-17T18:05:22.9061863Z <a id="price_importer.common.db_url"></a>
2025-08-17T18:05:22.9062139Z 
2025-08-17T18:05:22.9062266Z # price\_importer.common.db\_url
2025-08-17T18:05:22.9062497Z 
2025-08-17T18:05:22.9062660Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-17T18:05:22.9062958Z 
2025-08-17T18:05:22.9063062Z #### make\_dsn
2025-08-17T18:05:22.9063209Z 
2025-08-17T18:05:22.9063311Z ```python
2025-08-17T18:05:22.9063572Z def make_dsn(async_: bool = False) -> str
2025-08-17T18:05:22.9063924Z ```
2025-08-17T18:05:22.9064048Z 
2025-08-17T18:05:22.9064229Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-17T18:05:22.9064549Z 
2025-08-17T18:05:22.9064716Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-17T18:05:22.9065037Z 
2025-08-17T18:05:22.9065143Z #### build\_url
2025-08-17T18:05:22.9065294Z 
2025-08-17T18:05:22.9065387Z ```python
2025-08-17T18:05:22.9065667Z def build_url(async_: bool = False) -> str
2025-08-17T18:05:22.9066027Z ```
2025-08-17T18:05:22.9066164Z 
2025-08-17T18:05:22.9066349Z Return Postgres DSN built from environment variables.
2025-08-17T18:05:22.9066668Z 
2025-08-17T18:05:22.9066797Z <a id="price_importer.common"></a>
2025-08-17T18:05:22.9067039Z 
2025-08-17T18:05:22.9067154Z # price\_importer.common
2025-08-17T18:05:22.9067358Z 
2025-08-17T18:05:22.9067498Z <a id="price_importer.common.base"></a>
2025-08-17T18:05:22.9067760Z 
2025-08-17T18:05:22.9067888Z # price\_importer.common.base
2025-08-17T18:05:22.9068265Z 
2025-08-17T18:05:22.9068413Z <a id="price_importer.tests.conftest"></a>
2025-08-17T18:05:22.9068689Z 
2025-08-17T18:05:22.9068818Z # price\_importer.tests.conftest
2025-08-17T18:05:22.9069049Z 
2025-08-17T18:05:22.9069200Z <a id="price_importer.tests.test_reader"></a>
2025-08-17T18:05:22.9069697Z 
2025-08-17T18:05:22.9069836Z # price\_importer.tests.test\_reader
2025-08-17T18:05:22.9070083Z 
2025-08-17T18:05:22.9070238Z <a id="price_importer.tests.test_imports"></a>
2025-08-17T18:05:22.9070534Z 
2025-08-17T18:05:22.9070669Z # price\_importer.tests.test\_imports
2025-08-17T18:05:22.9070916Z 
2025-08-17T18:05:22.9071059Z <a id="price_importer.tests.test_smoke"></a>
2025-08-17T18:05:22.9071338Z 
2025-08-17T18:05:22.9071467Z # price\_importer.tests.test\_smoke
2025-08-17T18:05:22.9071710Z 
2025-08-17T18:05:22.9071880Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-17T18:05:22.9072173Z 
2025-08-17T18:05:22.9072312Z # price\_importer.tests.test\_normaliser
2025-08-17T18:05:22.9072585Z 
2025-08-17T18:05:22.9072716Z <a id="price_importer.tests"></a>
2025-08-17T18:05:22.9072951Z 
2025-08-17T18:05:22.9073067Z # price\_importer.tests
2025-08-17T18:05:22.9073266Z 
2025-08-17T18:05:22.9073397Z <a id="price_importer.reader"></a>
2025-08-17T18:05:22.9073828Z 
2025-08-17T18:05:22.9073948Z # price\_importer.reader
2025-08-17T18:05:22.9074140Z 
2025-08-17T18:05:22.9074278Z <a id="price_importer.repository"></a>
2025-08-17T18:05:22.9074538Z 
2025-08-17T18:05:22.9074664Z # price\_importer.repository
2025-08-17T18:05:22.9074877Z 
2025-08-17T18:05:22.9075004Z <a id="price_importer.import"></a>
2025-08-17T18:05:22.9075242Z 
2025-08-17T18:05:22.9075360Z # price\_importer.import
2025-08-17T18:05:22.9075551Z 
2025-08-17T18:05:22.9075665Z <a id="fees_h10"></a>
2025-08-17T18:05:22.9075836Z 
2025-08-17T18:05:22.9075933Z # fees\_h10
2025-08-17T18:05:22.9076068Z 
2025-08-17T18:05:22.9076186Z <a id="fees_h10.worker"></a>
2025-08-17T18:05:22.9076388Z 
2025-08-17T18:05:22.9076489Z # fees\_h10.worker
2025-08-17T18:05:22.9076655Z 
2025-08-17T18:05:22.9076798Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-17T18:05:22.9077066Z 
2025-08-17T18:05:22.9077178Z #### list\_active\_asins
2025-08-17T18:05:22.9077363Z 
2025-08-17T18:05:22.9077458Z ```python
2025-08-17T18:05:22.9077729Z def list_active_asins() -> list[str]
2025-08-17T18:05:22.9078197Z ```
2025-08-17T18:05:22.9078330Z 
2025-08-17T18:05:22.9078498Z Return known ASINs or an empty list if unavailable.
2025-08-17T18:05:22.9078796Z 
2025-08-17T18:05:22.9078918Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-17T18:05:22.9079164Z 
2025-08-17T18:05:22.9079282Z # fees\_h10.tests.test\_smoke
2025-08-17T18:05:22.9079495Z 
2025-08-17T18:05:22.9079618Z <a id="fees_h10.tests"></a>
2025-08-17T18:05:22.9079815Z 
2025-08-17T18:05:22.9079910Z # fees\_h10.tests
2025-08-17T18:05:22.9080073Z 
2025-08-17T18:05:22.9080185Z <a id="fees_h10.client"></a>
2025-08-17T18:05:22.9080389Z 
2025-08-17T18:05:22.9080485Z # fees\_h10.client
2025-08-17T18:05:22.9080649Z 
2025-08-17T18:05:22.9080767Z <a id="fees_h10.repository"></a>
2025-08-17T18:05:22.9080985Z 
2025-08-17T18:05:22.9081099Z # fees\_h10.repository
2025-08-17T18:05:22.9081278Z 
2025-08-17T18:05:22.9081383Z <a id="emailer"></a>
2025-08-17T18:05:22.9081554Z 
2025-08-17T18:05:22.9081663Z # emailer
2025-08-17T18:05:22.9081806Z 
2025-08-17T18:05:22.9081962Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-17T18:05:22.9082250Z 
2025-08-17T18:05:22.9082384Z # emailer.tests.test\_import\_emailer
2025-08-17T18:05:22.9082633Z 
2025-08-17T18:05:22.9082772Z <a id="emailer.tests.test_smoke"></a>
2025-08-17T18:05:22.9083010Z 
2025-08-17T18:05:22.9083126Z # emailer.tests.test\_smoke
2025-08-17T18:05:22.9083423Z 
2025-08-17T18:05:22.9083549Z <a id="emailer.tests"></a>
2025-08-17T18:05:22.9083755Z 
2025-08-17T18:05:22.9083857Z # emailer.tests
2025-08-17T18:05:22.9084023Z 
2025-08-17T18:05:22.9084152Z <a id="emailer.generate_body"></a>
2025-08-17T18:05:22.9084389Z 
2025-08-17T18:05:22.9084510Z # emailer.generate\_body
2025-08-17T18:05:22.9084702Z 
2025-08-17T18:05:22.9084810Z <a id="llm_server"></a>
2025-08-17T18:05:22.9084988Z 
2025-08-17T18:05:22.9085093Z # llm\_server
2025-08-17T18:05:22.9085236Z 
2025-08-17T18:05:22.9085357Z <a id="llm_server.app"></a>
2025-08-17T18:05:22.9085568Z 
2025-08-17T18:05:22.9085879Z # llm\_server.app
2025-08-17T18:05:22.9086033Z 
