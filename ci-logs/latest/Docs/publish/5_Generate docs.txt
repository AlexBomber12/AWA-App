2025-08-19T20:05:43.7527006Z ##[group]Run pydoc-markdown
2025-08-19T20:05:43.7527323Z [36;1mpydoc-markdown[0m
2025-08-19T20:05:43.7567272Z shell: /usr/bin/bash -e {0}
2025-08-19T20:05:43.7567528Z env:
2025-08-19T20:05:43.7567803Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T20:05:43.7568289Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-19T20:05:43.7568759Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T20:05:43.7569168Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T20:05:43.7569581Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T20:05:43.7569992Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-19T20:05:43.7570343Z ##[endgroup]
2025-08-19T20:05:44.0997594Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-19T20:05:44.0998377Z Unknown key(s) "{'output_directory'}" at:
2025-08-19T20:05:44.0998862Z In "pydoc-markdown.yml"
2025-08-19T20:05:44.0999314Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-19T20:05:44.0999993Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-19T20:05:44.1000802Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-19T20:05:44.1001350Z 
2025-08-19T20:05:44.4464097Z <a id="__init__"></a>
2025-08-19T20:05:44.4464633Z 
2025-08-19T20:05:44.4464858Z # \_\_init\_\_
2025-08-19T20:05:44.4465199Z 
2025-08-19T20:05:44.4465425Z <a id="api"></a>
2025-08-19T20:05:44.4465789Z 
2025-08-19T20:05:44.4465996Z # api
2025-08-19T20:05:44.4466286Z 
2025-08-19T20:05:44.4466504Z <a id="api.errors"></a>
2025-08-19T20:05:44.4466854Z 
2025-08-19T20:05:44.4467045Z # api.errors
2025-08-19T20:05:44.4467348Z 
2025-08-19T20:05:44.4467601Z <a id="api.sentry_config"></a>
2025-08-19T20:05:44.4468069Z 
2025-08-19T20:05:44.4468311Z # api.sentry\_config
2025-08-19T20:05:44.4468712Z 
2025-08-19T20:05:44.4469002Z <a id="api.tests.test_stats_contracts"></a>
2025-08-19T20:05:44.4469590Z 
2025-08-19T20:05:44.4470182Z # api.tests.test\_stats\_contracts
2025-08-19T20:05:44.4470513Z 
2025-08-19T20:05:44.4470706Z <a id="api.tests.test_sentry_scrub"></a>
2025-08-19T20:05:44.4471162Z 
2025-08-19T20:05:44.4471374Z # api.tests.test\_sentry\_scrub
2025-08-19T20:05:44.4472079Z 
2025-08-19T20:05:44.4472331Z <a id="api.tests.test_roi_basic_auth"></a>
2025-08-19T20:05:44.4472817Z 
2025-08-19T20:05:44.4473022Z # api.tests.test\_roi\_basic\_auth
2025-08-19T20:05:44.4473375Z 
2025-08-19T20:05:44.4473588Z <a id="api.tests.test_errors_json"></a>
2025-08-19T20:05:44.4473981Z 
2025-08-19T20:05:44.4474169Z # api.tests.test\_errors\_json
2025-08-19T20:05:44.4474508Z 
2025-08-19T20:05:44.4474694Z <a id="api.tests.test_llm"></a>
2025-08-19T20:05:44.4475022Z 
2025-08-19T20:05:44.4475327Z # api.tests.test\_llm
2025-08-19T20:05:44.4475611Z 
2025-08-19T20:05:44.4475812Z <a id="api.tests.test_roi_filters"></a>
2025-08-19T20:05:44.4476201Z 
2025-08-19T20:05:44.4476390Z # api.tests.test\_roi\_filters
2025-08-19T20:05:44.4476717Z 
2025-08-19T20:05:44.4476950Z <a id="api.tests.test_sentry_event"></a>
2025-08-19T20:05:44.4477361Z 
2025-08-19T20:05:44.4477543Z # api.tests.test\_sentry\_event
2025-08-19T20:05:44.4477894Z 
2025-08-19T20:05:44.4478171Z <a id="api.tests.test_sentry_event.DummyTransport"></a>
2025-08-19T20:05:44.4478669Z 
2025-08-19T20:05:44.4478852Z ## DummyTransport Objects
2025-08-19T20:05:44.4479164Z 
2025-08-19T20:05:44.4479321Z ```python
2025-08-19T20:05:44.4479711Z class DummyTransport()
2025-08-19T20:05:44.4480140Z ```
2025-08-19T20:05:44.4480300Z 
2025-08-19T20:05:44.4480605Z <a id="api.tests.test_sentry_event.DummyTransport.capture_envelope"></a>
2025-08-19T20:05:44.4481077Z 
2025-08-19T20:05:44.4481209Z #### capture\_envelope
2025-08-19T20:05:44.4481413Z 
2025-08-19T20:05:44.4481727Z ```python
2025-08-19T20:05:44.4482006Z def capture_envelope(envelope)
2025-08-19T20:05:44.4482238Z ```
2025-08-19T20:05:44.4482333Z 
2025-08-19T20:05:44.4482466Z Capture events sent as envelopes by Sentry SDK >= 2.0.
2025-08-19T20:05:44.4482698Z 
2025-08-19T20:05:44.4482793Z <a id="api.tests.test_cors"></a>
2025-08-19T20:05:44.4483219Z 
2025-08-19T20:05:44.4483307Z # api.tests.test\_cors
2025-08-19T20:05:44.4483448Z 
2025-08-19T20:05:44.4483549Z <a id="api.tests.test_imports"></a>
2025-08-19T20:05:44.4483717Z 
2025-08-19T20:05:44.4483811Z # api.tests.test\_imports
2025-08-19T20:05:44.4483953Z 
2025-08-19T20:05:44.4484053Z <a id="api.tests.test_rate_limit"></a>
2025-08-19T20:05:44.4484225Z 
2025-08-19T20:05:44.4484320Z # api.tests.test\_rate\_limit
2025-08-19T20:05:44.4484466Z 
2025-08-19T20:05:44.4484573Z <a id="api.tests.test_rate_limit.app"></a>
2025-08-19T20:05:44.4484757Z 
2025-08-19T20:05:44.4484829Z #### app
2025-08-19T20:05:44.4484928Z 
2025-08-19T20:05:44.4485017Z noqa: E402
2025-08-19T20:05:44.4485119Z 
2025-08-19T20:05:44.4485218Z <a id="api.tests.test_entrypoint"></a>
2025-08-19T20:05:44.4485386Z 
2025-08-19T20:05:44.4485485Z # api.tests.test\_entrypoint
2025-08-19T20:05:44.4485633Z 
2025-08-19T20:05:44.4485724Z <a id="api.tests.test_health"></a>
2025-08-19T20:05:44.4485901Z 
2025-08-19T20:05:44.4485986Z # api.tests.test\_health
2025-08-19T20:05:44.4486123Z 
2025-08-19T20:05:44.4486214Z <a id="api.tests.test_score"></a>
2025-08-19T20:05:44.4486379Z 
2025-08-19T20:05:44.4486463Z # api.tests.test\_score
2025-08-19T20:05:44.4486592Z 
2025-08-19T20:05:44.4486691Z <a id="api.logging_config"></a>
2025-08-19T20:05:44.4486839Z 
2025-08-19T20:05:44.4486922Z # api.logging\_config
2025-08-19T20:05:44.4487053Z 
2025-08-19T20:05:44.4487151Z <a id="api.migrations.env"></a>
2025-08-19T20:05:44.4487301Z 
2025-08-19T20:05:44.4487385Z # api.migrations.env
2025-08-19T20:05:44.4487517Z 
2025-08-19T20:05:44.4487643Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-19T20:05:44.4487854Z 
2025-08-19T20:05:44.4487977Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-19T20:05:44.4488170Z 
2025-08-19T20:05:44.4488287Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-19T20:05:44.4488496Z 
2025-08-19T20:05:44.4488600Z # api.migrations.versions.0004\_fee\_cron
2025-08-19T20:05:44.4488909Z 
2025-08-19T20:05:44.4489072Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-19T20:05:44.4489328Z 
2025-08-19T20:05:44.4489474Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-19T20:05:44.4489709Z 
2025-08-19T20:05:44.4489845Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-19T20:05:44.4490057Z 
2025-08-19T20:05:44.4490170Z # api.migrations.versions.0003\_vendor\_prices
2025-08-19T20:05:44.4490368Z 
2025-08-19T20:05:44.4490491Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-19T20:05:44.4490693Z 
2025-08-19T20:05:44.4490812Z # api.migrations.versions.0024\_create\_buybox
2025-08-19T20:05:44.4491003Z 
2025-08-19T20:05:44.4491143Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-19T20:05:44.4491368Z 
2025-08-19T20:05:44.4491700Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-19T20:05:44.4491935Z 
2025-08-19T20:05:44.4492069Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-19T20:05:44.4492375Z 
2025-08-19T20:05:44.4492493Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-19T20:05:44.4492720Z 
2025-08-19T20:05:44.4492858Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-19T20:05:44.4493070Z 
2025-08-19T20:05:44.4493184Z # api.migrations.versions.0020\_unified\_schema
2025-08-19T20:05:44.4493383Z 
2025-08-19T20:05:44.4493527Z <a id="api.migrations.versions.0025_pr4_indexes_loadlog"></a>
2025-08-19T20:05:44.4493754Z 
2025-08-19T20:05:44.4493887Z # api.migrations.versions.0025\_pr4\_indexes\_loadlog
2025-08-19T20:05:44.4494095Z 
2025-08-19T20:05:44.4494228Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-19T20:05:44.4494443Z 
2025-08-19T20:05:44.4494557Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-19T20:05:44.4494753Z 
2025-08-19T20:05:44.4494900Z <a id="api.migrations.versions.0026_amazon_new_reports"></a>
2025-08-19T20:05:44.4495123Z 
2025-08-19T20:05:44.4495248Z # api.migrations.versions.0026\_amazon\_new\_reports
2025-08-19T20:05:44.4495609Z 
2025-08-19T20:05:44.4495739Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-19T20:05:44.4495938Z 
2025-08-19T20:05:44.4496043Z # api.migrations.versions.0001\_baseline
2025-08-19T20:05:44.4496232Z 
2025-08-19T20:05:44.4496332Z <a id="api.migrations.versions"></a>
2025-08-19T20:05:44.4496502Z 
2025-08-19T20:05:44.4496598Z # api.migrations.versions
2025-08-19T20:05:44.4496736Z 
2025-08-19T20:05:44.4496822Z <a id="api.migrations"></a>
2025-08-19T20:05:44.4496964Z 
2025-08-19T20:05:44.4497051Z # api.migrations
2025-08-19T20:05:44.4497343Z 
2025-08-19T20:05:44.4497474Z <a id="api.db"></a>
2025-08-19T20:05:44.4497681Z 
2025-08-19T20:05:44.4497802Z # api.db
2025-08-19T20:05:44.4497969Z 
2025-08-19T20:05:44.4498130Z <a id="api.routes.score"></a>
2025-08-19T20:05:44.4498399Z 
2025-08-19T20:05:44.4498533Z # api.routes.score
2025-08-19T20:05:44.4498742Z 
2025-08-19T20:05:44.4498901Z <a id="api.routes.stats"></a>
2025-08-19T20:05:44.4499166Z 
2025-08-19T20:05:44.4499316Z # api.routes.stats
2025-08-19T20:05:44.4499453Z 
2025-08-19T20:05:44.4499542Z <a id="api.routes.roi"></a>
2025-08-19T20:05:44.4499689Z 
2025-08-19T20:05:44.4499768Z # api.routes.roi
2025-08-19T20:05:44.4499894Z 
2025-08-19T20:05:44.4499992Z <a id="api.routes.health"></a>
2025-08-19T20:05:44.4500146Z 
2025-08-19T20:05:44.4500238Z # api.routes.health
2025-08-19T20:05:44.4500356Z 
2025-08-19T20:05:44.4500458Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-19T20:05:44.4500645Z 
2025-08-19T20:05:44.4500723Z #### MAX\_SKEW
2025-08-19T20:05:44.4500835Z 
2025-08-19T20:05:44.4500905Z seconds
2025-08-19T20:05:44.4501008Z 
2025-08-19T20:05:44.4501111Z <a id="api.routes.health.health"></a>
2025-08-19T20:05:44.4501284Z 
2025-08-19T20:05:44.4501365Z #### health
2025-08-19T20:05:44.4501679Z 
2025-08-19T20:05:44.4501805Z ```python
2025-08-19T20:05:44.4502073Z @router.get("/health", include_in_schema=False)
2025-08-19T20:05:44.4502509Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-19T20:05:44.4503065Z ```
2025-08-19T20:05:44.4503169Z 
2025-08-19T20:05:44.4503305Z Return 200 when DB reachable and clocks are in sync.
2025-08-19T20:05:44.4503522Z 
2025-08-19T20:05:44.4503620Z <a id="api.routes.repository"></a>
2025-08-19T20:05:44.4503790Z 
2025-08-19T20:05:44.4503885Z # api.routes.repository
2025-08-19T20:05:44.4504020Z 
2025-08-19T20:05:44.4504102Z <a id="api.routes"></a>
2025-08-19T20:05:44.4504237Z 
2025-08-19T20:05:44.4504317Z # api.routes
2025-08-19T20:05:44.4504425Z 
2025-08-19T20:05:44.4504515Z <a id="api.models.fee"></a>
2025-08-19T20:05:44.4504669Z 
2025-08-19T20:05:44.4504750Z # api.models.fee
2025-08-19T20:05:44.4504868Z 
2025-08-19T20:05:44.4504958Z <a id="api.models"></a>
2025-08-19T20:05:44.4505083Z 
2025-08-19T20:05:44.4505158Z # api.models
2025-08-19T20:05:44.4505268Z 
2025-08-19T20:05:44.4505372Z <a id="api.roi_repository"></a>
2025-08-19T20:05:44.4505521Z 
2025-08-19T20:05:44.4505604Z # api.roi\_repository
2025-08-19T20:05:44.4505741Z 
2025-08-19T20:05:44.4505824Z <a id="api.main"></a>
2025-08-19T20:05:44.4505956Z 
2025-08-19T20:05:44.4506058Z # api.main
2025-08-19T20:05:44.4506161Z 
2025-08-19T20:05:44.4506251Z <a id="api.main.ready"></a>
2025-08-19T20:05:44.4506403Z 
2025-08-19T20:05:44.4506478Z #### ready
2025-08-19T20:05:44.4506578Z 
2025-08-19T20:05:44.4506653Z ```python
2025-08-19T20:05:44.4506943Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-19T20:05:44.4507399Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-19T20:05:44.4507777Z                                                                       str]
2025-08-19T20:05:44.4508033Z ```
2025-08-19T20:05:44.4508126Z 
2025-08-19T20:05:44.4508231Z Return 200 only when migrations are at head.
2025-08-19T20:05:44.4508422Z 
2025-08-19T20:05:44.4508509Z <a id="api.config"></a>
2025-08-19T20:05:44.4508639Z 
2025-08-19T20:05:44.4508715Z # api.config
2025-08-19T20:05:44.4508833Z 
2025-08-19T20:05:44.4508921Z <a id="api.security"></a>
2025-08-19T20:05:44.4509066Z 
2025-08-19T20:05:44.4509271Z # api.security
2025-08-19T20:05:44.4509382Z 
2025-08-19T20:05:44.4509458Z <a id="etl"></a>
2025-08-19T20:05:44.4509575Z 
2025-08-19T20:05:44.4509654Z # etl
2025-08-19T20:05:44.4509750Z 
2025-08-19T20:05:44.4509843Z <a id="etl.fba_fee_ingestor"></a>
2025-08-19T20:05:44.4510007Z 
2025-08-19T20:05:44.4510091Z # etl.fba\_fee\_ingestor
2025-08-19T20:05:44.4510223Z 
2025-08-19T20:05:44.4510320Z <a id="etl.sp_fees_ingestor"></a>
2025-08-19T20:05:44.4510474Z 
2025-08-19T20:05:44.4510558Z # etl.sp\_fees\_ingestor
2025-08-19T20:05:44.4510688Z 
2025-08-19T20:05:44.4510785Z <a id="etl.keepa_ingestor"></a>
2025-08-19T20:05:44.4510934Z 
2025-08-19T20:05:44.4511021Z # etl.keepa\_ingestor
2025-08-19T20:05:44.4511150Z 
2025-08-19T20:05:44.4511227Z <a id="etl.db"></a>
2025-08-19T20:05:44.4511344Z 
2025-08-19T20:05:44.4511415Z # etl.db
2025-08-19T20:05:44.4511726Z 
2025-08-19T20:05:44.4511828Z <a id="etl.dialects.schemas"></a>
2025-08-19T20:05:44.4511993Z 
2025-08-19T20:05:44.4512092Z # etl.dialects.schemas
2025-08-19T20:05:44.4512224Z 
2025-08-19T20:05:44.4512339Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-19T20:05:44.4512544Z 
2025-08-19T20:05:44.4512643Z # etl.dialects.amazon\_reimbursements
2025-08-19T20:05:44.4512815Z 
2025-08-19T20:05:44.4512920Z <a id="etl.dialects.amazon_ads_sp_cost"></a>
2025-08-19T20:05:44.4513116Z 
2025-08-19T20:05:44.4513211Z # etl.dialects.amazon\_ads\_sp\_cost
2025-08-19T20:05:44.4513375Z 
2025-08-19T20:05:44.4513481Z <a id="etl.dialects.test_generic"></a>
2025-08-19T20:05:44.4513654Z 
2025-08-19T20:05:44.4513745Z # etl.dialects.test\_generic
2025-08-19T20:05:44.4513897Z 
2025-08-19T20:05:44.4513998Z <a id="etl.dialects.amazon_returns"></a>
2025-08-19T20:05:44.4514175Z 
2025-08-19T20:05:44.4514270Z # etl.dialects.amazon\_returns
2025-08-19T20:05:44.4514428Z 
2025-08-19T20:05:44.4514533Z <a id="etl.dialects.amazon_fee_preview"></a>
2025-08-19T20:05:44.4514714Z 
2025-08-19T20:05:44.4514821Z # etl.dialects.amazon\_fee\_preview
2025-08-19T20:05:44.4515142Z 
2025-08-19T20:05:44.4515263Z <a id="etl.dialects.amazon_inventory_ledger"></a>
2025-08-19T20:05:44.4515468Z 
2025-08-19T20:05:44.4515571Z # etl.dialects.amazon\_inventory\_ledger
2025-08-19T20:05:44.4515747Z 
2025-08-19T20:05:44.4515852Z <a id="etl.dialects.amazon_settlements"></a>
2025-08-19T20:05:44.4516035Z 
2025-08-19T20:05:44.4516129Z # etl.dialects.amazon\_settlements
2025-08-19T20:05:44.4516295Z 
2025-08-19T20:05:44.4516389Z <a id="etl.dialects"></a>
2025-08-19T20:05:44.4516526Z 
2025-08-19T20:05:44.4516602Z # etl.dialects
2025-08-19T20:05:44.4516717Z 
2025-08-19T20:05:44.4516795Z <a id="ingest"></a>
2025-08-19T20:05:44.4516912Z 
2025-08-19T20:05:44.4516982Z # ingest
2025-08-19T20:05:44.4517091Z 
2025-08-19T20:05:44.4517184Z <a id="ingest.maintenance"></a>
2025-08-19T20:05:44.4517336Z 
2025-08-19T20:05:44.4517424Z # ingest.maintenance
2025-08-19T20:05:44.4517548Z 
2025-08-19T20:05:44.4517639Z <a id="ingest.copy_loader"></a>
2025-08-19T20:05:44.4517784Z 
2025-08-19T20:05:44.4517872Z # ingest.copy\_loader
2025-08-19T20:05:44.4518005Z 
2025-08-19T20:05:44.4518117Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-19T20:05:44.4518319Z 
2025-08-19T20:05:44.4518407Z #### copy\_df\_via\_temp
2025-08-19T20:05:44.4518538Z 
2025-08-19T20:05:44.4518623Z ```python
2025-08-19T20:05:44.4518814Z def copy_df_via_temp(engine: Engine,
2025-08-19T20:05:44.4519076Z                      df: pd.DataFrame,
2025-08-19T20:05:44.4519326Z                      target_table: str,
2025-08-19T20:05:44.4519578Z                      *,
2025-08-19T20:05:44.4519803Z                      target_schema: Optional[str] = None,
2025-08-19T20:05:44.4520098Z                      columns: Sequence[str],
2025-08-19T20:05:44.4520387Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-19T20:05:44.4520697Z                      analyze_after: bool = False,
2025-08-19T20:05:44.4520987Z                      connection: Any | None = None) -> int
2025-08-19T20:05:44.4521246Z ```
2025-08-19T20:05:44.4521339Z 
2025-08-19T20:05:44.4521716Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-19T20:05:44.4522460Z 
2025-08-19T20:05:44.4522633Z <a id="ingest.tests.test_smoke"></a>
2025-08-19T20:05:44.4522959Z 
2025-08-19T20:05:44.4523114Z # ingest.tests.test\_smoke
2025-08-19T20:05:44.4523368Z 
2025-08-19T20:05:44.4523519Z <a id="ingest.tests"></a>
2025-08-19T20:05:44.4523663Z 
2025-08-19T20:05:44.4523740Z # ingest.tests
2025-08-19T20:05:44.4523854Z 
2025-08-19T20:05:44.4523952Z <a id="ingest.upload_router"></a>
2025-08-19T20:05:44.4524113Z 
2025-08-19T20:05:44.4524199Z # ingest.upload\_router
2025-08-19T20:05:44.4524336Z 
2025-08-19T20:05:44.4524425Z <a id="ingest.email_watcher"></a>
2025-08-19T20:05:44.4524578Z 
2025-08-19T20:05:44.4524662Z # ingest.email\_watcher
2025-08-19T20:05:44.4524793Z 
2025-08-19T20:05:44.4524888Z <a id="ingest.email_watcher.main"></a>
2025-08-19T20:05:44.4525061Z 
2025-08-19T20:05:44.4525140Z #### main
2025-08-19T20:05:44.4525243Z 
2025-08-19T20:05:44.4525320Z ```python
2025-08-19T20:05:44.4525526Z def main() -> dict[str, str]
2025-08-19T20:05:44.4525755Z ```
2025-08-19T20:05:44.4525858Z 
2025-08-19T20:05:44.4526013Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-19T20:05:44.4526254Z 
2025-08-19T20:05:44.4526394Z Returns {"status": "success"} when processing completes.
2025-08-19T20:05:44.4526624Z 
2025-08-19T20:05:44.4526712Z <a id="ingest.tasks"></a>
2025-08-19T20:05:44.4526852Z 
2025-08-19T20:05:44.4526934Z # ingest.tasks
2025-08-19T20:05:44.4527047Z 
2025-08-19T20:05:44.4527153Z <a id="ingest.tasks.task_import_file"></a>
2025-08-19T20:05:44.4527346Z 
2025-08-19T20:05:44.4527430Z #### task\_import\_file
2025-08-19T20:05:44.4527554Z 
2025-08-19T20:05:44.4527629Z ```python
2025-08-19T20:05:44.4527866Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-19T20:05:44.4528198Z def task_import_file(self: Any,
2025-08-19T20:05:44.4528432Z                      uri: str,
2025-08-19T20:05:44.4528669Z                      report_type: str | None = None,
2025-08-19T20:05:44.4529429Z                      force: bool = False) -> dict[str, Any]
2025-08-19T20:05:44.4529694Z ```
2025-08-19T20:05:44.4529795Z 
2025-08-19T20:05:44.4529939Z Import a file into Postgres using existing ETL pipeline.
2025-08-19T20:05:44.4530159Z 
2025-08-19T20:05:44.4530259Z <a id="ingest.celery_app"></a>
2025-08-19T20:05:44.4530411Z 
2025-08-19T20:05:44.4530493Z # ingest.celery\_app
2025-08-19T20:05:44.4530617Z 
2025-08-19T20:05:44.4530717Z <a id="ingest.ingest_router"></a>
2025-08-19T20:05:44.4530875Z 
2025-08-19T20:05:44.4530959Z # ingest.ingest\_router
2025-08-19T20:05:44.4531095Z 
2025-08-19T20:05:44.4531180Z <a id="logistics_etl"></a>
2025-08-19T20:05:44.4531318Z 
2025-08-19T20:05:44.4531401Z # logistics\_etl
2025-08-19T20:05:44.4531752Z 
2025-08-19T20:05:44.4531857Z Daily logistics ETL job.
2025-08-19T20:05:44.4531992Z 
2025-08-19T20:05:44.4532091Z <a id="logistics_etl.__main__"></a>
2025-08-19T20:05:44.4532252Z 
2025-08-19T20:05:44.4532340Z # logistics\_etl.\_\_main\_\_
2025-08-19T20:05:44.4532498Z 
2025-08-19T20:05:44.4532591Z <a id="logistics_etl.dsn"></a>
2025-08-19T20:05:44.4532765Z 
2025-08-19T20:05:44.4532844Z # logistics\_etl.dsn
2025-08-19T20:05:44.4532980Z 
2025-08-19T20:05:44.4533108Z Local DSN builder to avoid cross-service dependency.
2025-08-19T20:05:44.4533323Z 
2025-08-19T20:05:44.4533429Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-19T20:05:44.4533607Z 
2025-08-19T20:05:44.4533685Z #### build\_dsn
2025-08-19T20:05:44.4533806Z 
2025-08-19T20:05:44.4533881Z ```python
2025-08-19T20:05:44.4534080Z def build_dsn(sync: bool = True) -> str
2025-08-19T20:05:44.4534329Z ```
2025-08-19T20:05:44.4534421Z 
2025-08-19T20:05:44.4534573Z Return a Postgres DSN assembled from environment variables.
2025-08-19T20:05:44.4534814Z 
2025-08-19T20:05:44.4534974Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-19T20:05:44.4535389Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-19T20:05:44.4535753Z error when any required variable is missing.
2025-08-19T20:05:44.4535952Z 
2025-08-19T20:05:44.4536194Z <a id="logistics_etl.tests.conftest"></a>
2025-08-19T20:05:44.4536379Z 
2025-08-19T20:05:44.4536473Z # logistics\_etl.tests.conftest
2025-08-19T20:05:44.4536636Z 
2025-08-19T20:05:44.4536750Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-19T20:05:44.4536943Z 
2025-08-19T20:05:44.4537045Z # logistics\_etl.tests.test\_repository
2025-08-19T20:05:44.4537219Z 
2025-08-19T20:05:44.4537324Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-19T20:05:44.4537508Z 
2025-08-19T20:05:44.4537603Z # logistics\_etl.tests.test\_cron
2025-08-19T20:05:44.4537762Z 
2025-08-19T20:05:44.4537869Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-19T20:05:44.4538060Z 
2025-08-19T20:05:44.4538152Z # logistics\_etl.tests.test\_imports
2025-08-19T20:05:44.4538314Z 
2025-08-19T20:05:44.4538421Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-19T20:05:44.4538604Z 
2025-08-19T20:05:44.4538696Z # logistics\_etl.tests.test\_smoke
2025-08-19T20:05:44.4538864Z 
2025-08-19T20:05:44.4538967Z <a id="logistics_etl.tests.test_client"></a>
2025-08-19T20:05:44.4539151Z 
2025-08-19T20:05:44.4539246Z # logistics\_etl.tests.test\_client
2025-08-19T20:05:44.4539416Z 
2025-08-19T20:05:44.4539504Z <a id="logistics_etl.tests"></a>
2025-08-19T20:05:44.4539658Z 
2025-08-19T20:05:44.4539746Z # logistics\_etl.tests
2025-08-19T20:05:44.4539872Z 
2025-08-19T20:05:44.4539960Z <a id="logistics_etl.flow"></a>
2025-08-19T20:05:44.4540113Z 
2025-08-19T20:05:44.4540194Z # logistics\_etl.flow
2025-08-19T20:05:44.4540322Z 
2025-08-19T20:05:44.4540411Z <a id="logistics_etl.client"></a>
2025-08-19T20:05:44.4540577Z 
2025-08-19T20:05:44.4540660Z # logistics\_etl.client
2025-08-19T20:05:44.4540793Z 
2025-08-19T20:05:44.4540892Z <a id="logistics_etl.cron"></a>
2025-08-19T20:05:44.4541038Z 
2025-08-19T20:05:44.4541118Z # logistics\_etl.cron
2025-08-19T20:05:44.4541247Z 
2025-08-19T20:05:44.4541337Z <a id="logistics_etl.db"></a>
2025-08-19T20:05:44.4541665Z 
2025-08-19T20:05:44.4541776Z # logistics\_etl.db
2025-08-19T20:05:44.4542041Z 
2025-08-19T20:05:44.4542139Z <a id="logistics_etl.repository"></a>
2025-08-19T20:05:44.4542309Z 
2025-08-19T20:05:44.4600054Z # logistics\_etl.repository
2025-08-19T20:05:44.4600377Z 
2025-08-19T20:05:44.4600552Z <a id="alert_bot"></a>
2025-08-19T20:05:44.4600827Z 
2025-08-19T20:05:44.4600979Z # alert\_bot
2025-08-19T20:05:44.4601198Z 
2025-08-19T20:05:44.4601404Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-19T20:05:44.4601960Z 
2025-08-19T20:05:44.4602145Z # alert\_bot.tests.test\_smoke
2025-08-19T20:05:44.4602456Z 
2025-08-19T20:05:44.4602638Z <a id="alert_bot.tests"></a>
2025-08-19T20:05:44.4602938Z 
2025-08-19T20:05:44.4603091Z # alert\_bot.tests
2025-08-19T20:05:44.4603336Z 
2025-08-19T20:05:44.4603514Z <a id="alert_bot.alert_bot"></a>
2025-08-19T20:05:44.4603834Z 
2025-08-19T20:05:44.4604005Z # alert\_bot.alert\_bot
2025-08-19T20:05:44.4604274Z 
2025-08-19T20:05:44.4604441Z <a id="alert_bot.rules"></a>
2025-08-19T20:05:44.4604745Z 
2025-08-19T20:05:44.4604901Z # alert\_bot.rules
2025-08-19T20:05:44.4605057Z 
2025-08-19T20:05:44.4605155Z <a id="common"></a>
2025-08-19T20:05:44.4605309Z 
2025-08-19T20:05:44.4605405Z # common
2025-08-19T20:05:44.4605532Z 
2025-08-19T20:05:44.4605637Z <a id="common.dsn"></a>
2025-08-19T20:05:44.4605807Z 
2025-08-19T20:05:44.4605904Z # common.dsn
2025-08-19T20:05:44.4606037Z 
2025-08-19T20:05:44.4606163Z <a id="common.dsn.build_dsn"></a>
2025-08-19T20:05:44.4606365Z 
2025-08-19T20:05:44.4606459Z #### build\_dsn
2025-08-19T20:05:44.4606604Z 
2025-08-19T20:05:44.4606702Z ```python
2025-08-19T20:05:44.4606948Z def build_dsn(sync: bool = True) -> str
2025-08-19T20:05:44.4607261Z ```
2025-08-19T20:05:44.4607379Z 
2025-08-19T20:05:44.4607546Z Return a Postgres DSN, validating required variables.
2025-08-19T20:05:44.4607829Z 
2025-08-19T20:05:44.4608081Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-19T20:05:44.4608675Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-19T20:05:44.4609221Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-19T20:05:44.4609850Z missing.
2025-08-19T20:05:44.4609982Z 
2025-08-19T20:05:44.4610084Z <a id="common.models_vendor"></a>
2025-08-19T20:05:44.4610250Z 
2025-08-19T20:05:44.4610333Z # common.models\_vendor
2025-08-19T20:05:44.4610467Z 
2025-08-19T20:05:44.4610573Z <a id="common.models_vendor.Vendor"></a>
2025-08-19T20:05:44.4610814Z 
2025-08-19T20:05:44.4610894Z ## Vendor Objects
2025-08-19T20:05:44.4611013Z 
2025-08-19T20:05:44.4611088Z ```python
2025-08-19T20:05:44.4611264Z class Vendor(Base)
2025-08-19T20:05:44.4611451Z ```
2025-08-19T20:05:44.4611772Z 
2025-08-19T20:05:44.4611870Z Vendor of inventory items.
2025-08-19T20:05:44.4612024Z 
2025-08-19T20:05:44.4612134Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-19T20:05:44.4612328Z 
2025-08-19T20:05:44.4612421Z ## VendorPrice Objects
2025-08-19T20:05:44.4612550Z 
2025-08-19T20:05:44.4612626Z ```python
2025-08-19T20:05:44.4612810Z class VendorPrice(Base)
2025-08-19T20:05:44.4613026Z ```
2025-08-19T20:05:44.4613130Z 
2025-08-19T20:05:44.4613242Z Association table linking vendors to pricing.
2025-08-19T20:05:44.4613435Z 
2025-08-19T20:05:44.4613524Z <a id="common.db_url"></a>
2025-08-19T20:05:44.4613671Z 
2025-08-19T20:05:44.4613745Z # common.db\_url
2025-08-19T20:05:44.4613861Z 
2025-08-19T20:05:44.4613962Z <a id="common.db_url.build_url"></a>
2025-08-19T20:05:44.4614130Z 
2025-08-19T20:05:44.4614208Z #### build\_url
2025-08-19T20:05:44.4614328Z 
2025-08-19T20:05:44.4614400Z ```python
2025-08-19T20:05:44.4614591Z def build_url(async_: bool = True) -> str
2025-08-19T20:05:44.4614842Z ```
2025-08-19T20:05:44.4614933Z 
2025-08-19T20:05:44.4615047Z Return Postgres DSN from env or PG_* parts.
2025-08-19T20:05:44.4615229Z 
2025-08-19T20:05:44.4615318Z <a id="common.keepa"></a>
2025-08-19T20:05:44.4615455Z 
2025-08-19T20:05:44.4615537Z # common.keepa
2025-08-19T20:05:44.4615648Z 
2025-08-19T20:05:44.4615730Z <a id="common.llm"></a>
2025-08-19T20:05:44.4616009Z 
2025-08-19T20:05:44.4616085Z # common.llm
2025-08-19T20:05:44.4616194Z 
2025-08-19T20:05:44.4616288Z <a id="common.settings"></a>
2025-08-19T20:05:44.4616443Z 
2025-08-19T20:05:44.4616522Z # common.settings
2025-08-19T20:05:44.4616644Z 
2025-08-19T20:05:44.4616732Z <a id="common.db"></a>
2025-08-19T20:05:44.4616859Z 
2025-08-19T20:05:44.4616932Z # common.db
2025-08-19T20:05:44.4617041Z 
2025-08-19T20:05:44.4617144Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-19T20:05:44.4617329Z 
2025-08-19T20:05:44.4617418Z #### build\_sqlalchemy\_url
2025-08-19T20:05:44.4617569Z 
2025-08-19T20:05:44.4617642Z ```python
2025-08-19T20:05:44.4617842Z def build_sqlalchemy_url() -> str
2025-08-19T20:05:44.4618074Z ```
2025-08-19T20:05:44.4618168Z 
2025-08-19T20:05:44.4618280Z Return Postgres URL for SQLAlchemy engines.
2025-08-19T20:05:44.4618462Z 
2025-08-19T20:05:44.4618559Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-19T20:05:44.4618750Z 
2025-08-19T20:05:44.4618836Z #### build\_asyncpg\_dsn
2025-08-19T20:05:44.4618976Z 
2025-08-19T20:05:44.4619054Z ```python
2025-08-19T20:05:44.4619251Z def build_asyncpg_dsn() -> str
2025-08-19T20:05:44.4619476Z ```
2025-08-19T20:05:44.4619570Z 
2025-08-19T20:05:44.4619708Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-19T20:05:44.4619943Z 
2025-08-19T20:05:44.4620042Z <a id="common.db.refresh_mvs"></a>
2025-08-19T20:05:44.4620206Z 
2025-08-19T20:05:44.4620283Z #### refresh\_mvs
2025-08-19T20:05:44.4620405Z 
2025-08-19T20:05:44.4620480Z ```python
2025-08-19T20:05:44.4620697Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-19T20:05:44.4620975Z ```
2025-08-19T20:05:44.4621064Z 
2025-08-19T20:05:44.4621217Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-19T20:05:44.4621445Z 
2025-08-19T20:05:44.4621642Z <a id="common.config"></a>
2025-08-19T20:05:44.4621792Z 
2025-08-19T20:05:44.4621867Z # common.config
2025-08-19T20:05:44.4621981Z 
2025-08-19T20:05:44.4622066Z <a id="common.base"></a>
2025-08-19T20:05:44.4622208Z 
2025-08-19T20:05:44.4622286Z # common.base
2025-08-19T20:05:44.4622517Z 
2025-08-19T20:05:44.4622614Z <a id="common.base.Base"></a>
2025-08-19T20:05:44.4622763Z 
2025-08-19T20:05:44.4622837Z ## Base Objects
2025-08-19T20:05:44.4622945Z 
2025-08-19T20:05:44.4623025Z ```python
2025-08-19T20:05:44.4623218Z class Base(DeclarativeBase)
2025-08-19T20:05:44.4623431Z ```
2025-08-19T20:05:44.4623523Z 
2025-08-19T20:05:44.4623616Z Base class for SQLAlchemy models.
2025-08-19T20:05:44.4623780Z 
2025-08-19T20:05:44.4623865Z <a id="repricer"></a>
2025-08-19T20:05:44.4623992Z 
2025-08-19T20:05:44.4624075Z # repricer
2025-08-19T20:05:44.4624182Z 
2025-08-19T20:05:44.4624277Z <a id="repricer.app.schemas"></a>
2025-08-19T20:05:44.4624434Z 
2025-08-19T20:05:44.4624528Z # repricer.app.schemas
2025-08-19T20:05:44.4624656Z 
2025-08-19T20:05:44.4624750Z <a id="repricer.app.deps"></a>
2025-08-19T20:05:44.4624910Z 
2025-08-19T20:05:44.4624992Z # repricer.app.deps
2025-08-19T20:05:44.4625113Z 
2025-08-19T20:05:44.4625244Z Placeholder module for Keepa / SP-API clients.
2025-08-19T20:05:44.4625449Z 
2025-08-19T20:05:44.4625544Z <a id="repricer.app.logic"></a>
2025-08-19T20:05:44.4625697Z 
2025-08-19T20:05:44.4625789Z # repricer.app.logic
2025-08-19T20:05:44.4625914Z 
2025-08-19T20:05:44.4626021Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-19T20:05:44.4626214Z 
2025-08-19T20:05:44.4626291Z #### MIN\_MARGIN
2025-08-19T20:05:44.4626407Z 
2025-08-19T20:05:44.4626479Z 15 % ROI
2025-08-19T20:05:44.4626581Z 
2025-08-19T20:05:44.4626694Z <a id="repricer.app.logic.compute_price"></a>
2025-08-19T20:05:44.4626886Z 
2025-08-19T20:05:44.4626976Z #### compute\_price
2025-08-19T20:05:44.4627092Z 
2025-08-19T20:05:44.4627165Z ```python
2025-08-19T20:05:44.4627442Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-19T20:05:44.4627764Z ```
2025-08-19T20:05:44.4627863Z 
2025-08-19T20:05:44.4627982Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-19T20:05:44.4628287Z Replace with real competitive logic later.
2025-08-19T20:05:44.4628635Z 
2025-08-19T20:05:44.4628727Z <a id="repricer.app.main"></a>
2025-08-19T20:05:44.4628882Z 
2025-08-19T20:05:44.4628971Z # repricer.app.main
2025-08-19T20:05:44.4629092Z 
2025-08-19T20:05:44.4629180Z <a id="repricer.app"></a>
2025-08-19T20:05:44.4629324Z 
2025-08-19T20:05:44.4629402Z # repricer.app
2025-08-19T20:05:44.4629514Z 
2025-08-19T20:05:44.4629615Z <a id="repricer.tests.test_imports"></a>
2025-08-19T20:05:44.4629804Z 
2025-08-19T20:05:44.4629893Z # repricer.tests.test\_imports
2025-08-19T20:05:44.4630041Z 
2025-08-19T20:05:44.4630153Z <a id="repricer.tests.test_smoke"></a>
2025-08-19T20:05:44.4630322Z 
2025-08-19T20:05:44.4630415Z # repricer.tests.test\_smoke
2025-08-19T20:05:44.4630571Z 
2025-08-19T20:05:44.4630658Z <a id="repricer.tests"></a>
2025-08-19T20:05:44.4630799Z 
2025-08-19T20:05:44.4630878Z # repricer.tests
2025-08-19T20:05:44.4631004Z 
2025-08-19T20:05:44.4631076Z <a id="db"></a>
2025-08-19T20:05:44.4631189Z 
2025-08-19T20:05:44.4631270Z # db
2025-08-19T20:05:44.4631366Z 
2025-08-19T20:05:44.4631458Z <a id="db.utils.views"></a>
2025-08-19T20:05:44.4631719Z 
2025-08-19T20:05:44.4631803Z # db.utils.views
2025-08-19T20:05:44.4631915Z 
2025-08-19T20:05:44.4632017Z <a id="db.utils.views.replace_view"></a>
2025-08-19T20:05:44.4632202Z 
2025-08-19T20:05:44.4632280Z #### replace\_view
2025-08-19T20:05:44.4632397Z 
2025-08-19T20:05:44.4632486Z ```python
2025-08-19T20:05:44.4632698Z def replace_view(name: str, new_sql: str) -> None
2025-08-19T20:05:44.4632970Z ```
2025-08-19T20:05:44.4633066Z 
2025-08-19T20:05:44.4633167Z Drop and recreate a SQL view atomically.
2025-08-19T20:05:44.4633348Z 
2025-08-19T20:05:44.4633431Z <a id="db.utils"></a>
2025-08-19T20:05:44.4633559Z 
2025-08-19T20:05:44.4633634Z # db.utils
2025-08-19T20:05:44.4633747Z 
2025-08-19T20:05:44.4633834Z <a id="price_importer"></a>
2025-08-19T20:05:44.4633975Z 
2025-08-19T20:05:44.4634060Z # price\_importer
2025-08-19T20:05:44.4634173Z 
2025-08-19T20:05:44.4634283Z <a id="price_importer.services_common.dsn"></a>
2025-08-19T20:05:44.4634487Z 
2025-08-19T20:05:44.4634585Z # price\_importer.services\_common.dsn
2025-08-19T20:05:44.4634887Z 
2025-08-19T20:05:44.4635023Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-19T20:05:44.4635245Z 
2025-08-19T20:05:44.4635319Z #### build\_dsn
2025-08-19T20:05:44.4635429Z 
2025-08-19T20:05:44.4635510Z ```python
2025-08-19T20:05:44.4635703Z def build_dsn(sync: bool = True) -> str
2025-08-19T20:05:44.4635952Z ```
2025-08-19T20:05:44.4636043Z 
2025-08-19T20:05:44.4636119Z Return safe DSN.
2025-08-19T20:05:44.4636238Z 
2025-08-19T20:05:44.4636605Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-19T20:05:44.4636819Z 
2025-08-19T20:05:44.4636954Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-19T20:05:44.4637181Z 
2025-08-19T20:05:44.4637298Z # price\_importer.services\_common.models\_vendor
2025-08-19T20:05:44.4637497Z 
2025-08-19T20:05:44.4637618Z <a id="price_importer.services_common.db_url"></a>
2025-08-19T20:05:44.4637816Z 
2025-08-19T20:05:44.4637918Z # price\_importer.services\_common.db\_url
2025-08-19T20:05:44.4638123Z 
2025-08-19T20:05:44.4638262Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-19T20:05:44.4638487Z 
2025-08-19T20:05:44.4638562Z #### build\_url
2025-08-19T20:05:44.4638679Z 
2025-08-19T20:05:44.4638752Z ```python
2025-08-19T20:05:44.4638956Z def build_url(async_: bool = True) -> str
2025-08-19T20:05:44.4639196Z ```
2025-08-19T20:05:44.4639288Z 
2025-08-19T20:05:44.4639404Z Return Postgres DSN from env or PG_* parts.
2025-08-19T20:05:44.4639588Z 
2025-08-19T20:05:44.4639701Z <a id="price_importer.services_common.keepa"></a>
2025-08-19T20:05:44.4639904Z 
2025-08-19T20:05:44.4640006Z # price\_importer.services\_common.keepa
2025-08-19T20:05:44.4640182Z 
2025-08-19T20:05:44.4640297Z <a id="price_importer.services_common.llm"></a>
2025-08-19T20:05:44.4640488Z 
2025-08-19T20:05:44.4640588Z # price\_importer.services\_common.llm
2025-08-19T20:05:44.4640761Z 
2025-08-19T20:05:44.4640890Z <a id="price_importer.services_common.settings"></a>
2025-08-19T20:05:44.4641226Z 
2025-08-19T20:05:44.4641333Z # price\_importer.services\_common.settings
2025-08-19T20:05:44.4641631Z 
2025-08-19T20:05:44.4641743Z <a id="price_importer.services_common.db"></a>
2025-08-19T20:05:44.4641937Z 
2025-08-19T20:05:44.4642040Z # price\_importer.services\_common.db
2025-08-19T20:05:44.4642209Z 
2025-08-19T20:05:44.4642375Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-19T20:05:44.4642633Z 
2025-08-19T20:05:44.4642720Z #### build\_sqlalchemy\_url
2025-08-19T20:05:44.4642862Z 
2025-08-19T20:05:44.4642934Z ```python
2025-08-19T20:05:44.4643133Z def build_sqlalchemy_url() -> str
2025-08-19T20:05:44.4643361Z ```
2025-08-19T20:05:44.4643462Z 
2025-08-19T20:05:44.4643564Z Return Postgres URL for SQLAlchemy engines.
2025-08-19T20:05:44.4643744Z 
2025-08-19T20:05:44.4643901Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-19T20:05:44.4644136Z 
2025-08-19T20:05:44.4644219Z #### build\_asyncpg\_dsn
2025-08-19T20:05:44.4644369Z 
2025-08-19T20:05:44.4644445Z ```python
2025-08-19T20:05:44.4644639Z def build_asyncpg_dsn() -> str
2025-08-19T20:05:44.4644864Z ```
2025-08-19T20:05:44.4644954Z 
2025-08-19T20:05:44.4645099Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-19T20:05:44.4645319Z 
2025-08-19T20:05:44.4645458Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-19T20:05:44.4645677Z 
2025-08-19T20:05:44.4645763Z #### refresh\_mvs
2025-08-19T20:05:44.4645878Z 
2025-08-19T20:05:44.4645950Z ```python
2025-08-19T20:05:44.4646173Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-19T20:05:44.4646439Z ```
2025-08-19T20:05:44.4646539Z 
2025-08-19T20:05:44.4646685Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-19T20:05:44.4646912Z 
2025-08-19T20:05:44.4647025Z <a id="price_importer.services_common"></a>
2025-08-19T20:05:44.4647207Z 
2025-08-19T20:05:44.4647303Z # price\_importer.services\_common
2025-08-19T20:05:44.4647474Z 
2025-08-19T20:05:44.4647586Z <a id="price_importer.services_common.base"></a>
2025-08-19T20:05:44.4647911Z 
2025-08-19T20:05:44.4648010Z # price\_importer.services\_common.base
2025-08-19T20:05:44.4648197Z 
2025-08-19T20:05:44.4648298Z <a id="price_importer.normaliser"></a>
2025-08-19T20:05:44.4648473Z 
2025-08-19T20:05:44.4648570Z # price\_importer.normaliser
2025-08-19T20:05:44.4648718Z 
2025-08-19T20:05:44.4648833Z <a id="price_importer.common.models_vendor"></a>
2025-08-19T20:05:44.4649047Z 
2025-08-19T20:05:44.4649148Z # price\_importer.common.models\_vendor
2025-08-19T20:05:44.4649327Z 
2025-08-19T20:05:44.4649432Z <a id="price_importer.common.db_url"></a>
2025-08-19T20:05:44.4649622Z 
2025-08-19T20:05:44.4649716Z # price\_importer.common.db\_url
2025-08-19T20:05:44.4649874Z 
2025-08-19T20:05:44.4649997Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-19T20:05:44.4650206Z 
2025-08-19T20:05:44.4650283Z #### make\_dsn
2025-08-19T20:05:44.4650396Z 
2025-08-19T20:05:44.4650469Z ```python
2025-08-19T20:05:44.4650659Z def make_dsn(async_: bool = False) -> str
2025-08-19T20:05:44.4650923Z ```
2025-08-19T20:05:44.4651015Z 
2025-08-19T20:05:44.4651145Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-19T20:05:44.4651362Z 
2025-08-19T20:05:44.4651639Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-19T20:05:44.4651894Z 
2025-08-19T20:05:44.4651976Z #### build\_url
2025-08-19T20:05:44.4652085Z 
2025-08-19T20:05:44.4652159Z ```python
2025-08-19T20:05:44.4652362Z def build_url(async_: bool = False) -> str
2025-08-19T20:05:44.4652605Z ```
2025-08-19T20:05:44.4652708Z 
2025-08-19T20:05:44.4652841Z Return Postgres DSN built from environment variables.
2025-08-19T20:05:44.4653052Z 
2025-08-19T20:05:44.4653154Z <a id="price_importer.common"></a>
2025-08-19T20:05:44.4653317Z 
2025-08-19T20:05:44.4653408Z # price\_importer.common
2025-08-19T20:05:44.4653548Z 
2025-08-19T20:05:44.4653661Z <a id="price_importer.common.base"></a>
2025-08-19T20:05:44.4653842Z 
2025-08-19T20:05:44.4653933Z # price\_importer.common.base
2025-08-19T20:05:44.4654233Z 
2025-08-19T20:05:44.4654347Z <a id="price_importer.tests.conftest"></a>
2025-08-19T20:05:44.4654531Z 
2025-08-19T20:05:44.4654630Z # price\_importer.tests.conftest
2025-08-19T20:05:44.4654789Z 
2025-08-19T20:05:44.4654899Z <a id="price_importer.tests.test_reader"></a>
2025-08-19T20:05:44.4655088Z 
2025-08-19T20:05:44.4655193Z # price\_importer.tests.test\_reader
2025-08-19T20:05:44.4655362Z 
2025-08-19T20:05:44.4655473Z <a id="price_importer.tests.test_imports"></a>
2025-08-19T20:05:44.4655671Z 
2025-08-19T20:05:44.4655770Z # price\_importer.tests.test\_imports
2025-08-19T20:05:44.4655942Z 
2025-08-19T20:05:44.4656059Z <a id="price_importer.tests.test_smoke"></a>
2025-08-19T20:05:44.4656242Z 
2025-08-19T20:05:44.4656340Z # price\_importer.tests.test\_smoke
2025-08-19T20:05:44.4656507Z 
2025-08-19T20:05:44.4656627Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-19T20:05:44.4656857Z 
2025-08-19T20:05:44.4656960Z # price\_importer.tests.test\_normaliser
2025-08-19T20:05:44.4657146Z 
2025-08-19T20:05:44.4657250Z <a id="price_importer.tests"></a>
2025-08-19T20:05:44.4657412Z 
2025-08-19T20:05:44.4657505Z # price\_importer.tests
2025-08-19T20:05:44.4657639Z 
2025-08-19T20:05:44.4657732Z <a id="price_importer.reader"></a>
2025-08-19T20:05:44.4657900Z 
2025-08-19T20:05:44.4657989Z # price\_importer.reader
2025-08-19T20:05:44.4658124Z 
2025-08-19T20:05:44.4658229Z <a id="price_importer.repository"></a>
2025-08-19T20:05:44.4658410Z 
2025-08-19T20:05:44.4658506Z # price\_importer.repository
2025-08-19T20:05:44.4658658Z 
2025-08-19T20:05:44.4658759Z <a id="price_importer.import"></a>
2025-08-19T20:05:44.4658919Z 
2025-08-19T20:05:44.4659009Z # price\_importer.import
2025-08-19T20:05:44.4659148Z 
2025-08-19T20:05:44.4659239Z <a id="fees_h10"></a>
2025-08-19T20:05:44.4659369Z 
2025-08-19T20:05:44.4659445Z # fees\_h10
2025-08-19T20:05:44.4659556Z 
2025-08-19T20:05:44.4659640Z <a id="fees_h10.worker"></a>
2025-08-19T20:05:44.4659787Z 
2025-08-19T20:05:44.4659878Z # fees\_h10.worker
2025-08-19T20:05:44.4660000Z 
2025-08-19T20:05:44.4660232Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-19T20:05:44.4660425Z 
2025-08-19T20:05:44.4660518Z #### list\_active\_asins
2025-08-19T20:05:44.4660650Z 
2025-08-19T20:05:44.4660726Z ```python
2025-08-19T20:05:44.4660922Z def list_active_asins() -> list[str]
2025-08-19T20:05:44.4661153Z ```
2025-08-19T20:05:44.4661250Z 
2025-08-19T20:05:44.4661373Z Return known ASINs or an empty list if unavailable.
2025-08-19T20:05:44.4661693Z 
2025-08-19T20:05:44.4661797Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-19T20:05:44.4661969Z 
2025-08-19T20:05:44.4662058Z # fees\_h10.tests.test\_smoke
2025-08-19T20:05:44.4662207Z 
2025-08-19T20:05:44.4662294Z <a id="fees_h10.tests"></a>
2025-08-19T20:05:44.4662435Z 
2025-08-19T20:05:44.4662513Z # fees\_h10.tests
2025-08-19T20:05:44.4662631Z 
2025-08-19T20:05:44.4662713Z <a id="fees_h10.client"></a>
2025-08-19T20:05:44.4662853Z 
2025-08-19T20:05:44.4662934Z # fees\_h10.client
2025-08-19T20:05:44.4663049Z 
2025-08-19T20:05:44.4663146Z <a id="fees_h10.repository"></a>
2025-08-19T20:05:44.4663305Z 
2025-08-19T20:05:44.4663390Z # fees\_h10.repository
2025-08-19T20:05:44.4663517Z 
2025-08-19T20:05:44.4663629Z <a id="fees_h10.repository.upsert_fees_raw"></a>
2025-08-19T20:05:44.4663834Z 
2025-08-19T20:05:44.4663914Z #### upsert\_fees\_raw
2025-08-19T20:05:44.4664037Z 
2025-08-19T20:05:44.4664113Z ```python
2025-08-19T20:05:44.4664301Z def upsert_fees_raw(engine: Engine,
2025-08-19T20:05:44.4664573Z                     rows: Iterable[Mapping[str, Any]],
2025-08-19T20:05:44.4664837Z                     *,
2025-08-19T20:05:44.4665088Z                     testing: bool = False) -> Optional[Dict[str, int]]
2025-08-19T20:05:44.4665378Z ```
2025-08-19T20:05:44.4665480Z 
2025-08-19T20:05:44.4665571Z Idempotent upsert for fees.
2025-08-19T20:05:44.4665718Z 
2025-08-19T20:05:44.4665880Z TESTING-only: returns counts for inserted/updated/skipped rows.
2025-08-19T20:05:44.4666252Z Assumes logical key (asin, marketplace, fee_type).
2025-08-19T20:05:44.4666709Z Only updates when one of the mutable fields changes.
2025-08-19T20:05:44.4666924Z 
2025-08-19T20:05:44.4667008Z <a id="emailer"></a>
2025-08-19T20:05:44.4667137Z 
2025-08-19T20:05:44.4667213Z # emailer
2025-08-19T20:05:44.4667314Z 
2025-08-19T20:05:44.4667429Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-19T20:05:44.4667624Z 
2025-08-19T20:05:44.4667720Z # emailer.tests.test\_import\_emailer
2025-08-19T20:05:44.4667892Z 
2025-08-19T20:05:44.4667993Z <a id="emailer.tests.test_smoke"></a>
2025-08-19T20:05:44.4668160Z 
2025-08-19T20:05:44.4668251Z # emailer.tests.test\_smoke
2025-08-19T20:05:44.4668397Z 
2025-08-19T20:05:44.4668492Z <a id="emailer.tests"></a>
2025-08-19T20:05:44.4668633Z 
2025-08-19T20:05:44.4689116Z # emailer.tests
2025-08-19T20:05:44.4689405Z 
2025-08-19T20:05:44.4689574Z <a id="emailer.generate_body"></a>
2025-08-19T20:05:44.4689853Z 
2025-08-19T20:05:44.4689998Z # emailer.generate\_body
2025-08-19T20:05:44.4690228Z 
2025-08-19T20:05:44.4690358Z <a id="llm_server"></a>
2025-08-19T20:05:44.4690584Z 
2025-08-19T20:05:44.4690718Z # llm\_server
2025-08-19T20:05:44.4690901Z 
2025-08-19T20:05:44.4691044Z <a id="llm_server.app"></a>
2025-08-19T20:05:44.4691287Z 
2025-08-19T20:05:44.4691420Z # llm\_server.app
2025-08-19T20:05:44.4691816Z 
