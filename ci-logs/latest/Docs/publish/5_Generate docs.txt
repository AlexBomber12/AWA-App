2025-08-17T12:15:00.2245601Z ##[group]Run pydoc-markdown
2025-08-17T12:15:00.2245911Z [36;1mpydoc-markdown[0m
2025-08-17T12:15:00.2287025Z shell: /usr/bin/bash -e {0}
2025-08-17T12:15:00.2287247Z env:
2025-08-17T12:15:00.2287473Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T12:15:00.2287846Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-17T12:15:00.2288210Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T12:15:00.2288528Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T12:15:00.2288850Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T12:15:00.2289166Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-17T12:15:00.2289435Z ##[endgroup]
2025-08-17T12:15:00.6113284Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-17T12:15:00.6113884Z Unknown key(s) "{'output_directory'}" at:
2025-08-17T12:15:00.6114170Z In "pydoc-markdown.yml"
2025-08-17T12:15:00.6114449Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-17T12:15:00.6115051Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-17T12:15:00.6115469Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-17T12:15:00.6115754Z 
2025-08-17T12:15:00.8113115Z <a id="__init__"></a>
2025-08-17T12:15:00.8113368Z 
2025-08-17T12:15:00.8113692Z # \_\_init\_\_
2025-08-17T12:15:00.8113893Z 
2025-08-17T12:15:00.8114013Z <a id="api"></a>
2025-08-17T12:15:00.8114196Z 
2025-08-17T12:15:00.8114301Z # api
2025-08-17T12:15:00.8114447Z 
2025-08-17T12:15:00.8114771Z <a id="api.tests.test_llm"></a>
2025-08-17T12:15:00.8115014Z 
2025-08-17T12:15:00.8115137Z # api.tests.test\_llm
2025-08-17T12:15:00.8115331Z 
2025-08-17T12:15:00.8115471Z <a id="api.tests.test_imports"></a>
2025-08-17T12:15:00.8115669Z 
2025-08-17T12:15:00.8115751Z # api.tests.test\_imports
2025-08-17T12:15:00.8115905Z 
2025-08-17T12:15:00.8116004Z <a id="api.tests.test_entrypoint"></a>
2025-08-17T12:15:00.8116395Z 
2025-08-17T12:15:00.8116486Z # api.tests.test\_entrypoint
2025-08-17T12:15:00.8116631Z 
2025-08-17T12:15:00.8116717Z <a id="api.tests.test_health"></a>
2025-08-17T12:15:00.8116869Z 
2025-08-17T12:15:00.8116948Z # api.tests.test\_health
2025-08-17T12:15:00.8117071Z 
2025-08-17T12:15:00.8117155Z <a id="api.migrations.env"></a>
2025-08-17T12:15:00.8117295Z 
2025-08-17T12:15:00.8117371Z # api.migrations.env
2025-08-17T12:15:00.8117485Z 
2025-08-17T12:15:00.8117610Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-17T12:15:00.8117811Z 
2025-08-17T12:15:00.8117923Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-17T12:15:00.8118110Z 
2025-08-17T12:15:00.8118220Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-17T12:15:00.8118405Z 
2025-08-17T12:15:00.8118499Z # api.migrations.versions.0004\_fee\_cron
2025-08-17T12:15:00.8118673Z 
2025-08-17T12:15:00.8118823Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-17T12:15:00.8119046Z 
2025-08-17T12:15:00.8119250Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-17T12:15:00.8119460Z 
2025-08-17T12:15:00.8119579Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-17T12:15:00.8119776Z 
2025-08-17T12:15:00.8119883Z # api.migrations.versions.0003\_vendor\_prices
2025-08-17T12:15:00.8120057Z 
2025-08-17T12:15:00.8120176Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-17T12:15:00.8120357Z 
2025-08-17T12:15:00.8120456Z # api.migrations.versions.0024\_create\_buybox
2025-08-17T12:15:00.8120625Z 
2025-08-17T12:15:00.8120748Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-17T12:15:00.8120937Z 
2025-08-17T12:15:00.8121043Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-17T12:15:00.8121227Z 
2025-08-17T12:15:00.8121339Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-17T12:15:00.8121518Z 
2025-08-17T12:15:00.8121628Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-17T12:15:00.8121800Z 
2025-08-17T12:15:00.8121916Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-17T12:15:00.8122306Z 
2025-08-17T12:15:00.8122410Z # api.migrations.versions.0020\_unified\_schema
2025-08-17T12:15:00.8122582Z 
2025-08-17T12:15:00.8122700Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-17T12:15:00.8122893Z 
2025-08-17T12:15:00.8123000Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-17T12:15:00.8123177Z 
2025-08-17T12:15:00.8123289Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-17T12:15:00.8123467Z 
2025-08-17T12:15:00.8123561Z # api.migrations.versions.0001\_baseline
2025-08-17T12:15:00.8123726Z 
2025-08-17T12:15:00.8123816Z <a id="api.migrations.versions"></a>
2025-08-17T12:15:00.8123970Z 
2025-08-17T12:15:00.8124052Z # api.migrations.versions
2025-08-17T12:15:00.8124182Z 
2025-08-17T12:15:00.8124262Z <a id="api.migrations"></a>
2025-08-17T12:15:00.8124392Z 
2025-08-17T12:15:00.8124470Z # api.migrations
2025-08-17T12:15:00.8124815Z 
2025-08-17T12:15:00.8124935Z <a id="api.db"></a>
2025-08-17T12:15:00.8125062Z 
2025-08-17T12:15:00.8125132Z # api.db
2025-08-17T12:15:00.8125222Z 
2025-08-17T12:15:00.8125305Z <a id="api.routes.stats"></a>
2025-08-17T12:15:00.8125446Z 
2025-08-17T12:15:00.8125516Z # api.routes.stats
2025-08-17T12:15:00.8125622Z 
2025-08-17T12:15:00.8125715Z <a id="api.routes.stats.kpi"></a>
2025-08-17T12:15:00.8125864Z 
2025-08-17T12:15:00.8125927Z #### kpi
2025-08-17T12:15:00.8126013Z 
2025-08-17T12:15:00.8126088Z ```python
2025-08-17T12:15:00.8126261Z @router.get("/stats/kpi")
2025-08-17T12:15:00.8126487Z def kpi() -> List[Dict[str, int]]
2025-08-17T12:15:00.8126689Z ```
2025-08-17T12:15:00.8126780Z 
2025-08-17T12:15:00.8126861Z Return KPI metrics (mock).
2025-08-17T12:15:00.8126986Z 
2025-08-17T12:15:00.8127090Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-17T12:15:00.8127257Z 
2025-08-17T12:15:00.8127326Z #### roi\_by\_vendor
2025-08-17T12:15:00.8127435Z 
2025-08-17T12:15:00.8127505Z ```python
2025-08-17T12:15:00.8127675Z @router.get("/stats/roi_by_vendor")
2025-08-17T12:15:00.8128052Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-17T12:15:00.8128271Z ```
2025-08-17T12:15:00.8128356Z 
2025-08-17T12:15:00.8128437Z Return ROI percent by vendor.
2025-08-17T12:15:00.8128573Z 
2025-08-17T12:15:00.8128670Z <a id="api.routes.stats.roi_trend"></a>
2025-08-17T12:15:00.8128836Z 
2025-08-17T12:15:00.8128901Z #### roi\_trend
2025-08-17T12:15:00.8129000Z 
2025-08-17T12:15:00.8129068Z ```python
2025-08-17T12:15:00.8129230Z @router.get("/stats/roi_trend")
2025-08-17T12:15:00.8129472Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-17T12:15:00.8129696Z ```
2025-08-17T12:15:00.8129783Z 
2025-08-17T12:15:00.8129860Z Return 30-day ROI trend.
2025-08-17T12:15:00.8129984Z 
2025-08-17T12:15:00.8130070Z <a id="api.routes.roi"></a>
2025-08-17T12:15:00.8130199Z 
2025-08-17T12:15:00.8130268Z # api.routes.roi
2025-08-17T12:15:00.8130394Z 
2025-08-17T12:15:00.8130478Z <a id="api.routes.health"></a>
2025-08-17T12:15:00.8130657Z 
2025-08-17T12:15:00.8130734Z # api.routes.health
2025-08-17T12:15:00.8130849Z 
2025-08-17T12:15:00.8130943Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-17T12:15:00.8131101Z 
2025-08-17T12:15:00.8131175Z #### MAX\_SKEW
2025-08-17T12:15:00.8131276Z 
2025-08-17T12:15:00.8131339Z seconds
2025-08-17T12:15:00.8131437Z 
2025-08-17T12:15:00.8131538Z <a id="api.routes.health.health"></a>
2025-08-17T12:15:00.8131717Z 
2025-08-17T12:15:00.8131792Z #### health
2025-08-17T12:15:00.8131889Z 
2025-08-17T12:15:00.8131959Z ```python
2025-08-17T12:15:00.8132169Z @router.get("/health", include_in_schema=False)
2025-08-17T12:15:00.8132550Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-17T12:15:00.8132901Z ```
2025-08-17T12:15:00.8132992Z 
2025-08-17T12:15:00.8133116Z Return 200 when DB reachable and clocks are in sync.
2025-08-17T12:15:00.8133323Z 
2025-08-17T12:15:00.8133418Z <a id="api.routes.repository"></a>
2025-08-17T12:15:00.8133577Z 
2025-08-17T12:15:00.8133666Z # api.routes.repository
2025-08-17T12:15:00.8133796Z 
2025-08-17T12:15:00.8133878Z <a id="api.routes"></a>
2025-08-17T12:15:00.8134224Z 
2025-08-17T12:15:00.8134301Z # api.routes
2025-08-17T12:15:00.8134406Z 
2025-08-17T12:15:00.8134491Z <a id="api.models.fee"></a>
2025-08-17T12:15:00.8134852Z 
2025-08-17T12:15:00.8134933Z # api.models.fee
2025-08-17T12:15:00.8135053Z 
2025-08-17T12:15:00.8135132Z <a id="api.models"></a>
2025-08-17T12:15:00.8135266Z 
2025-08-17T12:15:00.8135335Z # api.models
2025-08-17T12:15:00.8135435Z 
2025-08-17T12:15:00.8135530Z <a id="api.roi_repository"></a>
2025-08-17T12:15:00.8135675Z 
2025-08-17T12:15:00.8135753Z # api.roi\_repository
2025-08-17T12:15:00.8135883Z 
2025-08-17T12:15:00.8135961Z <a id="api.main"></a>
2025-08-17T12:15:00.8136078Z 
2025-08-17T12:15:00.8136149Z # api.main
2025-08-17T12:15:00.8136252Z 
2025-08-17T12:15:00.8136336Z <a id="api.main.ready"></a>
2025-08-17T12:15:00.8136476Z 
2025-08-17T12:15:00.8136552Z #### ready
2025-08-17T12:15:00.8136647Z 
2025-08-17T12:15:00.8136717Z ```python
2025-08-17T12:15:00.8136996Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-17T12:15:00.8137455Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-17T12:15:00.8137825Z                                                                       str]
2025-08-17T12:15:00.8138067Z ```
2025-08-17T12:15:00.8138163Z 
2025-08-17T12:15:00.8138274Z Return 200 only when migrations are at head.
2025-08-17T12:15:00.8138458Z 
2025-08-17T12:15:00.8138544Z <a id="api.config"></a>
2025-08-17T12:15:00.8138672Z 
2025-08-17T12:15:00.8138746Z # api.config
2025-08-17T12:15:00.8138856Z 
2025-08-17T12:15:00.8138926Z <a id="etl"></a>
2025-08-17T12:15:00.8139034Z 
2025-08-17T12:15:00.8139100Z # etl
2025-08-17T12:15:00.8139199Z 
2025-08-17T12:15:00.8139285Z <a id="etl.fba_fee_ingestor"></a>
2025-08-17T12:15:00.8139439Z 
2025-08-17T12:15:00.8139526Z # etl.fba\_fee\_ingestor
2025-08-17T12:15:00.8139655Z 
2025-08-17T12:15:00.8139741Z <a id="etl.sp_fees_ingestor"></a>
2025-08-17T12:15:00.8139891Z 
2025-08-17T12:15:00.8139976Z # etl.sp\_fees\_ingestor
2025-08-17T12:15:00.8140236Z 
2025-08-17T12:15:00.8140323Z <a id="etl.keepa_ingestor"></a>
2025-08-17T12:15:00.8140475Z 
2025-08-17T12:15:00.8140555Z # etl.keepa\_ingestor
2025-08-17T12:15:00.8140689Z 
2025-08-17T12:15:00.8140762Z <a id="etl.db"></a>
2025-08-17T12:15:00.8140883Z 
2025-08-17T12:15:00.8140948Z # etl.db
2025-08-17T12:15:00.8141042Z 
2025-08-17T12:15:00.8141155Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-17T12:15:00.8141355Z 
2025-08-17T12:15:00.8141452Z # etl.dialects.amazon\_reimbursements
2025-08-17T12:15:00.8141619Z 
2025-08-17T12:15:00.8141721Z <a id="etl.dialects.amazon_returns"></a>
2025-08-17T12:15:00.8141893Z 
2025-08-17T12:15:00.8141982Z # etl.dialects.amazon\_returns
2025-08-17T12:15:00.8142147Z 
2025-08-17T12:15:00.8142235Z <a id="etl.dialects"></a>
2025-08-17T12:15:00.8142375Z 
2025-08-17T12:15:00.8142452Z # etl.dialects
2025-08-17T12:15:00.8142569Z 
2025-08-17T12:15:00.8142644Z <a id="ingest"></a>
2025-08-17T12:15:00.8142759Z 
2025-08-17T12:15:00.8142838Z # ingest
2025-08-17T12:15:00.8142933Z 
2025-08-17T12:15:00.8143026Z <a id="ingest.tests.test_smoke"></a>
2025-08-17T12:15:00.8143236Z 
2025-08-17T12:15:00.8143321Z # ingest.tests.test\_smoke
2025-08-17T12:15:00.8143459Z 
2025-08-17T12:15:00.8143541Z <a id="ingest.tests"></a>
2025-08-17T12:15:00.8143678Z 
2025-08-17T12:15:00.8143751Z # ingest.tests
2025-08-17T12:15:00.8143858Z 
2025-08-17T12:15:00.8143956Z <a id="ingest.upload_router"></a>
2025-08-17T12:15:00.8144111Z 
2025-08-17T12:15:00.8144192Z # ingest.upload\_router
2025-08-17T12:15:00.8144318Z 
2025-08-17T12:15:00.8144411Z <a id="ingest.email_watcher"></a>
2025-08-17T12:15:00.8144700Z 
2025-08-17T12:15:00.8144837Z # ingest.email\_watcher
2025-08-17T12:15:00.8144977Z 
2025-08-17T12:15:00.8145068Z <a id="ingest.email_watcher.main"></a>
2025-08-17T12:15:00.8145238Z 
2025-08-17T12:15:00.8145313Z #### main
2025-08-17T12:15:00.8145407Z 
2025-08-17T12:15:00.8145477Z ```python
2025-08-17T12:15:00.8145658Z def main() -> dict[str, str]
2025-08-17T12:15:00.8145865Z ```
2025-08-17T12:15:00.8145960Z 
2025-08-17T12:15:00.8146244Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-17T12:15:00.8146473Z 
2025-08-17T12:15:00.8146608Z Returns {"status": "success"} when processing completes.
2025-08-17T12:15:00.8146831Z 
2025-08-17T12:15:00.8146922Z <a id="ingest.ingest_router"></a>
2025-08-17T12:15:00.8147078Z 
2025-08-17T12:15:00.8147164Z # ingest.ingest\_router
2025-08-17T12:15:00.8147294Z 
2025-08-17T12:15:00.8147379Z <a id="logistics_etl"></a>
2025-08-17T12:15:00.8147514Z 
2025-08-17T12:15:00.8147592Z # logistics\_etl
2025-08-17T12:15:00.8147703Z 
2025-08-17T12:15:00.8147784Z Daily logistics ETL job.
2025-08-17T12:15:00.8147922Z 
2025-08-17T12:15:00.8148012Z <a id="logistics_etl.__main__"></a>
2025-08-17T12:15:00.8148174Z 
2025-08-17T12:15:00.8148265Z # logistics\_etl.\_\_main\_\_
2025-08-17T12:15:00.8148406Z 
2025-08-17T12:15:00.8148491Z <a id="logistics_etl.dsn"></a>
2025-08-17T12:15:00.8148633Z 
2025-08-17T12:15:00.8148713Z # logistics\_etl.dsn
2025-08-17T12:15:00.8148837Z 
2025-08-17T12:15:00.8148965Z Local DSN builder to avoid cross-service dependency.
2025-08-17T12:15:00.8149180Z 
2025-08-17T12:15:00.8149276Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-17T12:15:00.8149449Z 
2025-08-17T12:15:00.8149524Z #### build\_dsn
2025-08-17T12:15:00.8149631Z 
2025-08-17T12:15:00.8149701Z ```python
2025-08-17T12:15:00.8149894Z def build_dsn(sync: bool = True) -> str
2025-08-17T12:15:00.8150124Z ```
2025-08-17T12:15:00.8150215Z 
2025-08-17T12:15:00.8150369Z Return a Postgres DSN assembled from environment variables.
2025-08-17T12:15:00.8150591Z 
2025-08-17T12:15:00.8150751Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-17T12:15:00.8151152Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-17T12:15:00.8151510Z error when any required variable is missing.
2025-08-17T12:15:00.8151687Z 
2025-08-17T12:15:00.8151788Z <a id="logistics_etl.tests.conftest"></a>
2025-08-17T12:15:00.8151960Z 
2025-08-17T12:15:00.8152171Z # logistics\_etl.tests.conftest
2025-08-17T12:15:00.8152326Z 
2025-08-17T12:15:00.8152436Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-17T12:15:00.8152630Z 
2025-08-17T12:15:00.8152726Z # logistics\_etl.tests.test\_repository
2025-08-17T12:15:00.8152891Z 
2025-08-17T12:15:00.8152991Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-17T12:15:00.8153166Z 
2025-08-17T12:15:00.8153254Z # logistics\_etl.tests.test\_cron
2025-08-17T12:15:00.8153407Z 
2025-08-17T12:15:00.8153517Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-17T12:15:00.8153695Z 
2025-08-17T12:15:00.8153785Z # logistics\_etl.tests.test\_imports
2025-08-17T12:15:00.8153953Z 
2025-08-17T12:15:00.8154050Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-17T12:15:00.8154224Z 
2025-08-17T12:15:00.8154319Z # logistics\_etl.tests.test\_smoke
2025-08-17T12:15:00.8154477Z 
2025-08-17T12:15:00.8154680Z <a id="logistics_etl.tests.test_client"></a>
2025-08-17T12:15:00.8154857Z 
2025-08-17T12:15:00.8154956Z # logistics\_etl.tests.test\_client
2025-08-17T12:15:00.8155123Z 
2025-08-17T12:15:00.8155211Z <a id="logistics_etl.tests"></a>
2025-08-17T12:15:00.8155369Z 
2025-08-17T12:15:00.8155447Z # logistics\_etl.tests
2025-08-17T12:15:00.8155577Z 
2025-08-17T12:15:00.8155671Z <a id="logistics_etl.flow"></a>
2025-08-17T12:15:00.8155819Z 
2025-08-17T12:15:00.8155908Z # logistics\_etl.flow
2025-08-17T12:15:00.8156051Z 
2025-08-17T12:15:00.8156161Z <a id="logistics_etl.client"></a>
2025-08-17T12:15:00.8156337Z 
2025-08-17T12:15:00.8156440Z # logistics\_etl.client
2025-08-17T12:15:00.8156597Z 
2025-08-17T12:15:00.8156688Z <a id="logistics_etl.cron"></a>
2025-08-17T12:15:00.8156844Z 
2025-08-17T12:15:00.8156927Z # logistics\_etl.cron
2025-08-17T12:15:00.8157062Z 
2025-08-17T12:15:00.8157154Z <a id="logistics_etl.db"></a>
2025-08-17T12:15:00.8157310Z 
2025-08-17T12:15:00.8157397Z # logistics\_etl.db
2025-08-17T12:15:00.8157521Z 
2025-08-17T12:15:00.8157621Z <a id="logistics_etl.repository"></a>
2025-08-17T12:15:00.8157807Z 
2025-08-17T12:15:00.8157897Z # logistics\_etl.repository
2025-08-17T12:15:00.8158136Z 
2025-08-17T12:15:00.8158206Z <a id="alert_bot"></a>
2025-08-17T12:15:00.8158324Z 
2025-08-17T12:15:00.8158389Z # alert\_bot
2025-08-17T12:15:00.8158483Z 
2025-08-17T12:15:00.8158574Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-17T12:15:00.8158728Z 
2025-08-17T12:15:00.8158807Z # alert\_bot.tests.test\_smoke
2025-08-17T12:15:00.8158945Z 
2025-08-17T12:15:00.8159020Z <a id="alert_bot.tests"></a>
2025-08-17T12:15:00.8159146Z 
2025-08-17T12:15:00.8159212Z # alert\_bot.tests
2025-08-17T12:15:00.8159321Z 
2025-08-17T12:15:00.8159399Z <a id="alert_bot.alert_bot"></a>
2025-08-17T12:15:00.8159537Z 
2025-08-17T12:15:00.8159614Z # alert\_bot.alert\_bot
2025-08-17T12:15:00.8159727Z 
2025-08-17T12:15:00.8159801Z <a id="alert_bot.rules"></a>
2025-08-17T12:15:00.8159931Z 
2025-08-17T12:15:00.8159997Z # alert\_bot.rules
2025-08-17T12:15:00.8160097Z 
2025-08-17T12:15:00.8160162Z <a id="common"></a>
2025-08-17T12:15:00.8160271Z 
2025-08-17T12:15:00.8160332Z # common
2025-08-17T12:15:00.8160424Z 
2025-08-17T12:15:00.8160503Z <a id="common.dsn"></a>
2025-08-17T12:15:00.8160618Z 
2025-08-17T12:15:00.8160681Z # common.dsn
2025-08-17T12:15:00.8160773Z 
2025-08-17T12:15:00.8160858Z <a id="common.dsn.build_dsn"></a>
2025-08-17T12:15:00.8160996Z 
2025-08-17T12:15:00.8161061Z #### build\_dsn
2025-08-17T12:15:00.8161165Z 
2025-08-17T12:15:00.8161230Z ```python
2025-08-17T12:15:00.8161400Z def build_dsn(sync: bool = True) -> str
2025-08-17T12:15:00.8161627Z ```
2025-08-17T12:15:00.8161715Z 
2025-08-17T12:15:00.8161835Z Return a Postgres DSN, validating required variables.
2025-08-17T12:15:00.8162028Z 
2025-08-17T12:15:00.8162224Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-17T12:15:00.8162679Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-17T12:15:00.8163105Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-17T12:15:00.8163421Z missing.
2025-08-17T12:15:00.8163661Z 
2025-08-17T12:15:00.8163753Z <a id="common.models_vendor"></a>
2025-08-17T12:15:00.8163911Z 
2025-08-17T12:15:00.8163998Z # common.models\_vendor
2025-08-17T12:15:00.8164124Z 
2025-08-17T12:15:00.8164218Z <a id="common.models_vendor.Vendor"></a>
2025-08-17T12:15:00.8164394Z 
2025-08-17T12:15:00.8164467Z ## Vendor Objects
2025-08-17T12:15:00.8164682Z 
2025-08-17T12:15:00.8164771Z ```python
2025-08-17T12:15:00.8165036Z class Vendor(Base)
2025-08-17T12:15:00.8165213Z ```
2025-08-17T12:15:00.8165316Z 
2025-08-17T12:15:00.8165404Z Vendor of inventory items.
2025-08-17T12:15:00.8165542Z 
2025-08-17T12:15:00.8165659Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-17T12:15:00.8165845Z 
2025-08-17T12:15:00.8165922Z ## VendorPrice Objects
2025-08-17T12:15:00.8166049Z 
2025-08-17T12:15:00.8166117Z ```python
2025-08-17T12:15:00.8166298Z class VendorPrice(Base)
2025-08-17T12:15:00.8166497Z ```
2025-08-17T12:15:00.8166588Z 
2025-08-17T12:15:00.8166699Z Association table linking vendors to pricing.
2025-08-17T12:15:00.8166907Z 
2025-08-17T12:15:00.8166993Z <a id="common.db_url"></a>
2025-08-17T12:15:00.8167129Z 
2025-08-17T12:15:00.8167210Z # common.db\_url
2025-08-17T12:15:00.8167324Z 
2025-08-17T12:15:00.8167414Z <a id="common.db_url.build_url"></a>
2025-08-17T12:15:00.8167583Z 
2025-08-17T12:15:00.8167661Z #### build\_url
2025-08-17T12:15:00.8167768Z 
2025-08-17T12:15:00.8167838Z ```python
2025-08-17T12:15:00.8168025Z def build_url(async_: bool = True) -> str
2025-08-17T12:15:00.8168264Z ```
2025-08-17T12:15:00.8168351Z 
2025-08-17T12:15:00.8168456Z Return Postgres DSN from env or PG_* parts.
2025-08-17T12:15:00.8168636Z 
2025-08-17T12:15:00.8168724Z <a id="common.keepa"></a>
2025-08-17T12:15:00.8168857Z 
2025-08-17T12:15:00.8168930Z # common.keepa
2025-08-17T12:15:00.8169045Z 
2025-08-17T12:15:00.8169126Z <a id="common.llm"></a>
2025-08-17T12:15:00.8169247Z 
2025-08-17T12:15:00.8169314Z # common.llm
2025-08-17T12:15:00.8169420Z 
2025-08-17T12:15:00.8169503Z <a id="common.settings"></a>
2025-08-17T12:15:00.8169650Z 
2025-08-17T12:15:00.8169728Z # common.settings
2025-08-17T12:15:00.8169973Z 
2025-08-17T12:15:00.8170049Z <a id="common.db"></a>
2025-08-17T12:15:00.8170175Z 
2025-08-17T12:15:00.8170244Z # common.db
2025-08-17T12:15:00.8170342Z 
2025-08-17T12:15:00.8170440Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-17T12:15:00.8170628Z 
2025-08-17T12:15:00.8170712Z #### build\_sqlalchemy\_url
2025-08-17T12:15:00.8170848Z 
2025-08-17T12:15:00.8170922Z ```python
2025-08-17T12:15:00.8171104Z def build_sqlalchemy_url() -> str
2025-08-17T12:15:00.8171328Z ```
2025-08-17T12:15:00.8171418Z 
2025-08-17T12:15:00.8171519Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T12:15:00.8171703Z 
2025-08-17T12:15:00.8171799Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-17T12:15:00.8171975Z 
2025-08-17T12:15:00.8172055Z #### build\_asyncpg\_dsn
2025-08-17T12:15:00.8172195Z 
2025-08-17T12:15:00.8172263Z ```python
2025-08-17T12:15:00.8172451Z def build_asyncpg_dsn() -> str
2025-08-17T12:15:00.8172660Z ```
2025-08-17T12:15:00.8172754Z 
2025-08-17T12:15:00.8172900Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T12:15:00.8173116Z 
2025-08-17T12:15:00.8173209Z <a id="common.db.refresh_mvs"></a>
2025-08-17T12:15:00.8173373Z 
2025-08-17T12:15:00.8173445Z #### refresh\_mvs
2025-08-17T12:15:00.8173557Z 
2025-08-17T12:15:00.8173626Z ```python
2025-08-17T12:15:00.8173837Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T12:15:00.8174107Z ```
2025-08-17T12:15:00.8174194Z 
2025-08-17T12:15:00.8174337Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T12:15:00.8174674Z 
2025-08-17T12:15:00.8174761Z <a id="common.config"></a>
2025-08-17T12:15:00.8174896Z 
2025-08-17T12:15:00.8174970Z # common.config
2025-08-17T12:15:00.8175086Z 
2025-08-17T12:15:00.8175167Z <a id="common.base"></a>
2025-08-17T12:15:00.8175297Z 
2025-08-17T12:15:00.8175372Z # common.base
2025-08-17T12:15:00.8175476Z 
2025-08-17T12:15:00.8175564Z <a id="common.base.Base"></a>
2025-08-17T12:15:00.8175709Z 
2025-08-17T12:15:00.8175903Z ## Base Objects
2025-08-17T12:15:00.8176013Z 
2025-08-17T12:15:00.8176080Z ```python
2025-08-17T12:15:00.8176260Z class Base(DeclarativeBase)
2025-08-17T12:15:00.8176461Z ```
2025-08-17T12:15:00.8176554Z 
2025-08-17T12:15:00.8176645Z Base class for SQLAlchemy models.
2025-08-17T12:15:00.8176803Z 
2025-08-17T12:15:00.8176889Z <a id="repricer"></a>
2025-08-17T12:15:00.8177012Z 
2025-08-17T12:15:00.8177083Z # repricer
2025-08-17T12:15:00.8177181Z 
2025-08-17T12:15:00.8177281Z <a id="repricer.app.schemas"></a>
2025-08-17T12:15:00.8177437Z 
2025-08-17T12:15:00.8177520Z # repricer.app.schemas
2025-08-17T12:15:00.8177654Z 
2025-08-17T12:15:00.8177744Z <a id="repricer.app.deps"></a>
2025-08-17T12:15:00.8177890Z 
2025-08-17T12:15:00.8177976Z # repricer.app.deps
2025-08-17T12:15:00.8178094Z 
2025-08-17T12:15:00.8178215Z Placeholder module for Keepa / SP-API clients.
2025-08-17T12:15:00.8178411Z 
2025-08-17T12:15:00.8178511Z <a id="repricer.app.logic"></a>
2025-08-17T12:15:00.8178661Z 
2025-08-17T12:15:00.8178750Z # repricer.app.logic
2025-08-17T12:15:00.8178886Z 
2025-08-17T12:15:00.8178991Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-17T12:15:00.8179175Z 
2025-08-17T12:15:00.8179245Z #### MIN\_MARGIN
2025-08-17T12:15:00.8179358Z 
2025-08-17T12:15:00.8179424Z 15 % ROI
2025-08-17T12:15:00.8179516Z 
2025-08-17T12:15:00.8179629Z <a id="repricer.app.logic.compute_price"></a>
2025-08-17T12:15:00.8179817Z 
2025-08-17T12:15:00.8181308Z #### compute\_price
2025-08-17T12:15:00.8181513Z 
2025-08-17T12:15:00.8181628Z ```python
2025-08-17T12:15:00.8182045Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-17T12:15:00.8182433Z ```
2025-08-17T12:15:00.8182524Z 
2025-08-17T12:15:00.8182645Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-17T12:15:00.8182939Z Replace with real competitive logic later.
2025-08-17T12:15:00.8183124Z 
2025-08-17T12:15:00.8183215Z <a id="repricer.app.main"></a>
2025-08-17T12:15:00.8183368Z 
2025-08-17T12:15:00.8183447Z # repricer.app.main
2025-08-17T12:15:00.8183581Z 
2025-08-17T12:15:00.8183817Z <a id="repricer.app"></a>
2025-08-17T12:15:00.8183953Z 
2025-08-17T12:15:00.8184032Z # repricer.app
2025-08-17T12:15:00.8184138Z 
2025-08-17T12:15:00.8184283Z <a id="repricer.tests.test_imports"></a>
2025-08-17T12:15:00.8184464Z 
2025-08-17T12:15:00.8184554Z # repricer.tests.test\_imports
2025-08-17T12:15:00.8184935Z 
2025-08-17T12:15:00.8185035Z <a id="repricer.tests.test_smoke"></a>
2025-08-17T12:15:00.8185212Z 
2025-08-17T12:15:00.8185301Z # repricer.tests.test\_smoke
2025-08-17T12:15:00.8185446Z 
2025-08-17T12:15:00.8185536Z <a id="repricer.tests"></a>
2025-08-17T12:15:00.8185675Z 
2025-08-17T12:15:00.8185749Z # repricer.tests
2025-08-17T12:15:00.8185867Z 
2025-08-17T12:15:00.8185938Z <a id="db"></a>
2025-08-17T12:15:00.8186046Z 
2025-08-17T12:15:00.8186112Z # db
2025-08-17T12:15:00.8186212Z 
2025-08-17T12:15:00.8186293Z <a id="db.utils.views"></a>
2025-08-17T12:15:00.8186436Z 
2025-08-17T12:15:00.8186514Z # db.utils.views
2025-08-17T12:15:00.8186625Z 
2025-08-17T12:15:00.8186721Z <a id="db.utils.views.replace_view"></a>
2025-08-17T12:15:00.8186884Z 
2025-08-17T12:15:00.8186957Z #### replace\_view
2025-08-17T12:15:00.8187059Z 
2025-08-17T12:15:00.8187122Z ```python
2025-08-17T12:15:00.8187320Z def replace_view(name: str, new_sql: str) -> None
2025-08-17T12:15:00.8187567Z ```
2025-08-17T12:15:00.8187654Z 
2025-08-17T12:15:00.8187742Z Drop and recreate a SQL view atomically.
2025-08-17T12:15:00.8187897Z 
2025-08-17T12:15:00.8187973Z <a id="db.utils"></a>
2025-08-17T12:15:00.8188086Z 
2025-08-17T12:15:00.8188148Z # db.utils
2025-08-17T12:15:00.8188239Z 
2025-08-17T12:15:00.8188322Z <a id="price_importer"></a>
2025-08-17T12:15:00.8188445Z 
2025-08-17T12:15:00.8188513Z # price\_importer
2025-08-17T12:15:00.8188623Z 
2025-08-17T12:15:00.8188724Z <a id="price_importer.services_common.dsn"></a>
2025-08-17T12:15:00.8188898Z 
2025-08-17T12:15:00.8189106Z # price\_importer.services\_common.dsn
2025-08-17T12:15:00.8189266Z 
2025-08-17T12:15:00.8189388Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-17T12:15:00.8189713Z 
2025-08-17T12:15:00.8189784Z #### build\_dsn
2025-08-17T12:15:00.8189884Z 
2025-08-17T12:15:00.8189948Z ```python
2025-08-17T12:15:00.8190123Z def build_dsn(sync: bool = True) -> str
2025-08-17T12:15:00.8190334Z ```
2025-08-17T12:15:00.8190421Z 
2025-08-17T12:15:00.8190488Z Return safe DSN.
2025-08-17T12:15:00.8190592Z 
2025-08-17T12:15:00.8190921Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-17T12:15:00.8191117Z 
2025-08-17T12:15:00.8191239Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-17T12:15:00.8191441Z 
2025-08-17T12:15:00.8191553Z # price\_importer.services\_common.models\_vendor
2025-08-17T12:15:00.8191733Z 
2025-08-17T12:15:00.8191838Z <a id="price_importer.services_common.db_url"></a>
2025-08-17T12:15:00.8192027Z 
2025-08-17T12:15:00.8192120Z # price\_importer.services\_common.db\_url
2025-08-17T12:15:00.8192287Z 
2025-08-17T12:15:00.8192421Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-17T12:15:00.8192634Z 
2025-08-17T12:15:00.8192704Z #### build\_url
2025-08-17T12:15:00.8192810Z 
2025-08-17T12:15:00.8192874Z ```python
2025-08-17T12:15:00.8193044Z def build_url(async_: bool = True) -> str
2025-08-17T12:15:00.8193268Z ```
2025-08-17T12:15:00.8193352Z 
2025-08-17T12:15:00.8193447Z Return Postgres DSN from env or PG_* parts.
2025-08-17T12:15:00.8193619Z 
2025-08-17T12:15:00.8193721Z <a id="price_importer.services_common.keepa"></a>
2025-08-17T12:15:00.8193894Z 
2025-08-17T12:15:00.8193992Z # price\_importer.services\_common.keepa
2025-08-17T12:15:00.8194150Z 
2025-08-17T12:15:00.8194248Z <a id="price_importer.services_common.llm"></a>
2025-08-17T12:15:00.8194425Z 
2025-08-17T12:15:00.8194511Z # price\_importer.services\_common.llm
2025-08-17T12:15:00.8194771Z 
2025-08-17T12:15:00.8194891Z <a id="price_importer.services_common.settings"></a>
2025-08-17T12:15:00.8195072Z 
2025-08-17T12:15:00.8195168Z # price\_importer.services\_common.settings
2025-08-17T12:15:00.8195331Z 
2025-08-17T12:15:00.8195438Z <a id="price_importer.services_common.db"></a>
2025-08-17T12:15:00.8195718Z 
2025-08-17T12:15:00.8195805Z # price\_importer.services\_common.db
2025-08-17T12:15:00.8195960Z 
2025-08-17T12:15:00.8196110Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-17T12:15:00.8196337Z 
2025-08-17T12:15:00.8196418Z #### build\_sqlalchemy\_url
2025-08-17T12:15:00.8196546Z 
2025-08-17T12:15:00.8196608Z ```python
2025-08-17T12:15:00.8196786Z def build_sqlalchemy_url() -> str
2025-08-17T12:15:00.8196992Z ```
2025-08-17T12:15:00.8197081Z 
2025-08-17T12:15:00.8197176Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T12:15:00.8197343Z 
2025-08-17T12:15:00.8197480Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-17T12:15:00.8197702Z 
2025-08-17T12:15:00.8197778Z #### build\_asyncpg\_dsn
2025-08-17T12:15:00.8197899Z 
2025-08-17T12:15:00.8197968Z ```python
2025-08-17T12:15:00.8198133Z def build_asyncpg_dsn() -> str
2025-08-17T12:15:00.8198330Z ```
2025-08-17T12:15:00.8198416Z 
2025-08-17T12:15:00.8198543Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T12:15:00.8198750Z 
2025-08-17T12:15:00.8198870Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-17T12:15:00.8199068Z 
2025-08-17T12:15:00.8199141Z #### refresh\_mvs
2025-08-17T12:15:00.8199244Z 
2025-08-17T12:15:00.8199307Z ```python
2025-08-17T12:15:00.8199514Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T12:15:00.8199756Z ```
2025-08-17T12:15:00.8199840Z 
2025-08-17T12:15:00.8199980Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T12:15:00.8200187Z 
2025-08-17T12:15:00.8200285Z <a id="price_importer.services_common"></a>
2025-08-17T12:15:00.8200459Z 
2025-08-17T12:15:00.8200543Z # price\_importer.services\_common
2025-08-17T12:15:00.8200692Z 
2025-08-17T12:15:00.8200800Z <a id="price_importer.services_common.base"></a>
2025-08-17T12:15:00.8200976Z 
2025-08-17T12:15:00.8201065Z # price\_importer.services\_common.base
2025-08-17T12:15:00.8201376Z 
2025-08-17T12:15:00.8201463Z <a id="price_importer.normaliser"></a>
2025-08-17T12:15:00.8201625Z 
2025-08-17T12:15:00.8201708Z # price\_importer.normaliser
2025-08-17T12:15:00.8201849Z 
2025-08-17T12:15:00.8201952Z <a id="price_importer.common.models_vendor"></a>
2025-08-17T12:15:00.8202128Z 
2025-08-17T12:15:00.8202229Z # price\_importer.common.models\_vendor
2025-08-17T12:15:00.8202407Z 
2025-08-17T12:15:00.8202507Z <a id="price_importer.common.db_url"></a>
2025-08-17T12:15:00.8202688Z 
2025-08-17T12:15:00.8202778Z # price\_importer.common.db\_url
2025-08-17T12:15:00.8202935Z 
2025-08-17T12:15:00.8203047Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-17T12:15:00.8203246Z 
2025-08-17T12:15:00.8203316Z #### make\_dsn
2025-08-17T12:15:00.8203422Z 
2025-08-17T12:15:00.8203497Z ```python
2025-08-17T12:15:00.8203682Z def make_dsn(async_: bool = False) -> str
2025-08-17T12:15:00.8203923Z ```
2025-08-17T12:15:00.8204011Z 
2025-08-17T12:15:00.8204136Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-17T12:15:00.8204350Z 
2025-08-17T12:15:00.8204470Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-17T12:15:00.8204811Z 
2025-08-17T12:15:00.8204938Z #### build\_url
2025-08-17T12:15:00.8205083Z 
2025-08-17T12:15:00.8205154Z ```python
2025-08-17T12:15:00.8205347Z def build_url(async_: bool = False) -> str
2025-08-17T12:15:00.8205584Z ```
2025-08-17T12:15:00.8205671Z 
2025-08-17T12:15:00.8205806Z Return Postgres DSN built from environment variables.
2025-08-17T12:15:00.8206013Z 
2025-08-17T12:15:00.8206104Z <a id="price_importer.common"></a>
2025-08-17T12:15:00.8206272Z 
2025-08-17T12:15:00.8206357Z # price\_importer.common
2025-08-17T12:15:00.8206492Z 
2025-08-17T12:15:00.8206591Z <a id="price_importer.common.base"></a>
2025-08-17T12:15:00.8206764Z 
2025-08-17T12:15:00.8206855Z # price\_importer.common.base
2025-08-17T12:15:00.8207001Z 
2025-08-17T12:15:00.8207115Z <a id="price_importer.tests.conftest"></a>
2025-08-17T12:15:00.8207293Z 
2025-08-17T12:15:00.8207386Z # price\_importer.tests.conftest
2025-08-17T12:15:00.8207682Z 
2025-08-17T12:15:00.8207789Z <a id="price_importer.tests.test_reader"></a>
2025-08-17T12:15:00.8207973Z 
2025-08-17T12:15:00.8208070Z # price\_importer.tests.test\_reader
2025-08-17T12:15:00.8208235Z 
2025-08-17T12:15:00.8208342Z <a id="price_importer.tests.test_imports"></a>
2025-08-17T12:15:00.8208525Z 
2025-08-17T12:15:00.8208630Z # price\_importer.tests.test\_imports
2025-08-17T12:15:00.8208798Z 
2025-08-17T12:15:00.8208899Z <a id="price_importer.tests.test_smoke"></a>
2025-08-17T12:15:00.8209082Z 
2025-08-17T12:15:00.8209173Z # price\_importer.tests.test\_smoke
2025-08-17T12:15:00.8209334Z 
2025-08-17T12:15:00.8209452Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-17T12:15:00.8209645Z 
2025-08-17T12:15:00.8209742Z # price\_importer.tests.test\_normaliser
2025-08-17T12:15:00.8209916Z 
2025-08-17T12:15:00.8210012Z <a id="price_importer.tests"></a>
2025-08-17T12:15:00.8210168Z 
2025-08-17T12:15:00.8210250Z # price\_importer.tests
2025-08-17T12:15:00.8210389Z 
2025-08-17T12:15:00.8210486Z <a id="price_importer.reader"></a>
2025-08-17T12:15:00.8210644Z 
2025-08-17T12:15:00.8210731Z # price\_importer.reader
2025-08-17T12:15:00.8210861Z 
2025-08-17T12:15:00.8210962Z <a id="price_importer.reader.load_file"></a>
2025-08-17T12:15:00.8211144Z 
2025-08-17T12:15:00.8211220Z #### load\_file
2025-08-17T12:15:00.8211326Z 
2025-08-17T12:15:00.8211393Z ```python
2025-08-17T12:15:00.8211586Z def load_file(path: str | Path) -> Any
2025-08-17T12:15:00.8211815Z ```
2025-08-17T12:15:00.8211911Z 
2025-08-17T12:15:00.8212006Z Return DataFrame from CSV or Excel file.
2025-08-17T12:15:00.8212181Z 
2025-08-17T12:15:00.8212299Z Raises RuntimeError if pandas is unavailable.
2025-08-17T12:15:00.8212484Z 
2025-08-17T12:15:00.8212580Z <a id="price_importer.repository"></a>
2025-08-17T12:15:00.8212751Z 
2025-08-17T12:15:00.8212847Z # price\_importer.repository
2025-08-17T12:15:00.8212994Z 
2025-08-17T12:15:00.8213083Z <a id="price_importer.import"></a>
2025-08-17T12:15:00.8213247Z 
2025-08-17T12:15:00.8213453Z # price\_importer.import
2025-08-17T12:15:00.8213590Z 
2025-08-17T12:15:00.8213672Z <a id="fees_h10"></a>
2025-08-17T12:15:00.8213796Z 
2025-08-17T12:15:00.8213865Z # fees\_h10
2025-08-17T12:15:00.8213964Z 
2025-08-17T12:15:00.8214052Z <a id="fees_h10.worker"></a>
2025-08-17T12:15:00.8214193Z 
2025-08-17T12:15:00.8214265Z # fees\_h10.worker
2025-08-17T12:15:00.8214383Z 
2025-08-17T12:15:00.8214487Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-17T12:15:00.8214931Z 
2025-08-17T12:15:00.8215022Z #### list\_active\_asins
2025-08-17T12:15:00.8215162Z 
2025-08-17T12:15:00.8215235Z ```python
2025-08-17T12:15:00.8215431Z def list_active_asins() -> list[str]
2025-08-17T12:15:00.8215654Z ```
2025-08-17T12:15:00.8215740Z 
2025-08-17T12:15:00.8215868Z Return known ASINs or an empty list if unavailable.
2025-08-17T12:15:00.8216070Z 
2025-08-17T12:15:00.8216160Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-17T12:15:00.8216335Z 
2025-08-17T12:15:00.8216421Z # fees\_h10.tests.test\_smoke
2025-08-17T12:15:00.8216573Z 
2025-08-17T12:15:00.8216665Z <a id="fees_h10.tests"></a>
2025-08-17T12:15:00.8216799Z 
2025-08-17T12:15:00.8216869Z # fees\_h10.tests
2025-08-17T12:15:00.8216980Z 
2025-08-17T12:15:00.8217070Z <a id="fees_h10.client"></a>
2025-08-17T12:15:00.8217211Z 
2025-08-17T12:15:00.8217282Z # fees\_h10.client
2025-08-17T12:15:00.8217398Z 
2025-08-17T12:15:00.8217485Z <a id="fees_h10.repository"></a>
2025-08-17T12:15:00.8217634Z 
2025-08-17T12:15:00.8217716Z # fees\_h10.repository
2025-08-17T12:15:00.8217840Z 
2025-08-17T12:15:00.8217914Z <a id="emailer"></a>
2025-08-17T12:15:00.8218033Z 
2025-08-17T12:15:00.8218105Z # emailer
2025-08-17T12:15:00.8218198Z 
2025-08-17T12:15:00.8218305Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-17T12:15:00.8218497Z 
2025-08-17T12:15:00.8218591Z # emailer.tests.test\_import\_emailer
2025-08-17T12:15:00.8218758Z 
2025-08-17T12:15:00.8218847Z <a id="emailer.tests.test_smoke"></a>
2025-08-17T12:15:00.8219016Z 
2025-08-17T12:15:00.8219100Z # emailer.tests.test\_smoke
2025-08-17T12:15:00.8219383Z 
2025-08-17T12:15:00.8219472Z <a id="emailer.tests"></a>
2025-08-17T12:15:00.8219607Z 
2025-08-17T12:15:00.8219679Z # emailer.tests
2025-08-17T12:15:00.8219792Z 
2025-08-17T12:15:00.8219884Z <a id="emailer.generate_body"></a>
2025-08-17T12:15:00.8220039Z 
2025-08-17T12:15:00.8220121Z # emailer.generate\_body
2025-08-17T12:15:00.8220263Z 
2025-08-17T12:15:00.8220341Z <a id="llm_server"></a>
2025-08-17T12:15:00.8220463Z 
2025-08-17T12:15:00.8220539Z # llm\_server
2025-08-17T12:15:00.8220641Z 
2025-08-17T12:15:00.8220725Z <a id="llm_server.app"></a>
2025-08-17T12:15:00.8220867Z 
2025-08-17T12:15:00.8220941Z # llm\_server.app
2025-08-17T12:15:00.8221054Z 
