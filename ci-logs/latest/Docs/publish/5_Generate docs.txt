2025-08-17T17:31:45.4470648Z ##[group]Run pydoc-markdown
2025-08-17T17:31:45.4470948Z [36;1mpydoc-markdown[0m
2025-08-17T17:31:45.4510659Z shell: /usr/bin/bash -e {0}
2025-08-17T17:31:45.4510895Z env:
2025-08-17T17:31:45.4511132Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T17:31:45.4511548Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-17T17:31:45.4511940Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T17:31:45.4512290Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T17:31:45.4512633Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T17:31:45.4513081Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-17T17:31:45.4513383Z ##[endgroup]
2025-08-17T17:31:45.7710959Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-17T17:31:45.7711719Z Unknown key(s) "{'output_directory'}" at:
2025-08-17T17:31:45.7712195Z In "pydoc-markdown.yml"
2025-08-17T17:31:45.7712612Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-17T17:31:45.7713518Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-17T17:31:45.7714306Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-17T17:31:45.7714848Z 
2025-08-17T17:31:46.0022077Z <a id="__init__"></a>
2025-08-17T17:31:46.0022663Z 
2025-08-17T17:31:46.0023134Z # \_\_init\_\_
2025-08-17T17:31:46.0023442Z 
2025-08-17T17:31:46.0023635Z <a id="api"></a>
2025-08-17T17:31:46.0023953Z 
2025-08-17T17:31:46.0024134Z # api
2025-08-17T17:31:46.0024376Z 
2025-08-17T17:31:46.0024602Z <a id="api.tests.test_llm"></a>
2025-08-17T17:31:46.0025033Z 
2025-08-17T17:31:46.0025248Z # api.tests.test\_llm
2025-08-17T17:31:46.0025607Z 
2025-08-17T17:31:46.0025861Z <a id="api.tests.test_imports"></a>
2025-08-17T17:31:46.0026356Z 
2025-08-17T17:31:46.0026586Z # api.tests.test\_imports
2025-08-17T17:31:46.0026998Z 
2025-08-17T17:31:46.0027275Z <a id="api.tests.test_entrypoint"></a>
2025-08-17T17:31:46.0027810Z 
2025-08-17T17:31:46.0028032Z # api.tests.test\_entrypoint
2025-08-17T17:31:46.0028494Z 
2025-08-17T17:31:46.0028770Z <a id="api.tests.test_health"></a>
2025-08-17T17:31:46.0029173Z 
2025-08-17T17:31:46.0029369Z # api.tests.test\_health
2025-08-17T17:31:46.0029683Z 
2025-08-17T17:31:46.0029846Z <a id="api.migrations.env"></a>
2025-08-17T17:31:46.0030119Z 
2025-08-17T17:31:46.0030220Z # api.migrations.env
2025-08-17T17:31:46.0030373Z 
2025-08-17T17:31:46.0030527Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-17T17:31:46.0030797Z 
2025-08-17T17:31:46.0030925Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-17T17:31:46.0031154Z 
2025-08-17T17:31:46.0031292Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-17T17:31:46.0031537Z 
2025-08-17T17:31:46.0031648Z # api.migrations.versions.0004\_fee\_cron
2025-08-17T17:31:46.0031867Z 
2025-08-17T17:31:46.0032053Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-17T17:31:46.0032343Z 
2025-08-17T17:31:46.0032505Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-17T17:31:46.0033268Z 
2025-08-17T17:31:46.0033419Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-17T17:31:46.0033668Z 
2025-08-17T17:31:46.0033799Z # api.migrations.versions.0003\_vendor\_prices
2025-08-17T17:31:46.0034024Z 
2025-08-17T17:31:46.0034163Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-17T17:31:46.0034408Z 
2025-08-17T17:31:46.0034529Z # api.migrations.versions.0024\_create\_buybox
2025-08-17T17:31:46.0034751Z 
2025-08-17T17:31:46.0034898Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-17T17:31:46.0035152Z 
2025-08-17T17:31:46.0035280Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-17T17:31:46.0035508Z 
2025-08-17T17:31:46.0035656Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-17T17:31:46.0035893Z 
2025-08-17T17:31:46.0036017Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-17T17:31:46.0036246Z 
2025-08-17T17:31:46.0036389Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-17T17:31:46.0036837Z 
2025-08-17T17:31:46.0036967Z # api.migrations.versions.0020\_unified\_schema
2025-08-17T17:31:46.0037193Z 
2025-08-17T17:31:46.0037339Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-17T17:31:46.0037586Z 
2025-08-17T17:31:46.0037719Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-17T17:31:46.0037947Z 
2025-08-17T17:31:46.0038074Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-17T17:31:46.0038310Z 
2025-08-17T17:31:46.0038417Z # api.migrations.versions.0001\_baseline
2025-08-17T17:31:46.0038623Z 
2025-08-17T17:31:46.0038734Z <a id="api.migrations.versions"></a>
2025-08-17T17:31:46.0038926Z 
2025-08-17T17:31:46.0039019Z # api.migrations.versions
2025-08-17T17:31:46.0039176Z 
2025-08-17T17:31:46.0039272Z <a id="api.migrations"></a>
2025-08-17T17:31:46.0039431Z 
2025-08-17T17:31:46.0039511Z # api.migrations
2025-08-17T17:31:46.0039642Z 
2025-08-17T17:31:46.0039721Z <a id="api.db"></a>
2025-08-17T17:31:46.0039847Z 
2025-08-17T17:31:46.0039931Z # api.db
2025-08-17T17:31:46.0040033Z 
2025-08-17T17:31:46.0040125Z <a id="api.routes.stats"></a>
2025-08-17T17:31:46.0040291Z 
2025-08-17T17:31:46.0040376Z # api.routes.stats
2025-08-17T17:31:46.0040502Z 
2025-08-17T17:31:46.0040592Z <a id="api.routes.stats.kpi"></a>
2025-08-17T17:31:46.0040750Z 
2025-08-17T17:31:46.0040814Z #### kpi
2025-08-17T17:31:46.0040902Z 
2025-08-17T17:31:46.0040969Z ```python
2025-08-17T17:31:46.0041148Z @router.get("/stats/kpi")
2025-08-17T17:31:46.0041396Z def kpi() -> List[Dict[str, int]]
2025-08-17T17:31:46.0041605Z ```
2025-08-17T17:31:46.0041690Z 
2025-08-17T17:31:46.0041779Z Return KPI metrics (mock).
2025-08-17T17:31:46.0041909Z 
2025-08-17T17:31:46.0042012Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-17T17:31:46.0042199Z 
2025-08-17T17:31:46.0042270Z #### roi\_by\_vendor
2025-08-17T17:31:46.0042382Z 
2025-08-17T17:31:46.0042449Z ```python
2025-08-17T17:31:46.0042629Z @router.get("/stats/roi_by_vendor")
2025-08-17T17:31:46.0043066Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-17T17:31:46.0043302Z ```
2025-08-17T17:31:46.0043384Z 
2025-08-17T17:31:46.0043471Z Return ROI percent by vendor.
2025-08-17T17:31:46.0043613Z 
2025-08-17T17:31:46.0043705Z <a id="api.routes.stats.roi_trend"></a>
2025-08-17T17:31:46.0043881Z 
2025-08-17T17:31:46.0043949Z #### roi\_trend
2025-08-17T17:31:46.0044049Z 
2025-08-17T17:31:46.0044114Z ```python
2025-08-17T17:31:46.0044289Z @router.get("/stats/roi_trend")
2025-08-17T17:31:46.0044528Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-17T17:31:46.0044761Z ```
2025-08-17T17:31:46.0044842Z 
2025-08-17T17:31:46.0044925Z Return 30-day ROI trend.
2025-08-17T17:31:46.0045050Z 
2025-08-17T17:31:46.0045133Z <a id="api.routes.roi"></a>
2025-08-17T17:31:46.0045274Z 
2025-08-17T17:31:46.0045346Z # api.routes.roi
2025-08-17T17:31:46.0045553Z 
2025-08-17T17:31:46.0045646Z <a id="api.routes.health"></a>
2025-08-17T17:31:46.0045815Z 
2025-08-17T17:31:46.0045887Z # api.routes.health
2025-08-17T17:31:46.0046003Z 
2025-08-17T17:31:46.0046101Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-17T17:31:46.0046401Z 
2025-08-17T17:31:46.0046468Z #### MAX\_SKEW
2025-08-17T17:31:46.0046575Z 
2025-08-17T17:31:46.0046639Z seconds
2025-08-17T17:31:46.0046724Z 
2025-08-17T17:31:46.0046823Z <a id="api.routes.health.health"></a>
2025-08-17T17:31:46.0046986Z 
2025-08-17T17:31:46.0047051Z #### health
2025-08-17T17:31:46.0047147Z 
2025-08-17T17:31:46.0047210Z ```python
2025-08-17T17:31:46.0047402Z @router.get("/health", include_in_schema=False)
2025-08-17T17:31:46.0047803Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-17T17:31:46.0048154Z ```
2025-08-17T17:31:46.0048242Z 
2025-08-17T17:31:46.0048358Z Return 200 when DB reachable and clocks are in sync.
2025-08-17T17:31:46.0048557Z 
2025-08-17T17:31:46.0048655Z <a id="api.routes.repository"></a>
2025-08-17T17:31:46.0048813Z 
2025-08-17T17:31:46.0048892Z # api.routes.repository
2025-08-17T17:31:46.0049023Z 
2025-08-17T17:31:46.0049096Z <a id="api.routes"></a>
2025-08-17T17:31:46.0049534Z 
2025-08-17T17:31:46.0049662Z # api.routes
2025-08-17T17:31:46.0049860Z 
2025-08-17T17:31:46.0050008Z <a id="api.models.fee"></a>
2025-08-17T17:31:46.0050262Z 
2025-08-17T17:31:46.0050401Z # api.models.fee
2025-08-17T17:31:46.0050599Z 
2025-08-17T17:31:46.0050735Z <a id="api.models"></a>
2025-08-17T17:31:46.0050965Z 
2025-08-17T17:31:46.0051085Z # api.models
2025-08-17T17:31:46.0051269Z 
2025-08-17T17:31:46.0051426Z <a id="api.roi_repository"></a>
2025-08-17T17:31:46.0051596Z 
2025-08-17T17:31:46.0051675Z # api.roi\_repository
2025-08-17T17:31:46.0051795Z 
2025-08-17T17:31:46.0051872Z <a id="api.main"></a>
2025-08-17T17:31:46.0051985Z 
2025-08-17T17:31:46.0052050Z # api.main
2025-08-17T17:31:46.0052144Z 
2025-08-17T17:31:46.0052228Z <a id="api.main.ready"></a>
2025-08-17T17:31:46.0052361Z 
2025-08-17T17:31:46.0052425Z #### ready
2025-08-17T17:31:46.0052521Z 
2025-08-17T17:31:46.0052585Z ```python
2025-08-17T17:31:46.0053218Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-17T17:31:46.0053734Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-17T17:31:46.0054108Z                                                                       str]
2025-08-17T17:31:46.0054337Z ```
2025-08-17T17:31:46.0054422Z 
2025-08-17T17:31:46.0054531Z Return 200 only when migrations are at head.
2025-08-17T17:31:46.0054707Z 
2025-08-17T17:31:46.0054787Z <a id="api.config"></a>
2025-08-17T17:31:46.0054917Z 
2025-08-17T17:31:46.0054986Z # api.config
2025-08-17T17:31:46.0055086Z 
2025-08-17T17:31:46.0055159Z <a id="etl"></a>
2025-08-17T17:31:46.0055264Z 
2025-08-17T17:31:46.0055326Z # etl
2025-08-17T17:31:46.0055414Z 
2025-08-17T17:31:46.0055502Z <a id="etl.fba_fee_ingestor"></a>
2025-08-17T17:31:46.0055654Z 
2025-08-17T17:31:46.0055729Z # etl.fba\_fee\_ingestor
2025-08-17T17:31:46.0055861Z 
2025-08-17T17:31:46.0055944Z <a id="etl.sp_fees_ingestor"></a>
2025-08-17T17:31:46.0056091Z 
2025-08-17T17:31:46.0056166Z # etl.sp\_fees\_ingestor
2025-08-17T17:31:46.0056298Z 
2025-08-17T17:31:46.0056382Z <a id="etl.keepa_ingestor"></a>
2025-08-17T17:31:46.0056526Z 
2025-08-17T17:31:46.0056607Z # etl.keepa\_ingestor
2025-08-17T17:31:46.0056723Z 
2025-08-17T17:31:46.0056792Z <a id="etl.db"></a>
2025-08-17T17:31:46.0056906Z 
2025-08-17T17:31:46.0056971Z # etl.db
2025-08-17T17:31:46.0057061Z 
2025-08-17T17:31:46.0057146Z <a id="etl.dialects.schemas"></a>
2025-08-17T17:31:46.0057300Z 
2025-08-17T17:31:46.0057376Z # etl.dialects.schemas
2025-08-17T17:31:46.0057498Z 
2025-08-17T17:31:46.0057614Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-17T17:31:46.0057804Z 
2025-08-17T17:31:46.0057897Z # etl.dialects.amazon\_reimbursements
2025-08-17T17:31:46.0058066Z 
2025-08-17T17:31:46.0058158Z <a id="etl.dialects.amazon_returns"></a>
2025-08-17T17:31:46.0058329Z 
2025-08-17T17:31:46.0058416Z # etl.dialects.amazon\_returns
2025-08-17T17:31:46.0058568Z 
2025-08-17T17:31:46.0058646Z <a id="etl.dialects"></a>
2025-08-17T17:31:46.0058774Z 
2025-08-17T17:31:46.0058846Z # etl.dialects
2025-08-17T17:31:46.0059140Z 
2025-08-17T17:31:46.0059210Z <a id="ingest"></a>
2025-08-17T17:31:46.0059318Z 
2025-08-17T17:31:46.0059388Z # ingest
2025-08-17T17:31:46.0059477Z 
2025-08-17T17:31:46.0059561Z <a id="ingest.copy_loader"></a>
2025-08-17T17:31:46.0059709Z 
2025-08-17T17:31:46.0059782Z # ingest.copy\_loader
2025-08-17T17:31:46.0059899Z 
2025-08-17T17:31:46.0060013Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-17T17:31:46.0060199Z 
2025-08-17T17:31:46.0060276Z #### copy\_df\_via\_temp
2025-08-17T17:31:46.0060399Z 
2025-08-17T17:31:46.0060471Z ```python
2025-08-17T17:31:46.0060649Z def copy_df_via_temp(engine: Engine,
2025-08-17T17:31:46.0060896Z                      df: pd.DataFrame,
2025-08-17T17:31:46.0061133Z                      target_table: str,
2025-08-17T17:31:46.0061362Z                      *,
2025-08-17T17:31:46.0061573Z                      target_schema: Optional[str] = None,
2025-08-17T17:31:46.0061848Z                      columns: Sequence[str],
2025-08-17T17:31:46.0062247Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-17T17:31:46.0062546Z                      analyze_after: bool = False) -> int
2025-08-17T17:31:46.0062947Z ```
2025-08-17T17:31:46.0063038Z 
2025-08-17T17:31:46.0063199Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-17T17:31:46.0063445Z 
2025-08-17T17:31:46.0063625Z The dataframe is first written to a TEMP table created ``LIKE`` the target
2025-08-17T17:31:46.0064074Z including defaults and generated columns.  Data is streamed via ``COPY`` and
2025-08-17T17:31:46.0064512Z then inserted into the final table.  If ``conflict_cols`` is provided an
2025-08-17T17:31:46.0064928Z ``INSERT ... ON CONFLICT DO UPDATE`` is issued for the non-conflicting
2025-08-17T17:31:46.0065266Z columns, otherwise rows are simply appended.
2025-08-17T17:31:46.0065450Z 
2025-08-17T17:31:46.0065554Z Returns the number of rows provided in ``df``.
2025-08-17T17:31:46.0065737Z 
2025-08-17T17:31:46.0065830Z <a id="ingest.tests.test_smoke"></a>
2025-08-17T17:31:46.0066000Z 
2025-08-17T17:31:46.0066083Z # ingest.tests.test\_smoke
2025-08-17T17:31:46.0066218Z 
2025-08-17T17:31:46.0066301Z <a id="ingest.tests"></a>
2025-08-17T17:31:46.0066429Z 
2025-08-17T17:31:46.0066497Z # ingest.tests
2025-08-17T17:31:46.0066605Z 
2025-08-17T17:31:46.0066692Z <a id="ingest.upload_router"></a>
2025-08-17T17:31:46.0066844Z 
2025-08-17T17:31:46.0066920Z # ingest.upload\_router
2025-08-17T17:31:46.0067048Z 
2025-08-17T17:31:46.0067131Z <a id="ingest.email_watcher"></a>
2025-08-17T17:31:46.0067278Z 
2025-08-17T17:31:46.0067365Z # ingest.email\_watcher
2025-08-17T17:31:46.0067484Z 
2025-08-17T17:31:46.0067578Z <a id="ingest.email_watcher.main"></a>
2025-08-17T17:31:46.0067744Z 
2025-08-17T17:31:46.0067807Z #### main
2025-08-17T17:31:46.0067897Z 
2025-08-17T17:31:46.0067961Z ```python
2025-08-17T17:31:46.0068140Z def main() -> dict[str, str]
2025-08-17T17:31:46.0068342Z ```
2025-08-17T17:31:46.0068427Z 
2025-08-17T17:31:46.0068570Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-17T17:31:46.0068805Z 
2025-08-17T17:31:46.0068941Z Returns {"status": "success"} when processing completes.
2025-08-17T17:31:46.0069150Z 
2025-08-17T17:31:46.0069228Z <a id="ingest.tasks"></a>
2025-08-17T17:31:46.0069559Z 
2025-08-17T17:31:46.0069699Z # ingest.tasks
2025-08-17T17:31:46.0069843Z 
2025-08-17T17:31:46.0069944Z <a id="ingest.tasks.task_import_file"></a>
2025-08-17T17:31:46.0070125Z 
2025-08-17T17:31:46.0070197Z #### task\_import\_file
2025-08-17T17:31:46.0070316Z 
2025-08-17T17:31:46.0070387Z ```python
2025-08-17T17:31:46.0070598Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-17T17:31:46.0070886Z def task_import_file(self,
2025-08-17T17:31:46.0071086Z                      uri: str,
2025-08-17T17:31:46.0071342Z                      report_type: Optional[str] = None) -> Dict[str, Any]
2025-08-17T17:31:46.0071610Z ```
2025-08-17T17:31:46.0071700Z 
2025-08-17T17:31:46.0071833Z Import a file into Postgres using existing ETL pipeline.
2025-08-17T17:31:46.0072168Z 
2025-08-17T17:31:46.0072260Z <a id="ingest.celery_app"></a>
2025-08-17T17:31:46.0072400Z 
2025-08-17T17:31:46.0072473Z # ingest.celery\_app
2025-08-17T17:31:46.0072597Z 
2025-08-17T17:31:46.0072680Z <a id="ingest.ingest_router"></a>
2025-08-17T17:31:46.0072952Z 
2025-08-17T17:31:46.0073029Z # ingest.ingest\_router
2025-08-17T17:31:46.0073157Z 
2025-08-17T17:31:46.0073235Z <a id="logistics_etl"></a>
2025-08-17T17:31:46.0073363Z 
2025-08-17T17:31:46.0073439Z # logistics\_etl
2025-08-17T17:31:46.0073545Z 
2025-08-17T17:31:46.0073623Z Daily logistics ETL job.
2025-08-17T17:31:46.0073752Z 
2025-08-17T17:31:46.0073836Z <a id="logistics_etl.__main__"></a>
2025-08-17T17:31:46.0073989Z 
2025-08-17T17:31:46.0074067Z # logistics\_etl.\_\_main\_\_
2025-08-17T17:31:46.0074210Z 
2025-08-17T17:31:46.0074288Z <a id="logistics_etl.dsn"></a>
2025-08-17T17:31:46.0074422Z 
2025-08-17T17:31:46.0074499Z # logistics\_etl.dsn
2025-08-17T17:31:46.0074612Z 
2025-08-17T17:31:46.0074728Z Local DSN builder to avoid cross-service dependency.
2025-08-17T17:31:46.0075051Z 
2025-08-17T17:31:46.0075150Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-17T17:31:46.0075319Z 
2025-08-17T17:31:46.0075386Z #### build\_dsn
2025-08-17T17:31:46.0075497Z 
2025-08-17T17:31:46.0075562Z ```python
2025-08-17T17:31:46.0075739Z def build_dsn(sync: bool = True) -> str
2025-08-17T17:31:46.0075968Z ```
2025-08-17T17:31:46.0076052Z 
2025-08-17T17:31:46.0076197Z Return a Postgres DSN assembled from environment variables.
2025-08-17T17:31:46.0076422Z 
2025-08-17T17:31:46.0076569Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-17T17:31:46.0076967Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-17T17:31:46.0077314Z error when any required variable is missing.
2025-08-17T17:31:46.0077495Z 
2025-08-17T17:31:46.0077591Z <a id="logistics_etl.tests.conftest"></a>
2025-08-17T17:31:46.0077762Z 
2025-08-17T17:31:46.0077853Z # logistics\_etl.tests.conftest
2025-08-17T17:31:46.0078000Z 
2025-08-17T17:31:46.0078111Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-17T17:31:46.0078305Z 
2025-08-17T17:31:46.0078395Z # logistics\_etl.tests.test\_repository
2025-08-17T17:31:46.0078560Z 
2025-08-17T17:31:46.0078654Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-17T17:31:46.0078832Z 
2025-08-17T17:31:46.0078917Z # logistics\_etl.tests.test\_cron
2025-08-17T17:31:46.0079094Z 
2025-08-17T17:31:46.0079194Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-17T17:31:46.0079372Z 
2025-08-17T17:31:46.0079465Z # logistics\_etl.tests.test\_imports
2025-08-17T17:31:46.0079623Z 
2025-08-17T17:31:46.0079721Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-17T17:31:46.0079906Z 
2025-08-17T17:31:46.0079990Z # logistics\_etl.tests.test\_smoke
2025-08-17T17:31:46.0080143Z 
2025-08-17T17:31:46.0080244Z <a id="logistics_etl.tests.test_client"></a>
2025-08-17T17:31:46.0080418Z 
2025-08-17T17:31:46.0080503Z # logistics\_etl.tests.test\_client
2025-08-17T17:31:46.0080658Z 
2025-08-17T17:31:46.0080748Z <a id="logistics_etl.tests"></a>
2025-08-17T17:31:46.0080903Z 
2025-08-17T17:31:46.0080976Z # logistics\_etl.tests
2025-08-17T17:31:46.0081102Z 
2025-08-17T17:31:46.0081187Z <a id="logistics_etl.flow"></a>
2025-08-17T17:31:46.0081326Z 
2025-08-17T17:31:46.0081407Z # logistics\_etl.flow
2025-08-17T17:31:46.0081525Z 
2025-08-17T17:31:46.0081609Z <a id="logistics_etl.client"></a>
2025-08-17T17:31:46.0081756Z 
2025-08-17T17:31:46.0081839Z # logistics\_etl.client
2025-08-17T17:31:46.0081960Z 
2025-08-17T17:31:46.0082037Z <a id="logistics_etl.cron"></a>
2025-08-17T17:31:46.0082182Z 
2025-08-17T17:31:46.0082253Z # logistics\_etl.cron
2025-08-17T17:31:46.0082368Z 
2025-08-17T17:31:46.0082448Z <a id="logistics_etl.db"></a>
2025-08-17T17:31:46.0082592Z 
2025-08-17T17:31:46.0082662Z # logistics\_etl.db
2025-08-17T17:31:46.0082774Z 
2025-08-17T17:31:46.0082987Z <a id="logistics_etl.repository"></a>
2025-08-17T17:31:46.0083149Z 
2025-08-17T17:31:46.0083232Z # logistics\_etl.repository
2025-08-17T17:31:46.0083373Z 
2025-08-17T17:31:46.0083451Z <a id="alert_bot"></a>
2025-08-17T17:31:46.0083914Z 
2025-08-17T17:31:46.0084039Z # alert\_bot
2025-08-17T17:31:46.0084228Z 
2025-08-17T17:31:46.0084398Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-17T17:31:46.0084716Z 
2025-08-17T17:31:46.0084876Z # alert\_bot.tests.test\_smoke
2025-08-17T17:31:46.0085151Z 
2025-08-17T17:31:46.0085292Z <a id="alert_bot.tests"></a>
2025-08-17T17:31:46.0085448Z 
2025-08-17T17:31:46.0085521Z # alert\_bot.tests
2025-08-17T17:31:46.0085646Z 
2025-08-17T17:31:46.0085745Z <a id="alert_bot.alert_bot"></a>
2025-08-17T17:31:46.0085908Z 
2025-08-17T17:31:46.0085982Z # alert\_bot.alert\_bot
2025-08-17T17:31:46.0086103Z 
2025-08-17T17:31:46.0086188Z <a id="alert_bot.rules"></a>
2025-08-17T17:31:46.0086322Z 
2025-08-17T17:31:46.0086391Z # alert\_bot.rules
2025-08-17T17:31:46.0086497Z 
2025-08-17T17:31:46.0086573Z <a id="common"></a>
2025-08-17T17:31:46.0086680Z 
2025-08-17T17:31:46.0086745Z # common
2025-08-17T17:31:46.0086841Z 
2025-08-17T17:31:46.0086916Z <a id="common.dsn"></a>
2025-08-17T17:31:46.0087469Z 
2025-08-17T17:31:46.0087541Z # common.dsn
2025-08-17T17:31:46.0087647Z 
2025-08-17T17:31:46.0087736Z <a id="common.dsn.build_dsn"></a>
2025-08-17T17:31:46.0087890Z 
2025-08-17T17:31:46.0087961Z #### build\_dsn
2025-08-17T17:31:46.0088071Z 
2025-08-17T17:31:46.0088140Z ```python
2025-08-17T17:31:46.0088331Z def build_dsn(sync: bool = True) -> str
2025-08-17T17:31:46.0088562Z ```
2025-08-17T17:31:46.0088656Z 
2025-08-17T17:31:46.0088791Z Return a Postgres DSN, validating required variables.
2025-08-17T17:31:46.0089007Z 
2025-08-17T17:31:46.0089203Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-17T17:31:46.0089649Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-17T17:31:46.0090079Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-17T17:31:46.0090392Z missing.
2025-08-17T17:31:46.0090490Z 
2025-08-17T17:31:46.0090579Z <a id="common.models_vendor"></a>
2025-08-17T17:31:46.0090740Z 
2025-08-17T17:31:46.0090822Z # common.models\_vendor
2025-08-17T17:31:46.0090954Z 
2025-08-17T17:31:46.0091048Z <a id="common.models_vendor.Vendor"></a>
2025-08-17T17:31:46.0091219Z 
2025-08-17T17:31:46.0091294Z ## Vendor Objects
2025-08-17T17:31:46.0091401Z 
2025-08-17T17:31:46.0091468Z ```python
2025-08-17T17:31:46.0091634Z class Vendor(Base)
2025-08-17T17:31:46.0091803Z ```
2025-08-17T17:31:46.0091893Z 
2025-08-17T17:31:46.0091977Z Vendor of inventory items.
2025-08-17T17:31:46.0092111Z 
2025-08-17T17:31:46.0092218Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-17T17:31:46.0092409Z 
2025-08-17T17:31:46.0092487Z ## VendorPrice Objects
2025-08-17T17:31:46.0092607Z 
2025-08-17T17:31:46.0092677Z ```python
2025-08-17T17:31:46.0093065Z class VendorPrice(Base)
2025-08-17T17:31:46.0093262Z ```
2025-08-17T17:31:46.0093345Z 
2025-08-17T17:31:46.0093451Z Association table linking vendors to pricing.
2025-08-17T17:31:46.0093654Z 
2025-08-17T17:31:46.0093734Z <a id="common.db_url"></a>
2025-08-17T17:31:46.0093875Z 
2025-08-17T17:31:46.0114074Z # common.db\_url
2025-08-17T17:31:46.0114356Z 
2025-08-17T17:31:46.0114547Z <a id="common.db_url.build_url"></a>
2025-08-17T17:31:46.0114902Z 
2025-08-17T17:31:46.0115089Z #### build\_url
2025-08-17T17:31:46.0115302Z 
2025-08-17T17:31:46.0115444Z ```python
2025-08-17T17:31:46.0115828Z def build_url(async_: bool = True) -> str
2025-08-17T17:31:46.0116334Z ```
2025-08-17T17:31:46.0116530Z 
2025-08-17T17:31:46.0116732Z Return Postgres DSN from env or PG_* parts.
2025-08-17T17:31:46.0117115Z 
2025-08-17T17:31:46.0117286Z <a id="common.keepa"></a>
2025-08-17T17:31:46.0117562Z 
2025-08-17T17:31:46.0117704Z # common.keepa
2025-08-17T17:31:46.0117918Z 
2025-08-17T17:31:46.0118083Z <a id="common.llm"></a>
2025-08-17T17:31:46.0118335Z 
2025-08-17T17:31:46.0118472Z # common.llm
2025-08-17T17:31:46.0118686Z 
2025-08-17T17:31:46.0118852Z <a id="common.settings"></a>
2025-08-17T17:31:46.0119156Z 
2025-08-17T17:31:46.0119298Z # common.settings
2025-08-17T17:31:46.0119443Z 
2025-08-17T17:31:46.0119738Z <a id="common.db"></a>
2025-08-17T17:31:46.0119899Z 
2025-08-17T17:31:46.0119980Z # common.db
2025-08-17T17:31:46.0120075Z 
2025-08-17T17:31:46.0120173Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-17T17:31:46.0120357Z 
2025-08-17T17:31:46.0120438Z #### build\_sqlalchemy\_url
2025-08-17T17:31:46.0120574Z 
2025-08-17T17:31:46.0120639Z ```python
2025-08-17T17:31:46.0120819Z def build_sqlalchemy_url() -> str
2025-08-17T17:31:46.0121038Z ```
2025-08-17T17:31:46.0121123Z 
2025-08-17T17:31:46.0121221Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T17:31:46.0121393Z 
2025-08-17T17:31:46.0121490Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-17T17:31:46.0121663Z 
2025-08-17T17:31:46.0121740Z #### build\_asyncpg\_dsn
2025-08-17T17:31:46.0121871Z 
2025-08-17T17:31:46.0121938Z ```python
2025-08-17T17:31:46.0122109Z def build_asyncpg_dsn() -> str
2025-08-17T17:31:46.0122315Z ```
2025-08-17T17:31:46.0122399Z 
2025-08-17T17:31:46.0122537Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T17:31:46.0123035Z 
2025-08-17T17:31:46.0123126Z <a id="common.db.refresh_mvs"></a>
2025-08-17T17:31:46.0123295Z 
2025-08-17T17:31:46.0123365Z #### refresh\_mvs
2025-08-17T17:31:46.0123472Z 
2025-08-17T17:31:46.0123537Z ```python
2025-08-17T17:31:46.0123741Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T17:31:46.0123993Z ```
2025-08-17T17:31:46.0124082Z 
2025-08-17T17:31:46.0124220Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T17:31:46.0124439Z 
2025-08-17T17:31:46.0124525Z <a id="common.config"></a>
2025-08-17T17:31:46.0124656Z 
2025-08-17T17:31:46.0124726Z # common.config
2025-08-17T17:31:46.0124839Z 
2025-08-17T17:31:46.0124916Z <a id="common.base"></a>
2025-08-17T17:31:46.0125042Z 
2025-08-17T17:31:46.0125109Z # common.base
2025-08-17T17:31:46.0125213Z 
2025-08-17T17:31:46.0125296Z <a id="common.base.Base"></a>
2025-08-17T17:31:46.0125436Z 
2025-08-17T17:31:46.0125509Z ## Base Objects
2025-08-17T17:31:46.0125611Z 
2025-08-17T17:31:46.0125674Z ```python
2025-08-17T17:31:46.0125863Z class Base(DeclarativeBase)
2025-08-17T17:31:46.0126060Z ```
2025-08-17T17:31:46.0126148Z 
2025-08-17T17:31:46.0126235Z Base class for SQLAlchemy models.
2025-08-17T17:31:46.0126386Z 
2025-08-17T17:31:46.0126466Z <a id="repricer"></a>
2025-08-17T17:31:46.0126616Z 
2025-08-17T17:31:46.0126682Z # repricer
2025-08-17T17:31:46.0126774Z 
2025-08-17T17:31:46.0126872Z <a id="repricer.app.schemas"></a>
2025-08-17T17:31:46.0127023Z 
2025-08-17T17:31:46.0127102Z # repricer.app.schemas
2025-08-17T17:31:46.0127231Z 
2025-08-17T17:31:46.0127317Z <a id="repricer.app.deps"></a>
2025-08-17T17:31:46.0127459Z 
2025-08-17T17:31:46.0127537Z # repricer.app.deps
2025-08-17T17:31:46.0127760Z 
2025-08-17T17:31:46.0127873Z Placeholder module for Keepa / SP-API clients.
2025-08-17T17:31:46.0128063Z 
2025-08-17T17:31:46.0128155Z <a id="repricer.app.logic"></a>
2025-08-17T17:31:46.0128301Z 
2025-08-17T17:31:46.0128377Z # repricer.app.logic
2025-08-17T17:31:46.0128515Z 
2025-08-17T17:31:46.0128629Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-17T17:31:46.0128830Z 
2025-08-17T17:31:46.0128900Z #### MIN\_MARGIN
2025-08-17T17:31:46.0129011Z 
2025-08-17T17:31:46.0129075Z 15 % ROI
2025-08-17T17:31:46.0129166Z 
2025-08-17T17:31:46.0129279Z <a id="repricer.app.logic.compute_price"></a>
2025-08-17T17:31:46.0129461Z 
2025-08-17T17:31:46.0129531Z #### compute\_price
2025-08-17T17:31:46.0129637Z 
2025-08-17T17:31:46.0129713Z ```python
2025-08-17T17:31:46.0129962Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-17T17:31:46.0130281Z ```
2025-08-17T17:31:46.0130363Z 
2025-08-17T17:31:46.0130473Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-17T17:31:46.0130766Z Replace with real competitive logic later.
2025-08-17T17:31:46.0130952Z 
2025-08-17T17:31:46.0131046Z <a id="repricer.app.main"></a>
2025-08-17T17:31:46.0131191Z 
2025-08-17T17:31:46.0131267Z # repricer.app.main
2025-08-17T17:31:46.0131384Z 
2025-08-17T17:31:46.0131465Z <a id="repricer.app"></a>
2025-08-17T17:31:46.0131726Z 
2025-08-17T17:31:46.0131797Z # repricer.app
2025-08-17T17:31:46.0131911Z 
2025-08-17T17:31:46.0132008Z <a id="repricer.tests.test_imports"></a>
2025-08-17T17:31:46.0132178Z 
2025-08-17T17:31:46.0132268Z # repricer.tests.test\_imports
2025-08-17T17:31:46.0132409Z 
2025-08-17T17:31:46.0132499Z <a id="repricer.tests.test_smoke"></a>
2025-08-17T17:31:46.0132668Z 
2025-08-17T17:31:46.0132752Z # repricer.tests.test\_smoke
2025-08-17T17:31:46.0133002Z 
2025-08-17T17:31:46.0133083Z <a id="repricer.tests"></a>
2025-08-17T17:31:46.0133223Z 
2025-08-17T17:31:46.0133292Z # repricer.tests
2025-08-17T17:31:46.0133400Z 
2025-08-17T17:31:46.0133471Z <a id="db"></a>
2025-08-17T17:31:46.0133573Z 
2025-08-17T17:31:46.0133634Z # db
2025-08-17T17:31:46.0133719Z 
2025-08-17T17:31:46.0133802Z <a id="db.utils.views"></a>
2025-08-17T17:31:46.0133930Z 
2025-08-17T17:31:46.0133998Z # db.utils.views
2025-08-17T17:31:46.0134114Z 
2025-08-17T17:31:46.0134209Z <a id="db.utils.views.replace_view"></a>
2025-08-17T17:31:46.0134490Z 
2025-08-17T17:31:46.0134567Z #### replace\_view
2025-08-17T17:31:46.0134680Z 
2025-08-17T17:31:46.0134747Z ```python
2025-08-17T17:31:46.0134950Z def replace_view(name: str, new_sql: str) -> None
2025-08-17T17:31:46.0135199Z ```
2025-08-17T17:31:46.0135284Z 
2025-08-17T17:31:46.0135379Z Drop and recreate a SQL view atomically.
2025-08-17T17:31:46.0135546Z 
2025-08-17T17:31:46.0135620Z <a id="db.utils"></a>
2025-08-17T17:31:46.0135744Z 
2025-08-17T17:31:46.0135809Z # db.utils
2025-08-17T17:31:46.0135901Z 
2025-08-17T17:31:46.0135986Z <a id="price_importer"></a>
2025-08-17T17:31:46.0136119Z 
2025-08-17T17:31:46.0136189Z # price\_importer
2025-08-17T17:31:46.0136295Z 
2025-08-17T17:31:46.0136407Z <a id="price_importer.services_common.dsn"></a>
2025-08-17T17:31:46.0136594Z 
2025-08-17T17:31:46.0136687Z # price\_importer.services\_common.dsn
2025-08-17T17:31:46.0136857Z 
2025-08-17T17:31:46.0136983Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-17T17:31:46.0137194Z 
2025-08-17T17:31:46.0137274Z #### build\_dsn
2025-08-17T17:31:46.0137383Z 
2025-08-17T17:31:46.0137449Z ```python
2025-08-17T17:31:46.0137633Z def build_dsn(sync: bool = True) -> str
2025-08-17T17:31:46.0137859Z ```
2025-08-17T17:31:46.0137945Z 
2025-08-17T17:31:46.0138020Z Return safe DSN.
2025-08-17T17:31:46.0138126Z 
2025-08-17T17:31:46.0138462Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-17T17:31:46.0138674Z 
2025-08-17T17:31:46.0138806Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-17T17:31:46.0139018Z 
2025-08-17T17:31:46.0139136Z # price\_importer.services\_common.models\_vendor
2025-08-17T17:31:46.0139330Z 
2025-08-17T17:31:46.0139443Z <a id="price_importer.services_common.db_url"></a>
2025-08-17T17:31:46.0139643Z 
2025-08-17T17:31:46.0139740Z # price\_importer.services\_common.db\_url
2025-08-17T17:31:46.0139912Z 
2025-08-17T17:31:46.0140046Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-17T17:31:46.0140269Z 
2025-08-17T17:31:46.0140337Z #### build\_url
2025-08-17T17:31:46.0140454Z 
2025-08-17T17:31:46.0140524Z ```python
2025-08-17T17:31:46.0140702Z def build_url(async_: bool = True) -> str
2025-08-17T17:31:46.0140937Z ```
2025-08-17T17:31:46.0141023Z 
2025-08-17T17:31:46.0141123Z Return Postgres DSN from env or PG_* parts.
2025-08-17T17:31:46.0141304Z 
2025-08-17T17:31:46.0141413Z <a id="price_importer.services_common.keepa"></a>
2025-08-17T17:31:46.0141600Z 
2025-08-17T17:31:46.0141698Z # price\_importer.services\_common.keepa
2025-08-17T17:31:46.0141875Z 
2025-08-17T17:31:46.0141977Z <a id="price_importer.services_common.llm"></a>
2025-08-17T17:31:46.0142159Z 
2025-08-17T17:31:46.0142256Z # price\_importer.services\_common.llm
2025-08-17T17:31:46.0142420Z 
2025-08-17T17:31:46.0142536Z <a id="price_importer.services_common.settings"></a>
2025-08-17T17:31:46.0142740Z 
2025-08-17T17:31:46.0142946Z # price\_importer.services\_common.settings
2025-08-17T17:31:46.0143124Z 
2025-08-17T17:31:46.0143226Z <a id="price_importer.services_common.db"></a>
2025-08-17T17:31:46.0143417Z 
2025-08-17T17:31:46.0143631Z # price\_importer.services\_common.db
2025-08-17T17:31:46.0143793Z 
2025-08-17T17:31:46.0143955Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-17T17:31:46.0144198Z 
2025-08-17T17:31:46.0144278Z #### build\_sqlalchemy\_url
2025-08-17T17:31:46.0144416Z 
2025-08-17T17:31:46.0144483Z ```python
2025-08-17T17:31:46.0144657Z def build_sqlalchemy_url() -> str
2025-08-17T17:31:46.0144871Z ```
2025-08-17T17:31:46.0144955Z 
2025-08-17T17:31:46.0145057Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T17:31:46.0145228Z 
2025-08-17T17:31:46.0145371Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-17T17:31:46.0145608Z 
2025-08-17T17:31:46.0145684Z #### build\_asyncpg\_dsn
2025-08-17T17:31:46.0145812Z 
2025-08-17T17:31:46.0145876Z ```python
2025-08-17T17:31:46.0146054Z def build_asyncpg_dsn() -> str
2025-08-17T17:31:46.0146252Z ```
2025-08-17T17:31:46.0146339Z 
2025-08-17T17:31:46.0146467Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T17:31:46.0146840Z 
2025-08-17T17:31:46.0146975Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-17T17:31:46.0147186Z 
2025-08-17T17:31:46.0147259Z #### refresh\_mvs
2025-08-17T17:31:46.0147371Z 
2025-08-17T17:31:46.0147436Z ```python
2025-08-17T17:31:46.0147634Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T17:31:46.0147889Z ```
2025-08-17T17:31:46.0147972Z 
2025-08-17T17:31:46.0148113Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T17:31:46.0148330Z 
2025-08-17T17:31:46.0148425Z <a id="price_importer.services_common"></a>
2025-08-17T17:31:46.0148599Z 
2025-08-17T17:31:46.0148693Z # price\_importer.services\_common
2025-08-17T17:31:46.0148849Z 
2025-08-17T17:31:46.0148954Z <a id="price_importer.services_common.base"></a>
2025-08-17T17:31:46.0149150Z 
2025-08-17T17:31:46.0149243Z # price\_importer.services\_common.base
2025-08-17T17:31:46.0149410Z 
2025-08-17T17:31:46.0149508Z <a id="price_importer.normaliser"></a>
2025-08-17T17:31:46.0149683Z 
2025-08-17T17:31:46.0149766Z # price\_importer.normaliser
2025-08-17T17:31:46.0149909Z 
2025-08-17T17:31:46.0150023Z <a id="price_importer.common.models_vendor"></a>
2025-08-17T17:31:46.0150208Z 
2025-08-17T17:31:46.0150300Z # price\_importer.common.models\_vendor
2025-08-17T17:31:46.0150474Z 
2025-08-17T17:31:46.0150567Z <a id="price_importer.common.db_url"></a>
2025-08-17T17:31:46.0150740Z 
2025-08-17T17:31:46.0150833Z # price\_importer.common.db\_url
2025-08-17T17:31:46.0150981Z 
2025-08-17T17:31:46.0151088Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-17T17:31:46.0151277Z 
2025-08-17T17:31:46.0151350Z #### make\_dsn
2025-08-17T17:31:46.0151454Z 
2025-08-17T17:31:46.0151521Z ```python
2025-08-17T17:31:46.0151702Z def make_dsn(async_: bool = False) -> str
2025-08-17T17:31:46.0151934Z ```
2025-08-17T17:31:46.0152023Z 
2025-08-17T17:31:46.0152146Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-17T17:31:46.0152349Z 
2025-08-17T17:31:46.0152466Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-17T17:31:46.0152671Z 
2025-08-17T17:31:46.0152739Z #### build\_url
2025-08-17T17:31:46.0152951Z 
2025-08-17T17:31:46.0153018Z ```python
2025-08-17T17:31:46.0153196Z def build_url(async_: bool = False) -> str
2025-08-17T17:31:46.0153431Z ```
2025-08-17T17:31:46.0153517Z 
2025-08-17T17:31:46.0153642Z Return Postgres DSN built from environment variables.
2025-08-17T17:31:46.0153850Z 
2025-08-17T17:31:46.0153939Z <a id="price_importer.common"></a>
2025-08-17T17:31:46.0154097Z 
2025-08-17T17:31:46.0154184Z # price\_importer.common
2025-08-17T17:31:46.0154314Z 
2025-08-17T17:31:46.0154409Z <a id="price_importer.common.base"></a>
2025-08-17T17:31:46.0154587Z 
2025-08-17T17:31:46.0154674Z # price\_importer.common.base
2025-08-17T17:31:46.0154823Z 
2025-08-17T17:31:46.0154921Z <a id="price_importer.tests.conftest"></a>
2025-08-17T17:31:46.0155102Z 
2025-08-17T17:31:46.0155190Z # price\_importer.tests.conftest
2025-08-17T17:31:46.0155343Z 
2025-08-17T17:31:46.0155449Z <a id="price_importer.tests.test_reader"></a>
2025-08-17T17:31:46.0155755Z 
2025-08-17T17:31:46.0155846Z # price\_importer.tests.test\_reader
2025-08-17T17:31:46.0156014Z 
2025-08-17T17:31:46.0156118Z <a id="price_importer.tests.test_imports"></a>
2025-08-17T17:31:46.0156299Z 
2025-08-17T17:31:46.0156393Z # price\_importer.tests.test\_imports
2025-08-17T17:31:46.0156563Z 
2025-08-17T17:31:46.0156664Z <a id="price_importer.tests.test_smoke"></a>
2025-08-17T17:31:46.0156839Z 
2025-08-17T17:31:46.0156933Z # price\_importer.tests.test\_smoke
2025-08-17T17:31:46.0157095Z 
2025-08-17T17:31:46.0157204Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-17T17:31:46.0157401Z 
2025-08-17T17:31:46.0157493Z # price\_importer.tests.test\_normaliser
2025-08-17T17:31:46.0157662Z 
2025-08-17T17:31:46.0157747Z <a id="price_importer.tests"></a>
2025-08-17T17:31:46.0157905Z 
2025-08-17T17:31:46.0157983Z # price\_importer.tests
2025-08-17T17:31:46.0158108Z 
2025-08-17T17:31:46.0158199Z <a id="price_importer.reader"></a>
2025-08-17T17:31:46.0158475Z 
2025-08-17T17:31:46.0158556Z # price\_importer.reader
2025-08-17T17:31:46.0158690Z 
2025-08-17T17:31:46.0158782Z <a id="price_importer.repository"></a>
2025-08-17T17:31:46.0158948Z 
2025-08-17T17:31:46.0159032Z # price\_importer.repository
2025-08-17T17:31:46.0159182Z 
2025-08-17T17:31:46.0159269Z <a id="price_importer.import"></a>
2025-08-17T17:31:46.0159419Z 
2025-08-17T17:31:46.0159501Z # price\_importer.import
2025-08-17T17:31:46.0159626Z 
2025-08-17T17:31:46.0159700Z <a id="fees_h10"></a>
2025-08-17T17:31:46.0159820Z 
2025-08-17T17:31:46.0159884Z # fees\_h10
2025-08-17T17:31:46.0159979Z 
2025-08-17T17:31:46.0160062Z <a id="fees_h10.worker"></a>
2025-08-17T17:31:46.0160201Z 
2025-08-17T17:31:46.0160269Z # fees\_h10.worker
2025-08-17T17:31:46.0160376Z 
2025-08-17T17:31:46.0160481Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-17T17:31:46.0160656Z 
2025-08-17T17:31:46.0160730Z #### list\_active\_asins
2025-08-17T17:31:46.0160860Z 
2025-08-17T17:31:46.0160927Z ```python
2025-08-17T17:31:46.0161114Z def list_active_asins() -> list[str]
2025-08-17T17:31:46.0161335Z ```
2025-08-17T17:31:46.0161419Z 
2025-08-17T17:31:46.0161535Z Return known ASINs or an empty list if unavailable.
2025-08-17T17:31:46.0161738Z 
2025-08-17T17:31:46.0161826Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-17T17:31:46.0161986Z 
2025-08-17T17:31:46.0162073Z # fees\_h10.tests.test\_smoke
2025-08-17T17:31:46.0162213Z 
2025-08-17T17:31:46.0162292Z <a id="fees_h10.tests"></a>
2025-08-17T17:31:46.0162428Z 
2025-08-17T17:31:46.0162496Z # fees\_h10.tests
2025-08-17T17:31:46.0162602Z 
2025-08-17T17:31:46.0162679Z <a id="fees_h10.client"></a>
2025-08-17T17:31:46.0162944Z 
2025-08-17T17:31:46.0163014Z # fees\_h10.client
2025-08-17T17:31:46.0163122Z 
2025-08-17T17:31:46.0163211Z <a id="fees_h10.repository"></a>
2025-08-17T17:31:46.0163358Z 
2025-08-17T17:31:46.0163435Z # fees\_h10.repository
2025-08-17T17:31:46.0163559Z 
2025-08-17T17:31:46.0163630Z <a id="emailer"></a>
2025-08-17T17:31:46.0163747Z 
2025-08-17T17:31:46.0163818Z # emailer
2025-08-17T17:31:46.0163920Z 
2025-08-17T17:31:46.0164023Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-17T17:31:46.0164205Z 
2025-08-17T17:31:46.0164300Z # emailer.tests.test\_import\_emailer
2025-08-17T17:31:46.0164461Z 
2025-08-17T17:31:46.0164550Z <a id="emailer.tests.test_smoke"></a>
2025-08-17T17:31:46.0164706Z 
2025-08-17T17:31:46.0164791Z # emailer.tests.test\_smoke
2025-08-17T17:31:46.0164958Z 
2025-08-17T17:31:46.0165038Z <a id="emailer.tests"></a>
2025-08-17T17:31:46.0165175Z 
2025-08-17T17:31:46.0165247Z # emailer.tests
2025-08-17T17:31:46.0165354Z 
2025-08-17T17:31:46.0165449Z <a id="emailer.generate_body"></a>
2025-08-17T17:31:46.0165604Z 
2025-08-17T17:31:46.0165681Z # emailer.generate\_body
2025-08-17T17:31:46.0165809Z 
2025-08-17T17:31:46.0165887Z <a id="llm_server"></a>
2025-08-17T17:31:46.0166010Z 
2025-08-17T17:31:46.0166079Z # llm\_server
2025-08-17T17:31:46.0166186Z 
2025-08-17T17:31:46.0166265Z <a id="llm_server.app"></a>
2025-08-17T17:31:46.0166398Z 
2025-08-17T17:31:46.0166596Z # llm\_server.app
2025-08-17T17:31:46.0166706Z 
