2025-08-18T19:45:44.8673444Z ##[group]Run pydoc-markdown
2025-08-18T19:45:44.8673769Z [36;1mpydoc-markdown[0m
2025-08-18T19:45:44.8715159Z shell: /usr/bin/bash -e {0}
2025-08-18T19:45:44.8715386Z env:
2025-08-18T19:45:44.8715636Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T19:45:44.8716055Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-18T19:45:44.8716482Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T19:45:44.8716831Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T19:45:44.8717175Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T19:45:44.8717523Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-18T19:45:44.8717804Z ##[endgroup]
2025-08-18T19:45:45.2465195Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-18T19:45:45.2465929Z Unknown key(s) "{'output_directory'}" at:
2025-08-18T19:45:45.2466413Z In "pydoc-markdown.yml"
2025-08-18T19:45:45.2466835Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-18T19:45:45.2467538Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-18T19:45:45.2468310Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-18T19:45:45.2468834Z 
2025-08-18T19:45:45.5549849Z <a id="__init__"></a>
2025-08-18T19:45:45.5550154Z 
2025-08-18T19:45:45.5550271Z # \_\_init\_\_
2025-08-18T19:45:45.5550449Z 
2025-08-18T19:45:45.5550583Z <a id="api"></a>
2025-08-18T19:45:45.5550775Z 
2025-08-18T19:45:45.5550887Z # api
2025-08-18T19:45:45.5551061Z 
2025-08-18T19:45:45.5551192Z <a id="api.errors"></a>
2025-08-18T19:45:45.5551399Z 
2025-08-18T19:45:45.5551521Z # api.errors
2025-08-18T19:45:45.5551701Z 
2025-08-18T19:45:45.5551833Z <a id="api.sentry_config"></a>
2025-08-18T19:45:45.5552082Z 
2025-08-18T19:45:45.5552223Z # api.sentry\_config
2025-08-18T19:45:45.5552434Z 
2025-08-18T19:45:45.5552622Z <a id="api.tests.test_sentry_scrub"></a>
2025-08-18T19:45:45.5552919Z 
2025-08-18T19:45:45.5553068Z # api.tests.test\_sentry\_scrub
2025-08-18T19:45:45.5553379Z 
2025-08-18T19:45:45.5553553Z <a id="api.tests.test_errors_json"></a>
2025-08-18T19:45:45.5553895Z 
2025-08-18T19:45:45.5554055Z # api.tests.test\_errors\_json
2025-08-18T19:45:45.5554335Z 
2025-08-18T19:45:45.5554502Z <a id="api.tests.test_llm"></a>
2025-08-18T19:45:45.5554811Z 
2025-08-18T19:45:45.5554956Z # api.tests.test\_llm
2025-08-18T19:45:45.5555190Z 
2025-08-18T19:45:45.5555389Z <a id="api.tests.test_sentry_event"></a>
2025-08-18T19:45:45.5555731Z 
2025-08-18T19:45:45.5555881Z # api.tests.test\_sentry\_event
2025-08-18T19:45:45.5556196Z 
2025-08-18T19:45:45.5556369Z <a id="api.tests.test_cors"></a>
2025-08-18T19:45:45.5556685Z 
2025-08-18T19:45:45.5556849Z # api.tests.test\_cors
2025-08-18T19:45:45.5557116Z 
2025-08-18T19:45:45.5557298Z <a id="api.tests.test_imports"></a>
2025-08-18T19:45:45.5557659Z 
2025-08-18T19:45:45.5557831Z # api.tests.test\_imports
2025-08-18T19:45:45.5558137Z 
2025-08-18T19:45:45.5558341Z <a id="api.tests.test_rate_limit"></a>
2025-08-18T19:45:45.5559116Z 
2025-08-18T19:45:45.5559307Z # api.tests.test\_rate\_limit
2025-08-18T19:45:45.5559844Z 
2025-08-18T19:45:45.5560078Z <a id="api.tests.test_rate_limit.app"></a>
2025-08-18T19:45:45.5560484Z 
2025-08-18T19:45:45.5560626Z #### app
2025-08-18T19:45:45.5560791Z 
2025-08-18T19:45:45.5560884Z noqa: E402
2025-08-18T19:45:45.5561006Z 
2025-08-18T19:45:45.5561121Z <a id="api.tests.test_entrypoint"></a>
2025-08-18T19:45:45.5561345Z 
2025-08-18T19:45:45.5561452Z # api.tests.test\_entrypoint
2025-08-18T19:45:45.5561632Z 
2025-08-18T19:45:45.5561741Z <a id="api.tests.test_health"></a>
2025-08-18T19:45:45.5561901Z 
2025-08-18T19:45:45.5561980Z # api.tests.test\_health
2025-08-18T19:45:45.5562110Z 
2025-08-18T19:45:45.5562203Z <a id="api.logging_config"></a>
2025-08-18T19:45:45.5562345Z 
2025-08-18T19:45:45.5562418Z # api.logging\_config
2025-08-18T19:45:45.5562540Z 
2025-08-18T19:45:45.5562623Z <a id="api.migrations.env"></a>
2025-08-18T19:45:45.5562763Z 
2025-08-18T19:45:45.5562838Z # api.migrations.env
2025-08-18T19:45:45.5563239Z 
2025-08-18T19:45:45.5563364Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-18T19:45:45.5563571Z 
2025-08-18T19:45:45.5563684Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-18T19:45:45.5563866Z 
2025-08-18T19:45:45.5563973Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-18T19:45:45.5564168Z 
2025-08-18T19:45:45.5564262Z # api.migrations.versions.0004\_fee\_cron
2025-08-18T19:45:45.5564432Z 
2025-08-18T19:45:45.5564585Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-18T19:45:45.5564830Z 
2025-08-18T19:45:45.5564965Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-18T19:45:45.5565181Z 
2025-08-18T19:45:45.5565310Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-18T19:45:45.5565509Z 
2025-08-18T19:45:45.5565614Z # api.migrations.versions.0003\_vendor\_prices
2025-08-18T19:45:45.5565803Z 
2025-08-18T19:45:45.5565921Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-18T19:45:45.5566121Z 
2025-08-18T19:45:45.5566300Z # api.migrations.versions.0024\_create\_buybox
2025-08-18T19:45:45.5566478Z 
2025-08-18T19:45:45.5566602Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-18T19:45:45.5566810Z 
2025-08-18T19:45:45.5566920Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-18T19:45:45.5567108Z 
2025-08-18T19:45:45.5567224Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-18T19:45:45.5567421Z 
2025-08-18T19:45:45.5567527Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-18T19:45:45.5567712Z 
2025-08-18T19:45:45.5567842Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-18T19:45:45.5568042Z 
2025-08-18T19:45:45.5568146Z # api.migrations.versions.0020\_unified\_schema
2025-08-18T19:45:45.5568333Z 
2025-08-18T19:45:45.5568469Z <a id="api.migrations.versions.0025_pr4_indexes_loadlog"></a>
2025-08-18T19:45:45.5568696Z 
2025-08-18T19:45:45.5568820Z # api.migrations.versions.0025\_pr4\_indexes\_loadlog
2025-08-18T19:45:45.5569030Z 
2025-08-18T19:45:45.5569164Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-18T19:45:45.5569367Z 
2025-08-18T19:45:45.5569714Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-18T19:45:45.5569917Z 
2025-08-18T19:45:45.5570056Z <a id="api.migrations.versions.0026_amazon_new_reports"></a>
2025-08-18T19:45:45.5570278Z 
2025-08-18T19:45:45.5570394Z # api.migrations.versions.0026\_amazon\_new\_reports
2025-08-18T19:45:45.5570588Z 
2025-08-18T19:45:45.5570704Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-18T19:45:45.5570903Z 
2025-08-18T19:45:45.5570998Z # api.migrations.versions.0001\_baseline
2025-08-18T19:45:45.5571168Z 
2025-08-18T19:45:45.5571263Z <a id="api.migrations.versions"></a>
2025-08-18T19:45:45.5571422Z 
2025-08-18T19:45:45.5571503Z # api.migrations.versions
2025-08-18T19:45:45.5571637Z 
2025-08-18T19:45:45.5571716Z <a id="api.migrations"></a>
2025-08-18T19:45:45.5571847Z 
2025-08-18T19:45:45.5571924Z # api.migrations
2025-08-18T19:45:45.5572027Z 
2025-08-18T19:45:45.5572230Z <a id="api.db"></a>
2025-08-18T19:45:45.5572338Z 
2025-08-18T19:45:45.5572408Z # api.db
2025-08-18T19:45:45.5572495Z 
2025-08-18T19:45:45.5572578Z <a id="api.routes.stats"></a>
2025-08-18T19:45:45.5572722Z 
2025-08-18T19:45:45.5572796Z # api.routes.stats
2025-08-18T19:45:45.5572978Z 
2025-08-18T19:45:45.5573071Z <a id="api.routes.stats.kpi"></a>
2025-08-18T19:45:45.5573249Z 
2025-08-18T19:45:45.5573313Z #### kpi
2025-08-18T19:45:45.5573405Z 
2025-08-18T19:45:45.5573472Z ```python
2025-08-18T19:45:45.5573642Z @router.get("/stats/kpi")
2025-08-18T19:45:45.5573882Z def kpi() -> List[Dict[str, int]]
2025-08-18T19:45:45.5574086Z ```
2025-08-18T19:45:45.5574170Z 
2025-08-18T19:45:45.5574249Z Return KPI metrics (mock).
2025-08-18T19:45:45.5574382Z 
2025-08-18T19:45:45.5574487Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-18T19:45:45.5574664Z 
2025-08-18T19:45:45.5574732Z #### roi\_by\_vendor
2025-08-18T19:45:45.5574847Z 
2025-08-18T19:45:45.5574909Z ```python
2025-08-18T19:45:45.5575076Z @router.get("/stats/roi_by_vendor")
2025-08-18T19:45:45.5575462Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-18T19:45:45.5575696Z ```
2025-08-18T19:45:45.5575776Z 
2025-08-18T19:45:45.5575856Z Return ROI percent by vendor.
2025-08-18T19:45:45.5575994Z 
2025-08-18T19:45:45.5576089Z <a id="api.routes.stats.roi_trend"></a>
2025-08-18T19:45:45.5576489Z 
2025-08-18T19:45:45.5576616Z #### roi\_trend
2025-08-18T19:45:45.5576816Z 
2025-08-18T19:45:45.5576936Z ```python
2025-08-18T19:45:45.5577246Z @router.get("/stats/roi_trend")
2025-08-18T19:45:45.5577689Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-18T19:45:45.5578134Z ```
2025-08-18T19:45:45.5578303Z 
2025-08-18T19:45:45.5578414Z Return 30-day ROI trend.
2025-08-18T19:45:45.5578550Z 
2025-08-18T19:45:45.5578639Z <a id="api.routes.roi"></a>
2025-08-18T19:45:45.5578775Z 
2025-08-18T19:45:45.5578844Z # api.routes.roi
2025-08-18T19:45:45.5578954Z 
2025-08-18T19:45:45.5579037Z <a id="api.routes.health"></a>
2025-08-18T19:45:45.5579177Z 
2025-08-18T19:45:45.5579262Z # api.routes.health
2025-08-18T19:45:45.5579380Z 
2025-08-18T19:45:45.5579695Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-18T19:45:45.5579900Z 
2025-08-18T19:45:45.5579977Z #### MAX\_SKEW
2025-08-18T19:45:45.5580076Z 
2025-08-18T19:45:45.5580140Z seconds
2025-08-18T19:45:45.5580232Z 
2025-08-18T19:45:45.5580323Z <a id="api.routes.health.health"></a>
2025-08-18T19:45:45.5580487Z 
2025-08-18T19:45:45.5580551Z #### health
2025-08-18T19:45:45.5580648Z 
2025-08-18T19:45:45.5580712Z ```python
2025-08-18T19:45:45.5580912Z @router.get("/health", include_in_schema=False)
2025-08-18T19:45:45.5581286Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-18T19:45:45.5581631Z ```
2025-08-18T19:45:45.5581712Z 
2025-08-18T19:45:45.5581828Z Return 200 when DB reachable and clocks are in sync.
2025-08-18T19:45:45.5582027Z 
2025-08-18T19:45:45.5582118Z <a id="api.routes.repository"></a>
2025-08-18T19:45:45.5582273Z 
2025-08-18T19:45:45.5582352Z # api.routes.repository
2025-08-18T19:45:45.5582492Z 
2025-08-18T19:45:45.5582565Z <a id="api.routes"></a>
2025-08-18T19:45:45.5582680Z 
2025-08-18T19:45:45.5582750Z # api.routes
2025-08-18T19:45:45.5582848Z 
2025-08-18T19:45:45.5582925Z <a id="api.models.fee"></a>
2025-08-18T19:45:45.5583061Z 
2025-08-18T19:45:45.5583128Z # api.models.fee
2025-08-18T19:45:45.5583232Z 
2025-08-18T19:45:45.5583303Z <a id="api.models"></a>
2025-08-18T19:45:45.5583423Z 
2025-08-18T19:45:45.5583486Z # api.models
2025-08-18T19:45:45.5583581Z 
2025-08-18T19:45:45.5583667Z <a id="api.roi_repository"></a>
2025-08-18T19:45:45.5583810Z 
2025-08-18T19:45:45.5583885Z # api.roi\_repository
2025-08-18T19:45:45.5583998Z 
2025-08-18T19:45:45.5584075Z <a id="api.main"></a>
2025-08-18T19:45:45.5584185Z 
2025-08-18T19:45:45.5584249Z # api.main
2025-08-18T19:45:45.5584344Z 
2025-08-18T19:45:45.5584423Z <a id="api.main.ready"></a>
2025-08-18T19:45:45.5584551Z 
2025-08-18T19:45:45.5584618Z #### ready
2025-08-18T19:45:45.5584711Z 
2025-08-18T19:45:45.5584773Z ```python
2025-08-18T19:45:45.5585218Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-18T19:45:45.5585654Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-18T19:45:45.5586009Z                                                                       str]
2025-08-18T19:45:45.5586237Z ```
2025-08-18T19:45:45.5586328Z 
2025-08-18T19:45:45.5586426Z Return 200 only when migrations are at head.
2025-08-18T19:45:45.5586602Z 
2025-08-18T19:45:45.5586681Z <a id="api.config"></a>
2025-08-18T19:45:45.5586800Z 
2025-08-18T19:45:45.5586864Z # api.config
2025-08-18T19:45:45.5586959Z 
2025-08-18T19:45:45.5587031Z <a id="etl"></a>
2025-08-18T19:45:45.5587135Z 
2025-08-18T19:45:45.5587195Z # etl
2025-08-18T19:45:45.5587283Z 
2025-08-18T19:45:45.5587368Z <a id="etl.fba_fee_ingestor"></a>
2025-08-18T19:45:45.5587522Z 
2025-08-18T19:45:45.5587595Z # etl.fba\_fee\_ingestor
2025-08-18T19:45:45.5587717Z 
2025-08-18T19:45:45.5587804Z <a id="etl.sp_fees_ingestor"></a>
2025-08-18T19:45:45.5588062Z 
2025-08-18T19:45:45.5588136Z # etl.sp\_fees\_ingestor
2025-08-18T19:45:45.5588257Z 
2025-08-18T19:45:45.5588344Z <a id="etl.keepa_ingestor"></a>
2025-08-18T19:45:45.5588483Z 
2025-08-18T19:45:45.5588554Z # etl.keepa\_ingestor
2025-08-18T19:45:45.5588675Z 
2025-08-18T19:45:45.5588743Z <a id="etl.db"></a>
2025-08-18T19:45:45.5588850Z 
2025-08-18T19:45:45.5588919Z # etl.db
2025-08-18T19:45:45.5589006Z 
2025-08-18T19:45:45.5589090Z <a id="etl.dialects.schemas"></a>
2025-08-18T19:45:45.5589236Z 
2025-08-18T19:45:45.5589320Z # etl.dialects.schemas
2025-08-18T19:45:45.5589608Z 
2025-08-18T19:45:45.5589761Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-18T19:45:45.5589965Z 
2025-08-18T19:45:45.5590054Z # etl.dialects.amazon\_reimbursements
2025-08-18T19:45:45.5590216Z 
2025-08-18T19:45:45.5590315Z <a id="etl.dialects.amazon_ads_sp_cost"></a>
2025-08-18T19:45:45.5590493Z 
2025-08-18T19:45:45.5590580Z # etl.dialects.amazon\_ads\_sp\_cost
2025-08-18T19:45:45.5590739Z 
2025-08-18T19:45:45.5590834Z <a id="etl.dialects.amazon_returns"></a>
2025-08-18T19:45:45.5591009Z 
2025-08-18T19:45:45.5591092Z # etl.dialects.amazon\_returns
2025-08-18T19:45:45.5591238Z 
2025-08-18T19:45:45.5591333Z <a id="etl.dialects.amazon_fee_preview"></a>
2025-08-18T19:45:45.5591503Z 
2025-08-18T19:45:45.5591587Z # etl.dialects.amazon\_fee\_preview
2025-08-18T19:45:45.5591748Z 
2025-08-18T19:45:45.5591857Z <a id="etl.dialects.amazon_inventory_ledger"></a>
2025-08-18T19:45:45.5592041Z 
2025-08-18T19:45:45.5592137Z # etl.dialects.amazon\_inventory\_ledger
2025-08-18T19:45:45.5592300Z 
2025-08-18T19:45:45.5592395Z <a id="etl.dialects.amazon_settlements"></a>
2025-08-18T19:45:45.5592570Z 
2025-08-18T19:45:45.5592660Z # etl.dialects.amazon\_settlements
2025-08-18T19:45:45.5592813Z 
2025-08-18T19:45:45.5592890Z <a id="etl.dialects"></a>
2025-08-18T19:45:45.5593022Z 
2025-08-18T19:45:45.5593087Z # etl.dialects
2025-08-18T19:45:45.5593186Z 
2025-08-18T19:45:45.5593259Z <a id="ingest"></a>
2025-08-18T19:45:45.5593363Z 
2025-08-18T19:45:45.5593432Z # ingest
2025-08-18T19:45:45.5593521Z 
2025-08-18T19:45:45.5593601Z <a id="ingest.maintenance"></a>
2025-08-18T19:45:45.5593743Z 
2025-08-18T19:45:45.5593818Z # ingest.maintenance
2025-08-18T19:45:45.5593938Z 
2025-08-18T19:45:45.5594016Z <a id="ingest.copy_loader"></a>
2025-08-18T19:45:45.5594154Z 
2025-08-18T19:45:45.5594232Z # ingest.copy\_loader
2025-08-18T19:45:45.5594345Z 
2025-08-18T19:45:45.5594445Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-18T19:45:45.5594632Z 
2025-08-18T19:45:45.5594705Z #### copy\_df\_via\_temp
2025-08-18T19:45:45.5594827Z 
2025-08-18T19:45:45.5594891Z ```python
2025-08-18T19:45:45.5595067Z def copy_df_via_temp(engine: Engine,
2025-08-18T19:45:45.5595303Z                      df: pd.DataFrame,
2025-08-18T19:45:45.5595537Z                      target_table: str,
2025-08-18T19:45:45.5595758Z                      *,
2025-08-18T19:45:45.5595971Z                      target_schema: Optional[str] = None,
2025-08-18T19:45:45.5596244Z                      columns: Sequence[str],
2025-08-18T19:45:45.5596696Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-18T19:45:45.5596984Z                      analyze_after: bool = False,
2025-08-18T19:45:45.5597245Z                      connection: Any | None = None) -> int
2025-08-18T19:45:45.5597489Z ```
2025-08-18T19:45:45.5597573Z 
2025-08-18T19:45:45.5597735Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-18T19:45:45.5597968Z 
2025-08-18T19:45:45.5598055Z <a id="ingest.tests.test_smoke"></a>
2025-08-18T19:45:45.5598215Z 
2025-08-18T19:45:45.5598300Z # ingest.tests.test\_smoke
2025-08-18T19:45:45.5598428Z 
2025-08-18T19:45:45.5598506Z <a id="ingest.tests"></a>
2025-08-18T19:45:45.5598639Z 
2025-08-18T19:45:45.5598707Z # ingest.tests
2025-08-18T19:45:45.5598807Z 
2025-08-18T19:45:45.5598898Z <a id="ingest.upload_router"></a>
2025-08-18T19:45:45.5599045Z 
2025-08-18T19:45:45.5599120Z # ingest.upload\_router
2025-08-18T19:45:45.5599243Z 
2025-08-18T19:45:45.5599330Z <a id="ingest.email_watcher"></a>
2025-08-18T19:45:45.5599709Z 
2025-08-18T19:45:45.5599786Z # ingest.email\_watcher
2025-08-18T19:45:45.5599909Z 
2025-08-18T19:45:45.5600000Z <a id="ingest.email_watcher.main"></a>
2025-08-18T19:45:45.5600162Z 
2025-08-18T19:45:45.5600230Z #### main
2025-08-18T19:45:45.5600321Z 
2025-08-18T19:45:45.5600385Z ```python
2025-08-18T19:45:45.5600558Z def main() -> dict[str, str]
2025-08-18T19:45:45.5600751Z ```
2025-08-18T19:45:45.5600835Z 
2025-08-18T19:45:45.5600986Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-18T19:45:45.5601209Z 
2025-08-18T19:45:45.5601337Z Returns {"status": "success"} when processing completes.
2025-08-18T19:45:45.5601553Z 
2025-08-18T19:45:45.5601630Z <a id="ingest.tasks"></a>
2025-08-18T19:45:45.5601755Z 
2025-08-18T19:45:45.5601827Z # ingest.tasks
2025-08-18T19:45:45.5601930Z 
2025-08-18T19:45:45.5602028Z <a id="ingest.tasks.task_import_file"></a>
2025-08-18T19:45:45.5602200Z 
2025-08-18T19:45:45.5602279Z #### task\_import\_file
2025-08-18T19:45:45.5602401Z 
2025-08-18T19:45:45.5602465Z ```python
2025-08-18T19:45:45.5602678Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-18T19:45:45.5602960Z def task_import_file(self: Any,
2025-08-18T19:45:45.5603172Z                      uri: str,
2025-08-18T19:45:45.5603398Z                      report_type: Optional[str] = None,
2025-08-18T19:45:45.5603665Z                      force: bool = False) -> Dict[str, Any]
2025-08-18T19:45:45.5603919Z ```
2025-08-18T19:45:45.5604008Z 
2025-08-18T19:45:45.5604137Z Import a file into Postgres using existing ETL pipeline.
2025-08-18T19:45:45.5604345Z 
2025-08-18T19:45:45.5604426Z <a id="ingest.celery_app"></a>
2025-08-18T19:45:45.5604566Z 
2025-08-18T19:45:45.5604640Z # ingest.celery\_app
2025-08-18T19:45:45.5604755Z 
2025-08-18T19:45:45.5604842Z <a id="ingest.ingest_router"></a>
2025-08-18T19:45:45.5604988Z 
2025-08-18T19:45:45.5605063Z # ingest.ingest\_router
2025-08-18T19:45:45.5605177Z 
2025-08-18T19:45:45.5605257Z <a id="logistics_etl"></a>
2025-08-18T19:45:45.5605387Z 
2025-08-18T19:45:45.5605452Z # logistics\_etl
2025-08-18T19:45:45.5605561Z 
2025-08-18T19:45:45.5605637Z Daily logistics ETL job.
2025-08-18T19:45:45.5605757Z 
2025-08-18T19:45:45.5605842Z <a id="logistics_etl.__main__"></a>
2025-08-18T19:45:45.5605994Z 
2025-08-18T19:45:45.5606071Z # logistics\_etl.\_\_main\_\_
2025-08-18T19:45:45.5606207Z 
2025-08-18T19:45:45.5606290Z <a id="logistics_etl.dsn"></a>
2025-08-18T19:45:45.5606422Z 
2025-08-18T19:45:45.5606491Z # logistics\_etl.dsn
2025-08-18T19:45:45.5606610Z 
2025-08-18T19:45:45.5606725Z Local DSN builder to avoid cross-service dependency.
2025-08-18T19:45:45.5606926Z 
2025-08-18T19:45:45.5607020Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-18T19:45:45.5607183Z 
2025-08-18T19:45:45.5607251Z #### build\_dsn
2025-08-18T19:45:45.5607349Z 
2025-08-18T19:45:45.5607419Z ```python
2025-08-18T19:45:45.5607588Z def build_dsn(sync: bool = True) -> str
2025-08-18T19:45:45.5607810Z ```
2025-08-18T19:45:45.5607890Z 
2025-08-18T19:45:45.5608029Z Return a Postgres DSN assembled from environment variables.
2025-08-18T19:45:45.5608678Z 
2025-08-18T19:45:45.5608971Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-18T19:45:45.5609924Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-18T19:45:45.5610356Z error when any required variable is missing.
2025-08-18T19:45:45.5610539Z 
2025-08-18T19:45:45.5610642Z <a id="logistics_etl.tests.conftest"></a>
2025-08-18T19:45:45.5610824Z 
2025-08-18T19:45:45.5610917Z # logistics\_etl.tests.conftest
2025-08-18T19:45:45.5611067Z 
2025-08-18T19:45:45.5611173Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-18T19:45:45.5611366Z 
2025-08-18T19:45:45.5611463Z # logistics\_etl.tests.test\_repository
2025-08-18T19:45:45.5611630Z 
2025-08-18T19:45:45.5611726Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-18T19:45:45.5611895Z 
2025-08-18T19:45:45.5611985Z # logistics\_etl.tests.test\_cron
2025-08-18T19:45:45.5612133Z 
2025-08-18T19:45:45.5612229Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-18T19:45:45.5612896Z 
2025-08-18T19:45:45.5612993Z # logistics\_etl.tests.test\_imports
2025-08-18T19:45:45.5613159Z 
2025-08-18T19:45:45.5613261Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-18T19:45:45.5613438Z 
2025-08-18T19:45:45.5613526Z # logistics\_etl.tests.test\_smoke
2025-08-18T19:45:45.5613676Z 
2025-08-18T19:45:45.5613779Z <a id="logistics_etl.tests.test_client"></a>
2025-08-18T19:45:45.5613950Z 
2025-08-18T19:45:45.5614035Z # logistics\_etl.tests.test\_client
2025-08-18T19:45:45.5614192Z 
2025-08-18T19:45:45.5614278Z <a id="logistics_etl.tests"></a>
2025-08-18T19:45:45.5614422Z 
2025-08-18T19:45:45.5614500Z # logistics\_etl.tests
2025-08-18T19:45:45.5614618Z 
2025-08-18T19:45:45.5614698Z <a id="logistics_etl.flow"></a>
2025-08-18T19:45:45.5614838Z 
2025-08-18T19:45:45.5614917Z # logistics\_etl.flow
2025-08-18T19:45:45.5615030Z 
2025-08-18T19:45:45.5615114Z <a id="logistics_etl.client"></a>
2025-08-18T19:45:45.5615267Z 
2025-08-18T19:45:45.5615340Z # logistics\_etl.client
2025-08-18T19:45:45.5615469Z 
2025-08-18T19:45:45.5615551Z <a id="logistics_etl.cron"></a>
2025-08-18T19:45:45.5615692Z 
2025-08-18T19:45:45.5615766Z # logistics\_etl.cron
2025-08-18T19:45:45.5615879Z 
2025-08-18T19:45:45.5615969Z <a id="logistics_etl.db"></a>
2025-08-18T19:45:45.5616107Z 
2025-08-18T19:45:45.5616176Z # logistics\_etl.db
2025-08-18T19:45:45.5616290Z 
2025-08-18T19:45:45.5616378Z <a id="logistics_etl.repository"></a>
2025-08-18T19:45:45.5616537Z 
2025-08-18T19:45:45.5616615Z # logistics\_etl.repository
2025-08-18T19:45:45.5616754Z 
2025-08-18T19:45:45.5616825Z <a id="alert_bot"></a>
2025-08-18T19:45:45.5616944Z 
2025-08-18T19:45:45.5617014Z # alert\_bot
2025-08-18T19:45:45.5617108Z 
2025-08-18T19:45:45.5617194Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-18T19:45:45.5617368Z 
2025-08-18T19:45:45.5617452Z # alert\_bot.tests.test\_smoke
2025-08-18T19:45:45.5617596Z 
2025-08-18T19:45:45.5617695Z <a id="alert_bot.tests"></a>
2025-08-18T19:45:45.5617832Z 
2025-08-18T19:45:45.5617909Z # alert\_bot.tests
2025-08-18T19:45:45.5618022Z 
2025-08-18T19:45:45.5618106Z <a id="alert_bot.alert_bot"></a>
2025-08-18T19:45:45.5618249Z 
2025-08-18T19:45:45.5654615Z # alert\_bot.alert\_bot
2025-08-18T19:45:45.5654945Z 
2025-08-18T19:45:45.5655117Z <a id="alert_bot.rules"></a>
2025-08-18T19:45:45.5655431Z 
2025-08-18T19:45:45.5655570Z # alert\_bot.rules
2025-08-18T19:45:45.5655800Z 
2025-08-18T19:45:45.5655943Z <a id="common"></a>
2025-08-18T19:45:45.5656178Z 
2025-08-18T19:45:45.5656308Z # common
2025-08-18T19:45:45.5656493Z 
2025-08-18T19:45:45.5656662Z <a id="common.dsn"></a>
2025-08-18T19:45:45.5656856Z 
2025-08-18T19:45:45.5656939Z # common.dsn
2025-08-18T19:45:45.5657067Z 
2025-08-18T19:45:45.5657173Z <a id="common.dsn.build_dsn"></a>
2025-08-18T19:45:45.5657361Z 
2025-08-18T19:45:45.5657442Z #### build\_dsn
2025-08-18T19:45:45.5657573Z 
2025-08-18T19:45:45.5657653Z ```python
2025-08-18T19:45:45.5657885Z def build_dsn(sync: bool = True) -> str
2025-08-18T19:45:45.5658168Z ```
2025-08-18T19:45:45.5658464Z 
2025-08-18T19:45:45.5658629Z Return a Postgres DSN, validating required variables.
2025-08-18T19:45:45.5658885Z 
2025-08-18T19:45:45.5659126Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-18T19:45:45.5659967Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-18T19:45:45.5660490Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-18T19:45:45.5660884Z missing.
2025-08-18T19:45:45.5660994Z 
2025-08-18T19:45:45.5661104Z <a id="common.models_vendor"></a>
2025-08-18T19:45:45.5661297Z 
2025-08-18T19:45:45.5661383Z # common.models\_vendor
2025-08-18T19:45:45.5661510Z 
2025-08-18T19:45:45.5661599Z <a id="common.models_vendor.Vendor"></a>
2025-08-18T19:45:45.5661765Z 
2025-08-18T19:45:45.5661834Z ## Vendor Objects
2025-08-18T19:45:45.5661946Z 
2025-08-18T19:45:45.5662010Z ```python
2025-08-18T19:45:45.5662167Z class Vendor(Base)
2025-08-18T19:45:45.5662331Z ```
2025-08-18T19:45:45.5662414Z 
2025-08-18T19:45:45.5662630Z Vendor of inventory items.
2025-08-18T19:45:45.5662766Z 
2025-08-18T19:45:45.5662870Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-18T19:45:45.5663059Z 
2025-08-18T19:45:45.5663137Z ## VendorPrice Objects
2025-08-18T19:45:45.5663255Z 
2025-08-18T19:45:45.5663318Z ```python
2025-08-18T19:45:45.5663482Z class VendorPrice(Base)
2025-08-18T19:45:45.5663656Z ```
2025-08-18T19:45:45.5663745Z 
2025-08-18T19:45:45.5663846Z Association table linking vendors to pricing.
2025-08-18T19:45:45.5664027Z 
2025-08-18T19:45:45.5664109Z <a id="common.db_url"></a>
2025-08-18T19:45:45.5664235Z 
2025-08-18T19:45:45.5664301Z # common.db\_url
2025-08-18T19:45:45.5664410Z 
2025-08-18T19:45:45.5664493Z <a id="common.db_url.build_url"></a>
2025-08-18T19:45:45.5664647Z 
2025-08-18T19:45:45.5664712Z #### build\_url
2025-08-18T19:45:45.5664815Z 
2025-08-18T19:45:45.5664877Z ```python
2025-08-18T19:45:45.5665052Z def build_url(async_: bool = True) -> str
2025-08-18T19:45:45.5665283Z ```
2025-08-18T19:45:45.5665369Z 
2025-08-18T19:45:45.5665478Z Return Postgres DSN from env or PG_* parts.
2025-08-18T19:45:45.5665653Z 
2025-08-18T19:45:45.5665733Z <a id="common.keepa"></a>
2025-08-18T19:45:45.5665868Z 
2025-08-18T19:45:45.5665935Z # common.keepa
2025-08-18T19:45:45.5666036Z 
2025-08-18T19:45:45.5666112Z <a id="common.llm"></a>
2025-08-18T19:45:45.5666236Z 
2025-08-18T19:45:45.5666300Z # common.llm
2025-08-18T19:45:45.5666394Z 
2025-08-18T19:45:45.5666481Z <a id="common.settings"></a>
2025-08-18T19:45:45.5666620Z 
2025-08-18T19:45:45.5666689Z # common.settings
2025-08-18T19:45:45.5666802Z 
2025-08-18T19:45:45.5666872Z <a id="common.db"></a>
2025-08-18T19:45:45.5666987Z 
2025-08-18T19:45:45.5667051Z # common.db
2025-08-18T19:45:45.5667149Z 
2025-08-18T19:45:45.5667243Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-18T19:45:45.5667413Z 
2025-08-18T19:45:45.5667494Z #### build\_sqlalchemy\_url
2025-08-18T19:45:45.5667625Z 
2025-08-18T19:45:45.5667687Z ```python
2025-08-18T19:45:45.5667865Z def build_sqlalchemy_url() -> str
2025-08-18T19:45:45.5668077Z ```
2025-08-18T19:45:45.5668166Z 
2025-08-18T19:45:45.5668261Z Return Postgres URL for SQLAlchemy engines.
2025-08-18T19:45:45.5668433Z 
2025-08-18T19:45:45.5668522Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-18T19:45:45.5668694Z 
2025-08-18T19:45:45.5668770Z #### build\_asyncpg\_dsn
2025-08-18T19:45:45.5668893Z 
2025-08-18T19:45:45.5668959Z ```python
2025-08-18T19:45:45.5669127Z def build_asyncpg_dsn() -> str
2025-08-18T19:45:45.5669326Z ```
2025-08-18T19:45:45.5669406Z 
2025-08-18T19:45:45.5669732Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-18T19:45:45.5669958Z 
2025-08-18T19:45:45.5670044Z <a id="common.db.refresh_mvs"></a>
2025-08-18T19:45:45.5670197Z 
2025-08-18T19:45:45.5670262Z #### refresh\_mvs
2025-08-18T19:45:45.5670372Z 
2025-08-18T19:45:45.5670436Z ```python
2025-08-18T19:45:45.5670638Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-18T19:45:45.5670888Z ```
2025-08-18T19:45:45.5670970Z 
2025-08-18T19:45:45.5671111Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-18T19:45:45.5671517Z 
2025-08-18T19:45:45.5671598Z <a id="common.config"></a>
2025-08-18T19:45:45.5671734Z 
2025-08-18T19:45:45.5671801Z # common.config
2025-08-18T19:45:45.5671903Z 
2025-08-18T19:45:45.5671985Z <a id="common.base"></a>
2025-08-18T19:45:45.5672109Z 
2025-08-18T19:45:45.5672174Z # common.base
2025-08-18T19:45:45.5672271Z 
2025-08-18T19:45:45.5672357Z <a id="common.base.Base"></a>
2025-08-18T19:45:45.5672497Z 
2025-08-18T19:45:45.5672561Z ## Base Objects
2025-08-18T19:45:45.5672669Z 
2025-08-18T19:45:45.5672730Z ```python
2025-08-18T19:45:45.5672894Z class Base(DeclarativeBase)
2025-08-18T19:45:45.5673088Z ```
2025-08-18T19:45:45.5673168Z 
2025-08-18T19:45:45.5673260Z Base class for SQLAlchemy models.
2025-08-18T19:45:45.5673406Z 
2025-08-18T19:45:45.5673478Z <a id="repricer"></a>
2025-08-18T19:45:45.5673601Z 
2025-08-18T19:45:45.5673664Z # repricer
2025-08-18T19:45:45.5673753Z 
2025-08-18T19:45:45.5673840Z <a id="repricer.app.schemas"></a>
2025-08-18T19:45:45.5674105Z 
2025-08-18T19:45:45.5674181Z # repricer.app.schemas
2025-08-18T19:45:45.5674302Z 
2025-08-18T19:45:45.5674390Z <a id="repricer.app.deps"></a>
2025-08-18T19:45:45.5674530Z 
2025-08-18T19:45:45.5674604Z # repricer.app.deps
2025-08-18T19:45:45.5674713Z 
2025-08-18T19:45:45.5674831Z Placeholder module for Keepa / SP-API clients.
2025-08-18T19:45:45.5675016Z 
2025-08-18T19:45:45.5675099Z <a id="repricer.app.logic"></a>
2025-08-18T19:45:45.5675251Z 
2025-08-18T19:45:45.5675325Z # repricer.app.logic
2025-08-18T19:45:45.5675440Z 
2025-08-18T19:45:45.5675546Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-18T19:45:45.5675721Z 
2025-08-18T19:45:45.5675786Z #### MIN\_MARGIN
2025-08-18T19:45:45.5675888Z 
2025-08-18T19:45:45.5675955Z 15 % ROI
2025-08-18T19:45:45.5676043Z 
2025-08-18T19:45:45.5676146Z <a id="repricer.app.logic.compute_price"></a>
2025-08-18T19:45:45.5676332Z 
2025-08-18T19:45:45.5676401Z #### compute\_price
2025-08-18T19:45:45.5676508Z 
2025-08-18T19:45:45.5676574Z ```python
2025-08-18T19:45:45.5676828Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-18T19:45:45.5677130Z ```
2025-08-18T19:45:45.5677214Z 
2025-08-18T19:45:45.5677324Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-18T19:45:45.5677607Z Replace with real competitive logic later.
2025-08-18T19:45:45.5677779Z 
2025-08-18T19:45:45.5677861Z <a id="repricer.app.main"></a>
2025-08-18T19:45:45.5678010Z 
2025-08-18T19:45:45.5678084Z # repricer.app.main
2025-08-18T19:45:45.5678191Z 
2025-08-18T19:45:45.5678272Z <a id="repricer.app"></a>
2025-08-18T19:45:45.5678401Z 
2025-08-18T19:45:45.5678468Z # repricer.app
2025-08-18T19:45:45.5678570Z 
2025-08-18T19:45:45.5678668Z <a id="repricer.tests.test_imports"></a>
2025-08-18T19:45:45.5678837Z 
2025-08-18T19:45:45.5678920Z # repricer.tests.test\_imports
2025-08-18T19:45:45.5679064Z 
2025-08-18T19:45:45.5679152Z <a id="repricer.tests.test_smoke"></a>
2025-08-18T19:45:45.5679313Z 
2025-08-18T19:45:45.5679393Z # repricer.tests.test\_smoke
2025-08-18T19:45:45.5679662Z 
2025-08-18T19:45:45.5679744Z <a id="repricer.tests"></a>
2025-08-18T19:45:45.5679877Z 
2025-08-18T19:45:45.5679953Z # repricer.tests
2025-08-18T19:45:45.5680058Z 
2025-08-18T19:45:45.5680123Z <a id="db"></a>
2025-08-18T19:45:45.5680228Z 
2025-08-18T19:45:45.5680287Z # db
2025-08-18T19:45:45.5680371Z 
2025-08-18T19:45:45.5680448Z <a id="db.utils.views"></a>
2025-08-18T19:45:45.5680583Z 
2025-08-18T19:45:45.5680651Z # db.utils.views
2025-08-18T19:45:45.5680751Z 
2025-08-18T19:45:45.5680852Z <a id="db.utils.views.replace_view"></a>
2025-08-18T19:45:45.5681021Z 
2025-08-18T19:45:45.5681089Z #### replace\_view
2025-08-18T19:45:45.5681193Z 
2025-08-18T19:45:45.5681268Z ```python
2025-08-18T19:45:45.5681458Z def replace_view(name: str, new_sql: str) -> None
2025-08-18T19:45:45.5681709Z ```
2025-08-18T19:45:45.5681791Z 
2025-08-18T19:45:45.5681881Z Drop and recreate a SQL view atomically.
2025-08-18T19:45:45.5682051Z 
2025-08-18T19:45:45.5682120Z <a id="db.utils"></a>
2025-08-18T19:45:45.5682382Z 
2025-08-18T19:45:45.5682452Z # db.utils
2025-08-18T19:45:45.5682540Z 
2025-08-18T19:45:45.5682618Z <a id="price_importer"></a>
2025-08-18T19:45:45.5682750Z 
2025-08-18T19:45:45.5682818Z # price\_importer
2025-08-18T19:45:45.5682922Z 
2025-08-18T19:45:45.5683024Z <a id="price_importer.services_common.dsn"></a>
2025-08-18T19:45:45.5683212Z 
2025-08-18T19:45:45.5683302Z # price\_importer.services\_common.dsn
2025-08-18T19:45:45.5683466Z 
2025-08-18T19:45:45.5683599Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-18T19:45:45.5683807Z 
2025-08-18T19:45:45.5683871Z #### build\_dsn
2025-08-18T19:45:45.5684001Z 
2025-08-18T19:45:45.5684064Z ```python
2025-08-18T19:45:45.5684241Z def build_dsn(sync: bool = True) -> str
2025-08-18T19:45:45.5684464Z ```
2025-08-18T19:45:45.5684549Z 
2025-08-18T19:45:45.5684630Z Return safe DSN.
2025-08-18T19:45:45.5684750Z 
2025-08-18T19:45:45.5685111Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-18T19:45:45.5685315Z 
2025-08-18T19:45:45.5685573Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-18T19:45:45.5685784Z 
2025-08-18T19:45:45.5685893Z # price\_importer.services\_common.models\_vendor
2025-08-18T19:45:45.5686089Z 
2025-08-18T19:45:45.5686196Z <a id="price_importer.services_common.db_url"></a>
2025-08-18T19:45:45.5686383Z 
2025-08-18T19:45:45.5686476Z # price\_importer.services\_common.db\_url
2025-08-18T19:45:45.5686650Z 
2025-08-18T19:45:45.5686781Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-18T19:45:45.5686998Z 
2025-08-18T19:45:45.5687070Z #### build\_url
2025-08-18T19:45:45.5687175Z 
2025-08-18T19:45:45.5687241Z ```python
2025-08-18T19:45:45.5687428Z def build_url(async_: bool = True) -> str
2025-08-18T19:45:45.5687655Z ```
2025-08-18T19:45:45.5687745Z 
2025-08-18T19:45:45.5687842Z Return Postgres DSN from env or PG_* parts.
2025-08-18T19:45:45.5688017Z 
2025-08-18T19:45:45.5688131Z <a id="price_importer.services_common.keepa"></a>
2025-08-18T19:45:45.5688318Z 
2025-08-18T19:45:45.5688417Z # price\_importer.services\_common.keepa
2025-08-18T19:45:45.5688589Z 
2025-08-18T19:45:45.5688695Z <a id="price_importer.services_common.llm"></a>
2025-08-18T19:45:45.5688878Z 
2025-08-18T19:45:45.5688968Z # price\_importer.services\_common.llm
2025-08-18T19:45:45.5689134Z 
2025-08-18T19:45:45.5689250Z <a id="price_importer.services_common.settings"></a>
2025-08-18T19:45:45.5689548Z 
2025-08-18T19:45:45.5689654Z # price\_importer.services\_common.settings
2025-08-18T19:45:45.5689829Z 
2025-08-18T19:45:45.5689930Z <a id="price_importer.services_common.db"></a>
2025-08-18T19:45:45.5690113Z 
2025-08-18T19:45:45.5690201Z # price\_importer.services\_common.db
2025-08-18T19:45:45.5690359Z 
2025-08-18T19:45:45.5690518Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-18T19:45:45.5690771Z 
2025-08-18T19:45:45.5690851Z #### build\_sqlalchemy\_url
2025-08-18T19:45:45.5690987Z 
2025-08-18T19:45:45.5691055Z ```python
2025-08-18T19:45:45.5691226Z def build_sqlalchemy_url() -> str
2025-08-18T19:45:45.5691447Z ```
2025-08-18T19:45:45.5691528Z 
2025-08-18T19:45:45.5691622Z Return Postgres URL for SQLAlchemy engines.
2025-08-18T19:45:45.5691799Z 
2025-08-18T19:45:45.5691945Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-18T19:45:45.5692176Z 
2025-08-18T19:45:45.5692250Z #### build\_asyncpg\_dsn
2025-08-18T19:45:45.5692384Z 
2025-08-18T19:45:45.5692446Z ```python
2025-08-18T19:45:45.5692619Z def build_asyncpg_dsn() -> str
2025-08-18T19:45:45.5692956Z ```
2025-08-18T19:45:45.5693095Z 
2025-08-18T19:45:45.5693299Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-18T19:45:45.5693668Z 
2025-08-18T19:45:45.5693825Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-18T19:45:45.5694039Z 
2025-08-18T19:45:45.5694107Z #### refresh\_mvs
2025-08-18T19:45:45.5694210Z 
2025-08-18T19:45:45.5694275Z ```python
2025-08-18T19:45:45.5694464Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-18T19:45:45.5694713Z ```
2025-08-18T19:45:45.5694795Z 
2025-08-18T19:45:45.5695077Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-18T19:45:45.5695301Z 
2025-08-18T19:45:45.5695395Z <a id="price_importer.services_common"></a>
2025-08-18T19:45:45.5695568Z 
2025-08-18T19:45:45.5695658Z # price\_importer.services\_common
2025-08-18T19:45:45.5695824Z 
2025-08-18T19:45:45.5695931Z <a id="price_importer.services_common.base"></a>
2025-08-18T19:45:45.5696121Z 
2025-08-18T19:45:45.5696215Z # price\_importer.services\_common.base
2025-08-18T19:45:45.5696381Z 
2025-08-18T19:45:45.5696470Z <a id="price_importer.normaliser"></a>
2025-08-18T19:45:45.5696637Z 
2025-08-18T19:45:45.5696718Z # price\_importer.normaliser
2025-08-18T19:45:45.5696854Z 
2025-08-18T19:45:45.5696956Z <a id="price_importer.common.models_vendor"></a>
2025-08-18T19:45:45.5697145Z 
2025-08-18T19:45:45.5697233Z # price\_importer.common.models\_vendor
2025-08-18T19:45:45.5697396Z 
2025-08-18T19:45:45.5697492Z <a id="price_importer.common.db_url"></a>
2025-08-18T19:45:45.5697662Z 
2025-08-18T19:45:45.5697858Z # price\_importer.common.db\_url
2025-08-18T19:45:45.5698010Z 
2025-08-18T19:45:45.5698116Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-18T19:45:45.5698301Z 
2025-08-18T19:45:45.5698365Z #### make\_dsn
2025-08-18T19:45:45.5698470Z 
2025-08-18T19:45:45.5698532Z ```python
2025-08-18T19:45:45.5698708Z def make_dsn(async_: bool = False) -> str
2025-08-18T19:45:45.5698930Z ```
2025-08-18T19:45:45.5699010Z 
2025-08-18T19:45:45.5699134Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-18T19:45:45.5699336Z 
2025-08-18T19:45:45.5699831Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-18T19:45:45.5700120Z 
2025-08-18T19:45:45.5700199Z #### build\_url
2025-08-18T19:45:45.5700308Z 
2025-08-18T19:45:45.5700379Z ```python
2025-08-18T19:45:45.5700565Z def build_url(async_: bool = False) -> str
2025-08-18T19:45:45.5700800Z ```
2025-08-18T19:45:45.5700884Z 
2025-08-18T19:45:45.5701009Z Return Postgres DSN built from environment variables.
2025-08-18T19:45:45.5701222Z 
2025-08-18T19:45:45.5701325Z <a id="price_importer.common"></a>
2025-08-18T19:45:45.5701482Z 
2025-08-18T19:45:45.5701562Z # price\_importer.common
2025-08-18T19:45:45.5701698Z 
2025-08-18T19:45:45.5701792Z <a id="price_importer.common.base"></a>
2025-08-18T19:45:45.5701962Z 
2025-08-18T19:45:45.5702052Z # price\_importer.common.base
2025-08-18T19:45:45.5702196Z 
2025-08-18T19:45:45.5702295Z <a id="price_importer.tests.conftest"></a>
2025-08-18T19:45:45.5702475Z 
2025-08-18T19:45:45.5702561Z # price\_importer.tests.conftest
2025-08-18T19:45:45.5702710Z 
2025-08-18T19:45:45.5702817Z <a id="price_importer.tests.test_reader"></a>
2025-08-18T19:45:45.5703005Z 
2025-08-18T19:45:45.5703093Z # price\_importer.tests.test\_reader
2025-08-18T19:45:45.5703248Z 
2025-08-18T19:45:45.5703354Z <a id="price_importer.tests.test_imports"></a>
2025-08-18T19:45:45.5703533Z 
2025-08-18T19:45:45.5703624Z # price\_importer.tests.test\_imports
2025-08-18T19:45:45.5703789Z 
2025-08-18T19:45:45.5703887Z <a id="price_importer.tests.test_smoke"></a>
2025-08-18T19:45:45.5704067Z 
2025-08-18T19:45:45.5704156Z # price\_importer.tests.test\_smoke
2025-08-18T19:45:45.5704322Z 
2025-08-18T19:45:45.5704429Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-18T19:45:45.5704615Z 
2025-08-18T19:45:45.5704712Z # price\_importer.tests.test\_normaliser
2025-08-18T19:45:45.5704882Z 
2025-08-18T19:45:45.5704966Z <a id="price_importer.tests"></a>
2025-08-18T19:45:45.5705122Z 
2025-08-18T19:45:45.5705198Z # price\_importer.tests
2025-08-18T19:45:45.5705323Z 
2025-08-18T19:45:45.5705410Z <a id="price_importer.reader"></a>
2025-08-18T19:45:45.5705606Z 
2025-08-18T19:45:45.5705684Z # price\_importer.reader
2025-08-18T19:45:45.5705808Z 
2025-08-18T19:45:45.5705907Z <a id="price_importer.repository"></a>
2025-08-18T19:45:45.5706070Z 
2025-08-18T19:45:45.5706153Z # price\_importer.repository
2025-08-18T19:45:45.5706297Z 
2025-08-18T19:45:45.5706381Z <a id="price_importer.import"></a>
2025-08-18T19:45:45.5706528Z 
2025-08-18T19:45:45.5706604Z # price\_importer.import
2025-08-18T19:45:45.5706905Z 
2025-08-18T19:45:45.5706980Z <a id="fees_h10"></a>
2025-08-18T19:45:45.5707097Z 
2025-08-18T19:45:45.5707169Z # fees\_h10
2025-08-18T19:45:45.5707261Z 
2025-08-18T19:45:45.5707338Z <a id="fees_h10.worker"></a>
2025-08-18T19:45:45.5707470Z 
2025-08-18T19:45:45.5707545Z # fees\_h10.worker
2025-08-18T19:45:45.5707650Z 
2025-08-18T19:45:45.5707745Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-18T19:45:45.5707928Z 
2025-08-18T19:45:45.5708002Z #### list\_active\_asins
2025-08-18T19:45:45.5708123Z 
2025-08-18T19:45:45.5708192Z ```python
2025-08-18T19:45:45.5708363Z def list_active_asins() -> list[str]
2025-08-18T19:45:45.5708579Z ```
2025-08-18T19:45:45.5708662Z 
2025-08-18T19:45:45.5708776Z Return known ASINs or an empty list if unavailable.
2025-08-18T19:45:45.5708977Z 
2025-08-18T19:45:45.5709061Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-18T19:45:45.5709218Z 
2025-08-18T19:45:45.5709298Z # fees\_h10.tests.test\_smoke
2025-08-18T19:45:45.5709589Z 
2025-08-18T19:45:45.5709836Z <a id="fees_h10.tests"></a>
2025-08-18T19:45:45.5709981Z 
2025-08-18T19:45:45.5710054Z # fees\_h10.tests
2025-08-18T19:45:45.5710160Z 
2025-08-18T19:45:45.5710241Z <a id="fees_h10.client"></a>
2025-08-18T19:45:45.5710376Z 
2025-08-18T19:45:45.5710450Z # fees\_h10.client
2025-08-18T19:45:45.5710556Z 
2025-08-18T19:45:45.5710641Z <a id="fees_h10.repository"></a>
2025-08-18T19:45:45.5710792Z 
2025-08-18T19:45:45.5710865Z # fees\_h10.repository
2025-08-18T19:45:45.5710981Z 
2025-08-18T19:45:45.5711058Z <a id="emailer"></a>
2025-08-18T19:45:45.5711172Z 
2025-08-18T19:45:45.5711234Z # emailer
2025-08-18T19:45:45.5711323Z 
2025-08-18T19:45:45.5711431Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-18T19:45:45.5711613Z 
2025-08-18T19:45:45.5711703Z # emailer.tests.test\_import\_emailer
2025-08-18T19:45:45.5711868Z 
2025-08-18T19:45:45.5711954Z <a id="emailer.tests.test_smoke"></a>
2025-08-18T19:45:45.5712108Z 
2025-08-18T19:45:45.5712194Z # emailer.tests.test\_smoke
2025-08-18T19:45:45.5712335Z 
2025-08-18T19:45:45.5712417Z <a id="emailer.tests"></a>
2025-08-18T19:45:45.5712548Z 
2025-08-18T19:45:45.5712625Z # emailer.tests
2025-08-18T19:45:45.5712728Z 
2025-08-18T19:45:45.5712813Z <a id="emailer.generate_body"></a>
2025-08-18T19:45:45.5712973Z 
2025-08-18T19:45:45.5713050Z # emailer.generate\_body
2025-08-18T19:45:45.5713172Z 
2025-08-18T19:45:45.5713246Z <a id="llm_server"></a>
2025-08-18T19:45:45.5713372Z 
2025-08-18T19:45:45.5713438Z # llm\_server
2025-08-18T19:45:45.5713537Z 
2025-08-18T19:45:45.5713622Z <a id="llm_server.app"></a>
2025-08-18T19:45:45.5713751Z 
2025-08-18T19:45:45.5713820Z # llm\_server.app
2025-08-18T19:45:45.5713930Z 
