2025-08-19T20:09:01.0790651Z ##[group]Run pydoc-markdown
2025-08-19T20:09:01.0790967Z [36;1mpydoc-markdown[0m
2025-08-19T20:09:01.0834359Z shell: /usr/bin/bash -e {0}
2025-08-19T20:09:01.0834613Z env:
2025-08-19T20:09:01.0834851Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T20:09:01.0835260Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-19T20:09:01.0835648Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T20:09:01.0835998Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T20:09:01.0836347Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T20:09:01.0836688Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-19T20:09:01.0836971Z ##[endgroup]
2025-08-19T20:09:01.4234932Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-19T20:09:01.4236103Z Unknown key(s) "{'output_directory'}" at:
2025-08-19T20:09:01.4237443Z In "pydoc-markdown.yml"
2025-08-19T20:09:01.4237876Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-19T20:09:01.4238550Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-19T20:09:01.4239322Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-19T20:09:01.4239847Z 
2025-08-19T20:09:01.7672634Z <a id="__init__"></a>
2025-08-19T20:09:01.7673006Z 
2025-08-19T20:09:01.7673156Z # \_\_init\_\_
2025-08-19T20:09:01.7673364Z 
2025-08-19T20:09:01.7673499Z <a id="api"></a>
2025-08-19T20:09:01.7673727Z 
2025-08-19T20:09:01.7673853Z # api
2025-08-19T20:09:01.7674033Z 
2025-08-19T20:09:01.7674188Z <a id="api.errors"></a>
2025-08-19T20:09:01.7674455Z 
2025-08-19T20:09:01.7674591Z # api.errors
2025-08-19T20:09:01.7674793Z 
2025-08-19T20:09:01.7674968Z <a id="api.sentry_config"></a>
2025-08-19T20:09:01.7675266Z 
2025-08-19T20:09:01.7675418Z # api.sentry\_config
2025-08-19T20:09:01.7675664Z 
2025-08-19T20:09:01.7675870Z <a id="api.tests.test_stats_contracts"></a>
2025-08-19T20:09:01.7676244Z 
2025-08-19T20:09:01.7676417Z # api.tests.test\_stats\_contracts
2025-08-19T20:09:01.7676790Z 
2025-08-19T20:09:01.7676990Z <a id="api.tests.test_sentry_scrub"></a>
2025-08-19T20:09:01.7677216Z 
2025-08-19T20:09:01.7677333Z # api.tests.test\_sentry\_scrub
2025-08-19T20:09:01.7677511Z 
2025-08-19T20:09:01.7677627Z <a id="api.tests.test_roi_basic_auth"></a>
2025-08-19T20:09:01.7677857Z 
2025-08-19T20:09:01.7677967Z # api.tests.test\_roi\_basic\_auth
2025-08-19T20:09:01.7678157Z 
2025-08-19T20:09:01.7678270Z <a id="api.tests.test_errors_json"></a>
2025-08-19T20:09:01.7678478Z 
2025-08-19T20:09:01.7678581Z # api.tests.test\_errors\_json
2025-08-19T20:09:01.7678753Z 
2025-08-19T20:09:01.7678855Z <a id="api.tests.test_llm"></a>
2025-08-19T20:09:01.7679021Z 
2025-08-19T20:09:01.7679111Z # api.tests.test\_llm
2025-08-19T20:09:01.7679443Z 
2025-08-19T20:09:01.7679551Z <a id="api.tests.test_roi_filters"></a>
2025-08-19T20:09:01.7679747Z 
2025-08-19T20:09:01.7679842Z # api.tests.test\_roi\_filters
2025-08-19T20:09:01.7680014Z 
2025-08-19T20:09:01.7680122Z <a id="api.tests.test_sentry_event"></a>
2025-08-19T20:09:01.7680631Z 
2025-08-19T20:09:01.7680738Z # api.tests.test\_sentry\_event
2025-08-19T20:09:01.7680904Z 
2025-08-19T20:09:01.7681373Z <a id="api.tests.test_sentry_event.DummyTransport"></a>
2025-08-19T20:09:01.7681732Z 
2025-08-19T20:09:01.7681835Z ## DummyTransport Objects
2025-08-19T20:09:01.7682001Z 
2025-08-19T20:09:01.7682085Z ```python
2025-08-19T20:09:01.7682306Z class DummyTransport()
2025-08-19T20:09:01.7682539Z ```
2025-08-19T20:09:01.7682643Z 
2025-08-19T20:09:01.7682867Z <a id="api.tests.test_sentry_event.DummyTransport.capture_envelope"></a>
2025-08-19T20:09:01.7683145Z 
2025-08-19T20:09:01.7683230Z #### capture\_envelope
2025-08-19T20:09:01.7683353Z 
2025-08-19T20:09:01.7683417Z ```python
2025-08-19T20:09:01.7683599Z def capture_envelope(envelope)
2025-08-19T20:09:01.7683796Z ```
2025-08-19T20:09:01.7683883Z 
2025-08-19T20:09:01.7684008Z Capture events sent as envelopes by Sentry SDK >= 2.0.
2025-08-19T20:09:01.7684217Z 
2025-08-19T20:09:01.7684308Z <a id="api.tests.test_cors"></a>
2025-08-19T20:09:01.7684682Z 
2025-08-19T20:09:01.7684756Z # api.tests.test\_cors
2025-08-19T20:09:01.7684871Z 
2025-08-19T20:09:01.7684960Z <a id="api.tests.test_imports"></a>
2025-08-19T20:09:01.7685117Z 
2025-08-19T20:09:01.7685194Z # api.tests.test\_imports
2025-08-19T20:09:01.7685327Z 
2025-08-19T20:09:01.7685413Z <a id="api.tests.test_rate_limit"></a>
2025-08-19T20:09:01.7685573Z 
2025-08-19T20:09:01.7685658Z # api.tests.test\_rate\_limit
2025-08-19T20:09:01.7685796Z 
2025-08-19T20:09:01.7685889Z <a id="api.tests.test_rate_limit.app"></a>
2025-08-19T20:09:01.7686062Z 
2025-08-19T20:09:01.7686132Z #### app
2025-08-19T20:09:01.7686219Z 
2025-08-19T20:09:01.7686281Z noqa: E402
2025-08-19T20:09:01.7686377Z 
2025-08-19T20:09:01.7686463Z <a id="api.tests.test_entrypoint"></a>
2025-08-19T20:09:01.7686626Z 
2025-08-19T20:09:01.7686710Z # api.tests.test\_entrypoint
2025-08-19T20:09:01.7686849Z 
2025-08-19T20:09:01.7686932Z <a id="api.tests.test_health"></a>
2025-08-19T20:09:01.7687091Z 
2025-08-19T20:09:01.7687176Z # api.tests.test\_health
2025-08-19T20:09:01.7687302Z 
2025-08-19T20:09:01.7687384Z <a id="api.tests.test_score"></a>
2025-08-19T20:09:01.7687537Z 
2025-08-19T20:09:01.7687614Z # api.tests.test\_score
2025-08-19T20:09:01.7687735Z 
2025-08-19T20:09:01.7687814Z <a id="api.logging_config"></a>
2025-08-19T20:09:01.7687961Z 
2025-08-19T20:09:01.7688032Z # api.logging\_config
2025-08-19T20:09:01.7688149Z 
2025-08-19T20:09:01.7688235Z <a id="api.migrations.env"></a>
2025-08-19T20:09:01.7688373Z 
2025-08-19T20:09:01.7688446Z # api.migrations.env
2025-08-19T20:09:01.7688565Z 
2025-08-19T20:09:01.7688683Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-19T20:09:01.7688885Z 
2025-08-19T20:09:01.7688991Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-19T20:09:01.7689182Z 
2025-08-19T20:09:01.7689289Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-19T20:09:01.7689479Z 
2025-08-19T20:09:01.7689577Z # api.migrations.versions.0004\_fee\_cron
2025-08-19T20:09:01.7689758Z 
2025-08-19T20:09:01.7689907Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-19T20:09:01.7690148Z 
2025-08-19T20:09:01.7690282Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-19T20:09:01.7690499Z 
2025-08-19T20:09:01.7690623Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-19T20:09:01.7690821Z 
2025-08-19T20:09:01.7690926Z # api.migrations.versions.0003\_vendor\_prices
2025-08-19T20:09:01.7691338Z 
2025-08-19T20:09:01.7691474Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-19T20:09:01.7691676Z 
2025-08-19T20:09:01.7691782Z # api.migrations.versions.0024\_create\_buybox
2025-08-19T20:09:01.7691968Z 
2025-08-19T20:09:01.7692092Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-19T20:09:01.7692297Z 
2025-08-19T20:09:01.7692411Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-19T20:09:01.7692601Z 
2025-08-19T20:09:01.7692719Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-19T20:09:01.7693092Z 
2025-08-19T20:09:01.7693203Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-19T20:09:01.7693480Z 
2025-08-19T20:09:01.7693612Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-19T20:09:01.7693811Z 
2025-08-19T20:09:01.7693917Z # api.migrations.versions.0020\_unified\_schema
2025-08-19T20:09:01.7694101Z 
2025-08-19T20:09:01.7694239Z <a id="api.migrations.versions.0025_pr4_indexes_loadlog"></a>
2025-08-19T20:09:01.7694457Z 
2025-08-19T20:09:01.7694583Z # api.migrations.versions.0025\_pr4\_indexes\_loadlog
2025-08-19T20:09:01.7694778Z 
2025-08-19T20:09:01.7694902Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-19T20:09:01.7695099Z 
2025-08-19T20:09:01.7695211Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-19T20:09:01.7695396Z 
2025-08-19T20:09:01.7695529Z <a id="api.migrations.versions.0026_amazon_new_reports"></a>
2025-08-19T20:09:01.7695747Z 
2025-08-19T20:09:01.7695863Z # api.migrations.versions.0026\_amazon\_new\_reports
2025-08-19T20:09:01.7696191Z 
2025-08-19T20:09:01.7696306Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-19T20:09:01.7696491Z 
2025-08-19T20:09:01.7696584Z # api.migrations.versions.0001\_baseline
2025-08-19T20:09:01.7696760Z 
2025-08-19T20:09:01.7696853Z <a id="api.migrations.versions"></a>
2025-08-19T20:09:01.7697011Z 
2025-08-19T20:09:01.7697090Z # api.migrations.versions
2025-08-19T20:09:01.7697227Z 
2025-08-19T20:09:01.7697304Z <a id="api.migrations"></a>
2025-08-19T20:09:01.7697435Z 
2025-08-19T20:09:01.7697508Z # api.migrations
2025-08-19T20:09:01.7697638Z 
2025-08-19T20:09:01.7697704Z <a id="api.db"></a>
2025-08-19T20:09:01.7697809Z 
2025-08-19T20:09:01.7697877Z # api.db
2025-08-19T20:09:01.7697963Z 
2025-08-19T20:09:01.7698044Z <a id="api.routes.score"></a>
2025-08-19T20:09:01.7698188Z 
2025-08-19T20:09:01.7698260Z # api.routes.score
2025-08-19T20:09:01.7698366Z 
2025-08-19T20:09:01.7698442Z <a id="api.routes.stats"></a>
2025-08-19T20:09:01.7698579Z 
2025-08-19T20:09:01.7698646Z # api.routes.stats
2025-08-19T20:09:01.7698761Z 
2025-08-19T20:09:01.7698841Z <a id="api.routes.roi"></a>
2025-08-19T20:09:01.7698970Z 
2025-08-19T20:09:01.7699036Z # api.routes.roi
2025-08-19T20:09:01.7699142Z 
2025-08-19T20:09:01.7699222Z <a id="api.routes.health"></a>
2025-08-19T20:09:01.7699359Z 
2025-08-19T20:09:01.7699427Z # api.routes.health
2025-08-19T20:09:01.7699540Z 
2025-08-19T20:09:01.7699630Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-19T20:09:01.7699794Z 
2025-08-19T20:09:01.7699863Z #### MAX\_SKEW
2025-08-19T20:09:01.7699958Z 
2025-08-19T20:09:01.7700021Z seconds
2025-08-19T20:09:01.7700110Z 
2025-08-19T20:09:01.7700200Z <a id="api.routes.health.health"></a>
2025-08-19T20:09:01.7700359Z 
2025-08-19T20:09:01.7700422Z #### health
2025-08-19T20:09:01.7700518Z 
2025-08-19T20:09:01.7700581Z ```python
2025-08-19T20:09:01.7700781Z @router.get("/health", include_in_schema=False)
2025-08-19T20:09:01.7701302Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-19T20:09:01.7701643Z ```
2025-08-19T20:09:01.7701735Z 
2025-08-19T20:09:01.7701847Z Return 200 when DB reachable and clocks are in sync.
2025-08-19T20:09:01.7702044Z 
2025-08-19T20:09:01.7702132Z <a id="api.routes.repository"></a>
2025-08-19T20:09:01.7702287Z 
2025-08-19T20:09:01.7702364Z # api.routes.repository
2025-08-19T20:09:01.7702491Z 
2025-08-19T20:09:01.7702562Z <a id="api.routes"></a>
2025-08-19T20:09:01.7702677Z 
2025-08-19T20:09:01.7702745Z # api.routes
2025-08-19T20:09:01.7702841Z 
2025-08-19T20:09:01.7702921Z <a id="api.models.fee"></a>
2025-08-19T20:09:01.7703054Z 
2025-08-19T20:09:01.7703119Z # api.models.fee
2025-08-19T20:09:01.7703222Z 
2025-08-19T20:09:01.7703292Z <a id="api.models"></a>
2025-08-19T20:09:01.7703410Z 
2025-08-19T20:09:01.7703474Z # api.models
2025-08-19T20:09:01.7703565Z 
2025-08-19T20:09:01.7703649Z <a id="api.roi_repository"></a>
2025-08-19T20:09:01.7703789Z 
2025-08-19T20:09:01.7703860Z # api.roi\_repository
2025-08-19T20:09:01.7703973Z 
2025-08-19T20:09:01.7704048Z <a id="api.main"></a>
2025-08-19T20:09:01.7704286Z 
2025-08-19T20:09:01.7704349Z # api.main
2025-08-19T20:09:01.7704443Z 
2025-08-19T20:09:01.7704518Z <a id="api.main.ready"></a>
2025-08-19T20:09:01.7704646Z 
2025-08-19T20:09:01.7704706Z #### ready
2025-08-19T20:09:01.7704798Z 
2025-08-19T20:09:01.7704860Z ```python
2025-08-19T20:09:01.7705117Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-19T20:09:01.7705540Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-19T20:09:01.7705882Z                                                                       str]
2025-08-19T20:09:01.7706119Z ```
2025-08-19T20:09:01.7706201Z 
2025-08-19T20:09:01.7706297Z Return 200 only when migrations are at head.
2025-08-19T20:09:01.7706480Z 
2025-08-19T20:09:01.7706552Z <a id="api.config"></a>
2025-08-19T20:09:01.7706667Z 
2025-08-19T20:09:01.7706737Z # api.config
2025-08-19T20:09:01.7706830Z 
2025-08-19T20:09:01.7706906Z <a id="api.security"></a>
2025-08-19T20:09:01.7707032Z 
2025-08-19T20:09:01.7707220Z # api.security
2025-08-19T20:09:01.7707318Z 
2025-08-19T20:09:01.7707383Z <a id="etl"></a>
2025-08-19T20:09:01.7707493Z 
2025-08-19T20:09:01.7707554Z # etl
2025-08-19T20:09:01.7707640Z 
2025-08-19T20:09:01.7707727Z <a id="etl.fba_fee_ingestor"></a>
2025-08-19T20:09:01.7707875Z 
2025-08-19T20:09:01.7707947Z # etl.fba\_fee\_ingestor
2025-08-19T20:09:01.7708072Z 
2025-08-19T20:09:01.7708157Z <a id="etl.sp_fees_ingestor"></a>
2025-08-19T20:09:01.7708299Z 
2025-08-19T20:09:01.7708373Z # etl.sp\_fees\_ingestor
2025-08-19T20:09:01.7708497Z 
2025-08-19T20:09:01.7708575Z <a id="etl.keepa_ingestor"></a>
2025-08-19T20:09:01.7708714Z 
2025-08-19T20:09:01.7708784Z # etl.keepa\_ingestor
2025-08-19T20:09:01.7708906Z 
2025-08-19T20:09:01.7708974Z <a id="etl.db"></a>
2025-08-19T20:09:01.7709084Z 
2025-08-19T20:09:01.7709153Z # etl.db
2025-08-19T20:09:01.7709241Z 
2025-08-19T20:09:01.7709324Z <a id="etl.dialects.schemas"></a>
2025-08-19T20:09:01.7709472Z 
2025-08-19T20:09:01.7709546Z # etl.dialects.schemas
2025-08-19T20:09:01.7709673Z 
2025-08-19T20:09:01.7709778Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-19T20:09:01.7709968Z 
2025-08-19T20:09:01.7710054Z # etl.dialects.amazon\_reimbursements
2025-08-19T20:09:01.7710211Z 
2025-08-19T20:09:01.7710311Z <a id="etl.dialects.amazon_ads_sp_cost"></a>
2025-08-19T20:09:01.7710478Z 
2025-08-19T20:09:01.7710717Z # etl.dialects.amazon\_ads\_sp\_cost
2025-08-19T20:09:01.7710992Z 
2025-08-19T20:09:01.7711187Z <a id="etl.dialects.test_generic"></a>
2025-08-19T20:09:01.7711346Z 
2025-08-19T20:09:01.7711422Z # etl.dialects.test\_generic
2025-08-19T20:09:01.7711562Z 
2025-08-19T20:09:01.7711648Z <a id="etl.dialects.amazon_returns"></a>
2025-08-19T20:09:01.7711811Z 
2025-08-19T20:09:01.7711896Z # etl.dialects.amazon\_returns
2025-08-19T20:09:01.7712034Z 
2025-08-19T20:09:01.7712128Z <a id="etl.dialects.amazon_fee_preview"></a>
2025-08-19T20:09:01.7712299Z 
2025-08-19T20:09:01.7712381Z # etl.dialects.amazon\_fee\_preview
2025-08-19T20:09:01.7712533Z 
2025-08-19T20:09:01.7712641Z <a id="etl.dialects.amazon_inventory_ledger"></a>
2025-08-19T20:09:01.7712836Z 
2025-08-19T20:09:01.7712922Z # etl.dialects.amazon\_inventory\_ledger
2025-08-19T20:09:01.7713083Z 
2025-08-19T20:09:01.7713182Z <a id="etl.dialects.amazon_settlements"></a>
2025-08-19T20:09:01.7713348Z 
2025-08-19T20:09:01.7713432Z # etl.dialects.amazon\_settlements
2025-08-19T20:09:01.7713586Z 
2025-08-19T20:09:01.7713660Z <a id="etl.dialects"></a>
2025-08-19T20:09:01.7713784Z 
2025-08-19T20:09:01.7713848Z # etl.dialects
2025-08-19T20:09:01.7713952Z 
2025-08-19T20:09:01.7714019Z <a id="ingest"></a>
2025-08-19T20:09:01.7714124Z 
2025-08-19T20:09:01.7714191Z # ingest
2025-08-19T20:09:01.7714278Z 
2025-08-19T20:09:01.7714359Z <a id="ingest.maintenance"></a>
2025-08-19T20:09:01.7714502Z 
2025-08-19T20:09:01.7714581Z # ingest.maintenance
2025-08-19T20:09:01.7714697Z 
2025-08-19T20:09:01.7714775Z <a id="ingest.copy_loader"></a>
2025-08-19T20:09:01.7714917Z 
2025-08-19T20:09:01.7714987Z # ingest.copy\_loader
2025-08-19T20:09:01.7715107Z 
2025-08-19T20:09:01.7715338Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-19T20:09:01.7715519Z 
2025-08-19T20:09:01.7715592Z #### copy\_df\_via\_temp
2025-08-19T20:09:01.7715716Z 
2025-08-19T20:09:01.7715785Z ```python
2025-08-19T20:09:01.7715953Z def copy_df_via_temp(engine: Engine,
2025-08-19T20:09:01.7716191Z                      df: pd.DataFrame,
2025-08-19T20:09:01.7716424Z                      target_table: str,
2025-08-19T20:09:01.7716645Z                      *,
2025-08-19T20:09:01.7716854Z                      target_schema: Optional[str] = None,
2025-08-19T20:09:01.7717119Z                      columns: Sequence[str],
2025-08-19T20:09:01.7717393Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-19T20:09:01.7717670Z                      analyze_after: bool = False,
2025-08-19T20:09:01.7717933Z                      connection: Any | None = None) -> int
2025-08-19T20:09:01.7718163Z ```
2025-08-19T20:09:01.7718252Z 
2025-08-19T20:09:01.7718405Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-19T20:09:01.7718752Z 
2025-08-19T20:09:01.7718843Z <a id="ingest.tests.test_smoke"></a>
2025-08-19T20:09:01.7719003Z 
2025-08-19T20:09:01.7719084Z # ingest.tests.test\_smoke
2025-08-19T20:09:01.7719217Z 
2025-08-19T20:09:01.7719300Z <a id="ingest.tests"></a>
2025-08-19T20:09:01.7719423Z 
2025-08-19T20:09:01.7719490Z # ingest.tests
2025-08-19T20:09:01.7719602Z 
2025-08-19T20:09:01.7719686Z <a id="ingest.upload_router"></a>
2025-08-19T20:09:01.7719833Z 
2025-08-19T20:09:01.7719907Z # ingest.upload\_router
2025-08-19T20:09:01.7720033Z 
2025-08-19T20:09:01.7720113Z <a id="ingest.email_watcher"></a>
2025-08-19T20:09:01.7720255Z 
2025-08-19T20:09:01.7720333Z # ingest.email\_watcher
2025-08-19T20:09:01.7720451Z 
2025-08-19T20:09:01.7720541Z <a id="ingest.email_watcher.main"></a>
2025-08-19T20:09:01.7720706Z 
2025-08-19T20:09:01.7720769Z #### main
2025-08-19T20:09:01.7720857Z 
2025-08-19T20:09:01.7720921Z ```python
2025-08-19T20:09:01.7721207Z def main() -> dict[str, str]
2025-08-19T20:09:01.7721530Z ```
2025-08-19T20:09:01.7721623Z 
2025-08-19T20:09:01.7721765Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-19T20:09:01.7721986Z 
2025-08-19T20:09:01.7722117Z Returns {"status": "success"} when processing completes.
2025-08-19T20:09:01.7722323Z 
2025-08-19T20:09:01.7722397Z <a id="ingest.tasks"></a>
2025-08-19T20:09:01.7722524Z 
2025-08-19T20:09:01.7722587Z # ingest.tasks
2025-08-19T20:09:01.7722685Z 
2025-08-19T20:09:01.7722780Z <a id="ingest.tasks.task_import_file"></a>
2025-08-19T20:09:01.7722953Z 
2025-08-19T20:09:01.7723024Z #### task\_import\_file
2025-08-19T20:09:01.7723137Z 
2025-08-19T20:09:01.7723204Z ```python
2025-08-19T20:09:01.7723407Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-19T20:09:01.7723696Z def task_import_file(self: Any,
2025-08-19T20:09:01.7723907Z                      uri: str,
2025-08-19T20:09:01.7724127Z                      report_type: str | None = None,
2025-08-19T20:09:01.7724389Z                      force: bool = False) -> dict[str, Any]
2025-08-19T20:09:01.7724636Z ```
2025-08-19T20:09:01.7724719Z 
2025-08-19T20:09:01.7724846Z Import a file into Postgres using existing ETL pipeline.
2025-08-19T20:09:01.7725049Z 
2025-08-19T20:09:01.7725136Z <a id="ingest.celery_app"></a>
2025-08-19T20:09:01.7725274Z 
2025-08-19T20:09:01.7725346Z # ingest.celery\_app
2025-08-19T20:09:01.7725465Z 
2025-08-19T20:09:01.7725548Z <a id="ingest.ingest_router"></a>
2025-08-19T20:09:01.7725691Z 
2025-08-19T20:09:01.7725762Z # ingest.ingest\_router
2025-08-19T20:09:01.7725883Z 
2025-08-19T20:09:01.7725958Z <a id="logistics_etl"></a>
2025-08-19T20:09:01.7726082Z 
2025-08-19T20:09:01.7726157Z # logistics\_etl
2025-08-19T20:09:01.7726260Z 
2025-08-19T20:09:01.7726336Z Daily logistics ETL job.
2025-08-19T20:09:01.7726462Z 
2025-08-19T20:09:01.7726542Z <a id="logistics_etl.__main__"></a>
2025-08-19T20:09:01.7726691Z 
2025-08-19T20:09:01.7726766Z # logistics\_etl.\_\_main\_\_
2025-08-19T20:09:01.7726909Z 
2025-08-19T20:09:01.7727116Z <a id="logistics_etl.dsn"></a>
2025-08-19T20:09:01.7727250Z 
2025-08-19T20:09:01.7727326Z # logistics\_etl.dsn
2025-08-19T20:09:01.7727434Z 
2025-08-19T20:09:01.7727548Z Local DSN builder to avoid cross-service dependency.
2025-08-19T20:09:01.7727747Z 
2025-08-19T20:09:01.7727835Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-19T20:09:01.7727997Z 
2025-08-19T20:09:01.7728061Z #### build\_dsn
2025-08-19T20:09:01.7728168Z 
2025-08-19T20:09:01.7728230Z ```python
2025-08-19T20:09:01.7728407Z def build_dsn(sync: bool = True) -> str
2025-08-19T20:09:01.7728623Z ```
2025-08-19T20:09:01.7728706Z 
2025-08-19T20:09:01.7728848Z Return a Postgres DSN assembled from environment variables.
2025-08-19T20:09:01.7729066Z 
2025-08-19T20:09:01.7729211Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-19T20:09:01.7729600Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-19T20:09:01.7729934Z error when any required variable is missing.
2025-08-19T20:09:01.7730119Z 
2025-08-19T20:09:01.7730323Z <a id="logistics_etl.tests.conftest"></a>
2025-08-19T20:09:01.7730492Z 
2025-08-19T20:09:01.7730581Z # logistics\_etl.tests.conftest
2025-08-19T20:09:01.7730722Z 
2025-08-19T20:09:01.7730823Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-19T20:09:01.7731011Z 
2025-08-19T20:09:01.7731316Z # logistics\_etl.tests.test\_repository
2025-08-19T20:09:01.7731486Z 
2025-08-19T20:09:01.7731576Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-19T20:09:01.7731750Z 
2025-08-19T20:09:01.7731834Z # logistics\_etl.tests.test\_cron
2025-08-19T20:09:01.7731982Z 
2025-08-19T20:09:01.7732084Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-19T20:09:01.7732257Z 
2025-08-19T20:09:01.7732340Z # logistics\_etl.tests.test\_imports
2025-08-19T20:09:01.7732499Z 
2025-08-19T20:09:01.7732590Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-19T20:09:01.7732758Z 
2025-08-19T20:09:01.7732842Z # logistics\_etl.tests.test\_smoke
2025-08-19T20:09:01.7732998Z 
2025-08-19T20:09:01.7733091Z <a id="logistics_etl.tests.test_client"></a>
2025-08-19T20:09:01.7733270Z 
2025-08-19T20:09:01.7733359Z # logistics\_etl.tests.test\_client
2025-08-19T20:09:01.7733509Z 
2025-08-19T20:09:01.7733589Z <a id="logistics_etl.tests"></a>
2025-08-19T20:09:01.7733738Z 
2025-08-19T20:09:01.7733809Z # logistics\_etl.tests
2025-08-19T20:09:01.7733926Z 
2025-08-19T20:09:01.7734007Z <a id="logistics_etl.flow"></a>
2025-08-19T20:09:01.7734149Z 
2025-08-19T20:09:01.7734222Z # logistics\_etl.flow
2025-08-19T20:09:01.7734335Z 
2025-08-19T20:09:01.7734420Z <a id="logistics_etl.client"></a>
2025-08-19T20:09:01.7734563Z 
2025-08-19T20:09:01.7734634Z # logistics\_etl.client
2025-08-19T20:09:01.7734756Z 
2025-08-19T20:09:01.7734830Z <a id="logistics_etl.cron"></a>
2025-08-19T20:09:01.7734964Z 
2025-08-19T20:09:01.7735032Z # logistics\_etl.cron
2025-08-19T20:09:01.7735149Z 
2025-08-19T20:09:01.7735224Z <a id="logistics_etl.db"></a>
2025-08-19T20:09:01.7735359Z 
2025-08-19T20:09:01.7735431Z # logistics\_etl.db
2025-08-19T20:09:01.7735541Z 
2025-08-19T20:09:01.7735634Z <a id="logistics_etl.repository"></a>
2025-08-19T20:09:01.7735794Z 
2025-08-19T20:09:01.7812198Z # logistics\_etl.repository
2025-08-19T20:09:01.7812549Z 
2025-08-19T20:09:01.7812718Z <a id="alert_bot"></a>
2025-08-19T20:09:01.7812974Z 
2025-08-19T20:09:01.7813110Z # alert\_bot
2025-08-19T20:09:01.7813329Z 
2025-08-19T20:09:01.7813506Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-19T20:09:01.7813862Z 
2025-08-19T20:09:01.7814028Z # alert\_bot.tests.test\_smoke
2025-08-19T20:09:01.7814334Z 
2025-08-19T20:09:01.7814492Z <a id="alert_bot.tests"></a>
2025-08-19T20:09:01.7814775Z 
2025-08-19T20:09:01.7814919Z # alert\_bot.tests
2025-08-19T20:09:01.7815139Z 
2025-08-19T20:09:01.7815329Z <a id="alert_bot.alert_bot"></a>
2025-08-19T20:09:01.7815633Z 
2025-08-19T20:09:01.7815790Z # alert\_bot.alert\_bot
2025-08-19T20:09:01.7816039Z 
2025-08-19T20:09:01.7816195Z <a id="alert_bot.rules"></a>
2025-08-19T20:09:01.7816484Z 
2025-08-19T20:09:01.7816623Z # alert\_bot.rules
2025-08-19T20:09:01.7817089Z 
2025-08-19T20:09:01.7817228Z <a id="common"></a>
2025-08-19T20:09:01.7817461Z 
2025-08-19T20:09:01.7817590Z # common
2025-08-19T20:09:01.7817774Z 
2025-08-19T20:09:01.7817930Z <a id="common.dsn"></a>
2025-08-19T20:09:01.7818178Z 
2025-08-19T20:09:01.7818311Z # common.dsn
2025-08-19T20:09:01.7818519Z 
2025-08-19T20:09:01.7818688Z <a id="common.dsn.build_dsn"></a>
2025-08-19T20:09:01.7819006Z 
2025-08-19T20:09:01.7819146Z #### build\_dsn
2025-08-19T20:09:01.7819381Z 
2025-08-19T20:09:01.7819476Z ```python
2025-08-19T20:09:01.7819710Z def build_dsn(sync: bool = True) -> str
2025-08-19T20:09:01.7819982Z ```
2025-08-19T20:09:01.7820086Z 
2025-08-19T20:09:01.7820253Z Return a Postgres DSN, validating required variables.
2025-08-19T20:09:01.7820510Z 
2025-08-19T20:09:01.7820741Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-19T20:09:01.7821660Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-19T20:09:01.7822182Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-19T20:09:01.7822742Z missing.
2025-08-19T20:09:01.7822851Z 
2025-08-19T20:09:01.7822963Z <a id="common.models_vendor"></a>
2025-08-19T20:09:01.7823146Z 
2025-08-19T20:09:01.7823236Z # common.models\_vendor
2025-08-19T20:09:01.7823392Z 
2025-08-19T20:09:01.7823503Z <a id="common.models_vendor.Vendor"></a>
2025-08-19T20:09:01.7823710Z 
2025-08-19T20:09:01.7823793Z ## Vendor Objects
2025-08-19T20:09:01.7823927Z 
2025-08-19T20:09:01.7824004Z ```python
2025-08-19T20:09:01.7824193Z class Vendor(Base)
2025-08-19T20:09:01.7824399Z ```
2025-08-19T20:09:01.7824503Z 
2025-08-19T20:09:01.7824608Z Vendor of inventory items.
2025-08-19T20:09:01.7824769Z 
2025-08-19T20:09:01.7824897Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-19T20:09:01.7825124Z 
2025-08-19T20:09:01.7825215Z ## VendorPrice Objects
2025-08-19T20:09:01.7825362Z 
2025-08-19T20:09:01.7825437Z ```python
2025-08-19T20:09:01.7825635Z class VendorPrice(Base)
2025-08-19T20:09:01.7825848Z ```
2025-08-19T20:09:01.7825967Z 
2025-08-19T20:09:01.7826091Z Association table linking vendors to pricing.
2025-08-19T20:09:01.7826316Z 
2025-08-19T20:09:01.7826414Z <a id="common.db_url"></a>
2025-08-19T20:09:01.7826570Z 
2025-08-19T20:09:01.7826651Z # common.db\_url
2025-08-19T20:09:01.7826787Z 
2025-08-19T20:09:01.7826888Z <a id="common.db_url.build_url"></a>
2025-08-19T20:09:01.7827080Z 
2025-08-19T20:09:01.7827157Z #### build\_url
2025-08-19T20:09:01.7827287Z 
2025-08-19T20:09:01.7827362Z ```python
2025-08-19T20:09:01.7827581Z def build_url(async_: bool = True) -> str
2025-08-19T20:09:01.7827856Z ```
2025-08-19T20:09:01.7827957Z 
2025-08-19T20:09:01.7828084Z Return Postgres DSN from env or PG_* parts.
2025-08-19T20:09:01.7828295Z 
2025-08-19T20:09:01.7828392Z <a id="common.keepa"></a>
2025-08-19T20:09:01.7828557Z 
2025-08-19T20:09:01.7828640Z # common.keepa
2025-08-19T20:09:01.7828766Z 
2025-08-19T20:09:01.7828855Z <a id="common.llm"></a>
2025-08-19T20:09:01.7829006Z 
2025-08-19T20:09:01.7829087Z # common.llm
2025-08-19T20:09:01.7829222Z 
2025-08-19T20:09:01.7829319Z <a id="common.settings"></a>
2025-08-19T20:09:01.7829454Z 
2025-08-19T20:09:01.7829522Z # common.settings
2025-08-19T20:09:01.7829635Z 
2025-08-19T20:09:01.7829705Z <a id="common.db"></a>
2025-08-19T20:09:01.7829819Z 
2025-08-19T20:09:01.7829881Z # common.db
2025-08-19T20:09:01.7829985Z 
2025-08-19T20:09:01.7830076Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-19T20:09:01.7830247Z 
2025-08-19T20:09:01.7830329Z #### build\_sqlalchemy\_url
2025-08-19T20:09:01.7830458Z 
2025-08-19T20:09:01.7830520Z ```python
2025-08-19T20:09:01.7830752Z def build_sqlalchemy_url() -> str
2025-08-19T20:09:01.7830957Z ```
2025-08-19T20:09:01.7831176Z 
2025-08-19T20:09:01.7831269Z Return Postgres URL for SQLAlchemy engines.
2025-08-19T20:09:01.7831436Z 
2025-08-19T20:09:01.7831522Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-19T20:09:01.7831692Z 
2025-08-19T20:09:01.7831769Z #### build\_asyncpg\_dsn
2025-08-19T20:09:01.7831893Z 
2025-08-19T20:09:01.7831967Z ```python
2025-08-19T20:09:01.7832302Z def build_asyncpg_dsn() -> str
2025-08-19T20:09:01.7832507Z ```
2025-08-19T20:09:01.7832587Z 
2025-08-19T20:09:01.7832714Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-19T20:09:01.7832928Z 
2025-08-19T20:09:01.7833011Z <a id="common.db.refresh_mvs"></a>
2025-08-19T20:09:01.7833162Z 
2025-08-19T20:09:01.7833233Z #### refresh\_mvs
2025-08-19T20:09:01.7833336Z 
2025-08-19T20:09:01.7833397Z ```python
2025-08-19T20:09:01.7833600Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-19T20:09:01.7833849Z ```
2025-08-19T20:09:01.7833934Z 
2025-08-19T20:09:01.7834067Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-19T20:09:01.7834281Z 
2025-08-19T20:09:01.7834358Z <a id="common.config"></a>
2025-08-19T20:09:01.7834489Z 
2025-08-19T20:09:01.7834556Z # common.config
2025-08-19T20:09:01.7834658Z 
2025-08-19T20:09:01.7834736Z <a id="common.base"></a>
2025-08-19T20:09:01.7834856Z 
2025-08-19T20:09:01.7834920Z # common.base
2025-08-19T20:09:01.7835133Z 
2025-08-19T20:09:01.7835220Z <a id="common.base.Base"></a>
2025-08-19T20:09:01.7835359Z 
2025-08-19T20:09:01.7835422Z ## Base Objects
2025-08-19T20:09:01.7835526Z 
2025-08-19T20:09:01.7835588Z ```python
2025-08-19T20:09:01.7835750Z class Base(DeclarativeBase)
2025-08-19T20:09:01.7835943Z ```
2025-08-19T20:09:01.7836022Z 
2025-08-19T20:09:01.7836113Z Base class for SQLAlchemy models.
2025-08-19T20:09:01.7836258Z 
2025-08-19T20:09:01.7836329Z <a id="repricer"></a>
2025-08-19T20:09:01.7836449Z 
2025-08-19T20:09:01.7836512Z # repricer
2025-08-19T20:09:01.7836603Z 
2025-08-19T20:09:01.7836691Z <a id="repricer.app.schemas"></a>
2025-08-19T20:09:01.7836842Z 
2025-08-19T20:09:01.7836918Z # repricer.app.schemas
2025-08-19T20:09:01.7837036Z 
2025-08-19T20:09:01.7837126Z <a id="repricer.app.deps"></a>
2025-08-19T20:09:01.7837264Z 
2025-08-19T20:09:01.7837336Z # repricer.app.deps
2025-08-19T20:09:01.7837447Z 
2025-08-19T20:09:01.7837574Z Placeholder module for Keepa / SP-API clients.
2025-08-19T20:09:01.7837764Z 
2025-08-19T20:09:01.7837851Z <a id="repricer.app.logic"></a>
2025-08-19T20:09:01.7837998Z 
2025-08-19T20:09:01.7838072Z # repricer.app.logic
2025-08-19T20:09:01.7838187Z 
2025-08-19T20:09:01.7838290Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-19T20:09:01.7838462Z 
2025-08-19T20:09:01.7838526Z #### MIN\_MARGIN
2025-08-19T20:09:01.7838625Z 
2025-08-19T20:09:01.7838697Z 15 % ROI
2025-08-19T20:09:01.7838785Z 
2025-08-19T20:09:01.7838886Z <a id="repricer.app.logic.compute_price"></a>
2025-08-19T20:09:01.7839071Z 
2025-08-19T20:09:01.7839139Z #### compute\_price
2025-08-19T20:09:01.7839245Z 
2025-08-19T20:09:01.7839307Z ```python
2025-08-19T20:09:01.7839553Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-19T20:09:01.7839854Z ```
2025-08-19T20:09:01.7839936Z 
2025-08-19T20:09:01.7840041Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-19T20:09:01.7840323Z Replace with real competitive logic later.
2025-08-19T20:09:01.7840491Z 
2025-08-19T20:09:01.7840572Z <a id="repricer.app.main"></a>
2025-08-19T20:09:01.7840725Z 
2025-08-19T20:09:01.7840795Z # repricer.app.main
2025-08-19T20:09:01.7840902Z 
2025-08-19T20:09:01.7840984Z <a id="repricer.app"></a>
2025-08-19T20:09:01.7841231Z 
2025-08-19T20:09:01.7841302Z # repricer.app
2025-08-19T20:09:01.7841404Z 
2025-08-19T20:09:01.7841501Z <a id="repricer.tests.test_imports"></a>
2025-08-19T20:09:01.7841669Z 
2025-08-19T20:09:01.7841750Z # repricer.tests.test\_imports
2025-08-19T20:09:01.7841894Z 
2025-08-19T20:09:01.7841983Z <a id="repricer.tests.test_smoke"></a>
2025-08-19T20:09:01.7842143Z 
2025-08-19T20:09:01.7842225Z # repricer.tests.test\_smoke
2025-08-19T20:09:01.7842368Z 
2025-08-19T20:09:01.7842444Z <a id="repricer.tests"></a>
2025-08-19T20:09:01.7842578Z 
2025-08-19T20:09:01.7842654Z # repricer.tests
2025-08-19T20:09:01.7842758Z 
2025-08-19T20:09:01.7842823Z <a id="db"></a>
2025-08-19T20:09:01.7842929Z 
2025-08-19T20:09:01.7842988Z # db
2025-08-19T20:09:01.7843071Z 
2025-08-19T20:09:01.7843146Z <a id="db.utils.views"></a>
2025-08-19T20:09:01.7843420Z 
2025-08-19T20:09:01.7843487Z # db.utils.views
2025-08-19T20:09:01.7843588Z 
2025-08-19T20:09:01.7843686Z <a id="db.utils.views.replace_view"></a>
2025-08-19T20:09:01.7843852Z 
2025-08-19T20:09:01.7843919Z #### replace\_view
2025-08-19T20:09:01.7844026Z 
2025-08-19T20:09:01.7844093Z ```python
2025-08-19T20:09:01.7844282Z def replace_view(name: str, new_sql: str) -> None
2025-08-19T20:09:01.7844528Z ```
2025-08-19T20:09:01.7844613Z 
2025-08-19T20:09:01.7844701Z Drop and recreate a SQL view atomically.
2025-08-19T20:09:01.7844866Z 
2025-08-19T20:09:01.7844935Z <a id="db.utils"></a>
2025-08-19T20:09:01.7845048Z 
2025-08-19T20:09:01.7845113Z # db.utils
2025-08-19T20:09:01.7845204Z 
2025-08-19T20:09:01.7845278Z <a id="price_importer"></a>
2025-08-19T20:09:01.7845411Z 
2025-08-19T20:09:01.7845480Z # price\_importer
2025-08-19T20:09:01.7845585Z 
2025-08-19T20:09:01.7845686Z <a id="price_importer.services_common.dsn"></a>
2025-08-19T20:09:01.7845874Z 
2025-08-19T20:09:01.7845962Z # price\_importer.services\_common.dsn
2025-08-19T20:09:01.7846240Z 
2025-08-19T20:09:01.7846402Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-19T20:09:01.7846606Z 
2025-08-19T20:09:01.7846671Z #### build\_dsn
2025-08-19T20:09:01.7846776Z 
2025-08-19T20:09:01.7846837Z ```python
2025-08-19T20:09:01.7847005Z def build_dsn(sync: bool = True) -> str
2025-08-19T20:09:01.7847227Z ```
2025-08-19T20:09:01.7847308Z 
2025-08-19T20:09:01.7847374Z Return safe DSN.
2025-08-19T20:09:01.7847479Z 
2025-08-19T20:09:01.7847830Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-19T20:09:01.7848030Z 
2025-08-19T20:09:01.7848159Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-19T20:09:01.7848359Z 
2025-08-19T20:09:01.7848467Z # price\_importer.services\_common.models\_vendor
2025-08-19T20:09:01.7848656Z 
2025-08-19T20:09:01.7848760Z <a id="price_importer.services_common.db_url"></a>
2025-08-19T20:09:01.7848943Z 
2025-08-19T20:09:01.7849036Z # price\_importer.services\_common.db\_url
2025-08-19T20:09:01.7849225Z 
2025-08-19T20:09:01.7849356Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-19T20:09:01.7849565Z 
2025-08-19T20:09:01.7849637Z #### build\_url
2025-08-19T20:09:01.7849736Z 
2025-08-19T20:09:01.7849798Z ```python
2025-08-19T20:09:01.7849976Z def build_url(async_: bool = True) -> str
2025-08-19T20:09:01.7850195Z ```
2025-08-19T20:09:01.7850281Z 
2025-08-19T20:09:01.7850376Z Return Postgres DSN from env or PG_* parts.
2025-08-19T20:09:01.7850546Z 
2025-08-19T20:09:01.7850655Z <a id="price_importer.services_common.keepa"></a>
2025-08-19T20:09:01.7850840Z 
2025-08-19T20:09:01.7850929Z # price\_importer.services\_common.keepa
2025-08-19T20:09:01.7851305Z 
2025-08-19T20:09:01.7851422Z <a id="price_importer.services_common.llm"></a>
2025-08-19T20:09:01.7851602Z 
2025-08-19T20:09:01.7851690Z # price\_importer.services\_common.llm
2025-08-19T20:09:01.7851859Z 
2025-08-19T20:09:01.7851972Z <a id="price_importer.services_common.settings"></a>
2025-08-19T20:09:01.7852167Z 
2025-08-19T20:09:01.7852272Z # price\_importer.services\_common.settings
2025-08-19T20:09:01.7852438Z 
2025-08-19T20:09:01.7852536Z <a id="price_importer.services_common.db"></a>
2025-08-19T20:09:01.7852715Z 
2025-08-19T20:09:01.7852803Z # price\_importer.services\_common.db
2025-08-19T20:09:01.7852961Z 
2025-08-19T20:09:01.7853114Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-19T20:09:01.7853354Z 
2025-08-19T20:09:01.7853428Z #### build\_sqlalchemy\_url
2025-08-19T20:09:01.7853560Z 
2025-08-19T20:09:01.7853626Z ```python
2025-08-19T20:09:01.7853795Z def build_sqlalchemy_url() -> str
2025-08-19T20:09:01.7854004Z ```
2025-08-19T20:09:01.7854085Z 
2025-08-19T20:09:01.7854178Z Return Postgres URL for SQLAlchemy engines.
2025-08-19T20:09:01.7854350Z 
2025-08-19T20:09:01.7854490Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-19T20:09:01.7854710Z 
2025-08-19T20:09:01.7854784Z #### build\_asyncpg\_dsn
2025-08-19T20:09:01.7854914Z 
2025-08-19T20:09:01.7854980Z ```python
2025-08-19T20:09:01.7855316Z def build_asyncpg_dsn() -> str
2025-08-19T20:09:01.7855509Z ```
2025-08-19T20:09:01.7855590Z 
2025-08-19T20:09:01.7855722Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-19T20:09:01.7855929Z 
2025-08-19T20:09:01.7856055Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-19T20:09:01.7856266Z 
2025-08-19T20:09:01.7856333Z #### refresh\_mvs
2025-08-19T20:09:01.7856438Z 
2025-08-19T20:09:01.7856506Z ```python
2025-08-19T20:09:01.7856693Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-19T20:09:01.7856939Z ```
2025-08-19T20:09:01.7857020Z 
2025-08-19T20:09:01.7857152Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-19T20:09:01.7857366Z 
2025-08-19T20:09:01.7857459Z <a id="price_importer.services_common"></a>
2025-08-19T20:09:01.7857628Z 
2025-08-19T20:09:01.7857713Z # price\_importer.services\_common
2025-08-19T20:09:01.7857870Z 
2025-08-19T20:09:01.7857971Z <a id="price_importer.services_common.base"></a>
2025-08-19T20:09:01.7858271Z 
2025-08-19T20:09:01.7858364Z # price\_importer.services\_common.base
2025-08-19T20:09:01.7858525Z 
2025-08-19T20:09:01.7858612Z <a id="price_importer.normaliser"></a>
2025-08-19T20:09:01.7858776Z 
2025-08-19T20:09:01.7858859Z # price\_importer.normaliser
2025-08-19T20:09:01.7858995Z 
2025-08-19T20:09:01.7859096Z <a id="price_importer.common.models_vendor"></a>
2025-08-19T20:09:01.7859282Z 
2025-08-19T20:09:01.7859370Z # price\_importer.common.models\_vendor
2025-08-19T20:09:01.7859535Z 
2025-08-19T20:09:01.7859637Z <a id="price_importer.common.db_url"></a>
2025-08-19T20:09:01.7859808Z 
2025-08-19T20:09:01.7859893Z # price\_importer.common.db\_url
2025-08-19T20:09:01.7860046Z 
2025-08-19T20:09:01.7860151Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-19T20:09:01.7860337Z 
2025-08-19T20:09:01.7860400Z #### make\_dsn
2025-08-19T20:09:01.7860504Z 
2025-08-19T20:09:01.7860566Z ```python
2025-08-19T20:09:01.7860744Z def make_dsn(async_: bool = False) -> str
2025-08-19T20:09:01.7860979Z ```
2025-08-19T20:09:01.7861269Z 
2025-08-19T20:09:01.7861471Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-19T20:09:01.7861680Z 
2025-08-19T20:09:01.7861789Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-19T20:09:01.7861984Z 
2025-08-19T20:09:01.7862049Z #### build\_url
2025-08-19T20:09:01.7862151Z 
2025-08-19T20:09:01.7862217Z ```python
2025-08-19T20:09:01.7862389Z def build_url(async_: bool = False) -> str
2025-08-19T20:09:01.7862620Z ```
2025-08-19T20:09:01.7862703Z 
2025-08-19T20:09:01.7862824Z Return Postgres DSN built from environment variables.
2025-08-19T20:09:01.7863027Z 
2025-08-19T20:09:01.7863113Z <a id="price_importer.common"></a>
2025-08-19T20:09:01.7863267Z 
2025-08-19T20:09:01.7863345Z # price\_importer.common
2025-08-19T20:09:01.7863478Z 
2025-08-19T20:09:01.7863568Z <a id="price_importer.common.base"></a>
2025-08-19T20:09:01.7863738Z 
2025-08-19T20:09:01.7863830Z # price\_importer.common.base
2025-08-19T20:09:01.7863975Z 
2025-08-19T20:09:01.7864087Z <a id="price_importer.tests.conftest"></a>
2025-08-19T20:09:01.7864267Z 
2025-08-19T20:09:01.7864360Z # price\_importer.tests.conftest
2025-08-19T20:09:01.7864508Z 
2025-08-19T20:09:01.7864607Z <a id="price_importer.tests.test_reader"></a>
2025-08-19T20:09:01.7864790Z 
2025-08-19T20:09:01.7864877Z # price\_importer.tests.test\_reader
2025-08-19T20:09:01.7865038Z 
2025-08-19T20:09:01.7865144Z <a id="price_importer.tests.test_imports"></a>
2025-08-19T20:09:01.7865321Z 
2025-08-19T20:09:01.7865409Z # price\_importer.tests.test\_imports
2025-08-19T20:09:01.7865575Z 
2025-08-19T20:09:01.7865675Z <a id="price_importer.tests.test_smoke"></a>
2025-08-19T20:09:01.7865845Z 
2025-08-19T20:09:01.7865940Z # price\_importer.tests.test\_smoke
2025-08-19T20:09:01.7866104Z 
2025-08-19T20:09:01.7866208Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-19T20:09:01.7866415Z 
2025-08-19T20:09:01.7866515Z # price\_importer.tests.test\_normaliser
2025-08-19T20:09:01.7866683Z 
2025-08-19T20:09:01.7866768Z <a id="price_importer.tests"></a>
2025-08-19T20:09:01.7867062Z 
2025-08-19T20:09:01.7867140Z # price\_importer.tests
2025-08-19T20:09:01.7867264Z 
2025-08-19T20:09:01.7867350Z <a id="price_importer.reader"></a>
2025-08-19T20:09:01.7867509Z 
2025-08-19T20:09:01.7867584Z # price\_importer.reader
2025-08-19T20:09:01.7867711Z 
2025-08-19T20:09:01.7867808Z <a id="price_importer.repository"></a>
2025-08-19T20:09:01.7867968Z 
2025-08-19T20:09:01.7868050Z # price\_importer.repository
2025-08-19T20:09:01.7868194Z 
2025-08-19T20:09:01.7868279Z <a id="price_importer.import"></a>
2025-08-19T20:09:01.7868427Z 
2025-08-19T20:09:01.7868502Z # price\_importer.import
2025-08-19T20:09:01.7868631Z 
2025-08-19T20:09:01.7868701Z <a id="fees_h10"></a>
2025-08-19T20:09:01.7868814Z 
2025-08-19T20:09:01.7868882Z # fees\_h10
2025-08-19T20:09:01.7868973Z 
2025-08-19T20:09:01.7869048Z <a id="fees_h10.worker"></a>
2025-08-19T20:09:01.7869178Z 
2025-08-19T20:09:01.7869250Z # fees\_h10.worker
2025-08-19T20:09:01.7869354Z 
2025-08-19T20:09:01.7869569Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-19T20:09:01.7869756Z 
2025-08-19T20:09:01.7869828Z #### list\_active\_asins
2025-08-19T20:09:01.7869946Z 
2025-08-19T20:09:01.7870012Z ```python
2025-08-19T20:09:01.7870179Z def list_active_asins() -> list[str]
2025-08-19T20:09:01.7870394Z ```
2025-08-19T20:09:01.7870475Z 
2025-08-19T20:09:01.7870586Z Return known ASINs or an empty list if unavailable.
2025-08-19T20:09:01.7870784Z 
2025-08-19T20:09:01.7870867Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-19T20:09:01.7871201Z 
2025-08-19T20:09:01.7871327Z # fees\_h10.tests.test\_smoke
2025-08-19T20:09:01.7871477Z 
2025-08-19T20:09:01.7871552Z <a id="fees_h10.tests"></a>
2025-08-19T20:09:01.7871682Z 
2025-08-19T20:09:01.7871753Z # fees\_h10.tests
2025-08-19T20:09:01.7871857Z 
2025-08-19T20:09:01.7871932Z <a id="fees_h10.client"></a>
2025-08-19T20:09:01.7872062Z 
2025-08-19T20:09:01.7872135Z # fees\_h10.client
2025-08-19T20:09:01.7872238Z 
2025-08-19T20:09:01.7872319Z <a id="fees_h10.repository"></a>
2025-08-19T20:09:01.7872478Z 
2025-08-19T20:09:01.7872553Z # fees\_h10.repository
2025-08-19T20:09:01.7872670Z 
2025-08-19T20:09:01.7872777Z <a id="fees_h10.repository.upsert_fees_raw"></a>
2025-08-19T20:09:01.7872959Z 
2025-08-19T20:09:01.7873030Z #### upsert\_fees\_raw
2025-08-19T20:09:01.7873146Z 
2025-08-19T20:09:01.7873214Z ```python
2025-08-19T20:09:01.7873382Z def upsert_fees_raw(engine: Engine,
2025-08-19T20:09:01.7873626Z                     rows: Iterable[Mapping[str, Any]],
2025-08-19T20:09:01.7873863Z                     *,
2025-08-19T20:09:01.7874093Z                     testing: bool = False) -> Optional[Dict[str, int]]
2025-08-19T20:09:01.7874353Z ```
2025-08-19T20:09:01.7874442Z 
2025-08-19T20:09:01.7874519Z Idempotent upsert for fees.
2025-08-19T20:09:01.7874652Z 
2025-08-19T20:09:01.7874807Z TESTING-only: returns counts for inserted/updated/skipped rows.
2025-08-19T20:09:01.7875146Z Assumes logical key (asin, marketplace, fee_type).
2025-08-19T20:09:01.7875452Z Only updates when one of the mutable fields changes.
2025-08-19T20:09:01.7875655Z 
2025-08-19T20:09:01.7875727Z <a id="emailer"></a>
2025-08-19T20:09:01.7875843Z 
2025-08-19T20:09:01.7875905Z # emailer
2025-08-19T20:09:01.7875995Z 
2025-08-19T20:09:01.7876099Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-19T20:09:01.7876274Z 
2025-08-19T20:09:01.7876363Z # emailer.tests.test\_import\_emailer
2025-08-19T20:09:01.7876526Z 
2025-08-19T20:09:01.7876613Z <a id="emailer.tests.test_smoke"></a>
2025-08-19T20:09:01.7876767Z 
2025-08-19T20:09:01.7876849Z # emailer.tests.test\_smoke
2025-08-19T20:09:01.7876987Z 
2025-08-19T20:09:01.7877061Z <a id="emailer.tests"></a>
2025-08-19T20:09:01.7877189Z 
2025-08-19T20:09:01.7877262Z # emailer.tests
2025-08-19T20:09:01.7877365Z 
2025-08-19T20:09:01.7877450Z <a id="emailer.generate_body"></a>
2025-08-19T20:09:01.7877601Z 
2025-08-19T20:09:01.7877685Z # emailer.generate\_body
2025-08-19T20:09:01.7877811Z 
2025-08-19T20:09:01.7877882Z <a id="llm_server"></a>
2025-08-19T20:09:01.7878007Z 
2025-08-19T20:09:01.7878227Z # llm\_server
2025-08-19T20:09:01.7878326Z 
2025-08-19T20:09:01.7878412Z <a id="llm_server.app"></a>
2025-08-19T20:09:01.7878541Z 
2025-08-19T20:09:01.7878609Z # llm\_server.app
2025-08-19T20:09:01.7878713Z 
