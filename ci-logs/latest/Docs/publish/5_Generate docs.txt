2025-08-17T16:39:10.0585604Z ##[group]Run pydoc-markdown
2025-08-17T16:39:10.0585927Z [36;1mpydoc-markdown[0m
2025-08-17T16:39:10.0627091Z shell: /usr/bin/bash -e {0}
2025-08-17T16:39:10.0627354Z env:
2025-08-17T16:39:10.0627631Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T16:39:10.0628106Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-17T16:39:10.0628550Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T16:39:10.0628954Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T16:39:10.0629359Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T16:39:10.0629780Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-17T16:39:10.0630118Z ##[endgroup]
2025-08-17T16:39:10.4048101Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-17T16:39:10.4048680Z Unknown key(s) "{'output_directory'}" at:
2025-08-17T16:39:10.4049160Z In "pydoc-markdown.yml"
2025-08-17T16:39:10.4049513Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-17T16:39:10.4050111Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-17T16:39:10.4050718Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-17T16:39:10.4051125Z 
2025-08-17T16:39:10.6390714Z <a id="__init__"></a>
2025-08-17T16:39:10.6391346Z 
2025-08-17T16:39:10.6391494Z # \_\_init\_\_
2025-08-17T16:39:10.6391729Z 
2025-08-17T16:39:10.6391886Z <a id="api"></a>
2025-08-17T16:39:10.6392122Z 
2025-08-17T16:39:10.6392498Z # api
2025-08-17T16:39:10.6392686Z 
2025-08-17T16:39:10.6392857Z <a id="api.tests.test_llm"></a>
2025-08-17T16:39:10.6393169Z 
2025-08-17T16:39:10.6393332Z # api.tests.test\_llm
2025-08-17T16:39:10.6393600Z 
2025-08-17T16:39:10.6393785Z <a id="api.tests.test_imports"></a>
2025-08-17T16:39:10.6394113Z 
2025-08-17T16:39:10.6394273Z # api.tests.test\_imports
2025-08-17T16:39:10.6394569Z 
2025-08-17T16:39:10.6394749Z <a id="api.tests.test_entrypoint"></a>
2025-08-17T16:39:10.6395428Z 
2025-08-17T16:39:10.6395574Z # api.tests.test\_entrypoint
2025-08-17T16:39:10.6395847Z 
2025-08-17T16:39:10.6395995Z <a id="api.tests.test_health"></a>
2025-08-17T16:39:10.6396268Z 
2025-08-17T16:39:10.6396400Z # api.tests.test\_health
2025-08-17T16:39:10.6396625Z 
2025-08-17T16:39:10.6396771Z <a id="api.migrations.env"></a>
2025-08-17T16:39:10.6397025Z 
2025-08-17T16:39:10.6397161Z # api.migrations.env
2025-08-17T16:39:10.6397367Z 
2025-08-17T16:39:10.6397573Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-17T16:39:10.6397950Z 
2025-08-17T16:39:10.6398136Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-17T16:39:10.6398418Z 
2025-08-17T16:39:10.6398556Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-17T16:39:10.6398798Z 
2025-08-17T16:39:10.6398909Z # api.migrations.versions.0004\_fee\_cron
2025-08-17T16:39:10.6399113Z 
2025-08-17T16:39:10.6399299Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-17T16:39:10.6399583Z 
2025-08-17T16:39:10.6399748Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-17T16:39:10.6400018Z 
2025-08-17T16:39:10.6400166Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-17T16:39:10.6400411Z 
2025-08-17T16:39:10.6400540Z # api.migrations.versions.0003\_vendor\_prices
2025-08-17T16:39:10.6400758Z 
2025-08-17T16:39:10.6400895Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-17T16:39:10.6401128Z 
2025-08-17T16:39:10.6401252Z # api.migrations.versions.0024\_create\_buybox
2025-08-17T16:39:10.6401469Z 
2025-08-17T16:39:10.6401611Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-17T16:39:10.6401856Z 
2025-08-17T16:39:10.6401982Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-17T16:39:10.6402377Z 
2025-08-17T16:39:10.6402552Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-17T16:39:10.6402787Z 
2025-08-17T16:39:10.6402909Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-17T16:39:10.6403134Z 
2025-08-17T16:39:10.6403278Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-17T16:39:10.6403792Z 
2025-08-17T16:39:10.6403912Z # api.migrations.versions.0020\_unified\_schema
2025-08-17T16:39:10.6404134Z 
2025-08-17T16:39:10.6404275Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-17T16:39:10.6404512Z 
2025-08-17T16:39:10.6404645Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-17T16:39:10.6404868Z 
2025-08-17T16:39:10.6404993Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-17T16:39:10.6405206Z 
2025-08-17T16:39:10.6405294Z # api.migrations.versions.0001\_baseline
2025-08-17T16:39:10.6405473Z 
2025-08-17T16:39:10.6405564Z <a id="api.migrations.versions"></a>
2025-08-17T16:39:10.6405734Z 
2025-08-17T16:39:10.6405814Z # api.migrations.versions
2025-08-17T16:39:10.6405942Z 
2025-08-17T16:39:10.6406025Z <a id="api.migrations"></a>
2025-08-17T16:39:10.6406159Z 
2025-08-17T16:39:10.6406227Z # api.migrations
2025-08-17T16:39:10.6406338Z 
2025-08-17T16:39:10.6406404Z <a id="api.db"></a>
2025-08-17T16:39:10.6406515Z 
2025-08-17T16:39:10.6406583Z # api.db
2025-08-17T16:39:10.6406677Z 
2025-08-17T16:39:10.6406758Z <a id="api.routes.stats"></a>
2025-08-17T16:39:10.6406926Z 
2025-08-17T16:39:10.6407001Z # api.routes.stats
2025-08-17T16:39:10.6407110Z 
2025-08-17T16:39:10.6407196Z <a id="api.routes.stats.kpi"></a>
2025-08-17T16:39:10.6407348Z 
2025-08-17T16:39:10.6407420Z #### kpi
2025-08-17T16:39:10.6407505Z 
2025-08-17T16:39:10.6407567Z ```python
2025-08-17T16:39:10.6407737Z @router.get("/stats/kpi")
2025-08-17T16:39:10.6407970Z def kpi() -> List[Dict[str, int]]
2025-08-17T16:39:10.6408181Z ```
2025-08-17T16:39:10.6408264Z 
2025-08-17T16:39:10.6408346Z Return KPI metrics (mock).
2025-08-17T16:39:10.6408475Z 
2025-08-17T16:39:10.6408575Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-17T16:39:10.6408751Z 
2025-08-17T16:39:10.6408829Z #### roi\_by\_vendor
2025-08-17T16:39:10.6408938Z 
2025-08-17T16:39:10.6409001Z ```python
2025-08-17T16:39:10.6409171Z @router.get("/stats/roi_by_vendor")
2025-08-17T16:39:10.6409541Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-17T16:39:10.6409774Z ```
2025-08-17T16:39:10.6409854Z 
2025-08-17T16:39:10.6409938Z Return ROI percent by vendor.
2025-08-17T16:39:10.6410076Z 
2025-08-17T16:39:10.6410166Z <a id="api.routes.stats.roi_trend"></a>
2025-08-17T16:39:10.6410340Z 
2025-08-17T16:39:10.6410408Z #### roi\_trend
2025-08-17T16:39:10.6410504Z 
2025-08-17T16:39:10.6410566Z ```python
2025-08-17T16:39:10.6410728Z @router.get("/stats/roi_trend")
2025-08-17T16:39:10.6410952Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-17T16:39:10.6411184Z ```
2025-08-17T16:39:10.6411264Z 
2025-08-17T16:39:10.6411343Z Return 30-day ROI trend.
2025-08-17T16:39:10.6411465Z 
2025-08-17T16:39:10.6411540Z <a id="api.routes.roi"></a>
2025-08-17T16:39:10.6411672Z 
2025-08-17T16:39:10.6411747Z # api.routes.roi
2025-08-17T16:39:10.6411872Z 
2025-08-17T16:39:10.6411958Z <a id="api.routes.health"></a>
2025-08-17T16:39:10.6412155Z 
2025-08-17T16:39:10.6412399Z # api.routes.health
2025-08-17T16:39:10.6412556Z 
2025-08-17T16:39:10.6412661Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-17T16:39:10.6412825Z 
2025-08-17T16:39:10.6412888Z #### MAX\_SKEW
2025-08-17T16:39:10.6412989Z 
2025-08-17T16:39:10.6413051Z seconds
2025-08-17T16:39:10.6413132Z 
2025-08-17T16:39:10.6413225Z <a id="api.routes.health.health"></a>
2025-08-17T16:39:10.6413383Z 
2025-08-17T16:39:10.6413444Z #### health
2025-08-17T16:39:10.6413530Z 
2025-08-17T16:39:10.6413598Z ```python
2025-08-17T16:39:10.6413784Z @router.get("/health", include_in_schema=False)
2025-08-17T16:39:10.6414154Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-17T16:39:10.6414482Z ```
2025-08-17T16:39:10.6414567Z 
2025-08-17T16:39:10.6414685Z Return 200 when DB reachable and clocks are in sync.
2025-08-17T16:39:10.6414877Z 
2025-08-17T16:39:10.6414971Z <a id="api.routes.repository"></a>
2025-08-17T16:39:10.6415126Z 
2025-08-17T16:39:10.6415202Z # api.routes.repository
2025-08-17T16:39:10.6415323Z 
2025-08-17T16:39:10.6415405Z <a id="api.routes"></a>
2025-08-17T16:39:10.6415681Z 
2025-08-17T16:39:10.6415743Z # api.routes
2025-08-17T16:39:10.6415843Z 
2025-08-17T16:39:10.6415917Z <a id="api.models.fee"></a>
2025-08-17T16:39:10.6416046Z 
2025-08-17T16:39:10.6416119Z # api.models.fee
2025-08-17T16:39:10.6416224Z 
2025-08-17T16:39:10.6416295Z <a id="api.models"></a>
2025-08-17T16:39:10.6416409Z 
2025-08-17T16:39:10.6416477Z # api.models
2025-08-17T16:39:10.6416570Z 
2025-08-17T16:39:10.6416650Z <a id="api.roi_repository"></a>
2025-08-17T16:39:10.6416797Z 
2025-08-17T16:39:10.6416868Z # api.roi\_repository
2025-08-17T16:39:10.6416982Z 
2025-08-17T16:39:10.6417050Z <a id="api.main"></a>
2025-08-17T16:39:10.6417166Z 
2025-08-17T16:39:10.6417227Z # api.main
2025-08-17T16:39:10.6417319Z 
2025-08-17T16:39:10.6417398Z <a id="api.main.ready"></a>
2025-08-17T16:39:10.6417525Z 
2025-08-17T16:39:10.6417587Z #### ready
2025-08-17T16:39:10.6417677Z 
2025-08-17T16:39:10.6417738Z ```python
2025-08-17T16:39:10.6417988Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-17T16:39:10.6418430Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-17T16:39:10.6418777Z                                                                       str]
2025-08-17T16:39:10.6419009Z ```
2025-08-17T16:39:10.6419090Z 
2025-08-17T16:39:10.6419188Z Return 200 only when migrations are at head.
2025-08-17T16:39:10.6419361Z 
2025-08-17T16:39:10.6419432Z <a id="api.config"></a>
2025-08-17T16:39:10.6419549Z 
2025-08-17T16:39:10.6419630Z # api.config
2025-08-17T16:39:10.6419732Z 
2025-08-17T16:39:10.6419794Z <a id="etl"></a>
2025-08-17T16:39:10.6419893Z 
2025-08-17T16:39:10.6419964Z # etl
2025-08-17T16:39:10.6420049Z 
2025-08-17T16:39:10.6420127Z <a id="etl.fba_fee_ingestor"></a>
2025-08-17T16:39:10.6420278Z 
2025-08-17T16:39:10.6420361Z # etl.fba\_fee\_ingestor
2025-08-17T16:39:10.6420482Z 
2025-08-17T16:39:10.6420560Z <a id="etl.sp_fees_ingestor"></a>
2025-08-17T16:39:10.6420707Z 
2025-08-17T16:39:10.6420779Z # etl.sp\_fees\_ingestor
2025-08-17T16:39:10.6421014Z 
2025-08-17T16:39:10.6421100Z <a id="etl.keepa_ingestor"></a>
2025-08-17T16:39:10.6421235Z 
2025-08-17T16:39:10.6421304Z # etl.keepa\_ingestor
2025-08-17T16:39:10.6421418Z 
2025-08-17T16:39:10.6421491Z <a id="etl.db"></a>
2025-08-17T16:39:10.6421595Z 
2025-08-17T16:39:10.6421656Z # etl.db
2025-08-17T16:39:10.6421744Z 
2025-08-17T16:39:10.6421826Z <a id="etl.dialects.schemas"></a>
2025-08-17T16:39:10.6421968Z 
2025-08-17T16:39:10.6422043Z # etl.dialects.schemas
2025-08-17T16:39:10.6422165Z 
2025-08-17T16:39:10.6422488Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-17T16:39:10.6422676Z 
2025-08-17T16:39:10.6422770Z # etl.dialects.amazon\_reimbursements
2025-08-17T16:39:10.6422928Z 
2025-08-17T16:39:10.6423013Z <a id="etl.dialects.amazon_returns"></a>
2025-08-17T16:39:10.6423187Z 
2025-08-17T16:39:10.6423266Z # etl.dialects.amazon\_returns
2025-08-17T16:39:10.6423403Z 
2025-08-17T16:39:10.6423475Z <a id="etl.dialects"></a>
2025-08-17T16:39:10.6423604Z 
2025-08-17T16:39:10.6423679Z # etl.dialects
2025-08-17T16:39:10.6423783Z 
2025-08-17T16:39:10.6423854Z <a id="ingest"></a>
2025-08-17T16:39:10.6423954Z 
2025-08-17T16:39:10.6424012Z # ingest
2025-08-17T16:39:10.6424100Z 
2025-08-17T16:39:10.6424177Z <a id="ingest.copy_loader"></a>
2025-08-17T16:39:10.6424311Z 
2025-08-17T16:39:10.6424378Z # ingest.copy\_loader
2025-08-17T16:39:10.6424494Z 
2025-08-17T16:39:10.6424593Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-17T16:39:10.6424770Z 
2025-08-17T16:39:10.6424851Z #### copy\_df\_via\_temp
2025-08-17T16:39:10.6424970Z 
2025-08-17T16:39:10.6425032Z ```python
2025-08-17T16:39:10.6425208Z def copy_df_via_temp(engine: Engine,
2025-08-17T16:39:10.6425437Z                      df: pd.DataFrame,
2025-08-17T16:39:10.6425672Z                      target_table: str,
2025-08-17T16:39:10.6425883Z                      *,
2025-08-17T16:39:10.6426091Z                      target_schema: Optional[str] = None,
2025-08-17T16:39:10.6426346Z                      columns: Sequence[str],
2025-08-17T16:39:10.6426746Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-17T16:39:10.6427037Z                      analyze_after: bool = False) -> int
2025-08-17T16:39:10.6427269Z ```
2025-08-17T16:39:10.6427350Z 
2025-08-17T16:39:10.6427509Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-17T16:39:10.6427775Z 
2025-08-17T16:39:10.6427945Z The dataframe is first written to a TEMP table created ``LIKE`` the target
2025-08-17T16:39:10.6428379Z including defaults and generated columns.  Data is streamed via ``COPY`` and
2025-08-17T16:39:10.6428817Z then inserted into the final table.  If ``conflict_cols`` is provided an
2025-08-17T16:39:10.6429211Z ``INSERT ... ON CONFLICT DO UPDATE`` is issued for the non-conflicting
2025-08-17T16:39:10.6429542Z columns, otherwise rows are simply appended.
2025-08-17T16:39:10.6429714Z 
2025-08-17T16:39:10.6429814Z Returns the number of rows provided in ``df``.
2025-08-17T16:39:10.6429996Z 
2025-08-17T16:39:10.6430085Z <a id="ingest.tests.test_smoke"></a>
2025-08-17T16:39:10.6430244Z 
2025-08-17T16:39:10.6430322Z # ingest.tests.test\_smoke
2025-08-17T16:39:10.6430458Z 
2025-08-17T16:39:10.6430531Z <a id="ingest.tests"></a>
2025-08-17T16:39:10.6430654Z 
2025-08-17T16:39:10.6430723Z # ingest.tests
2025-08-17T16:39:10.6430819Z 
2025-08-17T16:39:10.6430901Z <a id="ingest.upload_router"></a>
2025-08-17T16:39:10.6431051Z 
2025-08-17T16:39:10.6431123Z # ingest.upload\_router
2025-08-17T16:39:10.6431241Z 
2025-08-17T16:39:10.6431319Z <a id="ingest.email_watcher"></a>
2025-08-17T16:39:10.6431470Z 
2025-08-17T16:39:10.6431541Z # ingest.email\_watcher
2025-08-17T16:39:10.6431653Z 
2025-08-17T16:39:10.6431745Z <a id="ingest.email_watcher.main"></a>
2025-08-17T16:39:10.6431905Z 
2025-08-17T16:39:10.6431968Z #### main
2025-08-17T16:39:10.6432060Z 
2025-08-17T16:39:10.6432123Z ```python
2025-08-17T16:39:10.6432507Z def main() -> dict[str, str]
2025-08-17T16:39:10.6432737Z ```
2025-08-17T16:39:10.6432818Z 
2025-08-17T16:39:10.6433098Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-17T16:39:10.6433332Z 
2025-08-17T16:39:10.6433455Z Returns {"status": "success"} when processing completes.
2025-08-17T16:39:10.6433655Z 
2025-08-17T16:39:10.6433737Z <a id="ingest.tasks"></a>
2025-08-17T16:39:10.6433860Z 
2025-08-17T16:39:10.6433922Z # ingest.tasks
2025-08-17T16:39:10.6434023Z 
2025-08-17T16:39:10.6434114Z <a id="ingest.tasks.task_import_file"></a>
2025-08-17T16:39:10.6434286Z 
2025-08-17T16:39:10.6434356Z #### task\_import\_file
2025-08-17T16:39:10.6434474Z 
2025-08-17T16:39:10.6434534Z ```python
2025-08-17T16:39:10.6434742Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-17T16:39:10.6435010Z def task_import_file(self,
2025-08-17T16:39:10.6435204Z                      uri: str,
2025-08-17T16:39:10.6435448Z                      report_type: Optional[str] = None) -> Dict[str, Any]
2025-08-17T16:39:10.6435712Z ```
2025-08-17T16:39:10.6435791Z 
2025-08-17T16:39:10.6435913Z Import a file into Postgres using existing ETL pipeline.
2025-08-17T16:39:10.6436130Z 
2025-08-17T16:39:10.6436207Z <a id="ingest.celery_app"></a>
2025-08-17T16:39:10.6436344Z 
2025-08-17T16:39:10.6436420Z # ingest.celery\_app
2025-08-17T16:39:10.6436532Z 
2025-08-17T16:39:10.6436609Z <a id="ingest.ingest_router"></a>
2025-08-17T16:39:10.6436755Z 
2025-08-17T16:39:10.6436826Z # ingest.ingest\_router
2025-08-17T16:39:10.6436940Z 
2025-08-17T16:39:10.6437012Z <a id="logistics_etl"></a>
2025-08-17T16:39:10.6437139Z 
2025-08-17T16:39:10.6437207Z # logistics\_etl
2025-08-17T16:39:10.6437308Z 
2025-08-17T16:39:10.6437388Z Daily logistics ETL job.
2025-08-17T16:39:10.6437505Z 
2025-08-17T16:39:10.6437581Z <a id="logistics_etl.__main__"></a>
2025-08-17T16:39:10.6437732Z 
2025-08-17T16:39:10.6437811Z # logistics\_etl.\_\_main\_\_
2025-08-17T16:39:10.6437943Z 
2025-08-17T16:39:10.6438016Z <a id="logistics_etl.dsn"></a>
2025-08-17T16:39:10.6438154Z 
2025-08-17T16:39:10.6438224Z # logistics\_etl.dsn
2025-08-17T16:39:10.6438331Z 
2025-08-17T16:39:10.6438457Z Local DSN builder to avoid cross-service dependency.
2025-08-17T16:39:10.6438784Z 
2025-08-17T16:39:10.6438869Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-17T16:39:10.6439028Z 
2025-08-17T16:39:10.6439098Z #### build\_dsn
2025-08-17T16:39:10.6439196Z 
2025-08-17T16:39:10.6439257Z ```python
2025-08-17T16:39:10.6439429Z def build_dsn(sync: bool = True) -> str
2025-08-17T16:39:10.6439682Z ```
2025-08-17T16:39:10.6439761Z 
2025-08-17T16:39:10.6439896Z Return a Postgres DSN assembled from environment variables.
2025-08-17T16:39:10.6440120Z 
2025-08-17T16:39:10.6440262Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-17T16:39:10.6440637Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-17T16:39:10.6440974Z error when any required variable is missing.
2025-08-17T16:39:10.6441146Z 
2025-08-17T16:39:10.6441243Z <a id="logistics_etl.tests.conftest"></a>
2025-08-17T16:39:10.6441415Z 
2025-08-17T16:39:10.6441498Z # logistics\_etl.tests.conftest
2025-08-17T16:39:10.6441653Z 
2025-08-17T16:39:10.6441762Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-17T16:39:10.6441944Z 
2025-08-17T16:39:10.6442029Z # logistics\_etl.tests.test\_repository
2025-08-17T16:39:10.6442195Z 
2025-08-17T16:39:10.6442436Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-17T16:39:10.6442601Z 
2025-08-17T16:39:10.6442686Z # logistics\_etl.tests.test\_cron
2025-08-17T16:39:10.6442853Z 
2025-08-17T16:39:10.6442952Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-17T16:39:10.6443124Z 
2025-08-17T16:39:10.6443206Z # logistics\_etl.tests.test\_imports
2025-08-17T16:39:10.6443366Z 
2025-08-17T16:39:10.6443453Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-17T16:39:10.6443619Z 
2025-08-17T16:39:10.6443708Z # logistics\_etl.tests.test\_smoke
2025-08-17T16:39:10.6443856Z 
2025-08-17T16:39:10.6443948Z <a id="logistics_etl.tests.test_client"></a>
2025-08-17T16:39:10.6444120Z 
2025-08-17T16:39:10.6444200Z # logistics\_etl.tests.test\_client
2025-08-17T16:39:10.6444347Z 
2025-08-17T16:39:10.6444561Z <a id="logistics_etl.tests"></a>
2025-08-17T16:39:10.6444749Z 
2025-08-17T16:39:10.6444819Z # logistics\_etl.tests
2025-08-17T16:39:10.6444934Z 
2025-08-17T16:39:10.6445015Z <a id="logistics_etl.flow"></a>
2025-08-17T16:39:10.6445148Z 
2025-08-17T16:39:10.6445215Z # logistics\_etl.flow
2025-08-17T16:39:10.6445327Z 
2025-08-17T16:39:10.6445412Z <a id="logistics_etl.client"></a>
2025-08-17T16:39:10.6445560Z 
2025-08-17T16:39:10.6445631Z # logistics\_etl.client
2025-08-17T16:39:10.6445756Z 
2025-08-17T16:39:10.6445830Z <a id="logistics_etl.cron"></a>
2025-08-17T16:39:10.6445965Z 
2025-08-17T16:39:10.6446043Z # logistics\_etl.cron
2025-08-17T16:39:10.6446153Z 
2025-08-17T16:39:10.6446231Z <a id="logistics_etl.db"></a>
2025-08-17T16:39:10.6446367Z 
2025-08-17T16:39:10.6446440Z # logistics\_etl.db
2025-08-17T16:39:10.6446545Z 
2025-08-17T16:39:10.6446630Z <a id="logistics_etl.repository"></a>
2025-08-17T16:39:10.6446794Z 
2025-08-17T16:39:10.6446868Z # logistics\_etl.repository
2025-08-17T16:39:10.6447005Z 
2025-08-17T16:39:10.6447082Z <a id="alert_bot"></a>
2025-08-17T16:39:10.6447193Z 
2025-08-17T16:39:10.6447255Z # alert\_bot
2025-08-17T16:39:10.6447344Z 
2025-08-17T16:39:10.6447435Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-17T16:39:10.6447592Z 
2025-08-17T16:39:10.6447669Z # alert\_bot.tests.test\_smoke
2025-08-17T16:39:10.6447810Z 
2025-08-17T16:39:10.6447887Z <a id="alert_bot.tests"></a>
2025-08-17T16:39:10.6448016Z 
2025-08-17T16:39:10.6448083Z # alert\_bot.tests
2025-08-17T16:39:10.6448193Z 
2025-08-17T16:39:10.6448269Z <a id="alert_bot.alert_bot"></a>
2025-08-17T16:39:10.6448408Z 
2025-08-17T16:39:10.6448484Z # alert\_bot.alert\_bot
2025-08-17T16:39:10.6448597Z 
2025-08-17T16:39:10.6448670Z <a id="alert_bot.rules"></a>
2025-08-17T16:39:10.6448803Z 
2025-08-17T16:39:10.6448866Z # alert\_bot.rules
2025-08-17T16:39:10.6448966Z 
2025-08-17T16:39:10.6449031Z <a id="common"></a>
2025-08-17T16:39:10.6449140Z 
2025-08-17T16:39:10.6449200Z # common
2025-08-17T16:39:10.6449288Z 
2025-08-17T16:39:10.6449373Z <a id="common.dsn"></a>
2025-08-17T16:39:10.6449605Z 
2025-08-17T16:39:10.6449666Z # common.dsn
2025-08-17T16:39:10.6449759Z 
2025-08-17T16:39:10.6449845Z <a id="common.dsn.build_dsn"></a>
2025-08-17T16:39:10.6449987Z 
2025-08-17T16:39:10.6450051Z #### build\_dsn
2025-08-17T16:39:10.6450156Z 
2025-08-17T16:39:10.6450216Z ```python
2025-08-17T16:39:10.6450380Z def build_dsn(sync: bool = True) -> str
2025-08-17T16:39:10.6450598Z ```
2025-08-17T16:39:10.6450678Z 
2025-08-17T16:39:10.6450801Z Return a Postgres DSN, validating required variables.
2025-08-17T16:39:10.6451000Z 
2025-08-17T16:39:10.6451181Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-17T16:39:10.6451612Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-17T16:39:10.6452017Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-17T16:39:10.6452531Z missing.
2025-08-17T16:39:10.6452621Z 
2025-08-17T16:39:10.6452704Z <a id="common.models_vendor"></a>
2025-08-17T16:39:10.6452862Z 
2025-08-17T16:39:10.6452933Z # common.models\_vendor
2025-08-17T16:39:10.6453047Z 
2025-08-17T16:39:10.6453139Z <a id="common.models_vendor.Vendor"></a>
2025-08-17T16:39:10.6453302Z 
2025-08-17T16:39:10.6453366Z ## Vendor Objects
2025-08-17T16:39:10.6453475Z 
2025-08-17T16:39:10.6453535Z ```python
2025-08-17T16:39:10.6453680Z class Vendor(Base)
2025-08-17T16:39:10.6453842Z ```
2025-08-17T16:39:10.6453921Z 
2025-08-17T16:39:10.6454003Z Vendor of inventory items.
2025-08-17T16:39:10.6454131Z 
2025-08-17T16:39:10.6454231Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-17T16:39:10.6454405Z 
2025-08-17T16:39:10.6454483Z ## VendorPrice Objects
2025-08-17T16:39:10.6454596Z 
2025-08-17T16:39:10.6454656Z ```python
2025-08-17T16:39:10.6454816Z class VendorPrice(Base)
2025-08-17T16:39:10.6454984Z ```
2025-08-17T16:39:10.6455068Z 
2025-08-17T16:39:10.6455170Z Association table linking vendors to pricing.
2025-08-17T16:39:10.6455346Z 
2025-08-17T16:39:10.6455428Z <a id="common.db_url"></a>
2025-08-17T16:39:10.6455682Z 
2025-08-17T16:39:10.6489400Z # common.db\_url
2025-08-17T16:39:10.6489603Z 
2025-08-17T16:39:10.6489746Z <a id="common.db_url.build_url"></a>
2025-08-17T16:39:10.6490010Z 
2025-08-17T16:39:10.6490116Z #### build\_url
2025-08-17T16:39:10.6490277Z 
2025-08-17T16:39:10.6490383Z ```python
2025-08-17T16:39:10.6490676Z def build_url(async_: bool = True) -> str
2025-08-17T16:39:10.6491030Z ```
2025-08-17T16:39:10.6491167Z 
2025-08-17T16:39:10.6491340Z Return Postgres DSN from env or PG_* parts.
2025-08-17T16:39:10.6491621Z 
2025-08-17T16:39:10.6491749Z <a id="common.keepa"></a>
2025-08-17T16:39:10.6491971Z 
2025-08-17T16:39:10.6492083Z # common.keepa
2025-08-17T16:39:10.6492430Z 
2025-08-17T16:39:10.6492571Z <a id="common.llm"></a>
2025-08-17T16:39:10.6492772Z 
2025-08-17T16:39:10.6492876Z # common.llm
2025-08-17T16:39:10.6493030Z 
2025-08-17T16:39:10.6493241Z <a id="common.settings"></a>
2025-08-17T16:39:10.6493479Z 
2025-08-17T16:39:10.6493593Z # common.settings
2025-08-17T16:39:10.6493792Z 
2025-08-17T16:39:10.6493924Z <a id="common.db"></a>
2025-08-17T16:39:10.6494117Z 
2025-08-17T16:39:10.6494230Z # common.db
2025-08-17T16:39:10.6494379Z 
2025-08-17T16:39:10.6494529Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-17T16:39:10.6494813Z 
2025-08-17T16:39:10.6494952Z #### build\_sqlalchemy\_url
2025-08-17T16:39:10.6495176Z 
2025-08-17T16:39:10.6495284Z ```python
2025-08-17T16:39:10.6495582Z def build_sqlalchemy_url() -> str
2025-08-17T16:39:10.6495825Z ```
2025-08-17T16:39:10.6495914Z 
2025-08-17T16:39:10.6496007Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T16:39:10.6496182Z 
2025-08-17T16:39:10.6496280Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-17T16:39:10.6496444Z 
2025-08-17T16:39:10.6496517Z #### build\_asyncpg\_dsn
2025-08-17T16:39:10.6496640Z 
2025-08-17T16:39:10.6496707Z ```python
2025-08-17T16:39:10.6496874Z def build_asyncpg_dsn() -> str
2025-08-17T16:39:10.6497073Z ```
2025-08-17T16:39:10.6497154Z 
2025-08-17T16:39:10.6497289Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T16:39:10.6497684Z 
2025-08-17T16:39:10.6497770Z <a id="common.db.refresh_mvs"></a>
2025-08-17T16:39:10.6497921Z 
2025-08-17T16:39:10.6497993Z #### refresh\_mvs
2025-08-17T16:39:10.6498096Z 
2025-08-17T16:39:10.6498157Z ```python
2025-08-17T16:39:10.6498356Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T16:39:10.6498600Z ```
2025-08-17T16:39:10.6498689Z 
2025-08-17T16:39:10.6498824Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T16:39:10.6499040Z 
2025-08-17T16:39:10.6499116Z <a id="common.config"></a>
2025-08-17T16:39:10.6499251Z 
2025-08-17T16:39:10.6499315Z # common.config
2025-08-17T16:39:10.6499419Z 
2025-08-17T16:39:10.6499500Z <a id="common.base"></a>
2025-08-17T16:39:10.6499623Z 
2025-08-17T16:39:10.6499685Z # common.base
2025-08-17T16:39:10.6499787Z 
2025-08-17T16:39:10.6499866Z <a id="common.base.Base"></a>
2025-08-17T16:39:10.6500002Z 
2025-08-17T16:39:10.6500064Z ## Base Objects
2025-08-17T16:39:10.6500176Z 
2025-08-17T16:39:10.6500235Z ```python
2025-08-17T16:39:10.6500406Z class Base(DeclarativeBase)
2025-08-17T16:39:10.6500595Z ```
2025-08-17T16:39:10.6500686Z 
2025-08-17T16:39:10.6500776Z Base class for SQLAlchemy models.
2025-08-17T16:39:10.6500927Z 
2025-08-17T16:39:10.6500996Z <a id="repricer"></a>
2025-08-17T16:39:10.6501117Z 
2025-08-17T16:39:10.6501180Z # repricer
2025-08-17T16:39:10.6501268Z 
2025-08-17T16:39:10.6501351Z <a id="repricer.app.schemas"></a>
2025-08-17T16:39:10.6501505Z 
2025-08-17T16:39:10.6501580Z # repricer.app.schemas
2025-08-17T16:39:10.6501698Z 
2025-08-17T16:39:10.6501788Z <a id="repricer.app.deps"></a>
2025-08-17T16:39:10.6501931Z 
2025-08-17T16:39:10.6502003Z # repricer.app.deps
2025-08-17T16:39:10.6502121Z 
2025-08-17T16:39:10.6502423Z Placeholder module for Keepa / SP-API clients.
2025-08-17T16:39:10.6502628Z 
2025-08-17T16:39:10.6502709Z <a id="repricer.app.logic"></a>
2025-08-17T16:39:10.6502859Z 
2025-08-17T16:39:10.6502936Z # repricer.app.logic
2025-08-17T16:39:10.6503178Z 
2025-08-17T16:39:10.6503280Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-17T16:39:10.6503456Z 
2025-08-17T16:39:10.6503519Z #### MIN\_MARGIN
2025-08-17T16:39:10.6503618Z 
2025-08-17T16:39:10.6503682Z 15 % ROI
2025-08-17T16:39:10.6503767Z 
2025-08-17T16:39:10.6503868Z <a id="repricer.app.logic.compute_price"></a>
2025-08-17T16:39:10.6504048Z 
2025-08-17T16:39:10.6504113Z #### compute\_price
2025-08-17T16:39:10.6504216Z 
2025-08-17T16:39:10.6504282Z ```python
2025-08-17T16:39:10.6504521Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-17T16:39:10.6504818Z ```
2025-08-17T16:39:10.6504899Z 
2025-08-17T16:39:10.6505004Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-17T16:39:10.6505283Z Replace with real competitive logic later.
2025-08-17T16:39:10.6505454Z 
2025-08-17T16:39:10.6505533Z <a id="repricer.app.main"></a>
2025-08-17T16:39:10.6505678Z 
2025-08-17T16:39:10.6505746Z # repricer.app.main
2025-08-17T16:39:10.6505854Z 
2025-08-17T16:39:10.6505934Z <a id="repricer.app"></a>
2025-08-17T16:39:10.6506073Z 
2025-08-17T16:39:10.6506143Z # repricer.app
2025-08-17T16:39:10.6506241Z 
2025-08-17T16:39:10.6506337Z <a id="repricer.tests.test_imports"></a>
2025-08-17T16:39:10.6506503Z 
2025-08-17T16:39:10.6506581Z # repricer.tests.test\_imports
2025-08-17T16:39:10.6506723Z 
2025-08-17T16:39:10.6506808Z <a id="repricer.tests.test_smoke"></a>
2025-08-17T16:39:10.6506966Z 
2025-08-17T16:39:10.6507054Z # repricer.tests.test\_smoke
2025-08-17T16:39:10.6507193Z 
2025-08-17T16:39:10.6507268Z <a id="repricer.tests"></a>
2025-08-17T16:39:10.6507398Z 
2025-08-17T16:39:10.6507471Z # repricer.tests
2025-08-17T16:39:10.6507574Z 
2025-08-17T16:39:10.6507637Z <a id="db"></a>
2025-08-17T16:39:10.6507741Z 
2025-08-17T16:39:10.6507800Z # db
2025-08-17T16:39:10.6507882Z 
2025-08-17T16:39:10.6507956Z <a id="db.utils.views"></a>
2025-08-17T16:39:10.6508091Z 
2025-08-17T16:39:10.6508157Z # db.utils.views
2025-08-17T16:39:10.6508257Z 
2025-08-17T16:39:10.6508354Z <a id="db.utils.views.replace_view"></a>
2025-08-17T16:39:10.6508751Z 
2025-08-17T16:39:10.6508819Z #### replace\_view
2025-08-17T16:39:10.6508931Z 
2025-08-17T16:39:10.6508992Z ```python
2025-08-17T16:39:10.6509273Z def replace_view(name: str, new_sql: str) -> None
2025-08-17T16:39:10.6509605Z ```
2025-08-17T16:39:10.6509688Z 
2025-08-17T16:39:10.6509782Z Drop and recreate a SQL view atomically.
2025-08-17T16:39:10.6509948Z 
2025-08-17T16:39:10.6510018Z <a id="db.utils"></a>
2025-08-17T16:39:10.6510132Z 
2025-08-17T16:39:10.6510199Z # db.utils
2025-08-17T16:39:10.6510286Z 
2025-08-17T16:39:10.6510361Z <a id="price_importer"></a>
2025-08-17T16:39:10.6510496Z 
2025-08-17T16:39:10.6510561Z # price\_importer
2025-08-17T16:39:10.6510665Z 
2025-08-17T16:39:10.6510764Z <a id="price_importer.services_common.dsn"></a>
2025-08-17T16:39:10.6510952Z 
2025-08-17T16:39:10.6511039Z # price\_importer.services\_common.dsn
2025-08-17T16:39:10.6511200Z 
2025-08-17T16:39:10.6511329Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-17T16:39:10.6511542Z 
2025-08-17T16:39:10.6511610Z #### build\_dsn
2025-08-17T16:39:10.6511713Z 
2025-08-17T16:39:10.6511774Z ```python
2025-08-17T16:39:10.6511943Z def build_dsn(sync: bool = True) -> str
2025-08-17T16:39:10.6512166Z ```
2025-08-17T16:39:10.6512498Z 
2025-08-17T16:39:10.6512594Z Return safe DSN.
2025-08-17T16:39:10.6512703Z 
2025-08-17T16:39:10.6513054Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-17T16:39:10.6513258Z 
2025-08-17T16:39:10.6513387Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-17T16:39:10.6513591Z 
2025-08-17T16:39:10.6513698Z # price\_importer.services\_common.models\_vendor
2025-08-17T16:39:10.6513890Z 
2025-08-17T16:39:10.6513992Z <a id="price_importer.services_common.db_url"></a>
2025-08-17T16:39:10.6514174Z 
2025-08-17T16:39:10.6514275Z # price\_importer.services\_common.db\_url
2025-08-17T16:39:10.6514446Z 
2025-08-17T16:39:10.6514577Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-17T16:39:10.6514788Z 
2025-08-17T16:39:10.6515057Z #### build\_url
2025-08-17T16:39:10.6515163Z 
2025-08-17T16:39:10.6515225Z ```python
2025-08-17T16:39:10.6515403Z def build_url(async_: bool = True) -> str
2025-08-17T16:39:10.6515620Z ```
2025-08-17T16:39:10.6515706Z 
2025-08-17T16:39:10.6515802Z Return Postgres DSN from env or PG_* parts.
2025-08-17T16:39:10.6515976Z 
2025-08-17T16:39:10.6516088Z <a id="price_importer.services_common.keepa"></a>
2025-08-17T16:39:10.6516274Z 
2025-08-17T16:39:10.6516367Z # price\_importer.services\_common.keepa
2025-08-17T16:39:10.6516535Z 
2025-08-17T16:39:10.6516632Z <a id="price_importer.services_common.llm"></a>
2025-08-17T16:39:10.6516811Z 
2025-08-17T16:39:10.6516897Z # price\_importer.services\_common.llm
2025-08-17T16:39:10.6517060Z 
2025-08-17T16:39:10.6517171Z <a id="price_importer.services_common.settings"></a>
2025-08-17T16:39:10.6517360Z 
2025-08-17T16:39:10.6517459Z # price\_importer.services\_common.settings
2025-08-17T16:39:10.6517627Z 
2025-08-17T16:39:10.6517723Z <a id="price_importer.services_common.db"></a>
2025-08-17T16:39:10.6517914Z 
2025-08-17T16:39:10.6517998Z # price\_importer.services\_common.db
2025-08-17T16:39:10.6518152Z 
2025-08-17T16:39:10.6518304Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-17T16:39:10.6518547Z 
2025-08-17T16:39:10.6518621Z #### build\_sqlalchemy\_url
2025-08-17T16:39:10.6518751Z 
2025-08-17T16:39:10.6518817Z ```python
2025-08-17T16:39:10.6518981Z def build_sqlalchemy_url() -> str
2025-08-17T16:39:10.6519190Z ```
2025-08-17T16:39:10.6519271Z 
2025-08-17T16:39:10.6519364Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T16:39:10.6519541Z 
2025-08-17T16:39:10.6519680Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-17T16:39:10.6519901Z 
2025-08-17T16:39:10.6519980Z #### build\_asyncpg\_dsn
2025-08-17T16:39:10.6520101Z 
2025-08-17T16:39:10.6520161Z ```python
2025-08-17T16:39:10.6520328Z def build_asyncpg_dsn() -> str
2025-08-17T16:39:10.6520519Z ```
2025-08-17T16:39:10.6520604Z 
2025-08-17T16:39:10.6520728Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T16:39:10.6521054Z 
2025-08-17T16:39:10.6521179Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-17T16:39:10.6521387Z 
2025-08-17T16:39:10.6521451Z #### refresh\_mvs
2025-08-17T16:39:10.6521553Z 
2025-08-17T16:39:10.6521619Z ```python
2025-08-17T16:39:10.6521807Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T16:39:10.6522058Z ```
2025-08-17T16:39:10.6522137Z 
2025-08-17T16:39:10.6522471Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T16:39:10.6522702Z 
2025-08-17T16:39:10.6522794Z <a id="price_importer.services_common"></a>
2025-08-17T16:39:10.6522964Z 
2025-08-17T16:39:10.6523055Z # price\_importer.services\_common
2025-08-17T16:39:10.6523209Z 
2025-08-17T16:39:10.6523309Z <a id="price_importer.services_common.base"></a>
2025-08-17T16:39:10.6523490Z 
2025-08-17T16:39:10.6523584Z # price\_importer.services\_common.base
2025-08-17T16:39:10.6523746Z 
2025-08-17T16:39:10.6523832Z <a id="price_importer.normaliser"></a>
2025-08-17T16:39:10.6524011Z 
2025-08-17T16:39:10.6524090Z # price\_importer.normaliser
2025-08-17T16:39:10.6524227Z 
2025-08-17T16:39:10.6524335Z <a id="price_importer.common.models_vendor"></a>
2025-08-17T16:39:10.6524521Z 
2025-08-17T16:39:10.6524607Z # price\_importer.common.models\_vendor
2025-08-17T16:39:10.6524770Z 
2025-08-17T16:39:10.6524870Z <a id="price_importer.common.db_url"></a>
2025-08-17T16:39:10.6525037Z 
2025-08-17T16:39:10.6525123Z # price\_importer.common.db\_url
2025-08-17T16:39:10.6525276Z 
2025-08-17T16:39:10.6525378Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-17T16:39:10.6525561Z 
2025-08-17T16:39:10.6525632Z #### make\_dsn
2025-08-17T16:39:10.6525731Z 
2025-08-17T16:39:10.6525793Z ```python
2025-08-17T16:39:10.6525970Z def make_dsn(async_: bool = False) -> str
2025-08-17T16:39:10.6526186Z ```
2025-08-17T16:39:10.6526266Z 
2025-08-17T16:39:10.6526389Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-17T16:39:10.6526587Z 
2025-08-17T16:39:10.6526830Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-17T16:39:10.6527028Z 
2025-08-17T16:39:10.6527090Z #### build\_url
2025-08-17T16:39:10.6527188Z 
2025-08-17T16:39:10.6527257Z ```python
2025-08-17T16:39:10.6527426Z def build_url(async_: bool = False) -> str
2025-08-17T16:39:10.6527652Z ```
2025-08-17T16:39:10.6527731Z 
2025-08-17T16:39:10.6527855Z Return Postgres DSN built from environment variables.
2025-08-17T16:39:10.6528056Z 
2025-08-17T16:39:10.6528137Z <a id="price_importer.common"></a>
2025-08-17T16:39:10.6528287Z 
2025-08-17T16:39:10.6528360Z # price\_importer.common
2025-08-17T16:39:10.6528493Z 
2025-08-17T16:39:10.6528580Z <a id="price_importer.common.base"></a>
2025-08-17T16:39:10.6528742Z 
2025-08-17T16:39:10.6528829Z # price\_importer.common.base
2025-08-17T16:39:10.6528966Z 
2025-08-17T16:39:10.6529059Z <a id="price_importer.tests.conftest"></a>
2025-08-17T16:39:10.6529232Z 
2025-08-17T16:39:10.6529314Z # price\_importer.tests.conftest
2025-08-17T16:39:10.6529481Z 
2025-08-17T16:39:10.6529590Z <a id="price_importer.tests.test_reader"></a>
2025-08-17T16:39:10.6529770Z 
2025-08-17T16:39:10.6529853Z # price\_importer.tests.test\_reader
2025-08-17T16:39:10.6530010Z 
2025-08-17T16:39:10.6530107Z <a id="price_importer.tests.test_imports"></a>
2025-08-17T16:39:10.6530279Z 
2025-08-17T16:39:10.6530371Z # price\_importer.tests.test\_imports
2025-08-17T16:39:10.6530526Z 
2025-08-17T16:39:10.6530619Z <a id="price_importer.tests.test_smoke"></a>
2025-08-17T16:39:10.6530787Z 
2025-08-17T16:39:10.6530877Z # price\_importer.tests.test\_smoke
2025-08-17T16:39:10.6531030Z 
2025-08-17T16:39:10.6531132Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-17T16:39:10.6531323Z 
2025-08-17T16:39:10.6531411Z # price\_importer.tests.test\_normaliser
2025-08-17T16:39:10.6531574Z 
2025-08-17T16:39:10.6531664Z <a id="price_importer.tests"></a>
2025-08-17T16:39:10.6531813Z 
2025-08-17T16:39:10.6531885Z # price\_importer.tests
2025-08-17T16:39:10.6532005Z 
2025-08-17T16:39:10.6532090Z <a id="price_importer.reader"></a>
2025-08-17T16:39:10.6532567Z 
2025-08-17T16:39:10.6532645Z # price\_importer.reader
2025-08-17T16:39:10.6532779Z 
2025-08-17T16:39:10.6532867Z <a id="price_importer.repository"></a>
2025-08-17T16:39:10.6533026Z 
2025-08-17T16:39:10.6533111Z # price\_importer.repository
2025-08-17T16:39:10.6533246Z 
2025-08-17T16:39:10.6533327Z <a id="price_importer.import"></a>
2025-08-17T16:39:10.6533474Z 
2025-08-17T16:39:10.6533554Z # price\_importer.import
2025-08-17T16:39:10.6533676Z 
2025-08-17T16:39:10.6533743Z <a id="fees_h10"></a>
2025-08-17T16:39:10.6533860Z 
2025-08-17T16:39:10.6533921Z # fees\_h10
2025-08-17T16:39:10.6534010Z 
2025-08-17T16:39:10.6534084Z <a id="fees_h10.worker"></a>
2025-08-17T16:39:10.6534220Z 
2025-08-17T16:39:10.6534286Z # fees\_h10.worker
2025-08-17T16:39:10.6534388Z 
2025-08-17T16:39:10.6534490Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-17T16:39:10.6534664Z 
2025-08-17T16:39:10.6534735Z #### list\_active\_asins
2025-08-17T16:39:10.6534868Z 
2025-08-17T16:39:10.6534934Z ```python
2025-08-17T16:39:10.6535105Z def list_active_asins() -> list[str]
2025-08-17T16:39:10.6535316Z ```
2025-08-17T16:39:10.6535396Z 
2025-08-17T16:39:10.6535513Z Return known ASINs or an empty list if unavailable.
2025-08-17T16:39:10.6535705Z 
2025-08-17T16:39:10.6535786Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-17T16:39:10.6535939Z 
2025-08-17T16:39:10.6536025Z # fees\_h10.tests.test\_smoke
2025-08-17T16:39:10.6536160Z 
2025-08-17T16:39:10.6536233Z <a id="fees_h10.tests"></a>
2025-08-17T16:39:10.6536372Z 
2025-08-17T16:39:10.6536435Z # fees\_h10.tests
2025-08-17T16:39:10.6536537Z 
2025-08-17T16:39:10.6536608Z <a id="fees_h10.client"></a>
2025-08-17T16:39:10.6536745Z 
2025-08-17T16:39:10.6536807Z # fees\_h10.client
2025-08-17T16:39:10.6536911Z 
2025-08-17T16:39:10.6536999Z <a id="fees_h10.repository"></a>
2025-08-17T16:39:10.6537140Z 
2025-08-17T16:39:10.6537209Z # fees\_h10.repository
2025-08-17T16:39:10.6537334Z 
2025-08-17T16:39:10.6537401Z <a id="emailer"></a>
2025-08-17T16:39:10.6537633Z 
2025-08-17T16:39:10.6537698Z # emailer
2025-08-17T16:39:10.6537792Z 
2025-08-17T16:39:10.6537891Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-17T16:39:10.6538064Z 
2025-08-17T16:39:10.6538156Z # emailer.tests.test\_import\_emailer
2025-08-17T16:39:10.6538310Z 
2025-08-17T16:39:10.6538394Z <a id="emailer.tests.test_smoke"></a>
2025-08-17T16:39:10.6538555Z 
2025-08-17T16:39:10.6538633Z # emailer.tests.test\_smoke
2025-08-17T16:39:10.6538799Z 
2025-08-17T16:39:10.6538875Z <a id="emailer.tests"></a>
2025-08-17T16:39:10.6539015Z 
2025-08-17T16:39:10.6539081Z # emailer.tests
2025-08-17T16:39:10.6539182Z 
2025-08-17T16:39:10.6539270Z <a id="emailer.generate_body"></a>
2025-08-17T16:39:10.6539422Z 
2025-08-17T16:39:10.6539495Z # emailer.generate\_body
2025-08-17T16:39:10.6539628Z 
2025-08-17T16:39:10.6539696Z <a id="llm_server"></a>
2025-08-17T16:39:10.6539813Z 
2025-08-17T16:39:10.6539877Z # llm\_server
2025-08-17T16:39:10.6539979Z 
2025-08-17T16:39:10.6540056Z <a id="llm_server.app"></a>
2025-08-17T16:39:10.6540195Z 
2025-08-17T16:39:10.6540274Z # llm\_server.app
2025-08-17T16:39:10.6540378Z 
