2025-08-18T20:19:52.2388476Z ##[group]Run pydoc-markdown
2025-08-18T20:19:52.2388791Z [36;1mpydoc-markdown[0m
2025-08-18T20:19:52.2432708Z shell: /usr/bin/bash -e {0}
2025-08-18T20:19:52.2432999Z env:
2025-08-18T20:19:52.2433247Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T20:19:52.2433683Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-18T20:19:52.2434085Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T20:19:52.2434439Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T20:19:52.2434794Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T20:19:52.2435148Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-18T20:19:52.2435446Z ##[endgroup]
2025-08-18T20:19:52.6278086Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-18T20:19:52.6278957Z Unknown key(s) "{'output_directory'}" at:
2025-08-18T20:19:52.6279512Z In "pydoc-markdown.yml"
2025-08-18T20:19:52.6280058Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-18T20:19:52.6281121Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-18T20:19:52.6281912Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-18T20:19:52.6282342Z 
2025-08-18T20:19:52.9652157Z <a id="__init__"></a>
2025-08-18T20:19:52.9652681Z 
2025-08-18T20:19:52.9652871Z # \_\_init\_\_
2025-08-18T20:19:52.9653150Z 
2025-08-18T20:19:52.9653295Z <a id="api"></a>
2025-08-18T20:19:52.9653514Z 
2025-08-18T20:19:52.9653608Z # api
2025-08-18T20:19:52.9653753Z 
2025-08-18T20:19:52.9653867Z <a id="api.errors"></a>
2025-08-18T20:19:52.9654055Z 
2025-08-18T20:19:52.9654153Z # api.errors
2025-08-18T20:19:52.9654302Z 
2025-08-18T20:19:52.9654421Z <a id="api.sentry_config"></a>
2025-08-18T20:19:52.9654626Z 
2025-08-18T20:19:52.9654737Z # api.sentry\_config
2025-08-18T20:19:52.9654905Z 
2025-08-18T20:19:52.9655040Z <a id="api.tests.test_sentry_scrub"></a>
2025-08-18T20:19:52.9655294Z 
2025-08-18T20:19:52.9655803Z # api.tests.test\_sentry\_scrub
2025-08-18T20:19:52.9656039Z 
2025-08-18T20:19:52.9656477Z <a id="api.tests.test_errors_json"></a>
2025-08-18T20:19:52.9656776Z 
2025-08-18T20:19:52.9656901Z # api.tests.test\_errors\_json
2025-08-18T20:19:52.9657110Z 
2025-08-18T20:19:52.9657231Z <a id="api.tests.test_llm"></a>
2025-08-18T20:19:52.9657434Z 
2025-08-18T20:19:52.9657539Z # api.tests.test\_llm
2025-08-18T20:19:52.9657707Z 
2025-08-18T20:19:52.9657844Z <a id="api.tests.test_sentry_event"></a>
2025-08-18T20:19:52.9658093Z 
2025-08-18T20:19:52.9658208Z # api.tests.test\_sentry\_event
2025-08-18T20:19:52.9658424Z 
2025-08-18T20:19:52.9658542Z <a id="api.tests.test_cors"></a>
2025-08-18T20:19:52.9658752Z 
2025-08-18T20:19:52.9658863Z # api.tests.test\_cors
2025-08-18T20:19:52.9659036Z 
2025-08-18T20:19:52.9659159Z <a id="api.tests.test_imports"></a>
2025-08-18T20:19:52.9659386Z 
2025-08-18T20:19:52.9659503Z # api.tests.test\_imports
2025-08-18T20:19:52.9659688Z 
2025-08-18T20:19:52.9659814Z <a id="api.tests.test_rate_limit"></a>
2025-08-18T20:19:52.9660073Z 
2025-08-18T20:19:52.9660189Z # api.tests.test\_rate\_limit
2025-08-18T20:19:52.9660393Z 
2025-08-18T20:19:52.9660534Z <a id="api.tests.test_rate_limit.app"></a>
2025-08-18T20:19:52.9660795Z 
2025-08-18T20:19:52.9660892Z #### app
2025-08-18T20:19:52.9661019Z 
2025-08-18T20:19:52.9661118Z noqa: E402
2025-08-18T20:19:52.9661247Z 
2025-08-18T20:19:52.9661374Z <a id="api.tests.test_entrypoint"></a>
2025-08-18T20:19:52.9661616Z 
2025-08-18T20:19:52.9661734Z # api.tests.test\_entrypoint
2025-08-18T20:19:52.9661932Z 
2025-08-18T20:19:52.9662052Z <a id="api.tests.test_health"></a>
2025-08-18T20:19:52.9662278Z 
2025-08-18T20:19:52.9662387Z # api.tests.test\_health
2025-08-18T20:19:52.9662567Z 
2025-08-18T20:19:52.9662685Z <a id="api.logging_config"></a>
2025-08-18T20:19:52.9662886Z 
2025-08-18T20:19:52.9662994Z # api.logging\_config
2025-08-18T20:19:52.9663164Z 
2025-08-18T20:19:52.9663287Z <a id="api.migrations.env"></a>
2025-08-18T20:19:52.9663489Z 
2025-08-18T20:19:52.9663603Z # api.migrations.env
2025-08-18T20:19:52.9664052Z 
2025-08-18T20:19:52.9664225Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-18T20:19:52.9664518Z 
2025-08-18T20:19:52.9664682Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-18T20:19:52.9664952Z 
2025-08-18T20:19:52.9665109Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-18T20:19:52.9665390Z 
2025-08-18T20:19:52.9665525Z # api.migrations.versions.0004\_fee\_cron
2025-08-18T20:19:52.9665775Z 
2025-08-18T20:19:52.9665995Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-18T20:19:52.9666489Z 
2025-08-18T20:19:52.9666686Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-18T20:19:52.9667004Z 
2025-08-18T20:19:52.9667190Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-18T20:19:52.9667484Z 
2025-08-18T20:19:52.9667636Z # api.migrations.versions.0003\_vendor\_prices
2025-08-18T20:19:52.9667909Z 
2025-08-18T20:19:52.9668076Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-18T20:19:52.9668378Z 
2025-08-18T20:19:52.9668523Z # api.migrations.versions.0024\_create\_buybox
2025-08-18T20:19:52.9668793Z 
2025-08-18T20:19:52.9668980Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-18T20:19:52.9669275Z 
2025-08-18T20:19:52.9669440Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-18T20:19:52.9669717Z 
2025-08-18T20:19:52.9669875Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-18T20:19:52.9670080Z 
2025-08-18T20:19:52.9670191Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-18T20:19:52.9670380Z 
2025-08-18T20:19:52.9670511Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-18T20:19:52.9670715Z 
2025-08-18T20:19:52.9670822Z # api.migrations.versions.0020\_unified\_schema
2025-08-18T20:19:52.9671006Z 
2025-08-18T20:19:52.9671156Z <a id="api.migrations.versions.0025_pr4_indexes_loadlog"></a>
2025-08-18T20:19:52.9671381Z 
2025-08-18T20:19:52.9671514Z # api.migrations.versions.0025\_pr4\_indexes\_loadlog
2025-08-18T20:19:52.9671898Z 
2025-08-18T20:19:52.9672037Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-18T20:19:52.9672247Z 
2025-08-18T20:19:52.9672364Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-18T20:19:52.9672556Z 
2025-08-18T20:19:52.9672699Z <a id="api.migrations.versions.0026_amazon_new_reports"></a>
2025-08-18T20:19:52.9672940Z 
2025-08-18T20:19:52.9673065Z # api.migrations.versions.0026\_amazon\_new\_reports
2025-08-18T20:19:52.9673268Z 
2025-08-18T20:19:52.9673383Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-18T20:19:52.9673581Z 
2025-08-18T20:19:52.9673683Z # api.migrations.versions.0001\_baseline
2025-08-18T20:19:52.9673859Z 
2025-08-18T20:19:52.9673958Z <a id="api.migrations.versions"></a>
2025-08-18T20:19:52.9674123Z 
2025-08-18T20:19:52.9674207Z # api.migrations.versions
2025-08-18T20:19:52.9674347Z 
2025-08-18T20:19:52.9674429Z <a id="api.migrations"></a>
2025-08-18T20:19:52.9674565Z 
2025-08-18T20:19:52.9674638Z # api.migrations
2025-08-18T20:19:52.9674756Z 
2025-08-18T20:19:52.9674832Z <a id="api.db"></a>
2025-08-18T20:19:52.9674939Z 
2025-08-18T20:19:52.9675008Z # api.db
2025-08-18T20:19:52.9675097Z 
2025-08-18T20:19:52.9675181Z <a id="api.routes.stats"></a>
2025-08-18T20:19:52.9675328Z 
2025-08-18T20:19:52.9675406Z # api.routes.stats
2025-08-18T20:19:52.9675547Z 
2025-08-18T20:19:52.9675644Z <a id="api.routes.stats.kpi"></a>
2025-08-18T20:19:52.9675925Z 
2025-08-18T20:19:52.9675993Z #### kpi
2025-08-18T20:19:52.9676089Z 
2025-08-18T20:19:52.9676158Z ```python
2025-08-18T20:19:52.9676446Z @router.get("/stats/kpi")
2025-08-18T20:19:52.9676693Z def kpi() -> List[Dict[str, int]]
2025-08-18T20:19:52.9676908Z ```
2025-08-18T20:19:52.9677002Z 
2025-08-18T20:19:52.9677084Z Return KPI metrics (mock).
2025-08-18T20:19:52.9677217Z 
2025-08-18T20:19:52.9677327Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-18T20:19:52.9677512Z 
2025-08-18T20:19:52.9677587Z #### roi\_by\_vendor
2025-08-18T20:19:52.9677707Z 
2025-08-18T20:19:52.9677774Z ```python
2025-08-18T20:19:52.9677956Z @router.get("/stats/roi_by_vendor")
2025-08-18T20:19:52.9678373Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-18T20:19:52.9678609Z ```
2025-08-18T20:19:52.9678704Z 
2025-08-18T20:19:52.9678790Z Return ROI percent by vendor.
2025-08-18T20:19:52.9678941Z 
2025-08-18T20:19:52.9679044Z <a id="api.routes.stats.roi_trend"></a>
2025-08-18T20:19:52.9679256Z 
2025-08-18T20:19:52.9679326Z #### roi\_trend
2025-08-18T20:19:52.9679439Z 
2025-08-18T20:19:52.9679507Z ```python
2025-08-18T20:19:52.9679685Z @router.get("/stats/roi_trend")
2025-08-18T20:19:52.9679947Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-18T20:19:52.9680193Z ```
2025-08-18T20:19:52.9680284Z 
2025-08-18T20:19:52.9680362Z Return 30-day ROI trend.
2025-08-18T20:19:52.9680495Z 
2025-08-18T20:19:52.9680584Z <a id="api.routes.roi"></a>
2025-08-18T20:19:52.9680724Z 
2025-08-18T20:19:52.9680799Z # api.routes.roi
2025-08-18T20:19:52.9680915Z 
2025-08-18T20:19:52.9681001Z <a id="api.routes.health"></a>
2025-08-18T20:19:52.9681153Z 
2025-08-18T20:19:52.9681232Z # api.routes.health
2025-08-18T20:19:52.9681355Z 
2025-08-18T20:19:52.9681449Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-18T20:19:52.9681620Z 
2025-08-18T20:19:52.9681696Z #### MAX\_SKEW
2025-08-18T20:19:52.9681799Z 
2025-08-18T20:19:52.9681864Z seconds
2025-08-18T20:19:52.9681952Z 
2025-08-18T20:19:52.9682056Z <a id="api.routes.health.health"></a>
2025-08-18T20:19:52.9682226Z 
2025-08-18T20:19:52.9682291Z #### health
2025-08-18T20:19:52.9682391Z 
2025-08-18T20:19:52.9682460Z ```python
2025-08-18T20:19:52.9682665Z @router.get("/health", include_in_schema=False)
2025-08-18T20:19:52.9683071Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-18T20:19:52.9683432Z ```
2025-08-18T20:19:52.9683519Z 
2025-08-18T20:19:52.9683643Z Return 200 when DB reachable and clocks are in sync.
2025-08-18T20:19:52.9683850Z 
2025-08-18T20:19:52.9683953Z <a id="api.routes.repository"></a>
2025-08-18T20:19:52.9684117Z 
2025-08-18T20:19:52.9684342Z # api.routes.repository
2025-08-18T20:19:52.9684487Z 
2025-08-18T20:19:52.9684566Z <a id="api.routes"></a>
2025-08-18T20:19:52.9684689Z 
2025-08-18T20:19:52.9684765Z # api.routes
2025-08-18T20:19:52.9684869Z 
2025-08-18T20:19:52.9684951Z <a id="api.models.fee"></a>
2025-08-18T20:19:52.9685089Z 
2025-08-18T20:19:52.9685169Z # api.models.fee
2025-08-18T20:19:52.9685279Z 
2025-08-18T20:19:52.9685355Z <a id="api.models"></a>
2025-08-18T20:19:52.9685479Z 
2025-08-18T20:19:52.9685551Z # api.models
2025-08-18T20:19:52.9685650Z 
2025-08-18T20:19:52.9685736Z <a id="api.roi_repository"></a>
2025-08-18T20:19:52.9685889Z 
2025-08-18T20:19:52.9685969Z # api.roi\_repository
2025-08-18T20:19:52.9686086Z 
2025-08-18T20:19:52.9686264Z <a id="api.main"></a>
2025-08-18T20:19:52.9686385Z 
2025-08-18T20:19:52.9686453Z # api.main
2025-08-18T20:19:52.9686552Z 
2025-08-18T20:19:52.9686632Z <a id="api.main.ready"></a>
2025-08-18T20:19:52.9686766Z 
2025-08-18T20:19:52.9686831Z #### ready
2025-08-18T20:19:52.9686934Z 
2025-08-18T20:19:52.9687006Z ```python
2025-08-18T20:19:52.9687282Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-18T20:19:52.9687723Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-18T20:19:52.9688107Z                                                                       str]
2025-08-18T20:19:52.9688349Z ```
2025-08-18T20:19:52.9688445Z 
2025-08-18T20:19:52.9688546Z Return 200 only when migrations are at head.
2025-08-18T20:19:52.9688724Z 
2025-08-18T20:19:52.9688809Z <a id="api.config"></a>
2025-08-18T20:19:52.9688931Z 
2025-08-18T20:19:52.9689002Z # api.config
2025-08-18T20:19:52.9689105Z 
2025-08-18T20:19:52.9689175Z <a id="etl"></a>
2025-08-18T20:19:52.9689282Z 
2025-08-18T20:19:52.9689348Z # etl
2025-08-18T20:19:52.9689449Z 
2025-08-18T20:19:52.9689534Z <a id="etl.fba_fee_ingestor"></a>
2025-08-18T20:19:52.9689687Z 
2025-08-18T20:19:52.9689771Z # etl.fba\_fee\_ingestor
2025-08-18T20:19:52.9689900Z 
2025-08-18T20:19:52.9689984Z <a id="etl.sp_fees_ingestor"></a>
2025-08-18T20:19:52.9690275Z 
2025-08-18T20:19:52.9690361Z # etl.sp\_fees\_ingestor
2025-08-18T20:19:52.9690488Z 
2025-08-18T20:19:52.9690573Z <a id="etl.keepa_ingestor"></a>
2025-08-18T20:19:52.9690729Z 
2025-08-18T20:19:52.9690803Z # etl.keepa\_ingestor
2025-08-18T20:19:52.9690919Z 
2025-08-18T20:19:52.9690994Z <a id="etl.db"></a>
2025-08-18T20:19:52.9691104Z 
2025-08-18T20:19:52.9691169Z # etl.db
2025-08-18T20:19:52.9691259Z 
2025-08-18T20:19:52.9691351Z <a id="etl.dialects.schemas"></a>
2025-08-18T20:19:52.9691501Z 
2025-08-18T20:19:52.9691580Z # etl.dialects.schemas
2025-08-18T20:19:52.9691712Z 
2025-08-18T20:19:52.9691826Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-18T20:19:52.9692085Z 
2025-08-18T20:19:52.9692181Z # etl.dialects.amazon\_reimbursements
2025-08-18T20:19:52.9692351Z 
2025-08-18T20:19:52.9692458Z <a id="etl.dialects.amazon_ads_sp_cost"></a>
2025-08-18T20:19:52.9692636Z 
2025-08-18T20:19:52.9692725Z # etl.dialects.amazon\_ads\_sp\_cost
2025-08-18T20:19:52.9692896Z 
2025-08-18T20:19:52.9692989Z <a id="etl.dialects.amazon_returns"></a>
2025-08-18T20:19:52.9693164Z 
2025-08-18T20:19:52.9693251Z # etl.dialects.amazon\_returns
2025-08-18T20:19:52.9693399Z 
2025-08-18T20:19:52.9693497Z <a id="etl.dialects.amazon_fee_preview"></a>
2025-08-18T20:19:52.9693672Z 
2025-08-18T20:19:52.9693767Z # etl.dialects.amazon\_fee\_preview
2025-08-18T20:19:52.9693926Z 
2025-08-18T20:19:52.9694039Z <a id="etl.dialects.amazon_inventory_ledger"></a>
2025-08-18T20:19:52.9694240Z 
2025-08-18T20:19:52.9694335Z # etl.dialects.amazon\_inventory\_ledger
2025-08-18T20:19:52.9694507Z 
2025-08-18T20:19:52.9694606Z <a id="etl.dialects.amazon_settlements"></a>
2025-08-18T20:19:52.9694788Z 
2025-08-18T20:19:52.9694880Z # etl.dialects.amazon\_settlements
2025-08-18T20:19:52.9695039Z 
2025-08-18T20:19:52.9695125Z <a id="etl.dialects"></a>
2025-08-18T20:19:52.9695257Z 
2025-08-18T20:19:52.9695326Z # etl.dialects
2025-08-18T20:19:52.9695435Z 
2025-08-18T20:19:52.9695505Z <a id="ingest"></a>
2025-08-18T20:19:52.9695744Z 
2025-08-18T20:19:52.9695814Z # ingest
2025-08-18T20:19:52.9695909Z 
2025-08-18T20:19:52.9695994Z <a id="ingest.maintenance"></a>
2025-08-18T20:19:52.9696141Z 
2025-08-18T20:19:52.9696405Z # ingest.maintenance
2025-08-18T20:19:52.9696590Z 
2025-08-18T20:19:52.9696680Z <a id="ingest.copy_loader"></a>
2025-08-18T20:19:52.9696825Z 
2025-08-18T20:19:52.9696910Z # ingest.copy\_loader
2025-08-18T20:19:52.9697029Z 
2025-08-18T20:19:52.9697137Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-18T20:19:52.9697332Z 
2025-08-18T20:19:52.9697409Z #### copy\_df\_via\_temp
2025-08-18T20:19:52.9697535Z 
2025-08-18T20:19:52.9697612Z ```python
2025-08-18T20:19:52.9697793Z def copy_df_via_temp(engine: Engine,
2025-08-18T20:19:52.9698049Z                      df: pd.DataFrame,
2025-08-18T20:19:52.9698284Z                      target_table: str,
2025-08-18T20:19:52.9698513Z                      *,
2025-08-18T20:19:52.9698727Z                      target_schema: Optional[str] = None,
2025-08-18T20:19:52.9699015Z                      columns: Sequence[str],
2025-08-18T20:19:52.9699295Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-18T20:19:52.9699592Z                      analyze_after: bool = False,
2025-08-18T20:19:52.9699864Z                      connection: Any | None = None) -> int
2025-08-18T20:19:52.9700109Z ```
2025-08-18T20:19:52.9700196Z 
2025-08-18T20:19:52.9700367Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-18T20:19:52.9700607Z 
2025-08-18T20:19:52.9700698Z <a id="ingest.tests.test_smoke"></a>
2025-08-18T20:19:52.9700868Z 
2025-08-18T20:19:52.9700954Z # ingest.tests.test\_smoke
2025-08-18T20:19:52.9701088Z 
2025-08-18T20:19:52.9701175Z <a id="ingest.tests"></a>
2025-08-18T20:19:52.9701306Z 
2025-08-18T20:19:52.9701376Z # ingest.tests
2025-08-18T20:19:52.9701481Z 
2025-08-18T20:19:52.9701577Z <a id="ingest.upload_router"></a>
2025-08-18T20:19:52.9701730Z 
2025-08-18T20:19:52.9701810Z # ingest.upload\_router
2025-08-18T20:19:52.9701941Z 
2025-08-18T20:19:52.9702032Z <a id="ingest.email_watcher"></a>
2025-08-18T20:19:52.9702321Z 
2025-08-18T20:19:52.9702398Z # ingest.email\_watcher
2025-08-18T20:19:52.9702525Z 
2025-08-18T20:19:52.9702616Z <a id="ingest.email_watcher.main"></a>
2025-08-18T20:19:52.9702783Z 
2025-08-18T20:19:52.9702855Z #### main
2025-08-18T20:19:52.9702948Z 
2025-08-18T20:19:52.9703014Z ```python
2025-08-18T20:19:52.9703189Z def main() -> dict[str, str]
2025-08-18T20:19:52.9703389Z ```
2025-08-18T20:19:52.9703480Z 
2025-08-18T20:19:52.9703626Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-18T20:19:52.9703852Z 
2025-08-18T20:19:52.9703988Z Returns {"status": "success"} when processing completes.
2025-08-18T20:19:52.9704196Z 
2025-08-18T20:19:52.9704275Z <a id="ingest.tasks"></a>
2025-08-18T20:19:52.9704405Z 
2025-08-18T20:19:52.9704478Z # ingest.tasks
2025-08-18T20:19:52.9704580Z 
2025-08-18T20:19:52.9704679Z <a id="ingest.tasks.task_import_file"></a>
2025-08-18T20:19:52.9704862Z 
2025-08-18T20:19:52.9704941Z #### task\_import\_file
2025-08-18T20:19:52.9705063Z 
2025-08-18T20:19:52.9705128Z ```python
2025-08-18T20:19:52.9705349Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-18T20:19:52.9705640Z def task_import_file(self: Any,
2025-08-18T20:19:52.9705854Z                      uri: str,
2025-08-18T20:19:52.9706081Z                      report_type: Optional[str] = None,
2025-08-18T20:19:52.9706476Z                      force: bool = False) -> Dict[str, Any]
2025-08-18T20:19:52.9706731Z ```
2025-08-18T20:19:52.9706828Z 
2025-08-18T20:19:52.9706962Z Import a file into Postgres using existing ETL pipeline.
2025-08-18T20:19:52.9707183Z 
2025-08-18T20:19:52.9707272Z <a id="ingest.celery_app"></a>
2025-08-18T20:19:52.9707415Z 
2025-08-18T20:19:52.9707491Z # ingest.celery\_app
2025-08-18T20:19:52.9707610Z 
2025-08-18T20:19:52.9707702Z <a id="ingest.ingest_router"></a>
2025-08-18T20:19:52.9707853Z 
2025-08-18T20:19:52.9707929Z # ingest.ingest\_router
2025-08-18T20:19:52.9708053Z 
2025-08-18T20:19:52.9708257Z <a id="logistics_etl"></a>
2025-08-18T20:19:52.9708393Z 
2025-08-18T20:19:52.9708469Z # logistics\_etl
2025-08-18T20:19:52.9708578Z 
2025-08-18T20:19:52.9708658Z Daily logistics ETL job.
2025-08-18T20:19:52.9708785Z 
2025-08-18T20:19:52.9708875Z <a id="logistics_etl.__main__"></a>
2025-08-18T20:19:52.9709031Z 
2025-08-18T20:19:52.9709112Z # logistics\_etl.\_\_main\_\_
2025-08-18T20:19:52.9709257Z 
2025-08-18T20:19:52.9709337Z <a id="logistics_etl.dsn"></a>
2025-08-18T20:19:52.9709475Z 
2025-08-18T20:19:52.9709549Z # logistics\_etl.dsn
2025-08-18T20:19:52.9709668Z 
2025-08-18T20:19:52.9709787Z Local DSN builder to avoid cross-service dependency.
2025-08-18T20:19:52.9709988Z 
2025-08-18T20:19:52.9710089Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-18T20:19:52.9710262Z 
2025-08-18T20:19:52.9710331Z #### build\_dsn
2025-08-18T20:19:52.9710440Z 
2025-08-18T20:19:52.9710505Z ```python
2025-08-18T20:19:52.9710681Z def build_dsn(sync: bool = True) -> str
2025-08-18T20:19:52.9710909Z ```
2025-08-18T20:19:52.9710997Z 
2025-08-18T20:19:52.9711148Z Return a Postgres DSN assembled from environment variables.
2025-08-18T20:19:52.9711374Z 
2025-08-18T20:19:52.9711524Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-18T20:19:52.9711917Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-18T20:19:52.9712268Z error when any required variable is missing.
2025-08-18T20:19:52.9712456Z 
2025-08-18T20:19:52.9712554Z <a id="logistics_etl.tests.conftest"></a>
2025-08-18T20:19:52.9712729Z 
2025-08-18T20:19:52.9712817Z # logistics\_etl.tests.conftest
2025-08-18T20:19:52.9712972Z 
2025-08-18T20:19:52.9713081Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-18T20:19:52.9713273Z 
2025-08-18T20:19:52.9713371Z # logistics\_etl.tests.test\_repository
2025-08-18T20:19:52.9713538Z 
2025-08-18T20:19:52.9713633Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-18T20:19:52.9713812Z 
2025-08-18T20:19:52.9713901Z # logistics\_etl.tests.test\_cron
2025-08-18T20:19:52.9714054Z 
2025-08-18T20:19:52.9714161Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-18T20:19:52.9714472Z 
2025-08-18T20:19:52.9714563Z # logistics\_etl.tests.test\_imports
2025-08-18T20:19:52.9714722Z 
2025-08-18T20:19:52.9714826Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-18T20:19:52.9715003Z 
2025-08-18T20:19:52.9715092Z # logistics\_etl.tests.test\_smoke
2025-08-18T20:19:52.9715254Z 
2025-08-18T20:19:52.9715355Z <a id="logistics_etl.tests.test_client"></a>
2025-08-18T20:19:52.9715529Z 
2025-08-18T20:19:52.9715617Z # logistics\_etl.tests.test\_client
2025-08-18T20:19:52.9715778Z 
2025-08-18T20:19:52.9715862Z <a id="logistics_etl.tests"></a>
2025-08-18T20:19:52.9716007Z 
2025-08-18T20:19:52.9716086Z # logistics\_etl.tests
2025-08-18T20:19:52.9716334Z 
2025-08-18T20:19:52.9716418Z <a id="logistics_etl.flow"></a>
2025-08-18T20:19:52.9716567Z 
2025-08-18T20:19:52.9716641Z # logistics\_etl.flow
2025-08-18T20:19:52.9716759Z 
2025-08-18T20:19:52.9716843Z <a id="logistics_etl.client"></a>
2025-08-18T20:19:52.9717003Z 
2025-08-18T20:19:52.9717080Z # logistics\_etl.client
2025-08-18T20:19:52.9717213Z 
2025-08-18T20:19:52.9717300Z <a id="logistics_etl.cron"></a>
2025-08-18T20:19:52.9717442Z 
2025-08-18T20:19:52.9717516Z # logistics\_etl.cron
2025-08-18T20:19:52.9717638Z 
2025-08-18T20:19:52.9717717Z <a id="logistics_etl.db"></a>
2025-08-18T20:19:52.9717856Z 
2025-08-18T20:19:52.9717929Z # logistics\_etl.db
2025-08-18T20:19:52.9718044Z 
2025-08-18T20:19:52.9718136Z <a id="logistics_etl.repository"></a>
2025-08-18T20:19:52.9718299Z 
2025-08-18T20:19:52.9718389Z # logistics\_etl.repository
2025-08-18T20:19:52.9718525Z 
2025-08-18T20:19:52.9718599Z <a id="alert_bot"></a>
2025-08-18T20:19:52.9718721Z 
2025-08-18T20:19:52.9718789Z # alert\_bot
2025-08-18T20:19:52.9718887Z 
2025-08-18T20:19:52.9718976Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-18T20:19:52.9719147Z 
2025-08-18T20:19:52.9719230Z # alert\_bot.tests.test\_smoke
2025-08-18T20:19:52.9719371Z 
2025-08-18T20:19:52.9719455Z <a id="alert_bot.tests"></a>
2025-08-18T20:19:52.9719715Z 
2025-08-18T20:19:52.9719793Z # alert\_bot.tests
2025-08-18T20:19:52.9719902Z 
2025-08-18T20:19:52.9719991Z <a id="alert_bot.alert_bot"></a>
2025-08-18T20:19:52.9720139Z 
2025-08-18T20:19:52.9758452Z # alert\_bot.alert\_bot
2025-08-18T20:19:52.9758743Z 
2025-08-18T20:19:52.9758921Z <a id="alert_bot.rules"></a>
2025-08-18T20:19:52.9759225Z 
2025-08-18T20:19:52.9759384Z # alert\_bot.rules
2025-08-18T20:19:52.9759615Z 
2025-08-18T20:19:52.9759755Z <a id="common"></a>
2025-08-18T20:19:52.9759984Z 
2025-08-18T20:19:52.9760113Z # common
2025-08-18T20:19:52.9760296Z 
2025-08-18T20:19:52.9760453Z <a id="common.dsn"></a>
2025-08-18T20:19:52.9760720Z 
2025-08-18T20:19:52.9760861Z # common.dsn
2025-08-18T20:19:52.9761063Z 
2025-08-18T20:19:52.9761245Z <a id="common.dsn.build_dsn"></a>
2025-08-18T20:19:52.9761557Z 
2025-08-18T20:19:52.9761645Z #### build\_dsn
2025-08-18T20:19:52.9761791Z 
2025-08-18T20:19:52.9761879Z ```python
2025-08-18T20:19:52.9762115Z def build_dsn(sync: bool = True) -> str
2025-08-18T20:19:52.9762427Z ```
2025-08-18T20:19:52.9762542Z 
2025-08-18T20:19:52.9762708Z Return a Postgres DSN, validating required variables.
2025-08-18T20:19:52.9762980Z 
2025-08-18T20:19:52.9763225Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-18T20:19:52.9763794Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-18T20:19:52.9764329Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-18T20:19:52.9764728Z missing.
2025-08-18T20:19:52.9764841Z 
2025-08-18T20:19:52.9764953Z <a id="common.models_vendor"></a>
2025-08-18T20:19:52.9765157Z 
2025-08-18T20:19:52.9765256Z # common.models\_vendor
2025-08-18T20:19:52.9765413Z 
2025-08-18T20:19:52.9765536Z <a id="common.models_vendor.Vendor"></a>
2025-08-18T20:19:52.9765752Z 
2025-08-18T20:19:52.9765839Z ## Vendor Objects
2025-08-18T20:19:52.9765976Z 
2025-08-18T20:19:52.9766067Z ```python
2025-08-18T20:19:52.9766565Z class Vendor(Base)
2025-08-18T20:19:52.9766795Z ```
2025-08-18T20:19:52.9766909Z 
2025-08-18T20:19:52.9767236Z Vendor of inventory items.
2025-08-18T20:19:52.9767381Z 
2025-08-18T20:19:52.9767569Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-18T20:19:52.9767760Z 
2025-08-18T20:19:52.9767843Z ## VendorPrice Objects
2025-08-18T20:19:52.9767965Z 
2025-08-18T20:19:52.9768029Z ```python
2025-08-18T20:19:52.9768200Z class VendorPrice(Base)
2025-08-18T20:19:52.9768383Z ```
2025-08-18T20:19:52.9768473Z 
2025-08-18T20:19:52.9768586Z Association table linking vendors to pricing.
2025-08-18T20:19:52.9768776Z 
2025-08-18T20:19:52.9768862Z <a id="common.db_url"></a>
2025-08-18T20:19:52.9768998Z 
2025-08-18T20:19:52.9769070Z # common.db\_url
2025-08-18T20:19:52.9769177Z 
2025-08-18T20:19:52.9769271Z <a id="common.db_url.build_url"></a>
2025-08-18T20:19:52.9769432Z 
2025-08-18T20:19:52.9769502Z #### build\_url
2025-08-18T20:19:52.9769611Z 
2025-08-18T20:19:52.9769678Z ```python
2025-08-18T20:19:52.9769857Z def build_url(async_: bool = True) -> str
2025-08-18T20:19:52.9770100Z ```
2025-08-18T20:19:52.9770193Z 
2025-08-18T20:19:52.9770299Z Return Postgres DSN from env or PG_* parts.
2025-08-18T20:19:52.9770479Z 
2025-08-18T20:19:52.9770561Z <a id="common.keepa"></a>
2025-08-18T20:19:52.9770696Z 
2025-08-18T20:19:52.9770772Z # common.keepa
2025-08-18T20:19:52.9770876Z 
2025-08-18T20:19:52.9770953Z <a id="common.llm"></a>
2025-08-18T20:19:52.9771081Z 
2025-08-18T20:19:52.9771151Z # common.llm
2025-08-18T20:19:52.9771248Z 
2025-08-18T20:19:52.9771332Z <a id="common.settings"></a>
2025-08-18T20:19:52.9771480Z 
2025-08-18T20:19:52.9771549Z # common.settings
2025-08-18T20:19:52.9771658Z 
2025-08-18T20:19:52.9771737Z <a id="common.db"></a>
2025-08-18T20:19:52.9771857Z 
2025-08-18T20:19:52.9771925Z # common.db
2025-08-18T20:19:52.9772022Z 
2025-08-18T20:19:52.9772119Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-18T20:19:52.9772294Z 
2025-08-18T20:19:52.9772371Z #### build\_sqlalchemy\_url
2025-08-18T20:19:52.9772511Z 
2025-08-18T20:19:52.9772577Z ```python
2025-08-18T20:19:52.9772890Z def build_sqlalchemy_url() -> str
2025-08-18T20:19:52.9773109Z ```
2025-08-18T20:19:52.9773197Z 
2025-08-18T20:19:52.9773302Z Return Postgres URL for SQLAlchemy engines.
2025-08-18T20:19:52.9773477Z 
2025-08-18T20:19:52.9773570Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-18T20:19:52.9773748Z 
2025-08-18T20:19:52.9773823Z #### build\_asyncpg\_dsn
2025-08-18T20:19:52.9773954Z 
2025-08-18T20:19:52.9774019Z ```python
2025-08-18T20:19:52.9774207Z def build_asyncpg_dsn() -> str
2025-08-18T20:19:52.9774417Z ```
2025-08-18T20:19:52.9774503Z 
2025-08-18T20:19:52.9774635Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-18T20:19:52.9774853Z 
2025-08-18T20:19:52.9774948Z <a id="common.db.refresh_mvs"></a>
2025-08-18T20:19:52.9775106Z 
2025-08-18T20:19:52.9775175Z #### refresh\_mvs
2025-08-18T20:19:52.9775289Z 
2025-08-18T20:19:52.9775357Z ```python
2025-08-18T20:19:52.9775555Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-18T20:19:52.9776008Z ```
2025-08-18T20:19:52.9776097Z 
2025-08-18T20:19:52.9776498Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-18T20:19:52.9776800Z 
2025-08-18T20:19:52.9776886Z <a id="common.config"></a>
2025-08-18T20:19:52.9777031Z 
2025-08-18T20:19:52.9777103Z # common.config
2025-08-18T20:19:52.9777209Z 
2025-08-18T20:19:52.9777287Z <a id="common.base"></a>
2025-08-18T20:19:52.9777420Z 
2025-08-18T20:19:52.9777488Z # common.base
2025-08-18T20:19:52.9777590Z 
2025-08-18T20:19:52.9777678Z <a id="common.base.Base"></a>
2025-08-18T20:19:52.9777822Z 
2025-08-18T20:19:52.9777889Z ## Base Objects
2025-08-18T20:19:52.9777992Z 
2025-08-18T20:19:52.9778062Z ```python
2025-08-18T20:19:52.9778233Z class Base(DeclarativeBase)
2025-08-18T20:19:52.9778437Z ```
2025-08-18T20:19:52.9778521Z 
2025-08-18T20:19:52.9778610Z Base class for SQLAlchemy models.
2025-08-18T20:19:52.9778771Z 
2025-08-18T20:19:52.9778845Z <a id="repricer"></a>
2025-08-18T20:19:52.9778967Z 
2025-08-18T20:19:52.9779039Z # repricer
2025-08-18T20:19:52.9779132Z 
2025-08-18T20:19:52.9779227Z <a id="repricer.app.schemas"></a>
2025-08-18T20:19:52.9779529Z 
2025-08-18T20:19:52.9779615Z # repricer.app.schemas
2025-08-18T20:19:52.9779740Z 
2025-08-18T20:19:52.9779828Z <a id="repricer.app.deps"></a>
2025-08-18T20:19:52.9779978Z 
2025-08-18T20:19:52.9780091Z # repricer.app.deps
2025-08-18T20:19:52.9780208Z 
2025-08-18T20:19:52.9780344Z Placeholder module for Keepa / SP-API clients.
2025-08-18T20:19:52.9780534Z 
2025-08-18T20:19:52.9780619Z <a id="repricer.app.logic"></a>
2025-08-18T20:19:52.9780767Z 
2025-08-18T20:19:52.9780850Z # repricer.app.logic
2025-08-18T20:19:52.9780970Z 
2025-08-18T20:19:52.9781071Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-18T20:19:52.9781256Z 
2025-08-18T20:19:52.9781322Z #### MIN\_MARGIN
2025-08-18T20:19:52.9781426Z 
2025-08-18T20:19:52.9781497Z 15 % ROI
2025-08-18T20:19:52.9781586Z 
2025-08-18T20:19:52.9781695Z <a id="repricer.app.logic.compute_price"></a>
2025-08-18T20:19:52.9781879Z 
2025-08-18T20:19:52.9781954Z #### compute\_price
2025-08-18T20:19:52.9782069Z 
2025-08-18T20:19:52.9782139Z ```python
2025-08-18T20:19:52.9782399Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-18T20:19:52.9782707Z ```
2025-08-18T20:19:52.9782798Z 
2025-08-18T20:19:52.9782909Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-18T20:19:52.9783204Z Replace with real competitive logic later.
2025-08-18T20:19:52.9783379Z 
2025-08-18T20:19:52.9783466Z <a id="repricer.app.main"></a>
2025-08-18T20:19:52.9783612Z 
2025-08-18T20:19:52.9783694Z # repricer.app.main
2025-08-18T20:19:52.9783803Z 
2025-08-18T20:19:52.9783882Z <a id="repricer.app"></a>
2025-08-18T20:19:52.9784020Z 
2025-08-18T20:19:52.9784091Z # repricer.app
2025-08-18T20:19:52.9784196Z 
2025-08-18T20:19:52.9784291Z <a id="repricer.tests.test_imports"></a>
2025-08-18T20:19:52.9784470Z 
2025-08-18T20:19:52.9784553Z # repricer.tests.test\_imports
2025-08-18T20:19:52.9784695Z 
2025-08-18T20:19:52.9784795Z <a id="repricer.tests.test_smoke"></a>
2025-08-18T20:19:52.9784962Z 
2025-08-18T20:19:52.9785232Z # repricer.tests.test\_smoke
2025-08-18T20:19:52.9785386Z 
2025-08-18T20:19:52.9785469Z <a id="repricer.tests"></a>
2025-08-18T20:19:52.9785609Z 
2025-08-18T20:19:52.9785679Z # repricer.tests
2025-08-18T20:19:52.9785795Z 
2025-08-18T20:19:52.9785861Z <a id="db"></a>
2025-08-18T20:19:52.9785964Z 
2025-08-18T20:19:52.9786037Z # db
2025-08-18T20:19:52.9786126Z 
2025-08-18T20:19:52.9786327Z <a id="db.utils.views"></a>
2025-08-18T20:19:52.9786471Z 
2025-08-18T20:19:52.9786540Z # db.utils.views
2025-08-18T20:19:52.9786646Z 
2025-08-18T20:19:52.9786742Z <a id="db.utils.views.replace_view"></a>
2025-08-18T20:19:52.9786920Z 
2025-08-18T20:19:52.9786993Z #### replace\_view
2025-08-18T20:19:52.9787109Z 
2025-08-18T20:19:52.9787184Z ```python
2025-08-18T20:19:52.9787382Z def replace_view(name: str, new_sql: str) -> None
2025-08-18T20:19:52.9787641Z ```
2025-08-18T20:19:52.9787730Z 
2025-08-18T20:19:52.9787823Z Drop and recreate a SQL view atomically.
2025-08-18T20:19:52.9788003Z 
2025-08-18T20:19:52.9788079Z <a id="db.utils"></a>
2025-08-18T20:19:52.9788204Z 
2025-08-18T20:19:52.9788272Z # db.utils
2025-08-18T20:19:52.9788371Z 
2025-08-18T20:19:52.9788450Z <a id="price_importer"></a>
2025-08-18T20:19:52.9788584Z 
2025-08-18T20:19:52.9788661Z # price\_importer
2025-08-18T20:19:52.9788770Z 
2025-08-18T20:19:52.9788876Z <a id="price_importer.services_common.dsn"></a>
2025-08-18T20:19:52.9789069Z 
2025-08-18T20:19:52.9789164Z # price\_importer.services\_common.dsn
2025-08-18T20:19:52.9789330Z 
2025-08-18T20:19:52.9789465Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-18T20:19:52.9789684Z 
2025-08-18T20:19:52.9789756Z #### build\_dsn
2025-08-18T20:19:52.9789860Z 
2025-08-18T20:19:52.9789932Z ```python
2025-08-18T20:19:52.9790113Z def build_dsn(sync: bool = True) -> str
2025-08-18T20:19:52.9790349Z ```
2025-08-18T20:19:52.9790434Z 
2025-08-18T20:19:52.9790502Z Return safe DSN.
2025-08-18T20:19:52.9790613Z 
2025-08-18T20:19:52.9790968Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-18T20:19:52.9791186Z 
2025-08-18T20:19:52.9791457Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-18T20:19:52.9791680Z 
2025-08-18T20:19:52.9791795Z # price\_importer.services\_common.models\_vendor
2025-08-18T20:19:52.9791990Z 
2025-08-18T20:19:52.9792104Z <a id="price_importer.services_common.db_url"></a>
2025-08-18T20:19:52.9792296Z 
2025-08-18T20:19:52.9792393Z # price\_importer.services\_common.db\_url
2025-08-18T20:19:52.9792573Z 
2025-08-18T20:19:52.9792711Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-18T20:19:52.9792931Z 
2025-08-18T20:19:52.9793007Z #### build\_url
2025-08-18T20:19:52.9793112Z 
2025-08-18T20:19:52.9793178Z ```python
2025-08-18T20:19:52.9793359Z def build_url(async_: bool = True) -> str
2025-08-18T20:19:52.9793590Z ```
2025-08-18T20:19:52.9793675Z 
2025-08-18T20:19:52.9793779Z Return Postgres DSN from env or PG_* parts.
2025-08-18T20:19:52.9793958Z 
2025-08-18T20:19:52.9794067Z <a id="price_importer.services_common.keepa"></a>
2025-08-18T20:19:52.9794269Z 
2025-08-18T20:19:52.9794370Z # price\_importer.services\_common.keepa
2025-08-18T20:19:52.9794540Z 
2025-08-18T20:19:52.9794647Z <a id="price_importer.services_common.llm"></a>
2025-08-18T20:19:52.9794833Z 
2025-08-18T20:19:52.9794924Z # price\_importer.services\_common.llm
2025-08-18T20:19:52.9795095Z 
2025-08-18T20:19:52.9795213Z <a id="price_importer.services_common.settings"></a>
2025-08-18T20:19:52.9795410Z 
2025-08-18T20:19:52.9795507Z # price\_importer.services\_common.settings
2025-08-18T20:19:52.9795691Z 
2025-08-18T20:19:52.9795795Z <a id="price_importer.services_common.db"></a>
2025-08-18T20:19:52.9795976Z 
2025-08-18T20:19:52.9796072Z # price\_importer.services\_common.db
2025-08-18T20:19:52.9796359Z 
2025-08-18T20:19:52.9796521Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-18T20:19:52.9796775Z 
2025-08-18T20:19:52.9796855Z #### build\_sqlalchemy\_url
2025-08-18T20:19:52.9796992Z 
2025-08-18T20:19:52.9797057Z ```python
2025-08-18T20:19:52.9797237Z def build_sqlalchemy_url() -> str
2025-08-18T20:19:52.9797586Z ```
2025-08-18T20:19:52.9797672Z 
2025-08-18T20:19:52.9797771Z Return Postgres URL for SQLAlchemy engines.
2025-08-18T20:19:52.9797946Z 
2025-08-18T20:19:52.9798100Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-18T20:19:52.9798332Z 
2025-08-18T20:19:52.9798409Z #### build\_asyncpg\_dsn
2025-08-18T20:19:52.9798544Z 
2025-08-18T20:19:52.9798608Z ```python
2025-08-18T20:19:52.9798783Z def build_asyncpg_dsn() -> str
2025-08-18T20:19:52.9798994Z ```
2025-08-18T20:19:52.9799078Z 
2025-08-18T20:19:52.9799213Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-18T20:19:52.9799430Z 
2025-08-18T20:19:52.9799562Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-18T20:19:52.9799784Z 
2025-08-18T20:19:52.9799855Z #### refresh\_mvs
2025-08-18T20:19:52.9799962Z 
2025-08-18T20:19:52.9800029Z ```python
2025-08-18T20:19:52.9800234Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-18T20:19:52.9800488Z ```
2025-08-18T20:19:52.9800579Z 
2025-08-18T20:19:52.9800722Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-18T20:19:52.9800949Z 
2025-08-18T20:19:52.9801059Z <a id="price_importer.services_common"></a>
2025-08-18T20:19:52.9801237Z 
2025-08-18T20:19:52.9801328Z # price\_importer.services\_common
2025-08-18T20:19:52.9801499Z 
2025-08-18T20:19:52.9801609Z <a id="price_importer.services_common.base"></a>
2025-08-18T20:19:52.9801799Z 
2025-08-18T20:19:52.9801893Z # price\_importer.services\_common.base
2025-08-18T20:19:52.9802070Z 
2025-08-18T20:19:52.9802168Z <a id="price_importer.normaliser"></a>
2025-08-18T20:19:52.9802334Z 
2025-08-18T20:19:52.9802427Z # price\_importer.normaliser
2025-08-18T20:19:52.9802570Z 
2025-08-18T20:19:52.9802678Z <a id="price_importer.common.models_vendor"></a>
2025-08-18T20:19:52.9802871Z 
2025-08-18T20:19:52.9802965Z # price\_importer.common.models\_vendor
2025-08-18T20:19:52.9803135Z 
2025-08-18T20:19:52.9803229Z <a id="price_importer.common.db_url"></a>
2025-08-18T20:19:52.9803416Z 
2025-08-18T20:19:52.9803625Z # price\_importer.common.db\_url
2025-08-18T20:19:52.9803780Z 
2025-08-18T20:19:52.9803895Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-18T20:19:52.9804087Z 
2025-08-18T20:19:52.9804152Z #### make\_dsn
2025-08-18T20:19:52.9804260Z 
2025-08-18T20:19:52.9804325Z ```python
2025-08-18T20:19:52.9804501Z def make_dsn(async_: bool = False) -> str
2025-08-18T20:19:52.9804739Z ```
2025-08-18T20:19:52.9804823Z 
2025-08-18T20:19:52.9804950Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-18T20:19:52.9805153Z 
2025-08-18T20:19:52.9805265Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-18T20:19:52.9805458Z 
2025-08-18T20:19:52.9805532Z #### build\_url
2025-08-18T20:19:52.9805634Z 
2025-08-18T20:19:52.9805698Z ```python
2025-08-18T20:19:52.9805879Z def build_url(async_: bool = False) -> str
2025-08-18T20:19:52.9806106Z ```
2025-08-18T20:19:52.9806372Z 
2025-08-18T20:19:52.9806572Z Return Postgres DSN built from environment variables.
2025-08-18T20:19:52.9806793Z 
2025-08-18T20:19:52.9806894Z <a id="price_importer.common"></a>
2025-08-18T20:19:52.9807052Z 
2025-08-18T20:19:52.9807133Z # price\_importer.common
2025-08-18T20:19:52.9807277Z 
2025-08-18T20:19:52.9807373Z <a id="price_importer.common.base"></a>
2025-08-18T20:19:52.9807542Z 
2025-08-18T20:19:52.9807627Z # price\_importer.common.base
2025-08-18T20:19:52.9807780Z 
2025-08-18T20:19:52.9807881Z <a id="price_importer.tests.conftest"></a>
2025-08-18T20:19:52.9808056Z 
2025-08-18T20:19:52.9808152Z # price\_importer.tests.conftest
2025-08-18T20:19:52.9808303Z 
2025-08-18T20:19:52.9808404Z <a id="price_importer.tests.test_reader"></a>
2025-08-18T20:19:52.9808592Z 
2025-08-18T20:19:52.9808680Z # price\_importer.tests.test\_reader
2025-08-18T20:19:52.9808841Z 
2025-08-18T20:19:52.9808944Z <a id="price_importer.tests.test_imports"></a>
2025-08-18T20:19:52.9809131Z 
2025-08-18T20:19:52.9809224Z # price\_importer.tests.test\_imports
2025-08-18T20:19:52.9809394Z 
2025-08-18T20:19:52.9809629Z <a id="price_importer.tests.test_smoke"></a>
2025-08-18T20:19:52.9809809Z 
2025-08-18T20:19:52.9809898Z # price\_importer.tests.test\_smoke
2025-08-18T20:19:52.9810063Z 
2025-08-18T20:19:52.9810171Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-18T20:19:52.9810360Z 
2025-08-18T20:19:52.9810456Z # price\_importer.tests.test\_normaliser
2025-08-18T20:19:52.9810634Z 
2025-08-18T20:19:52.9810720Z <a id="price_importer.tests"></a>
2025-08-18T20:19:52.9810875Z 
2025-08-18T20:19:52.9810960Z # price\_importer.tests
2025-08-18T20:19:52.9811087Z 
2025-08-18T20:19:52.9811176Z <a id="price_importer.reader"></a>
2025-08-18T20:19:52.9811372Z 
2025-08-18T20:19:52.9811457Z # price\_importer.reader
2025-08-18T20:19:52.9811586Z 
2025-08-18T20:19:52.9811680Z <a id="price_importer.repository"></a>
2025-08-18T20:19:52.9811854Z 
2025-08-18T20:19:52.9811940Z # price\_importer.repository
2025-08-18T20:19:52.9812082Z 
2025-08-18T20:19:52.9812176Z <a id="price_importer.import"></a>
2025-08-18T20:19:52.9812331Z 
2025-08-18T20:19:52.9812415Z # price\_importer.import
2025-08-18T20:19:52.9812552Z 
2025-08-18T20:19:52.9812626Z <a id="fees_h10"></a>
2025-08-18T20:19:52.9812744Z 
2025-08-18T20:19:52.9812812Z # fees\_h10
2025-08-18T20:19:52.9812915Z 
2025-08-18T20:19:52.9812996Z <a id="fees_h10.worker"></a>
2025-08-18T20:19:52.9813134Z 
2025-08-18T20:19:52.9813212Z # fees\_h10.worker
2025-08-18T20:19:52.9813323Z 
2025-08-18T20:19:52.9813427Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-18T20:19:52.9813611Z 
2025-08-18T20:19:52.9813696Z #### list\_active\_asins
2025-08-18T20:19:52.9813822Z 
2025-08-18T20:19:52.9813890Z ```python
2025-08-18T20:19:52.9814076Z def list_active_asins() -> list[str]
2025-08-18T20:19:52.9814327Z ```
2025-08-18T20:19:52.9814423Z 
2025-08-18T20:19:52.9814544Z Return known ASINs or an empty list if unavailable.
2025-08-18T20:19:52.9814746Z 
2025-08-18T20:19:52.9814841Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-18T20:19:52.9815005Z 
2025-08-18T20:19:52.9815090Z # fees\_h10.tests.test\_smoke
2025-08-18T20:19:52.9815248Z 
2025-08-18T20:19:52.9815454Z <a id="fees_h10.tests"></a>
2025-08-18T20:19:52.9815595Z 
2025-08-18T20:19:52.9815673Z # fees\_h10.tests
2025-08-18T20:19:52.9815794Z 
2025-08-18T20:19:52.9815875Z <a id="fees_h10.client"></a>
2025-08-18T20:19:52.9816017Z 
2025-08-18T20:19:52.9816101Z # fees\_h10.client
2025-08-18T20:19:52.9816422Z 
2025-08-18T20:19:52.9816567Z <a id="fees_h10.repository"></a>
2025-08-18T20:19:52.9816771Z 
2025-08-18T20:19:52.9816856Z # fees\_h10.repository
2025-08-18T20:19:52.9816984Z 
2025-08-18T20:19:52.9817059Z <a id="emailer"></a>
2025-08-18T20:19:52.9817182Z 
2025-08-18T20:19:52.9817247Z # emailer
2025-08-18T20:19:52.9817340Z 
2025-08-18T20:19:52.9817455Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-18T20:19:52.9817648Z 
2025-08-18T20:19:52.9817741Z # emailer.tests.test\_import\_emailer
2025-08-18T20:19:52.9817907Z 
2025-08-18T20:19:52.9818002Z <a id="emailer.tests.test_smoke"></a>
2025-08-18T20:19:52.9818164Z 
2025-08-18T20:19:52.9818247Z # emailer.tests.test\_smoke
2025-08-18T20:19:52.9818404Z 
2025-08-18T20:19:52.9818485Z <a id="emailer.tests"></a>
2025-08-18T20:19:52.9818620Z 
2025-08-18T20:19:52.9818690Z # emailer.tests
2025-08-18T20:19:52.9818805Z 
2025-08-18T20:19:52.9818894Z <a id="emailer.generate_body"></a>
2025-08-18T20:19:52.9819052Z 
2025-08-18T20:19:52.9819138Z # emailer.generate\_body
2025-08-18T20:19:52.9819269Z 
2025-08-18T20:19:52.9819344Z <a id="llm_server"></a>
2025-08-18T20:19:52.9819471Z 
2025-08-18T20:19:52.9819538Z # llm\_server
2025-08-18T20:19:52.9819641Z 
2025-08-18T20:19:52.9819721Z <a id="llm_server.app"></a>
2025-08-18T20:19:52.9819862Z 
2025-08-18T20:19:52.9819932Z # llm\_server.app
2025-08-18T20:19:52.9820044Z 
