2025-08-17T02:37:03.2507505Z ##[group]Run pydoc-markdown
2025-08-17T02:37:03.2507820Z [36;1mpydoc-markdown[0m
2025-08-17T02:37:03.2548242Z shell: /usr/bin/bash -e {0}
2025-08-17T02:37:03.2548472Z env:
2025-08-17T02:37:03.2548719Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T02:37:03.2549141Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-17T02:37:03.2549538Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T02:37:03.2549885Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T02:37:03.2550418Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T02:37:03.2550777Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-17T02:37:03.2551060Z ##[endgroup]
2025-08-17T02:37:03.6205428Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-17T02:37:03.6206455Z Unknown key(s) "{'output_directory'}" at:
2025-08-17T02:37:03.6206834Z In "pydoc-markdown.yml"
2025-08-17T02:37:03.6207156Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-17T02:37:03.6207698Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-17T02:37:03.6208254Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-17T02:37:03.6208631Z 
2025-08-17T02:37:03.8244108Z <a id="__init__"></a>
2025-08-17T02:37:03.8244458Z 
2025-08-17T02:37:03.8244585Z # \_\_init\_\_
2025-08-17T02:37:03.8244790Z 
2025-08-17T02:37:03.8244918Z <a id="api"></a>
2025-08-17T02:37:03.8245122Z 
2025-08-17T02:37:03.8245235Z # api
2025-08-17T02:37:03.8245413Z 
2025-08-17T02:37:03.8245573Z <a id="api.tests.test_llm"></a>
2025-08-17T02:37:03.8245850Z 
2025-08-17T02:37:03.8246002Z # api.tests.test\_llm
2025-08-17T02:37:03.8246227Z 
2025-08-17T02:37:03.8246389Z <a id="api.tests.test_imports"></a>
2025-08-17T02:37:03.8246695Z 
2025-08-17T02:37:03.8246851Z # api.tests.test\_imports
2025-08-17T02:37:03.8247094Z 
2025-08-17T02:37:03.8247262Z <a id="api.tests.test_entrypoint"></a>
2025-08-17T02:37:03.8247577Z 
2025-08-17T02:37:03.8247729Z # api.tests.test\_entrypoint
2025-08-17T02:37:03.8248025Z 
2025-08-17T02:37:03.8248187Z <a id="api.tests.test_health"></a>
2025-08-17T02:37:03.8248470Z 
2025-08-17T02:37:03.8248610Z # api.tests.test\_health
2025-08-17T02:37:03.8248849Z 
2025-08-17T02:37:03.8249006Z <a id="api.migrations.env"></a>
2025-08-17T02:37:03.8249278Z 
2025-08-17T02:37:03.8249419Z # api.migrations.env
2025-08-17T02:37:03.8249646Z 
2025-08-17T02:37:03.8249867Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-17T02:37:03.8250467Z 
2025-08-17T02:37:03.8250682Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-17T02:37:03.8251028Z 
2025-08-17T02:37:03.8251230Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-17T02:37:03.8251597Z 
2025-08-17T02:37:03.8251778Z # api.migrations.versions.0004\_fee\_cron
2025-08-17T02:37:03.8252103Z 
2025-08-17T02:37:03.8252392Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-17T02:37:03.8252837Z 
2025-08-17T02:37:03.8253097Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-17T02:37:03.8253859Z 
2025-08-17T02:37:03.8254102Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-17T02:37:03.8254479Z 
2025-08-17T02:37:03.8254679Z # api.migrations.versions.0003\_vendor\_prices
2025-08-17T02:37:03.8255035Z 
2025-08-17T02:37:03.8255260Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-17T02:37:03.8255636Z 
2025-08-17T02:37:03.8255846Z # api.migrations.versions.0024\_create\_buybox
2025-08-17T02:37:03.8256208Z 
2025-08-17T02:37:03.8256451Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-17T02:37:03.8256839Z 
2025-08-17T02:37:03.8257063Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-17T02:37:03.8257432Z 
2025-08-17T02:37:03.8257679Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-17T02:37:03.8258123Z 
2025-08-17T02:37:03.8258324Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-17T02:37:03.8258675Z 
2025-08-17T02:37:03.8258914Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-17T02:37:03.8259656Z 
2025-08-17T02:37:03.8259863Z # api.migrations.versions.0020\_unified\_schema
2025-08-17T02:37:03.8260392Z 
2025-08-17T02:37:03.8260641Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-17T02:37:03.8261018Z 
2025-08-17T02:37:03.8261221Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-17T02:37:03.8261577Z 
2025-08-17T02:37:03.8261782Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-17T02:37:03.8262133Z 
2025-08-17T02:37:03.8262318Z # api.migrations.versions.0001\_baseline
2025-08-17T02:37:03.8262635Z 
2025-08-17T02:37:03.8262800Z <a id="api.migrations.versions"></a>
2025-08-17T02:37:03.8263101Z 
2025-08-17T02:37:03.8263266Z # api.migrations.versions
2025-08-17T02:37:03.8263513Z 
2025-08-17T02:37:03.8263661Z <a id="api.migrations"></a>
2025-08-17T02:37:03.8263917Z 
2025-08-17T02:37:03.8264144Z # api.migrations
2025-08-17T02:37:03.8264342Z 
2025-08-17T02:37:03.8264474Z <a id="api.db"></a>
2025-08-17T02:37:03.8264674Z 
2025-08-17T02:37:03.8264807Z # api.db
2025-08-17T02:37:03.8264976Z 
2025-08-17T02:37:03.8265140Z <a id="api.routes.stats"></a>
2025-08-17T02:37:03.8265406Z 
2025-08-17T02:37:03.8265536Z # api.routes.stats
2025-08-17T02:37:03.8265750Z 
2025-08-17T02:37:03.8265913Z <a id="api.routes.stats.kpi"></a>
2025-08-17T02:37:03.8266206Z 
2025-08-17T02:37:03.8266331Z #### kpi
2025-08-17T02:37:03.8266507Z 
2025-08-17T02:37:03.8266630Z ```python
2025-08-17T02:37:03.8266966Z @router.get("/stats/kpi")
2025-08-17T02:37:03.8267500Z def kpi() -> List[Dict[str, int]]
2025-08-17T02:37:03.8267891Z ```
2025-08-17T02:37:03.8268047Z 
2025-08-17T02:37:03.8268194Z Return KPI metrics (mock).
2025-08-17T02:37:03.8268451Z 
2025-08-17T02:37:03.8268635Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-17T02:37:03.8268979Z 
2025-08-17T02:37:03.8269115Z #### roi\_by\_vendor
2025-08-17T02:37:03.8269322Z 
2025-08-17T02:37:03.8269439Z ```python
2025-08-17T02:37:03.8269759Z @router.get("/stats/roi_by_vendor")
2025-08-17T02:37:03.8270391Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-17T02:37:03.8270906Z ```
2025-08-17T02:37:03.8271054Z 
2025-08-17T02:37:03.8271203Z Return ROI percent by vendor.
2025-08-17T02:37:03.8271475Z 
2025-08-17T02:37:03.8271647Z <a id="api.routes.stats.roi_trend"></a>
2025-08-17T02:37:03.8271957Z 
2025-08-17T02:37:03.8272083Z #### roi\_trend
2025-08-17T02:37:03.8272273Z 
2025-08-17T02:37:03.8272393Z ```python
2025-08-17T02:37:03.8272708Z @router.get("/stats/roi_trend")
2025-08-17T02:37:03.8273149Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-17T02:37:03.8273584Z ```
2025-08-17T02:37:03.8273730Z 
2025-08-17T02:37:03.8273865Z Return 30-day ROI trend.
2025-08-17T02:37:03.8274102Z 
2025-08-17T02:37:03.8274248Z <a id="api.routes.roi"></a>
2025-08-17T02:37:03.8274499Z 
2025-08-17T02:37:03.8274624Z # api.routes.roi
2025-08-17T02:37:03.8274898Z 
2025-08-17T02:37:03.8275054Z <a id="api.routes.health"></a>
2025-08-17T02:37:03.8275364Z 
2025-08-17T02:37:03.8275499Z # api.routes.health
2025-08-17T02:37:03.8275707Z 
2025-08-17T02:37:03.8275897Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-17T02:37:03.8276452Z 
2025-08-17T02:37:03.8276582Z #### MAX\_SKEW
2025-08-17T02:37:03.8276774Z 
2025-08-17T02:37:03.8276897Z seconds
2025-08-17T02:37:03.8277062Z 
2025-08-17T02:37:03.8277228Z <a id="api.routes.health.health"></a>
2025-08-17T02:37:03.8277544Z 
2025-08-17T02:37:03.8277659Z #### health
2025-08-17T02:37:03.8277827Z 
2025-08-17T02:37:03.8277941Z ```python
2025-08-17T02:37:03.8278313Z @router.get("/health", include_in_schema=False)
2025-08-17T02:37:03.8279021Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-17T02:37:03.8279645Z ```
2025-08-17T02:37:03.8279797Z 
2025-08-17T02:37:03.8280025Z Return 200 when DB reachable and clocks are in sync.
2025-08-17T02:37:03.8280597Z 
2025-08-17T02:37:03.8280766Z <a id="api.routes.repository"></a>
2025-08-17T02:37:03.8281065Z 
2025-08-17T02:37:03.8281214Z # api.routes.repository
2025-08-17T02:37:03.8281446Z 
2025-08-17T02:37:03.8281589Z <a id="api.routes"></a>
2025-08-17T02:37:03.8282168Z 
2025-08-17T02:37:03.8282292Z # api.routes
2025-08-17T02:37:03.8282468Z 
2025-08-17T02:37:03.8282610Z <a id="api.models.fee"></a>
2025-08-17T02:37:03.8282852Z 
2025-08-17T02:37:03.8282970Z # api.models.fee
2025-08-17T02:37:03.8283162Z 
2025-08-17T02:37:03.8283288Z <a id="api.models"></a>
2025-08-17T02:37:03.8283512Z 
2025-08-17T02:37:03.8283635Z # api.models
2025-08-17T02:37:03.8283830Z 
2025-08-17T02:37:03.8283980Z <a id="api.roi_repository"></a>
2025-08-17T02:37:03.8284246Z 
2025-08-17T02:37:03.8284386Z # api.roi\_repository
2025-08-17T02:37:03.8284608Z 
2025-08-17T02:37:03.8284737Z <a id="api.main"></a>
2025-08-17T02:37:03.8284954Z 
2025-08-17T02:37:03.8285072Z # api.main
2025-08-17T02:37:03.8285245Z 
2025-08-17T02:37:03.8285394Z <a id="api.main.ready"></a>
2025-08-17T02:37:03.8285656Z 
2025-08-17T02:37:03.8285768Z #### ready
2025-08-17T02:37:03.8285937Z 
2025-08-17T02:37:03.8286062Z ```python
2025-08-17T02:37:03.8286549Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-17T02:37:03.8287406Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-17T02:37:03.8288061Z                                                                       str]
2025-08-17T02:37:03.8288496Z ```
2025-08-17T02:37:03.8288656Z 
2025-08-17T02:37:03.8288839Z Return 200 only when migrations are at head.
2025-08-17T02:37:03.8289170Z 
2025-08-17T02:37:03.8289307Z <a id="api.config"></a>
2025-08-17T02:37:03.8289529Z 
2025-08-17T02:37:03.8289659Z # api.config
2025-08-17T02:37:03.8289837Z 
2025-08-17T02:37:03.8289957Z <a id="etl"></a>
2025-08-17T02:37:03.8290370Z 
2025-08-17T02:37:03.8290487Z # etl
2025-08-17T02:37:03.8290650Z 
2025-08-17T02:37:03.8290798Z <a id="etl.fba_fee_ingestor"></a>
2025-08-17T02:37:03.8291085Z 
2025-08-17T02:37:03.8291223Z # etl.fba\_fee\_ingestor
2025-08-17T02:37:03.8291450Z 
2025-08-17T02:37:03.8291625Z <a id="etl.sp_fees_ingestor"></a>
2025-08-17T02:37:03.8291912Z 
2025-08-17T02:37:03.8292046Z # etl.sp\_fees\_ingestor
2025-08-17T02:37:03.8292291Z 
2025-08-17T02:37:03.8292448Z <a id="etl.keepa_ingestor"></a>
2025-08-17T02:37:03.8292709Z 
2025-08-17T02:37:03.8292845Z # etl.keepa\_ingestor
2025-08-17T02:37:03.8293075Z 
2025-08-17T02:37:03.8293206Z <a id="etl.db"></a>
2025-08-17T02:37:03.8293412Z 
2025-08-17T02:37:03.8293527Z # etl.db
2025-08-17T02:37:03.8293704Z 
2025-08-17T02:37:03.8293901Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-17T02:37:03.8294246Z 
2025-08-17T02:37:03.8294422Z # etl.dialects.amazon\_reimbursements
2025-08-17T02:37:03.8294727Z 
2025-08-17T02:37:03.8294893Z <a id="etl.dialects.amazon_returns"></a>
2025-08-17T02:37:03.8295218Z 
2025-08-17T02:37:03.8295373Z # etl.dialects.amazon\_returns
2025-08-17T02:37:03.8295640Z 
2025-08-17T02:37:03.8295782Z <a id="etl.dialects"></a>
2025-08-17T02:37:03.8296030Z 
2025-08-17T02:37:03.8296154Z # etl.dialects
2025-08-17T02:37:03.8296347Z 
2025-08-17T02:37:03.8296478Z <a id="ingest"></a>
2025-08-17T02:37:03.8296678Z 
2025-08-17T02:37:03.8296793Z # ingest
2025-08-17T02:37:03.8296974Z 
2025-08-17T02:37:03.8297367Z <a id="ingest.tests.test_smoke"></a>
2025-08-17T02:37:03.8297668Z 
2025-08-17T02:37:03.8297814Z # ingest.tests.test\_smoke
2025-08-17T02:37:03.8298075Z 
2025-08-17T02:37:03.8298213Z <a id="ingest.tests"></a>
2025-08-17T02:37:03.8298449Z 
2025-08-17T02:37:03.8298581Z # ingest.tests
2025-08-17T02:37:03.8298772Z 
2025-08-17T02:37:03.8298933Z <a id="ingest.upload_router"></a>
2025-08-17T02:37:03.8299223Z 
2025-08-17T02:37:03.8299367Z # ingest.upload\_router
2025-08-17T02:37:03.8299598Z 
2025-08-17T02:37:03.8299749Z <a id="ingest.email_watcher"></a>
2025-08-17T02:37:03.8300026Z 
2025-08-17T02:37:03.8300337Z # ingest.email\_watcher
2025-08-17T02:37:03.8300562Z 
2025-08-17T02:37:03.8300731Z <a id="ingest.email_watcher.main"></a>
2025-08-17T02:37:03.8301032Z 
2025-08-17T02:37:03.8301147Z #### main
2025-08-17T02:37:03.8301309Z 
2025-08-17T02:37:03.8301433Z ```python
2025-08-17T02:37:03.8301732Z def main() -> dict[str, str]
2025-08-17T02:37:03.8302093Z ```
2025-08-17T02:37:03.8302246Z 
2025-08-17T02:37:03.8302739Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-17T02:37:03.8303177Z 
2025-08-17T02:37:03.8303424Z Returns {"status": "success"} when processing completes.
2025-08-17T02:37:03.8303810Z 
2025-08-17T02:37:03.8303975Z <a id="ingest.ingest_router"></a>
2025-08-17T02:37:03.8304257Z 
2025-08-17T02:37:03.8304396Z # ingest.ingest\_router
2025-08-17T02:37:03.8304629Z 
2025-08-17T02:37:03.8304769Z <a id="logistics_etl"></a>
2025-08-17T02:37:03.8305005Z 
2025-08-17T02:37:03.8305130Z # logistics\_etl
2025-08-17T02:37:03.8305337Z 
2025-08-17T02:37:03.8305473Z Daily logistics ETL job.
2025-08-17T02:37:03.8305702Z 
2025-08-17T02:37:03.8305855Z <a id="logistics_etl.__main__"></a>
2025-08-17T02:37:03.8306136Z 
2025-08-17T02:37:03.8306274Z # logistics\_etl.\_\_main\_\_
2025-08-17T02:37:03.8306529Z 
2025-08-17T02:37:03.8306682Z <a id="logistics_etl.dsn"></a>
2025-08-17T02:37:03.8306939Z 
2025-08-17T02:37:03.8307074Z # logistics\_etl.dsn
2025-08-17T02:37:03.8307292Z 
2025-08-17T02:37:03.8307527Z Local DSN builder to avoid cross-service dependency.
2025-08-17T02:37:03.8307908Z 
2025-08-17T02:37:03.8308085Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-17T02:37:03.8308405Z 
2025-08-17T02:37:03.8308530Z #### build\_dsn
2025-08-17T02:37:03.8308726Z 
2025-08-17T02:37:03.8308852Z ```python
2025-08-17T02:37:03.8309172Z def build_dsn(sync: bool = True) -> str
2025-08-17T02:37:03.8309583Z ```
2025-08-17T02:37:03.8309733Z 
2025-08-17T02:37:03.8309999Z Return a Postgres DSN assembled from environment variables.
2025-08-17T02:37:03.8310582Z 
2025-08-17T02:37:03.8310871Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-17T02:37:03.8311602Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-17T02:37:03.8312243Z error when any required variable is missing.
2025-08-17T02:37:03.8312581Z 
2025-08-17T02:37:03.8312752Z <a id="logistics_etl.tests.conftest"></a>
2025-08-17T02:37:03.8313071Z 
2025-08-17T02:37:03.8313235Z # logistics\_etl.tests.conftest
2025-08-17T02:37:03.8313521Z 
2025-08-17T02:37:03.8313715Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-17T02:37:03.8314065Z 
2025-08-17T02:37:03.8314239Z # logistics\_etl.tests.test\_repository
2025-08-17T02:37:03.8314550Z 
2025-08-17T02:37:03.8314722Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-17T02:37:03.8315050Z 
2025-08-17T02:37:03.8315203Z # logistics\_etl.tests.test\_cron
2025-08-17T02:37:03.8315484Z 
2025-08-17T02:37:03.8315668Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-17T02:37:03.8316000Z 
2025-08-17T02:37:03.8316156Z # logistics\_etl.tests.test\_imports
2025-08-17T02:37:03.8316449Z 
2025-08-17T02:37:03.8316631Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-17T02:37:03.8316957Z 
2025-08-17T02:37:03.8317112Z # logistics\_etl.tests.test\_smoke
2025-08-17T02:37:03.8317409Z 
2025-08-17T02:37:03.8317593Z <a id="logistics_etl.tests.test_client"></a>
2025-08-17T02:37:03.8317919Z 
2025-08-17T02:37:03.8318087Z # logistics\_etl.tests.test\_client
2025-08-17T02:37:03.8318388Z 
2025-08-17T02:37:03.8318750Z <a id="logistics_etl.tests"></a>
2025-08-17T02:37:03.8319028Z 
2025-08-17T02:37:03.8319171Z # logistics\_etl.tests
2025-08-17T02:37:03.8319391Z 
2025-08-17T02:37:03.8319540Z <a id="logistics_etl.flow"></a>
2025-08-17T02:37:03.8319811Z 
2025-08-17T02:37:03.8319942Z # logistics\_etl.flow
2025-08-17T02:37:03.8320332Z 
2025-08-17T02:37:03.8320499Z <a id="logistics_etl.client"></a>
2025-08-17T02:37:03.8320781Z 
2025-08-17T02:37:03.8320916Z # logistics\_etl.client
2025-08-17T02:37:03.8321138Z 
2025-08-17T02:37:03.8321288Z <a id="logistics_etl.cron"></a>
2025-08-17T02:37:03.8321546Z 
2025-08-17T02:37:03.8321677Z # logistics\_etl.cron
2025-08-17T02:37:03.8321897Z 
2025-08-17T02:37:03.8322037Z <a id="logistics_etl.db"></a>
2025-08-17T02:37:03.8322290Z 
2025-08-17T02:37:03.8322422Z # logistics\_etl.db
2025-08-17T02:37:03.8322623Z 
2025-08-17T02:37:03.8322788Z <a id="logistics_etl.repository"></a>
2025-08-17T02:37:03.8323086Z 
2025-08-17T02:37:03.8323238Z # logistics\_etl.repository
2025-08-17T02:37:03.8323708Z 
2025-08-17T02:37:03.8323843Z <a id="alert_bot"></a>
2025-08-17T02:37:03.8324066Z 
2025-08-17T02:37:03.8324186Z # alert\_bot
2025-08-17T02:37:03.8324367Z 
2025-08-17T02:37:03.8324529Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-17T02:37:03.8324846Z 
2025-08-17T02:37:03.8324992Z # alert\_bot.tests.test\_smoke
2025-08-17T02:37:03.8325251Z 
2025-08-17T02:37:03.8325400Z <a id="alert_bot.tests"></a>
2025-08-17T02:37:03.8325650Z 
2025-08-17T02:37:03.8325774Z # alert\_bot.tests
2025-08-17T02:37:03.8325983Z 
2025-08-17T02:37:03.8326129Z <a id="alert_bot.alert_bot"></a>
2025-08-17T02:37:03.8326391Z 
2025-08-17T02:37:03.8326524Z # alert\_bot.alert\_bot
2025-08-17T02:37:03.8326759Z 
2025-08-17T02:37:03.8326906Z <a id="alert_bot.rules"></a>
2025-08-17T02:37:03.8327157Z 
2025-08-17T02:37:03.8327290Z # alert\_bot.rules
2025-08-17T02:37:03.8327491Z 
2025-08-17T02:37:03.8327619Z <a id="common"></a>
2025-08-17T02:37:03.8327832Z 
2025-08-17T02:37:03.8327947Z # common
2025-08-17T02:37:03.8328115Z 
2025-08-17T02:37:03.8328273Z <a id="common.dsn"></a>
2025-08-17T02:37:03.8328504Z 
2025-08-17T02:37:03.8328623Z # common.dsn
2025-08-17T02:37:03.8328800Z 
2025-08-17T02:37:03.8328962Z <a id="common.dsn.build_dsn"></a>
2025-08-17T02:37:03.8329240Z 
2025-08-17T02:37:03.8329358Z #### build\_dsn
2025-08-17T02:37:03.8329542Z 
2025-08-17T02:37:03.8329667Z ```python
2025-08-17T02:37:03.8329986Z def build_dsn(sync: bool = True) -> str
2025-08-17T02:37:03.8330616Z ```
2025-08-17T02:37:03.8330783Z 
2025-08-17T02:37:03.8331012Z Return a Postgres DSN, validating required variables.
2025-08-17T02:37:03.8331381Z 
2025-08-17T02:37:03.8331730Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-17T02:37:03.8332536Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-17T02:37:03.8333322Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-17T02:37:03.8333895Z missing.
2025-08-17T02:37:03.8334067Z 
2025-08-17T02:37:03.8334222Z <a id="common.models_vendor"></a>
2025-08-17T02:37:03.8334517Z 
2025-08-17T02:37:03.8334652Z # common.models\_vendor
2025-08-17T02:37:03.8334883Z 
2025-08-17T02:37:03.8335052Z <a id="common.models_vendor.Vendor"></a>
2025-08-17T02:37:03.8335363Z 
2025-08-17T02:37:03.8335496Z ## Vendor Objects
2025-08-17T02:37:03.8335695Z 
2025-08-17T02:37:03.8335810Z ```python
2025-08-17T02:37:03.8336104Z class Vendor(Base)
2025-08-17T02:37:03.8336413Z ```
2025-08-17T02:37:03.8336575Z 
2025-08-17T02:37:03.8336723Z Vendor of inventory items.
2025-08-17T02:37:03.8336976Z 
2025-08-17T02:37:03.8337169Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-17T02:37:03.8337524Z 
2025-08-17T02:37:03.8337661Z ## VendorPrice Objects
2025-08-17T02:37:03.8337883Z 
2025-08-17T02:37:03.8338015Z ```python
2025-08-17T02:37:03.8338312Z class VendorPrice(Base)
2025-08-17T02:37:03.8338648Z ```
2025-08-17T02:37:03.8338800Z 
2025-08-17T02:37:03.8338991Z Association table linking vendors to pricing.
2025-08-17T02:37:03.8339352Z 
2025-08-17T02:37:03.8339505Z <a id="common.db_url"></a>
2025-08-17T02:37:03.8340277Z 
2025-08-17T02:37:03.8340412Z # common.db\_url
2025-08-17T02:37:03.8340623Z 
2025-08-17T02:37:03.8340782Z <a id="common.db_url.build_url"></a>
2025-08-17T02:37:03.8341078Z 
2025-08-17T02:37:03.8341206Z #### build\_url
2025-08-17T02:37:03.8341400Z 
2025-08-17T02:37:03.8341515Z ```python
2025-08-17T02:37:03.8341836Z def build_url(async_: bool = True) -> str
2025-08-17T02:37:03.8342300Z ```
2025-08-17T02:37:03.8342453Z 
2025-08-17T02:37:03.8342624Z Return Postgres DSN from env or PG_* parts.
2025-08-17T02:37:03.8342957Z 
2025-08-17T02:37:03.8343110Z <a id="common.keepa"></a>
2025-08-17T02:37:03.8343351Z 
2025-08-17T02:37:03.8343476Z # common.keepa
2025-08-17T02:37:03.8343666Z 
2025-08-17T02:37:03.8343807Z <a id="common.llm"></a>
2025-08-17T02:37:03.8344025Z 
2025-08-17T02:37:03.8344141Z # common.llm
2025-08-17T02:37:03.8344326Z 
2025-08-17T02:37:03.8344473Z <a id="common.settings"></a>
2025-08-17T02:37:03.8344731Z 
2025-08-17T02:37:03.8344854Z # common.settings
2025-08-17T02:37:03.8345472Z 
2025-08-17T02:37:03.8345611Z <a id="common.db"></a>
2025-08-17T02:37:03.8345833Z 
2025-08-17T02:37:03.8345956Z # common.db
2025-08-17T02:37:03.8346148Z 
2025-08-17T02:37:03.8346320Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-17T02:37:03.8346650Z 
2025-08-17T02:37:03.8346786Z #### build\_sqlalchemy\_url
2025-08-17T02:37:03.8347026Z 
2025-08-17T02:37:03.8347140Z ```python
2025-08-17T02:37:03.8347451Z def build_sqlalchemy_url() -> str
2025-08-17T02:37:03.8347817Z ```
2025-08-17T02:37:03.8347964Z 
2025-08-17T02:37:03.8348133Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T02:37:03.8348439Z 
2025-08-17T02:37:03.8348598Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-17T02:37:03.8348884Z 
2025-08-17T02:37:03.8349018Z #### build\_asyncpg\_dsn
2025-08-17T02:37:03.8349249Z 
2025-08-17T02:37:03.8349369Z ```python
2025-08-17T02:37:03.8349661Z def build_asyncpg_dsn() -> str
2025-08-17T02:37:03.8350014Z ```
2025-08-17T02:37:03.8350349Z 
2025-08-17T02:37:03.8350603Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T02:37:03.8350950Z 
2025-08-17T02:37:03.8351088Z <a id="common.db.refresh_mvs"></a>
2025-08-17T02:37:03.8351337Z 
2025-08-17T02:37:03.8351454Z #### refresh\_mvs
2025-08-17T02:37:03.8351630Z 
2025-08-17T02:37:03.8351728Z ```python
2025-08-17T02:37:03.8352042Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T02:37:03.8352441Z ```
2025-08-17T02:37:03.8352576Z 
2025-08-17T02:37:03.8352795Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T02:37:03.8353152Z 
2025-08-17T02:37:03.8353273Z <a id="common.config"></a>
2025-08-17T02:37:03.8353474Z 
2025-08-17T02:37:03.8353583Z # common.config
2025-08-17T02:37:03.8353746Z 
2025-08-17T02:37:03.8353860Z <a id="common.base"></a>
2025-08-17T02:37:03.8354055Z 
2025-08-17T02:37:03.8354157Z # common.base
2025-08-17T02:37:03.8354314Z 
2025-08-17T02:37:03.8354432Z <a id="common.base.Base"></a>
2025-08-17T02:37:03.8354650Z 
2025-08-17T02:37:03.8354757Z ## Base Objects
2025-08-17T02:37:03.8354930Z 
2025-08-17T02:37:03.8355054Z ```python
2025-08-17T02:37:03.8355328Z class Base(DeclarativeBase)
2025-08-17T02:37:03.8355636Z ```
2025-08-17T02:37:03.8355765Z 
2025-08-17T02:37:03.8355901Z Base class for SQLAlchemy models.
2025-08-17T02:37:03.8356150Z 
2025-08-17T02:37:03.8356260Z <a id="repricer"></a>
2025-08-17T02:37:03.8356450Z 
2025-08-17T02:37:03.8356556Z # repricer
2025-08-17T02:37:03.8356703Z 
2025-08-17T02:37:03.8356839Z <a id="repricer.app.schemas"></a>
2025-08-17T02:37:03.8357102Z 
2025-08-17T02:37:03.8357233Z # repricer.app.schemas
2025-08-17T02:37:03.8357437Z 
2025-08-17T02:37:03.8357571Z <a id="repricer.app.deps"></a>
2025-08-17T02:37:03.8357807Z 
2025-08-17T02:37:03.8357918Z # repricer.app.deps
2025-08-17T02:37:03.8358149Z 
2025-08-17T02:37:03.8358331Z Placeholder module for Keepa / SP-API clients.
2025-08-17T02:37:03.8358636Z 
2025-08-17T02:37:03.8358760Z <a id="repricer.app.logic"></a>
2025-08-17T02:37:03.8358981Z 
2025-08-17T02:37:03.8359113Z # repricer.app.logic
2025-08-17T02:37:03.8359532Z 
2025-08-17T02:37:03.8359686Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-17T02:37:03.8359977Z 
2025-08-17T02:37:03.8360261Z #### MIN\_MARGIN
2025-08-17T02:37:03.8360424Z 
2025-08-17T02:37:03.8360523Z 15 % ROI
2025-08-17T02:37:03.8360660Z 
2025-08-17T02:37:03.8360818Z <a id="repricer.app.logic.compute_price"></a>
2025-08-17T02:37:03.8361107Z 
2025-08-17T02:37:03.8361296Z #### compute\_price
2025-08-17T02:37:03.8361468Z 
2025-08-17T02:37:03.8361566Z ```python
2025-08-17T02:37:03.8361959Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-17T02:37:03.8362451Z ```
2025-08-17T02:37:03.8362586Z 
2025-08-17T02:37:03.8362748Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-17T02:37:03.8363201Z Replace with real competitive logic later.
2025-08-17T02:37:03.8363470Z 
2025-08-17T02:37:03.8363593Z <a id="repricer.app.main"></a>
2025-08-17T02:37:03.8363809Z 
2025-08-17T02:37:03.8363926Z # repricer.app.main
2025-08-17T02:37:03.8364092Z 
2025-08-17T02:37:03.8364376Z <a id="repricer.app"></a>
2025-08-17T02:37:03.8364593Z 
2025-08-17T02:37:03.8364693Z # repricer.app
2025-08-17T02:37:03.8364845Z 
2025-08-17T02:37:03.8364983Z <a id="repricer.tests.test_imports"></a>
2025-08-17T02:37:03.8365252Z 
2025-08-17T02:37:03.8365378Z # repricer.tests.test\_imports
2025-08-17T02:37:03.8365600Z 
2025-08-17T02:37:03.8365742Z <a id="repricer.tests.test_smoke"></a>
2025-08-17T02:37:03.8365995Z 
2025-08-17T02:37:03.8366120Z # repricer.tests.test\_smoke
2025-08-17T02:37:03.8366348Z 
2025-08-17T02:37:03.8366464Z <a id="repricer.tests"></a>
2025-08-17T02:37:03.8366670Z 
2025-08-17T02:37:03.8366777Z # repricer.tests
2025-08-17T02:37:03.8366946Z 
2025-08-17T02:37:03.8367050Z <a id="db"></a>
2025-08-17T02:37:03.8367206Z 
2025-08-17T02:37:03.8367300Z # db
2025-08-17T02:37:03.8367428Z 
2025-08-17T02:37:03.8367543Z <a id="db.utils.views"></a>
2025-08-17T02:37:03.8367756Z 
2025-08-17T02:37:03.8367861Z # db.utils.views
2025-08-17T02:37:03.8368018Z 
2025-08-17T02:37:03.8368162Z <a id="db.utils.views.replace_view"></a>
2025-08-17T02:37:03.8368471Z 
2025-08-17T02:37:03.8368579Z #### replace\_view
2025-08-17T02:37:03.8368749Z 
2025-08-17T02:37:03.8368863Z ```python
2025-08-17T02:37:03.8369173Z def replace_view(name: str, new_sql: str) -> None
2025-08-17T02:37:03.8369567Z ```
2025-08-17T02:37:03.8369698Z 
2025-08-17T02:37:03.8369841Z Drop and recreate a SQL view atomically.
2025-08-17T02:37:03.8370284Z 
2025-08-17T02:37:03.8370399Z <a id="db.utils"></a>
2025-08-17T02:37:03.8370578Z 
2025-08-17T02:37:03.8370675Z # db.utils
2025-08-17T02:37:03.8370825Z 
2025-08-17T02:37:03.8370949Z <a id="price_importer"></a>
2025-08-17T02:37:03.8371161Z 
2025-08-17T02:37:03.8371275Z # price\_importer
2025-08-17T02:37:03.8371437Z 
2025-08-17T02:37:03.8371605Z <a id="price_importer.services_common.dsn"></a>
2025-08-17T02:37:03.8371900Z 
2025-08-17T02:37:03.8372047Z # price\_importer.services\_common.dsn
2025-08-17T02:37:03.8372310Z 
2025-08-17T02:37:03.8372501Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-17T02:37:03.8372863Z 
2025-08-17T02:37:03.8372971Z #### build\_dsn
2025-08-17T02:37:03.8373129Z 
2025-08-17T02:37:03.8373231Z ```python
2025-08-17T02:37:03.8373496Z def build_dsn(sync: bool = True) -> str
2025-08-17T02:37:03.8373839Z ```
2025-08-17T02:37:03.8373968Z 
2025-08-17T02:37:03.8374072Z Return safe DSN.
2025-08-17T02:37:03.8374239Z 
2025-08-17T02:37:03.8374697Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-17T02:37:03.8375010Z 
2025-08-17T02:37:03.8375211Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-17T02:37:03.8375543Z 
2025-08-17T02:37:03.8375716Z # price\_importer.services\_common.models\_vendor
2025-08-17T02:37:03.8376007Z 
2025-08-17T02:37:03.8376185Z <a id="price_importer.services_common.db_url"></a>
2025-08-17T02:37:03.8376482Z 
2025-08-17T02:37:03.8376631Z # price\_importer.services\_common.db\_url
2025-08-17T02:37:03.8376908Z 
2025-08-17T02:37:03.8377115Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-17T02:37:03.8377465Z 
2025-08-17T02:37:03.8377758Z #### build\_url
2025-08-17T02:37:03.8377915Z 
2025-08-17T02:37:03.8378014Z ```python
2025-08-17T02:37:03.8378297Z def build_url(async_: bool = True) -> str
2025-08-17T02:37:03.8378650Z ```
2025-08-17T02:37:03.8378784Z 
2025-08-17T02:37:03.8378947Z Return Postgres DSN from env or PG_* parts.
2025-08-17T02:37:03.8379224Z 
2025-08-17T02:37:03.8379395Z <a id="price_importer.services_common.keepa"></a>
2025-08-17T02:37:03.8379699Z 
2025-08-17T02:37:03.8379846Z # price\_importer.services\_common.keepa
2025-08-17T02:37:03.8380272Z 
2025-08-17T02:37:03.8380445Z <a id="price_importer.services_common.llm"></a>
2025-08-17T02:37:03.8380736Z 
2025-08-17T02:37:03.8380874Z # price\_importer.services\_common.llm
2025-08-17T02:37:03.8381129Z 
2025-08-17T02:37:03.8381306Z <a id="price_importer.services_common.settings"></a>
2025-08-17T02:37:03.8381606Z 
2025-08-17T02:37:03.8381759Z # price\_importer.services\_common.settings
2025-08-17T02:37:03.8382035Z 
2025-08-17T02:37:03.8382192Z <a id="price_importer.services_common.db"></a>
2025-08-17T02:37:03.8382640Z 
2025-08-17T02:37:03.8382788Z # price\_importer.services\_common.db
2025-08-17T02:37:03.8383041Z 
2025-08-17T02:37:03.8383282Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-17T02:37:03.8383675Z 
2025-08-17T02:37:03.8383800Z #### build\_sqlalchemy\_url
2025-08-17T02:37:03.8384012Z 
2025-08-17T02:37:03.8384110Z ```python
2025-08-17T02:37:03.8384381Z def build_sqlalchemy_url() -> str
2025-08-17T02:37:03.8384708Z ```
2025-08-17T02:37:03.8384840Z 
2025-08-17T02:37:03.8384984Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T02:37:03.8385263Z 
2025-08-17T02:37:03.8385501Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-17T02:37:03.8385870Z 
2025-08-17T02:37:03.8385992Z #### build\_asyncpg\_dsn
2025-08-17T02:37:03.8386194Z 
2025-08-17T02:37:03.8386289Z ```python
2025-08-17T02:37:03.8386544Z def build_asyncpg_dsn() -> str
2025-08-17T02:37:03.8386854Z ```
2025-08-17T02:37:03.8386980Z 
2025-08-17T02:37:03.8387201Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T02:37:03.8387542Z 
2025-08-17T02:37:03.8387745Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-17T02:37:03.8388072Z 
2025-08-17T02:37:03.8388182Z #### refresh\_mvs
2025-08-17T02:37:03.8388343Z 
2025-08-17T02:37:03.8388439Z ```python
2025-08-17T02:37:03.8388750Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T02:37:03.8389153Z ```
2025-08-17T02:37:03.8389303Z 
2025-08-17T02:37:03.8389529Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T02:37:03.8389869Z 
2025-08-17T02:37:03.8390030Z <a id="price_importer.services_common"></a>
2025-08-17T02:37:03.8390460Z 
2025-08-17T02:37:03.8390594Z # price\_importer.services\_common
2025-08-17T02:37:03.8390845Z 
2025-08-17T02:37:03.8391010Z <a id="price_importer.services_common.base"></a>
2025-08-17T02:37:03.8391311Z 
2025-08-17T02:37:03.8391457Z # price\_importer.services\_common.base
2025-08-17T02:37:03.8391735Z 
2025-08-17T02:37:03.8391876Z <a id="price_importer.normaliser"></a>
2025-08-17T02:37:03.8392157Z 
2025-08-17T02:37:03.8392297Z # price\_importer.normaliser
2025-08-17T02:37:03.8392519Z 
2025-08-17T02:37:03.8392688Z <a id="price_importer.common.models_vendor"></a>
2025-08-17T02:37:03.8392986Z 
2025-08-17T02:37:03.8393128Z # price\_importer.common.models\_vendor
2025-08-17T02:37:03.8393390Z 
2025-08-17T02:37:03.8393532Z <a id="price_importer.common.db_url"></a>
2025-08-17T02:37:03.8393800Z 
2025-08-17T02:37:03.8394069Z # price\_importer.common.db\_url
2025-08-17T02:37:03.8394307Z 
2025-08-17T02:37:03.8394484Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-17T02:37:03.8394788Z 
2025-08-17T02:37:03.8394895Z #### make\_dsn
2025-08-17T02:37:03.8395059Z 
2025-08-17T02:37:03.8395160Z ```python
2025-08-17T02:37:03.8395429Z def make_dsn(async_: bool = False) -> str
2025-08-17T02:37:03.8395785Z ```
2025-08-17T02:37:03.8395910Z 
2025-08-17T02:37:03.8396103Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-17T02:37:03.8396414Z 
2025-08-17T02:37:03.8396811Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-17T02:37:03.8397107Z 
2025-08-17T02:37:03.8397217Z #### build\_url
2025-08-17T02:37:03.8397376Z 
2025-08-17T02:37:03.8397476Z ```python
2025-08-17T02:37:03.8397767Z def build_url(async_: bool = False) -> str
2025-08-17T02:37:03.8398121Z ```
2025-08-17T02:37:03.8398262Z 
2025-08-17T02:37:03.8398461Z Return Postgres DSN built from environment variables.
2025-08-17T02:37:03.8398796Z 
2025-08-17T02:37:03.8398942Z <a id="price_importer.common"></a>
2025-08-17T02:37:03.8399199Z 
2025-08-17T02:37:03.8399325Z # price\_importer.common
2025-08-17T02:37:03.8399537Z 
2025-08-17T02:37:03.8399686Z <a id="price_importer.common.base"></a>
2025-08-17T02:37:03.8399956Z 
2025-08-17T02:37:03.8400236Z # price\_importer.common.base
2025-08-17T02:37:03.8400477Z 
2025-08-17T02:37:03.8400631Z <a id="price_importer.tests.conftest"></a>
2025-08-17T02:37:03.8400904Z 
2025-08-17T02:37:03.8401049Z # price\_importer.tests.conftest
2025-08-17T02:37:03.8401459Z 
2025-08-17T02:37:03.8401615Z <a id="price_importer.tests.test_reader"></a>
2025-08-17T02:37:03.8402018Z 
2025-08-17T02:37:03.8402165Z # price\_importer.tests.test\_reader
2025-08-17T02:37:03.8402428Z 
2025-08-17T02:37:03.8402591Z <a id="price_importer.tests.test_imports"></a>
2025-08-17T02:37:03.8402889Z 
2025-08-17T02:37:03.8403033Z # price\_importer.tests.test\_imports
2025-08-17T02:37:03.8403290Z 
2025-08-17T02:37:03.8403455Z <a id="price_importer.tests.test_smoke"></a>
2025-08-17T02:37:03.8403746Z 
2025-08-17T02:37:03.8403888Z # price\_importer.tests.test\_smoke
2025-08-17T02:37:03.8404150Z 
2025-08-17T02:37:03.8404330Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-17T02:37:03.8404657Z 
2025-08-17T02:37:03.8404815Z # price\_importer.tests.test\_normaliser
2025-08-17T02:37:03.8405118Z 
2025-08-17T02:37:03.8405262Z <a id="price_importer.tests"></a>
2025-08-17T02:37:03.8405532Z 
2025-08-17T02:37:03.8405671Z # price\_importer.tests
2025-08-17T02:37:03.8405892Z 
2025-08-17T02:37:03.8406051Z <a id="price_importer.reader"></a>
2025-08-17T02:37:03.8406329Z 
2025-08-17T02:37:03.8406463Z # price\_importer.reader
2025-08-17T02:37:03.8406676Z 
2025-08-17T02:37:03.8406833Z <a id="price_importer.reader.load_file"></a>
2025-08-17T02:37:03.8407153Z 
2025-08-17T02:37:03.8407264Z #### load\_file
2025-08-17T02:37:03.8407430Z 
2025-08-17T02:37:03.8407544Z ```python
2025-08-17T02:37:03.8407840Z def load_file(path: str | Path) -> Any
2025-08-17T02:37:03.8408218Z ```
2025-08-17T02:37:03.8408360Z 
2025-08-17T02:37:03.8408513Z Return DataFrame from CSV or Excel file.
2025-08-17T02:37:03.8408805Z 
2025-08-17T02:37:03.8408987Z Raises RuntimeError if pandas is unavailable.
2025-08-17T02:37:03.8409301Z 
2025-08-17T02:37:03.8409454Z <a id="price_importer.repository"></a>
2025-08-17T02:37:03.8409737Z 
2025-08-17T02:37:03.8409876Z # price\_importer.repository
2025-08-17T02:37:03.8410283Z 
2025-08-17T02:37:03.8410734Z <a id="price_importer.import"></a>
2025-08-17T02:37:03.8410978Z 
2025-08-17T02:37:03.8411088Z # price\_importer.import
2025-08-17T02:37:03.8411292Z 
2025-08-17T02:37:03.8411387Z <a id="fees_h10"></a>
2025-08-17T02:37:03.8411540Z 
2025-08-17T02:37:03.8411622Z # fees\_h10
2025-08-17T02:37:03.8411748Z 
2025-08-17T02:37:03.8411848Z <a id="fees_h10.worker"></a>
2025-08-17T02:37:03.8412028Z 
2025-08-17T02:37:03.8412118Z # fees\_h10.worker
2025-08-17T02:37:03.8412256Z 
2025-08-17T02:37:03.8412383Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-17T02:37:03.8412624Z 
2025-08-17T02:37:03.8412727Z #### list\_active\_asins
2025-08-17T02:37:03.8412888Z 
2025-08-17T02:37:03.8412971Z ```python
2025-08-17T02:37:03.8413206Z def list_active_asins() -> list[str]
2025-08-17T02:37:03.8413487Z ```
2025-08-17T02:37:03.8413600Z 
2025-08-17T02:37:03.8413748Z Return known ASINs or an empty list if unavailable.
2025-08-17T02:37:03.8414007Z 
2025-08-17T02:37:03.8414123Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-17T02:37:03.8414332Z 
2025-08-17T02:37:03.8414437Z # fees\_h10.tests.test\_smoke
2025-08-17T02:37:03.8414628Z 
2025-08-17T02:37:03.8414935Z <a id="fees_h10.tests"></a>
2025-08-17T02:37:03.8415105Z 
2025-08-17T02:37:03.8415190Z # fees\_h10.tests
2025-08-17T02:37:03.8415330Z 
2025-08-17T02:37:03.8415426Z <a id="fees_h10.client"></a>
2025-08-17T02:37:03.8415599Z 
2025-08-17T02:37:03.8415687Z # fees\_h10.client
2025-08-17T02:37:03.8415821Z 
2025-08-17T02:37:03.8415924Z <a id="fees_h10.repository"></a>
2025-08-17T02:37:03.8416114Z 
2025-08-17T02:37:03.8416211Z # fees\_h10.repository
2025-08-17T02:37:03.8416361Z 
2025-08-17T02:37:03.8416450Z <a id="emailer"></a>
2025-08-17T02:37:03.8416598Z 
2025-08-17T02:37:03.8416677Z # emailer
2025-08-17T02:37:03.8416790Z 
2025-08-17T02:37:03.8416924Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-17T02:37:03.8417162Z 
2025-08-17T02:37:03.8417275Z # emailer.tests.test\_import\_emailer
2025-08-17T02:37:03.8417482Z 
2025-08-17T02:37:03.8417595Z <a id="emailer.tests.test_smoke"></a>
2025-08-17T02:37:03.8417799Z 
2025-08-17T02:37:03.8417891Z # emailer.tests.test\_smoke
2025-08-17T02:37:03.8418178Z 
2025-08-17T02:37:03.8418268Z <a id="emailer.tests"></a>
2025-08-17T02:37:03.8418422Z 
2025-08-17T02:37:03.8418506Z # emailer.tests
2025-08-17T02:37:03.8418632Z 
2025-08-17T02:37:03.8418731Z <a id="emailer.generate_body"></a>
2025-08-17T02:37:03.8418915Z 
2025-08-17T02:37:03.8419009Z # emailer.generate\_body
2025-08-17T02:37:03.8419161Z 
2025-08-17T02:37:03.8419245Z <a id="llm_server"></a>
2025-08-17T02:37:03.8419392Z 
2025-08-17T02:37:03.8419468Z # llm\_server
2025-08-17T02:37:03.8419581Z 
2025-08-17T02:37:03.8419672Z <a id="llm_server.app"></a>
2025-08-17T02:37:03.8419837Z 
2025-08-17T02:37:03.8419915Z # llm\_server.app
2025-08-17T02:37:03.8420208Z 
