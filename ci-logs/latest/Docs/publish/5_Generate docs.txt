2025-08-17T15:45:52.8788859Z ##[group]Run pydoc-markdown
2025-08-17T15:45:52.8789159Z [36;1mpydoc-markdown[0m
2025-08-17T15:45:52.8829128Z shell: /usr/bin/bash -e {0}
2025-08-17T15:45:52.8829351Z env:
2025-08-17T15:45:52.8829587Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T15:45:52.8830012Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-17T15:45:52.8830403Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T15:45:52.8830739Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T15:45:52.8831083Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T15:45:52.8831416Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-17T15:45:52.8831701Z ##[endgroup]
2025-08-17T15:45:53.3694894Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-17T15:45:53.3695433Z Unknown key(s) "{'output_directory'}" at:
2025-08-17T15:45:53.3695799Z In "pydoc-markdown.yml"
2025-08-17T15:45:53.3696140Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-17T15:45:53.3696650Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-17T15:45:53.3697238Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-17T15:45:53.3697648Z 
2025-08-17T15:45:53.6541968Z <a id="__init__"></a>
2025-08-17T15:45:53.6542651Z 
2025-08-17T15:45:53.6542800Z # \_\_init\_\_
2025-08-17T15:45:53.6543023Z 
2025-08-17T15:45:53.6543171Z <a id="api"></a>
2025-08-17T15:45:53.6543397Z 
2025-08-17T15:45:53.6543537Z # api
2025-08-17T15:45:53.6543723Z 
2025-08-17T15:45:53.6543899Z <a id="api.tests.test_llm"></a>
2025-08-17T15:45:53.6544224Z 
2025-08-17T15:45:53.6544387Z # api.tests.test\_llm
2025-08-17T15:45:53.6544642Z 
2025-08-17T15:45:53.6544833Z <a id="api.tests.test_imports"></a>
2025-08-17T15:45:53.6545115Z 
2025-08-17T15:45:53.6545246Z # api.tests.test\_imports
2025-08-17T15:45:53.6545471Z 
2025-08-17T15:45:53.6545632Z <a id="api.tests.test_entrypoint"></a>
2025-08-17T15:45:53.6546250Z 
2025-08-17T15:45:53.6546392Z # api.tests.test\_entrypoint
2025-08-17T15:45:53.6546655Z 
2025-08-17T15:45:53.6546797Z <a id="api.tests.test_health"></a>
2025-08-17T15:45:53.6547061Z 
2025-08-17T15:45:53.6547192Z # api.tests.test\_health
2025-08-17T15:45:53.6547416Z 
2025-08-17T15:45:53.6547558Z <a id="api.migrations.env"></a>
2025-08-17T15:45:53.6547815Z 
2025-08-17T15:45:53.6547916Z # api.migrations.env
2025-08-17T15:45:53.6548049Z 
2025-08-17T15:45:53.6548187Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-17T15:45:53.6548420Z 
2025-08-17T15:45:53.6548538Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-17T15:45:53.6548934Z 
2025-08-17T15:45:53.6549059Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-17T15:45:53.6549282Z 
2025-08-17T15:45:53.6549386Z # api.migrations.versions.0004\_fee\_cron
2025-08-17T15:45:53.6549579Z 
2025-08-17T15:45:53.6549755Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-17T15:45:53.6550019Z 
2025-08-17T15:45:53.6550177Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-17T15:45:53.6550436Z 
2025-08-17T15:45:53.6550572Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-17T15:45:53.6550800Z 
2025-08-17T15:45:53.6550928Z # api.migrations.versions.0003\_vendor\_prices
2025-08-17T15:45:53.6551138Z 
2025-08-17T15:45:53.6551269Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-17T15:45:53.6551491Z 
2025-08-17T15:45:53.6551609Z # api.migrations.versions.0024\_create\_buybox
2025-08-17T15:45:53.6551811Z 
2025-08-17T15:45:53.6551946Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-17T15:45:53.6552182Z 
2025-08-17T15:45:53.6552302Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-17T15:45:53.6552513Z 
2025-08-17T15:45:53.6552649Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-17T15:45:53.6552868Z 
2025-08-17T15:45:53.6552986Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-17T15:45:53.6553198Z 
2025-08-17T15:45:53.6553335Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-17T15:45:53.6553786Z 
2025-08-17T15:45:53.6553901Z # api.migrations.versions.0020\_unified\_schema
2025-08-17T15:45:53.6554112Z 
2025-08-17T15:45:53.6554245Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-17T15:45:53.6554471Z 
2025-08-17T15:45:53.6554592Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-17T15:45:53.6554801Z 
2025-08-17T15:45:53.6554920Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-17T15:45:53.6555140Z 
2025-08-17T15:45:53.6555243Z # api.migrations.versions.0001\_baseline
2025-08-17T15:45:53.6555434Z 
2025-08-17T15:45:53.6555531Z <a id="api.migrations.versions"></a>
2025-08-17T15:45:53.6555716Z 
2025-08-17T15:45:53.6555811Z # api.migrations.versions
2025-08-17T15:45:53.6555958Z 
2025-08-17T15:45:53.6556051Z <a id="api.migrations"></a>
2025-08-17T15:45:53.6556199Z 
2025-08-17T15:45:53.6556275Z # api.migrations
2025-08-17T15:45:53.6556398Z 
2025-08-17T15:45:53.6556473Z <a id="api.db"></a>
2025-08-17T15:45:53.6556597Z 
2025-08-17T15:45:53.6556671Z # api.db
2025-08-17T15:45:53.6556775Z 
2025-08-17T15:45:53.6556863Z <a id="api.routes.stats"></a>
2025-08-17T15:45:53.6557020Z 
2025-08-17T15:45:53.6557105Z # api.routes.stats
2025-08-17T15:45:53.6557223Z 
2025-08-17T15:45:53.6557320Z <a id="api.routes.stats.kpi"></a>
2025-08-17T15:45:53.6557490Z 
2025-08-17T15:45:53.6557566Z #### kpi
2025-08-17T15:45:53.6557662Z 
2025-08-17T15:45:53.6557733Z ```python
2025-08-17T15:45:53.6557926Z @router.get("/stats/kpi")
2025-08-17T15:45:53.6558193Z def kpi() -> List[Dict[str, int]]
2025-08-17T15:45:53.6558429Z ```
2025-08-17T15:45:53.6558524Z 
2025-08-17T15:45:53.6558616Z Return KPI metrics (mock).
2025-08-17T15:45:53.6558876Z 
2025-08-17T15:45:53.6558988Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-17T15:45:53.6559188Z 
2025-08-17T15:45:53.6559270Z #### roi\_by\_vendor
2025-08-17T15:45:53.6559392Z 
2025-08-17T15:45:53.6559463Z ```python
2025-08-17T15:45:53.6559659Z @router.get("/stats/roi_by_vendor")
2025-08-17T15:45:53.6560063Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-17T15:45:53.6560339Z ```
2025-08-17T15:45:53.6560430Z 
2025-08-17T15:45:53.6560528Z Return ROI percent by vendor.
2025-08-17T15:45:53.6560685Z 
2025-08-17T15:45:53.6560788Z <a id="api.routes.stats.roi_trend"></a>
2025-08-17T15:45:53.6560980Z 
2025-08-17T15:45:53.6561061Z #### roi\_trend
2025-08-17T15:45:53.6561175Z 
2025-08-17T15:45:53.6561246Z ```python
2025-08-17T15:45:53.6561440Z @router.get("/stats/roi_trend")
2025-08-17T15:45:53.6561710Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-17T15:45:53.6561981Z ```
2025-08-17T15:45:53.6562072Z 
2025-08-17T15:45:53.6562160Z Return 30-day ROI trend.
2025-08-17T15:45:53.6562298Z 
2025-08-17T15:45:53.6562384Z <a id="api.routes.roi"></a>
2025-08-17T15:45:53.6562533Z 
2025-08-17T15:45:53.6562616Z # api.routes.roi
2025-08-17T15:45:53.6562751Z 
2025-08-17T15:45:53.6562851Z <a id="api.routes.health"></a>
2025-08-17T15:45:53.6563071Z 
2025-08-17T15:45:53.6563152Z # api.routes.health
2025-08-17T15:45:53.6563282Z 
2025-08-17T15:45:53.6563395Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-17T15:45:53.6563582Z 
2025-08-17T15:45:53.6563654Z #### MAX\_SKEW
2025-08-17T15:45:53.6563769Z 
2025-08-17T15:45:53.6563838Z seconds
2025-08-17T15:45:53.6563933Z 
2025-08-17T15:45:53.6564039Z <a id="api.routes.health.health"></a>
2025-08-17T15:45:53.6564229Z 
2025-08-17T15:45:53.6564299Z #### health
2025-08-17T15:45:53.6564403Z 
2025-08-17T15:45:53.6564481Z ```python
2025-08-17T15:45:53.6564696Z @router.get("/health", include_in_schema=False)
2025-08-17T15:45:53.6565134Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-17T15:45:53.6565517Z ```
2025-08-17T15:45:53.6565615Z 
2025-08-17T15:45:53.6565740Z Return 200 when DB reachable and clocks are in sync.
2025-08-17T15:45:53.6565933Z 
2025-08-17T15:45:53.6566025Z <a id="api.routes.repository"></a>
2025-08-17T15:45:53.6566188Z 
2025-08-17T15:45:53.6566269Z # api.routes.repository
2025-08-17T15:45:53.6566401Z 
2025-08-17T15:45:53.6566486Z <a id="api.routes"></a>
2025-08-17T15:45:53.6566765Z 
2025-08-17T15:45:53.6566831Z # api.routes
2025-08-17T15:45:53.6566979Z 
2025-08-17T15:45:53.6567059Z <a id="api.models.fee"></a>
2025-08-17T15:45:53.6567191Z 
2025-08-17T15:45:53.6567258Z # api.models.fee
2025-08-17T15:45:53.6567366Z 
2025-08-17T15:45:53.6567437Z <a id="api.models"></a>
2025-08-17T15:45:53.6567552Z 
2025-08-17T15:45:53.6567619Z # api.models
2025-08-17T15:45:53.6567712Z 
2025-08-17T15:45:53.6567791Z <a id="api.roi_repository"></a>
2025-08-17T15:45:53.6567937Z 
2025-08-17T15:45:53.6568006Z # api.roi\_repository
2025-08-17T15:45:53.6568120Z 
2025-08-17T15:45:53.6568188Z <a id="api.main"></a>
2025-08-17T15:45:53.6568304Z 
2025-08-17T15:45:53.6568366Z # api.main
2025-08-17T15:45:53.6568456Z 
2025-08-17T15:45:53.6568538Z <a id="api.main.ready"></a>
2025-08-17T15:45:53.6568783Z 
2025-08-17T15:45:53.6568846Z #### ready
2025-08-17T15:45:53.6568944Z 
2025-08-17T15:45:53.6569006Z ```python
2025-08-17T15:45:53.6569260Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-17T15:45:53.6569706Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-17T15:45:53.6570056Z                                                                       str]
2025-08-17T15:45:53.6570288Z ```
2025-08-17T15:45:53.6570371Z 
2025-08-17T15:45:53.6570473Z Return 200 only when migrations are at head.
2025-08-17T15:45:53.6570646Z 
2025-08-17T15:45:53.6570721Z <a id="api.config"></a>
2025-08-17T15:45:53.6570841Z 
2025-08-17T15:45:53.6570905Z # api.config
2025-08-17T15:45:53.6570997Z 
2025-08-17T15:45:53.6571062Z <a id="etl"></a>
2025-08-17T15:45:53.6571169Z 
2025-08-17T15:45:53.6571229Z # etl
2025-08-17T15:45:53.6571317Z 
2025-08-17T15:45:53.6571403Z <a id="etl.fba_fee_ingestor"></a>
2025-08-17T15:45:53.6571547Z 
2025-08-17T15:45:53.6571620Z # etl.fba\_fee\_ingestor
2025-08-17T15:45:53.6571742Z 
2025-08-17T15:45:53.6571833Z <a id="etl.sp_fees_ingestor"></a>
2025-08-17T15:45:53.6571974Z 
2025-08-17T15:45:53.6572047Z # etl.sp\_fees\_ingestor
2025-08-17T15:45:53.6572332Z 
2025-08-17T15:45:53.6572413Z <a id="etl.keepa_ingestor"></a>
2025-08-17T15:45:53.6572557Z 
2025-08-17T15:45:53.6572629Z # etl.keepa\_ingestor
2025-08-17T15:45:53.6572750Z 
2025-08-17T15:45:53.6572817Z <a id="etl.db"></a>
2025-08-17T15:45:53.6572926Z 
2025-08-17T15:45:53.6572995Z # etl.db
2025-08-17T15:45:53.6573084Z 
2025-08-17T15:45:53.6573168Z <a id="etl.dialects.schemas"></a>
2025-08-17T15:45:53.6573323Z 
2025-08-17T15:45:53.6573399Z # etl.dialects.schemas
2025-08-17T15:45:53.6573516Z 
2025-08-17T15:45:53.6573625Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-17T15:45:53.6573816Z 
2025-08-17T15:45:53.6573905Z # etl.dialects.amazon\_reimbursements
2025-08-17T15:45:53.6574066Z 
2025-08-17T15:45:53.6574164Z <a id="etl.dialects.amazon_returns"></a>
2025-08-17T15:45:53.6574332Z 
2025-08-17T15:45:53.6574415Z # etl.dialects.amazon\_returns
2025-08-17T15:45:53.6574563Z 
2025-08-17T15:45:53.6574640Z <a id="etl.dialects"></a>
2025-08-17T15:45:53.6574764Z 
2025-08-17T15:45:53.6574835Z # etl.dialects
2025-08-17T15:45:53.6574946Z 
2025-08-17T15:45:53.6575012Z <a id="ingest"></a>
2025-08-17T15:45:53.6575115Z 
2025-08-17T15:45:53.6575180Z # ingest
2025-08-17T15:45:53.6575263Z 
2025-08-17T15:45:53.6575345Z <a id="ingest.copy_loader"></a>
2025-08-17T15:45:53.6575481Z 
2025-08-17T15:45:53.6575560Z # ingest.copy\_loader
2025-08-17T15:45:53.6575673Z 
2025-08-17T15:45:53.6575777Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-17T15:45:53.6575968Z 
2025-08-17T15:45:53.6576041Z #### copy\_df\_via\_temp
2025-08-17T15:45:53.6576164Z 
2025-08-17T15:45:53.6576232Z ```python
2025-08-17T15:45:53.6576402Z def copy_df_via_temp(engine: Engine,
2025-08-17T15:45:53.6576639Z                      df: pd.DataFrame,
2025-08-17T15:45:53.6576868Z                      target_table: str,
2025-08-17T15:45:53.6577088Z                      *,
2025-08-17T15:45:53.6577295Z                      target_schema: Optional[str] = None,
2025-08-17T15:45:53.6577563Z                      columns: Sequence[str],
2025-08-17T15:45:53.6577957Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-17T15:45:53.6578251Z                      analyze_after: bool = False) -> int
2025-08-17T15:45:53.6578484Z ```
2025-08-17T15:45:53.6578569Z 
2025-08-17T15:45:53.6578828Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-17T15:45:53.6579060Z 
2025-08-17T15:45:53.6579237Z The dataframe is first written to a TEMP table created ``LIKE`` the target
2025-08-17T15:45:53.6579668Z including defaults and generated columns.  Data is streamed via ``COPY`` and
2025-08-17T15:45:53.6580100Z then inserted into the final table.  If ``conflict_cols`` is provided an
2025-08-17T15:45:53.6580500Z ``INSERT ... ON CONFLICT DO UPDATE`` is issued for the non-conflicting
2025-08-17T15:45:53.6580833Z columns, otherwise rows are simply appended.
2025-08-17T15:45:53.6581010Z 
2025-08-17T15:45:53.6581118Z Returns the number of rows provided in ``df``.
2025-08-17T15:45:53.6581297Z 
2025-08-17T15:45:53.6581390Z <a id="ingest.tests.test_smoke"></a>
2025-08-17T15:45:53.6581564Z 
2025-08-17T15:45:53.6581648Z # ingest.tests.test\_smoke
2025-08-17T15:45:53.6581781Z 
2025-08-17T15:45:53.6581860Z <a id="ingest.tests"></a>
2025-08-17T15:45:53.6581991Z 
2025-08-17T15:45:53.6582059Z # ingest.tests
2025-08-17T15:45:53.6582161Z 
2025-08-17T15:45:53.6582253Z <a id="ingest.upload_router"></a>
2025-08-17T15:45:53.6582402Z 
2025-08-17T15:45:53.6582478Z # ingest.upload\_router
2025-08-17T15:45:53.6582605Z 
2025-08-17T15:45:53.6582687Z <a id="ingest.email_watcher"></a>
2025-08-17T15:45:53.6582833Z 
2025-08-17T15:45:53.6582906Z # ingest.email\_watcher
2025-08-17T15:45:53.6583027Z 
2025-08-17T15:45:53.6583115Z <a id="ingest.email_watcher.main"></a>
2025-08-17T15:45:53.6583274Z 
2025-08-17T15:45:53.6583343Z #### main
2025-08-17T15:45:53.6583432Z 
2025-08-17T15:45:53.6583494Z ```python
2025-08-17T15:45:53.6583667Z def main() -> dict[str, str]
2025-08-17T15:45:53.6583859Z ```
2025-08-17T15:45:53.6583948Z 
2025-08-17T15:45:53.6584209Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-17T15:45:53.6584437Z 
2025-08-17T15:45:53.6584564Z Returns {"status": "success"} when processing completes.
2025-08-17T15:45:53.6584776Z 
2025-08-17T15:45:53.6584859Z <a id="ingest.ingest_router"></a>
2025-08-17T15:45:53.6585015Z 
2025-08-17T15:45:53.6585097Z # ingest.ingest\_router
2025-08-17T15:45:53.6585213Z 
2025-08-17T15:45:53.6585293Z <a id="logistics_etl"></a>
2025-08-17T15:45:53.6585427Z 
2025-08-17T15:45:53.6585496Z # logistics\_etl
2025-08-17T15:45:53.6585605Z 
2025-08-17T15:45:53.6585680Z Daily logistics ETL job.
2025-08-17T15:45:53.6585808Z 
2025-08-17T15:45:53.6585889Z <a id="logistics_etl.__main__"></a>
2025-08-17T15:45:53.6586038Z 
2025-08-17T15:45:53.6586121Z # logistics\_etl.\_\_main\_\_
2025-08-17T15:45:53.6586254Z 
2025-08-17T15:45:53.6586332Z <a id="logistics_etl.dsn"></a>
2025-08-17T15:45:53.6586474Z 
2025-08-17T15:45:53.6586543Z # logistics\_etl.dsn
2025-08-17T15:45:53.6586655Z 
2025-08-17T15:45:53.6586771Z Local DSN builder to avoid cross-service dependency.
2025-08-17T15:45:53.6586988Z 
2025-08-17T15:45:53.6587080Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-17T15:45:53.6587242Z 
2025-08-17T15:45:53.6587312Z #### build\_dsn
2025-08-17T15:45:53.6587411Z 
2025-08-17T15:45:53.6587472Z ```python
2025-08-17T15:45:53.6587649Z def build_dsn(sync: bool = True) -> str
2025-08-17T15:45:53.6587864Z ```
2025-08-17T15:45:53.6587949Z 
2025-08-17T15:45:53.6588084Z Return a Postgres DSN assembled from environment variables.
2025-08-17T15:45:53.6588301Z 
2025-08-17T15:45:53.6588446Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-17T15:45:53.6588962Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-17T15:45:53.6589303Z error when any required variable is missing.
2025-08-17T15:45:53.6589476Z 
2025-08-17T15:45:53.6589569Z <a id="logistics_etl.tests.conftest"></a>
2025-08-17T15:45:53.6589741Z 
2025-08-17T15:45:53.6589823Z # logistics\_etl.tests.conftest
2025-08-17T15:45:53.6589974Z 
2025-08-17T15:45:53.6590077Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-17T15:45:53.6590398Z 
2025-08-17T15:45:53.6590488Z # logistics\_etl.tests.test\_repository
2025-08-17T15:45:53.6590649Z 
2025-08-17T15:45:53.6590749Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-17T15:45:53.6590921Z 
2025-08-17T15:45:53.6591004Z # logistics\_etl.tests.test\_cron
2025-08-17T15:45:53.6591157Z 
2025-08-17T15:45:53.6591252Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-17T15:45:53.6591422Z 
2025-08-17T15:45:53.6591507Z # logistics\_etl.tests.test\_imports
2025-08-17T15:45:53.6591667Z 
2025-08-17T15:45:53.6591759Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-17T15:45:53.6591925Z 
2025-08-17T15:45:53.6592014Z # logistics\_etl.tests.test\_smoke
2025-08-17T15:45:53.6592162Z 
2025-08-17T15:45:53.6592255Z <a id="logistics_etl.tests.test_client"></a>
2025-08-17T15:45:53.6592429Z 
2025-08-17T15:45:53.6592512Z # logistics\_etl.tests.test\_client
2025-08-17T15:45:53.6592662Z 
2025-08-17T15:45:53.6592747Z <a id="logistics_etl.tests"></a>
2025-08-17T15:45:53.6592900Z 
2025-08-17T15:45:53.6592971Z # logistics\_etl.tests
2025-08-17T15:45:53.6593089Z 
2025-08-17T15:45:53.6593174Z <a id="logistics_etl.flow"></a>
2025-08-17T15:45:53.6593311Z 
2025-08-17T15:45:53.6593381Z # logistics\_etl.flow
2025-08-17T15:45:53.6593501Z 
2025-08-17T15:45:53.6593583Z <a id="logistics_etl.client"></a>
2025-08-17T15:45:53.6593725Z 
2025-08-17T15:45:53.6593797Z # logistics\_etl.client
2025-08-17T15:45:53.6593922Z 
2025-08-17T15:45:53.6593998Z <a id="logistics_etl.cron"></a>
2025-08-17T15:45:53.6594145Z 
2025-08-17T15:45:53.6594215Z # logistics\_etl.cron
2025-08-17T15:45:53.6594329Z 
2025-08-17T15:45:53.6594417Z <a id="logistics_etl.db"></a>
2025-08-17T15:45:53.6594552Z 
2025-08-17T15:45:53.6594622Z # logistics\_etl.db
2025-08-17T15:45:53.6594736Z 
2025-08-17T15:45:53.6594824Z <a id="logistics_etl.repository"></a>
2025-08-17T15:45:53.6594982Z 
2025-08-17T15:45:53.6595062Z # logistics\_etl.repository
2025-08-17T15:45:53.6595322Z 
2025-08-17T15:45:53.6595395Z <a id="alert_bot"></a>
2025-08-17T15:45:53.6595514Z 
2025-08-17T15:45:53.6595587Z # alert\_bot
2025-08-17T15:45:53.6595681Z 
2025-08-17T15:45:53.6595767Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-17T15:45:53.6595935Z 
2025-08-17T15:45:53.6596016Z # alert\_bot.tests.test\_smoke
2025-08-17T15:45:53.6596154Z 
2025-08-17T15:45:53.6596232Z <a id="alert_bot.tests"></a>
2025-08-17T15:45:53.6596372Z 
2025-08-17T15:45:53.6596440Z # alert\_bot.tests
2025-08-17T15:45:53.6596544Z 
2025-08-17T15:45:53.6596631Z <a id="alert_bot.alert_bot"></a>
2025-08-17T15:45:53.6596769Z 
2025-08-17T15:45:53.6596868Z # alert\_bot.alert\_bot
2025-08-17T15:45:53.6597098Z 
2025-08-17T15:45:53.6597239Z <a id="alert_bot.rules"></a>
2025-08-17T15:45:53.6597429Z 
2025-08-17T15:45:53.6597548Z # alert\_bot.rules
2025-08-17T15:45:53.6597748Z 
2025-08-17T15:45:53.6597863Z <a id="common"></a>
2025-08-17T15:45:53.6598045Z 
2025-08-17T15:45:53.6598152Z # common
2025-08-17T15:45:53.6598302Z 
2025-08-17T15:45:53.6598431Z <a id="common.dsn"></a>
2025-08-17T15:45:53.6598624Z 
2025-08-17T15:45:53.6598887Z # common.dsn
2025-08-17T15:45:53.6599074Z 
2025-08-17T15:45:53.6599189Z <a id="common.dsn.build_dsn"></a>
2025-08-17T15:45:53.6599352Z 
2025-08-17T15:45:53.6599419Z #### build\_dsn
2025-08-17T15:45:53.6599520Z 
2025-08-17T15:45:53.6599584Z ```python
2025-08-17T15:45:53.6599763Z def build_dsn(sync: bool = True) -> str
2025-08-17T15:45:53.6599985Z ```
2025-08-17T15:45:53.6600068Z 
2025-08-17T15:45:53.6600188Z Return a Postgres DSN, validating required variables.
2025-08-17T15:45:53.6600389Z 
2025-08-17T15:45:53.6600575Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-17T15:45:53.6601000Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-17T15:45:53.6601412Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-17T15:45:53.6601720Z missing.
2025-08-17T15:45:53.6601809Z 
2025-08-17T15:45:53.6601894Z <a id="common.models_vendor"></a>
2025-08-17T15:45:53.6602048Z 
2025-08-17T15:45:53.6602275Z # common.models\_vendor
2025-08-17T15:45:53.6602400Z 
2025-08-17T15:45:53.6602489Z <a id="common.models_vendor.Vendor"></a>
2025-08-17T15:45:53.6602663Z 
2025-08-17T15:45:53.6602729Z ## Vendor Objects
2025-08-17T15:45:53.6602836Z 
2025-08-17T15:45:53.6602899Z ```python
2025-08-17T15:45:53.6603058Z class Vendor(Base)
2025-08-17T15:45:53.6603224Z ```
2025-08-17T15:45:53.6603307Z 
2025-08-17T15:45:53.6603385Z Vendor of inventory items.
2025-08-17T15:45:53.6603513Z 
2025-08-17T15:45:53.6603624Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-17T15:45:53.6603801Z 
2025-08-17T15:45:53.6603875Z ## VendorPrice Objects
2025-08-17T15:45:53.6603998Z 
2025-08-17T15:45:53.6604062Z ```python
2025-08-17T15:45:53.6604219Z class VendorPrice(Base)
2025-08-17T15:45:53.6604400Z ```
2025-08-17T15:45:53.6604483Z 
2025-08-17T15:45:53.6604590Z Association table linking vendors to pricing.
2025-08-17T15:45:53.6604769Z 
2025-08-17T15:45:53.6604843Z <a id="common.db_url"></a>
2025-08-17T15:45:53.6604988Z 
2025-08-17T15:45:53.6605061Z # common.db\_url
2025-08-17T15:45:53.6605166Z 
2025-08-17T15:45:53.6605250Z <a id="common.db_url.build_url"></a>
2025-08-17T15:45:53.6605408Z 
2025-08-17T15:45:53.6605472Z #### build\_url
2025-08-17T15:45:53.6605570Z 
2025-08-17T15:45:53.6605639Z ```python
2025-08-17T15:45:53.6605811Z def build_url(async_: bool = True) -> str
2025-08-17T15:45:53.6606035Z ```
2025-08-17T15:45:53.6606115Z 
2025-08-17T15:45:53.6606212Z Return Postgres DSN from env or PG_* parts.
2025-08-17T15:45:53.6606385Z 
2025-08-17T15:45:53.6606469Z <a id="common.keepa"></a>
2025-08-17T15:45:53.6606598Z 
2025-08-17T15:45:53.6606666Z # common.keepa
2025-08-17T15:45:53.6606773Z 
2025-08-17T15:45:53.6606848Z <a id="common.llm"></a>
2025-08-17T15:45:53.6606966Z 
2025-08-17T15:45:53.6607036Z # common.llm
2025-08-17T15:45:53.6607133Z 
2025-08-17T15:45:53.6607212Z <a id="common.settings"></a>
2025-08-17T15:45:53.6607348Z 
2025-08-17T15:45:53.6607425Z # common.settings
2025-08-17T15:45:53.6607650Z 
2025-08-17T15:45:53.6607727Z <a id="common.db"></a>
2025-08-17T15:45:53.6607847Z 
2025-08-17T15:45:53.6607910Z # common.db
2025-08-17T15:45:53.6608001Z 
2025-08-17T15:45:53.6608092Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-17T15:45:53.6608266Z 
2025-08-17T15:45:53.6608343Z #### build\_sqlalchemy\_url
2025-08-17T15:45:53.6608475Z 
2025-08-17T15:45:53.6608543Z ```python
2025-08-17T15:45:53.6622988Z def build_sqlalchemy_url() -> str
2025-08-17T15:45:53.6623451Z ```
2025-08-17T15:45:53.6623615Z 
2025-08-17T15:45:53.6623793Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T15:45:53.6624136Z 
2025-08-17T15:45:53.6624299Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-17T15:45:53.6624570Z 
2025-08-17T15:45:53.6624693Z #### build\_asyncpg\_dsn
2025-08-17T15:45:53.6624907Z 
2025-08-17T15:45:53.6625029Z ```python
2025-08-17T15:45:53.6625320Z def build_asyncpg_dsn() -> str
2025-08-17T15:45:53.6625669Z ```
2025-08-17T15:45:53.6625822Z 
2025-08-17T15:45:53.6626058Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T15:45:53.6626440Z 
2025-08-17T15:45:53.6626597Z <a id="common.db.refresh_mvs"></a>
2025-08-17T15:45:53.6626860Z 
2025-08-17T15:45:53.6626979Z #### refresh\_mvs
2025-08-17T15:45:53.6627156Z 
2025-08-17T15:45:53.6627266Z ```python
2025-08-17T15:45:53.6627605Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T15:45:53.6628030Z ```
2025-08-17T15:45:53.6628176Z 
2025-08-17T15:45:53.6628408Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T15:45:53.6629029Z 
2025-08-17T15:45:53.6629165Z <a id="common.config"></a>
2025-08-17T15:45:53.6629395Z 
2025-08-17T15:45:53.6629519Z # common.config
2025-08-17T15:45:53.6629650Z 
2025-08-17T15:45:53.6629733Z <a id="common.base"></a>
2025-08-17T15:45:53.6629867Z 
2025-08-17T15:45:53.6629932Z # common.base
2025-08-17T15:45:53.6630035Z 
2025-08-17T15:45:53.6630115Z <a id="common.base.Base"></a>
2025-08-17T15:45:53.6630258Z 
2025-08-17T15:45:53.6630323Z ## Base Objects
2025-08-17T15:45:53.6630428Z 
2025-08-17T15:45:53.6630500Z ```python
2025-08-17T15:45:53.6630858Z class Base(DeclarativeBase)
2025-08-17T15:45:53.6631090Z ```
2025-08-17T15:45:53.6631173Z 
2025-08-17T15:45:53.6631264Z Base class for SQLAlchemy models.
2025-08-17T15:45:53.6631413Z 
2025-08-17T15:45:53.6631487Z <a id="repricer"></a>
2025-08-17T15:45:53.6631610Z 
2025-08-17T15:45:53.6631673Z # repricer
2025-08-17T15:45:53.6631764Z 
2025-08-17T15:45:53.6631852Z <a id="repricer.app.schemas"></a>
2025-08-17T15:45:53.6632015Z 
2025-08-17T15:45:53.6632092Z # repricer.app.schemas
2025-08-17T15:45:53.6632219Z 
2025-08-17T15:45:53.6632313Z <a id="repricer.app.deps"></a>
2025-08-17T15:45:53.6632456Z 
2025-08-17T15:45:53.6632530Z # repricer.app.deps
2025-08-17T15:45:53.6632642Z 
2025-08-17T15:45:53.6632770Z Placeholder module for Keepa / SP-API clients.
2025-08-17T15:45:53.6632957Z 
2025-08-17T15:45:53.6633040Z <a id="repricer.app.logic"></a>
2025-08-17T15:45:53.6633188Z 
2025-08-17T15:45:53.6633260Z # repricer.app.logic
2025-08-17T15:45:53.6633373Z 
2025-08-17T15:45:53.6633486Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-17T15:45:53.6633676Z 
2025-08-17T15:45:53.6633742Z #### MIN\_MARGIN
2025-08-17T15:45:53.6633847Z 
2025-08-17T15:45:53.6633915Z 15 % ROI
2025-08-17T15:45:53.6634005Z 
2025-08-17T15:45:53.6634111Z <a id="repricer.app.logic.compute_price"></a>
2025-08-17T15:45:53.6634302Z 
2025-08-17T15:45:53.6634371Z #### compute\_price
2025-08-17T15:45:53.6634481Z 
2025-08-17T15:45:53.6634552Z ```python
2025-08-17T15:45:53.6634801Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-17T15:45:53.6635110Z ```
2025-08-17T15:45:53.6635192Z 
2025-08-17T15:45:53.6635300Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-17T15:45:53.6635592Z Replace with real competitive logic later.
2025-08-17T15:45:53.6635759Z 
2025-08-17T15:45:53.6635844Z <a id="repricer.app.main"></a>
2025-08-17T15:45:53.6635990Z 
2025-08-17T15:45:53.6636064Z # repricer.app.main
2025-08-17T15:45:53.6636171Z 
2025-08-17T15:45:53.6636255Z <a id="repricer.app"></a>
2025-08-17T15:45:53.6636504Z 
2025-08-17T15:45:53.6636576Z # repricer.app
2025-08-17T15:45:53.6636681Z 
2025-08-17T15:45:53.6636779Z <a id="repricer.tests.test_imports"></a>
2025-08-17T15:45:53.6636946Z 
2025-08-17T15:45:53.6637029Z # repricer.tests.test\_imports
2025-08-17T15:45:53.6637177Z 
2025-08-17T15:45:53.6637265Z <a id="repricer.tests.test_smoke"></a>
2025-08-17T15:45:53.6637426Z 
2025-08-17T15:45:53.6637514Z # repricer.tests.test\_smoke
2025-08-17T15:45:53.6637651Z 
2025-08-17T15:45:53.6637729Z <a id="repricer.tests"></a>
2025-08-17T15:45:53.6637858Z 
2025-08-17T15:45:53.6637932Z # repricer.tests
2025-08-17T15:45:53.6638036Z 
2025-08-17T15:45:53.6638099Z <a id="db"></a>
2025-08-17T15:45:53.6638206Z 
2025-08-17T15:45:53.6638264Z # db
2025-08-17T15:45:53.6638349Z 
2025-08-17T15:45:53.6638424Z <a id="db.utils.views"></a>
2025-08-17T15:45:53.6638562Z 
2025-08-17T15:45:53.6638629Z # db.utils.views
2025-08-17T15:45:53.6638942Z 
2025-08-17T15:45:53.6639046Z <a id="db.utils.views.replace_view"></a>
2025-08-17T15:45:53.6639229Z 
2025-08-17T15:45:53.6639304Z #### replace\_view
2025-08-17T15:45:53.6639420Z 
2025-08-17T15:45:53.6639484Z ```python
2025-08-17T15:45:53.6639678Z def replace_view(name: str, new_sql: str) -> None
2025-08-17T15:45:53.6639924Z ```
2025-08-17T15:45:53.6640007Z 
2025-08-17T15:45:53.6640098Z Drop and recreate a SQL view atomically.
2025-08-17T15:45:53.6640268Z 
2025-08-17T15:45:53.6640338Z <a id="db.utils"></a>
2025-08-17T15:45:53.6640452Z 
2025-08-17T15:45:53.6640518Z # db.utils
2025-08-17T15:45:53.6640607Z 
2025-08-17T15:45:53.6640685Z <a id="price_importer"></a>
2025-08-17T15:45:53.6640818Z 
2025-08-17T15:45:53.6640888Z # price\_importer
2025-08-17T15:45:53.6640993Z 
2025-08-17T15:45:53.6641096Z <a id="price_importer.services_common.dsn"></a>
2025-08-17T15:45:53.6641283Z 
2025-08-17T15:45:53.6641374Z # price\_importer.services\_common.dsn
2025-08-17T15:45:53.6641536Z 
2025-08-17T15:45:53.6641666Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-17T15:45:53.6641877Z 
2025-08-17T15:45:53.6641941Z #### build\_dsn
2025-08-17T15:45:53.6642172Z 
2025-08-17T15:45:53.6642235Z ```python
2025-08-17T15:45:53.6642410Z def build_dsn(sync: bool = True) -> str
2025-08-17T15:45:53.6642634Z ```
2025-08-17T15:45:53.6642718Z 
2025-08-17T15:45:53.6642785Z Return safe DSN.
2025-08-17T15:45:53.6642898Z 
2025-08-17T15:45:53.6643232Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-17T15:45:53.6643431Z 
2025-08-17T15:45:53.6643562Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-17T15:45:53.6643767Z 
2025-08-17T15:45:53.6643875Z # price\_importer.services\_common.models\_vendor
2025-08-17T15:45:53.6644070Z 
2025-08-17T15:45:53.6644176Z <a id="price_importer.services_common.db_url"></a>
2025-08-17T15:45:53.6644370Z 
2025-08-17T15:45:53.6644480Z # price\_importer.services\_common.db\_url
2025-08-17T15:45:53.6644664Z 
2025-08-17T15:45:53.6644801Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-17T15:45:53.6645019Z 
2025-08-17T15:45:53.6645100Z #### build\_url
2025-08-17T15:45:53.6645209Z 
2025-08-17T15:45:53.6645275Z ```python
2025-08-17T15:45:53.6645454Z def build_url(async_: bool = True) -> str
2025-08-17T15:45:53.6645676Z ```
2025-08-17T15:45:53.6645764Z 
2025-08-17T15:45:53.6645862Z Return Postgres DSN from env or PG_* parts.
2025-08-17T15:45:53.6646038Z 
2025-08-17T15:45:53.6646155Z <a id="price_importer.services_common.keepa"></a>
2025-08-17T15:45:53.6646339Z 
2025-08-17T15:45:53.6646436Z # price\_importer.services\_common.keepa
2025-08-17T15:45:53.6646614Z 
2025-08-17T15:45:53.6646717Z <a id="price_importer.services_common.llm"></a>
2025-08-17T15:45:53.6646898Z 
2025-08-17T15:45:53.6646991Z # price\_importer.services\_common.llm
2025-08-17T15:45:53.6647157Z 
2025-08-17T15:45:53.6647273Z <a id="price_importer.services_common.settings"></a>
2025-08-17T15:45:53.6647465Z 
2025-08-17T15:45:53.6647571Z # price\_importer.services\_common.settings
2025-08-17T15:45:53.6647744Z 
2025-08-17T15:45:53.6647845Z <a id="price_importer.services_common.db"></a>
2025-08-17T15:45:53.6648190Z 
2025-08-17T15:45:53.6648285Z # price\_importer.services\_common.db
2025-08-17T15:45:53.6648446Z 
2025-08-17T15:45:53.6648603Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-17T15:45:53.6649039Z 
2025-08-17T15:45:53.6649122Z #### build\_sqlalchemy\_url
2025-08-17T15:45:53.6649294Z 
2025-08-17T15:45:53.6649362Z ```python
2025-08-17T15:45:53.6649544Z def build_sqlalchemy_url() -> str
2025-08-17T15:45:53.6649750Z ```
2025-08-17T15:45:53.6649840Z 
2025-08-17T15:45:53.6649937Z Return Postgres URL for SQLAlchemy engines.
2025-08-17T15:45:53.6650111Z 
2025-08-17T15:45:53.6650257Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-17T15:45:53.6650492Z 
2025-08-17T15:45:53.6650569Z #### build\_asyncpg\_dsn
2025-08-17T15:45:53.6650694Z 
2025-08-17T15:45:53.6650764Z ```python
2025-08-17T15:45:53.6650931Z def build_asyncpg_dsn() -> str
2025-08-17T15:45:53.6651129Z ```
2025-08-17T15:45:53.6651212Z 
2025-08-17T15:45:53.6651337Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-17T15:45:53.6651562Z 
2025-08-17T15:45:53.6651687Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-17T15:45:53.6651894Z 
2025-08-17T15:45:53.6651966Z #### refresh\_mvs
2025-08-17T15:45:53.6652072Z 
2025-08-17T15:45:53.6652134Z ```python
2025-08-17T15:45:53.6652333Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-17T15:45:53.6652578Z ```
2025-08-17T15:45:53.6652665Z 
2025-08-17T15:45:53.6652799Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-17T15:45:53.6653009Z 
2025-08-17T15:45:53.6653103Z <a id="price_importer.services_common"></a>
2025-08-17T15:45:53.6653282Z 
2025-08-17T15:45:53.6653370Z # price\_importer.services\_common
2025-08-17T15:45:53.6653521Z 
2025-08-17T15:45:53.6653630Z <a id="price_importer.services_common.base"></a>
2025-08-17T15:45:53.6653813Z 
2025-08-17T15:45:53.6653904Z # price\_importer.services\_common.base
2025-08-17T15:45:53.6654070Z 
2025-08-17T15:45:53.6654161Z <a id="price_importer.normaliser"></a>
2025-08-17T15:45:53.6654455Z 
2025-08-17T15:45:53.6654539Z # price\_importer.normaliser
2025-08-17T15:45:53.6654681Z 
2025-08-17T15:45:53.6654786Z <a id="price_importer.common.models_vendor"></a>
2025-08-17T15:45:53.6654964Z 
2025-08-17T15:45:53.6655058Z # price\_importer.common.models\_vendor
2025-08-17T15:45:53.6655219Z 
2025-08-17T15:45:53.6655311Z <a id="price_importer.common.db_url"></a>
2025-08-17T15:45:53.6655482Z 
2025-08-17T15:45:53.6655567Z # price\_importer.common.db\_url
2025-08-17T15:45:53.6655712Z 
2025-08-17T15:45:53.6655819Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-17T15:45:53.6656009Z 
2025-08-17T15:45:53.6656074Z #### make\_dsn
2025-08-17T15:45:53.6656173Z 
2025-08-17T15:45:53.6656240Z ```python
2025-08-17T15:45:53.6656411Z def make_dsn(async_: bool = False) -> str
2025-08-17T15:45:53.6656638Z ```
2025-08-17T15:45:53.6656721Z 
2025-08-17T15:45:53.6656838Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-17T15:45:53.6657040Z 
2025-08-17T15:45:53.6657154Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-17T15:45:53.6657351Z 
2025-08-17T15:45:53.6657423Z #### build\_url
2025-08-17T15:45:53.6657524Z 
2025-08-17T15:45:53.6657587Z ```python
2025-08-17T15:45:53.6657766Z def build_url(async_: bool = False) -> str
2025-08-17T15:45:53.6657994Z ```
2025-08-17T15:45:53.6658074Z 
2025-08-17T15:45:53.6658201Z Return Postgres DSN built from environment variables.
2025-08-17T15:45:53.6658397Z 
2025-08-17T15:45:53.6658482Z <a id="price_importer.common"></a>
2025-08-17T15:45:53.6658639Z 
2025-08-17T15:45:53.6658882Z # price\_importer.common
2025-08-17T15:45:53.6659017Z 
2025-08-17T15:45:53.6659113Z <a id="price_importer.common.base"></a>
2025-08-17T15:45:53.6659277Z 
2025-08-17T15:45:53.6659363Z # price\_importer.common.base
2025-08-17T15:45:53.6659500Z 
2025-08-17T15:45:53.6659602Z <a id="price_importer.tests.conftest"></a>
2025-08-17T15:45:53.6659770Z 
2025-08-17T15:45:53.6659855Z # price\_importer.tests.conftest
2025-08-17T15:45:53.6660006Z 
2025-08-17T15:45:53.6660233Z <a id="price_importer.tests.test_reader"></a>
2025-08-17T15:45:53.6660416Z 
2025-08-17T15:45:53.6660511Z # price\_importer.tests.test\_reader
2025-08-17T15:45:53.6660669Z 
2025-08-17T15:45:53.6660770Z <a id="price_importer.tests.test_imports"></a>
2025-08-17T15:45:53.6660947Z 
2025-08-17T15:45:53.6661042Z # price\_importer.tests.test\_imports
2025-08-17T15:45:53.6661199Z 
2025-08-17T15:45:53.6661295Z <a id="price_importer.tests.test_smoke"></a>
2025-08-17T15:45:53.6661472Z 
2025-08-17T15:45:53.6661557Z # price\_importer.tests.test\_smoke
2025-08-17T15:45:53.6661711Z 
2025-08-17T15:45:53.6661823Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-17T15:45:53.6662006Z 
2025-08-17T15:45:53.6662097Z # price\_importer.tests.test\_normaliser
2025-08-17T15:45:53.6662269Z 
2025-08-17T15:45:53.6662354Z <a id="price_importer.tests"></a>
2025-08-17T15:45:53.6662502Z 
2025-08-17T15:45:53.6662578Z # price\_importer.tests
2025-08-17T15:45:53.6662711Z 
2025-08-17T15:45:53.6662795Z <a id="price_importer.reader"></a>
2025-08-17T15:45:53.6662966Z 
2025-08-17T15:45:53.6663054Z # price\_importer.reader
2025-08-17T15:45:53.6663185Z 
2025-08-17T15:45:53.6663276Z <a id="price_importer.repository"></a>
2025-08-17T15:45:53.6663439Z 
2025-08-17T15:45:53.6663527Z # price\_importer.repository
2025-08-17T15:45:53.6663664Z 
2025-08-17T15:45:53.6663748Z <a id="price_importer.import"></a>
2025-08-17T15:45:53.6663902Z 
2025-08-17T15:45:53.6663978Z # price\_importer.import
2025-08-17T15:45:53.6664100Z 
2025-08-17T15:45:53.6664174Z <a id="fees_h10"></a>
2025-08-17T15:45:53.6664288Z 
2025-08-17T15:45:53.6664352Z # fees\_h10
2025-08-17T15:45:53.6664444Z 
2025-08-17T15:45:53.6664525Z <a id="fees_h10.worker"></a>
2025-08-17T15:45:53.6664656Z 
2025-08-17T15:45:53.6664722Z # fees\_h10.worker
2025-08-17T15:45:53.6664834Z 
2025-08-17T15:45:53.6664933Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-17T15:45:53.6665106Z 
2025-08-17T15:45:53.6665187Z #### list\_active\_asins
2025-08-17T15:45:53.6665312Z 
2025-08-17T15:45:53.6665379Z ```python
2025-08-17T15:45:53.6665680Z def list_active_asins() -> list[str]
2025-08-17T15:45:53.6665889Z ```
2025-08-17T15:45:53.6665971Z 
2025-08-17T15:45:53.6666089Z Return known ASINs or an empty list if unavailable.
2025-08-17T15:45:53.6666282Z 
2025-08-17T15:45:53.6666365Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-17T15:45:53.6666525Z 
2025-08-17T15:45:53.6666606Z # fees\_h10.tests.test\_smoke
2025-08-17T15:45:53.6666740Z 
2025-08-17T15:45:53.6666821Z <a id="fees_h10.tests"></a>
2025-08-17T15:45:53.6666950Z 
2025-08-17T15:45:53.6667016Z # fees\_h10.tests
2025-08-17T15:45:53.6667121Z 
2025-08-17T15:45:53.6667201Z <a id="fees_h10.client"></a>
2025-08-17T15:45:53.6667332Z 
2025-08-17T15:45:53.6667399Z # fees\_h10.client
2025-08-17T15:45:53.6667509Z 
2025-08-17T15:45:53.6667590Z <a id="fees_h10.repository"></a>
2025-08-17T15:45:53.6667733Z 
2025-08-17T15:45:53.6667808Z # fees\_h10.repository
2025-08-17T15:45:53.6667928Z 
2025-08-17T15:45:53.6667998Z <a id="emailer"></a>
2025-08-17T15:45:53.6668114Z 
2025-08-17T15:45:53.6668182Z # emailer
2025-08-17T15:45:53.6668279Z 
2025-08-17T15:45:53.6668378Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-17T15:45:53.6668560Z 
2025-08-17T15:45:53.6668650Z # emailer.tests.test\_import\_emailer
2025-08-17T15:45:53.6669027Z 
2025-08-17T15:45:53.6669116Z <a id="emailer.tests.test_smoke"></a>
2025-08-17T15:45:53.6669280Z 
2025-08-17T15:45:53.6669359Z # emailer.tests.test\_smoke
2025-08-17T15:45:53.6669493Z 
2025-08-17T15:45:53.6669578Z <a id="emailer.tests"></a>
2025-08-17T15:45:53.6669705Z 
2025-08-17T15:45:53.6669774Z # emailer.tests
2025-08-17T15:45:53.6669883Z 
2025-08-17T15:45:53.6669970Z <a id="emailer.generate_body"></a>
2025-08-17T15:45:53.6670118Z 
2025-08-17T15:45:53.6670193Z # emailer.generate\_body
2025-08-17T15:45:53.6670326Z 
2025-08-17T15:45:53.6670397Z <a id="llm_server"></a>
2025-08-17T15:45:53.6670514Z 
2025-08-17T15:45:53.6670590Z # llm\_server
2025-08-17T15:45:53.6670686Z 
2025-08-17T15:45:53.6670767Z <a id="llm_server.app"></a>
2025-08-17T15:45:53.6671034Z 
2025-08-17T15:45:53.6671114Z # llm\_server.app
2025-08-17T15:45:53.6671220Z 
