2025-08-19T05:34:28.3587424Z ##[group]Run pydoc-markdown
2025-08-19T05:34:28.3587714Z [36;1mpydoc-markdown[0m
2025-08-19T05:34:28.3627164Z shell: /usr/bin/bash -e {0}
2025-08-19T05:34:28.3627387Z env:
2025-08-19T05:34:28.3627619Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T05:34:28.3628028Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-19T05:34:28.3628422Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T05:34:28.3628759Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T05:34:28.3629109Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T05:34:28.3629452Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-19T05:34:28.3629745Z ##[endgroup]
2025-08-19T05:34:28.6965333Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-19T05:34:28.6965998Z Unknown key(s) "{'output_directory'}" at:
2025-08-19T05:34:28.6966465Z In "pydoc-markdown.yml"
2025-08-19T05:34:28.6966969Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-19T05:34:28.6967672Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-19T05:34:28.6968593Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-19T05:34:28.6969154Z 
2025-08-19T05:34:29.0074397Z <a id="__init__"></a>
2025-08-19T05:34:29.0074882Z 
2025-08-19T05:34:29.0075071Z # \_\_init\_\_
2025-08-19T05:34:29.0075381Z 
2025-08-19T05:34:29.0075573Z <a id="api"></a>
2025-08-19T05:34:29.0075875Z 
2025-08-19T05:34:29.0076068Z # api
2025-08-19T05:34:29.0076324Z 
2025-08-19T05:34:29.0076533Z <a id="api.errors"></a>
2025-08-19T05:34:29.0076860Z 
2025-08-19T05:34:29.0077056Z # api.errors
2025-08-19T05:34:29.0077340Z 
2025-08-19T05:34:29.0077531Z <a id="api.sentry_config"></a>
2025-08-19T05:34:29.0077935Z 
2025-08-19T05:34:29.0078120Z # api.sentry\_config
2025-08-19T05:34:29.0078396Z 
2025-08-19T05:34:29.0078627Z <a id="api.tests.test_sentry_scrub"></a>
2025-08-19T05:34:29.0079055Z 
2025-08-19T05:34:29.0079553Z # api.tests.test\_sentry\_scrub
2025-08-19T05:34:29.0079915Z 
2025-08-19T05:34:29.0080132Z <a id="api.tests.test_errors_json"></a>
2025-08-19T05:34:29.0080533Z 
2025-08-19T05:34:29.0080726Z # api.tests.test\_errors\_json
2025-08-19T05:34:29.0081056Z 
2025-08-19T05:34:29.0081225Z <a id="api.tests.test_llm"></a>
2025-08-19T05:34:29.0081520Z 
2025-08-19T05:34:29.0081906Z # api.tests.test\_llm
2025-08-19T05:34:29.0082162Z 
2025-08-19T05:34:29.0082350Z <a id="api.tests.test_sentry_event"></a>
2025-08-19T05:34:29.0082619Z 
2025-08-19T05:34:29.0082740Z # api.tests.test\_sentry\_event
2025-08-19T05:34:29.0082933Z 
2025-08-19T05:34:29.0083103Z <a id="api.tests.test_sentry_event.DummyTransport"></a>
2025-08-19T05:34:29.0083384Z 
2025-08-19T05:34:29.0083488Z ## DummyTransport Objects
2025-08-19T05:34:29.0083659Z 
2025-08-19T05:34:29.0083747Z ```python
2025-08-19T05:34:29.0083974Z class DummyTransport()
2025-08-19T05:34:29.0084219Z ```
2025-08-19T05:34:29.0084331Z 
2025-08-19T05:34:29.0084572Z <a id="api.tests.test_sentry_event.DummyTransport.capture_envelope"></a>
2025-08-19T05:34:29.0084947Z 
2025-08-19T05:34:29.0085044Z #### capture\_envelope
2025-08-19T05:34:29.0085202Z 
2025-08-19T05:34:29.0085286Z ```python
2025-08-19T05:34:29.0085521Z def capture_envelope(envelope)
2025-08-19T05:34:29.0085783Z ```
2025-08-19T05:34:29.0085899Z 
2025-08-19T05:34:29.0086062Z Capture events sent as envelopes by Sentry SDK >= 2.0.
2025-08-19T05:34:29.0086335Z 
2025-08-19T05:34:29.0086449Z <a id="api.tests.test_cors"></a>
2025-08-19T05:34:29.0086642Z 
2025-08-19T05:34:29.0086740Z # api.tests.test\_cors
2025-08-19T05:34:29.0086898Z 
2025-08-19T05:34:29.0087007Z <a id="api.tests.test_imports"></a>
2025-08-19T05:34:29.0087213Z 
2025-08-19T05:34:29.0087313Z # api.tests.test\_imports
2025-08-19T05:34:29.0087487Z 
2025-08-19T05:34:29.0087600Z <a id="api.tests.test_rate_limit"></a>
2025-08-19T05:34:29.0087817Z 
2025-08-19T05:34:29.0087909Z # api.tests.test\_rate\_limit
2025-08-19T05:34:29.0088068Z 
2025-08-19T05:34:29.0088175Z <a id="api.tests.test_rate_limit.app"></a>
2025-08-19T05:34:29.0088634Z 
2025-08-19T05:34:29.0088701Z #### app
2025-08-19T05:34:29.0088794Z 
2025-08-19T05:34:29.0088860Z noqa: E402
2025-08-19T05:34:29.0088959Z 
2025-08-19T05:34:29.0089051Z <a id="api.tests.test_entrypoint"></a>
2025-08-19T05:34:29.0089219Z 
2025-08-19T05:34:29.0089308Z # api.tests.test\_entrypoint
2025-08-19T05:34:29.0089449Z 
2025-08-19T05:34:29.0089537Z <a id="api.tests.test_health"></a>
2025-08-19T05:34:29.0089692Z 
2025-08-19T05:34:29.0089778Z # api.tests.test\_health
2025-08-19T05:34:29.0089905Z 
2025-08-19T05:34:29.0089989Z <a id="api.logging_config"></a>
2025-08-19T05:34:29.0090137Z 
2025-08-19T05:34:29.0090211Z # api.logging\_config
2025-08-19T05:34:29.0090332Z 
2025-08-19T05:34:29.0090423Z <a id="api.migrations.env"></a>
2025-08-19T05:34:29.0090562Z 
2025-08-19T05:34:29.0090638Z # api.migrations.env
2025-08-19T05:34:29.0090759Z 
2025-08-19T05:34:29.0090889Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-19T05:34:29.0091093Z 
2025-08-19T05:34:29.0091208Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-19T05:34:29.0091408Z 
2025-08-19T05:34:29.0091519Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-19T05:34:29.0091875Z 
2025-08-19T05:34:29.0091984Z # api.migrations.versions.0004\_fee\_cron
2025-08-19T05:34:29.0092168Z 
2025-08-19T05:34:29.0092329Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-19T05:34:29.0092583Z 
2025-08-19T05:34:29.0092724Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-19T05:34:29.0092944Z 
2025-08-19T05:34:29.0093070Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-19T05:34:29.0093283Z 
2025-08-19T05:34:29.0093392Z # api.migrations.versions.0003\_vendor\_prices
2025-08-19T05:34:29.0093576Z 
2025-08-19T05:34:29.0093701Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-19T05:34:29.0093899Z 
2025-08-19T05:34:29.0094004Z # api.migrations.versions.0024\_create\_buybox
2025-08-19T05:34:29.0094190Z 
2025-08-19T05:34:29.0094318Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-19T05:34:29.0094785Z 
2025-08-19T05:34:29.0094898Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-19T05:34:29.0095116Z 
2025-08-19T05:34:29.0095238Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-19T05:34:29.0095441Z 
2025-08-19T05:34:29.0095560Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-19T05:34:29.0095751Z 
2025-08-19T05:34:29.0095878Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-19T05:34:29.0096088Z 
2025-08-19T05:34:29.0096196Z # api.migrations.versions.0020\_unified\_schema
2025-08-19T05:34:29.0096381Z 
2025-08-19T05:34:29.0096522Z <a id="api.migrations.versions.0025_pr4_indexes_loadlog"></a>
2025-08-19T05:34:29.0096750Z 
2025-08-19T05:34:29.0096874Z # api.migrations.versions.0025\_pr4\_indexes\_loadlog
2025-08-19T05:34:29.0097074Z 
2025-08-19T05:34:29.0097205Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-19T05:34:29.0097413Z 
2025-08-19T05:34:29.0097523Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-19T05:34:29.0097735Z 
2025-08-19T05:34:29.0097872Z <a id="api.migrations.versions.0026_amazon_new_reports"></a>
2025-08-19T05:34:29.0098167Z 
2025-08-19T05:34:29.0098288Z # api.migrations.versions.0026\_amazon\_new\_reports
2025-08-19T05:34:29.0098513Z 
2025-08-19T05:34:29.0098623Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-19T05:34:29.0098822Z 
2025-08-19T05:34:29.0098919Z # api.migrations.versions.0001\_baseline
2025-08-19T05:34:29.0099092Z 
2025-08-19T05:34:29.0099190Z <a id="api.migrations.versions"></a>
2025-08-19T05:34:29.0099356Z 
2025-08-19T05:34:29.0099441Z # api.migrations.versions
2025-08-19T05:34:29.0099578Z 
2025-08-19T05:34:29.0099660Z <a id="api.migrations"></a>
2025-08-19T05:34:29.0099794Z 
2025-08-19T05:34:29.0099863Z # api.migrations
2025-08-19T05:34:29.0099982Z 
2025-08-19T05:34:29.0100053Z <a id="api.db"></a>
2025-08-19T05:34:29.0100163Z 
2025-08-19T05:34:29.0100233Z # api.db
2025-08-19T05:34:29.0100326Z 
2025-08-19T05:34:29.0100413Z <a id="api.routes.stats"></a>
2025-08-19T05:34:29.0100700Z 
2025-08-19T05:34:29.0100772Z # api.routes.stats
2025-08-19T05:34:29.0100880Z 
2025-08-19T05:34:29.0100970Z <a id="api.routes.stats.kpi"></a>
2025-08-19T05:34:29.0101129Z 
2025-08-19T05:34:29.0101194Z #### kpi
2025-08-19T05:34:29.0101282Z 
2025-08-19T05:34:29.0101352Z ```python
2025-08-19T05:34:29.0101728Z @router.get("/stats/kpi")
2025-08-19T05:34:29.0102594Z def kpi() -> List[Dict[str, int]]
2025-08-19T05:34:29.0103007Z ```
2025-08-19T05:34:29.0103169Z 
2025-08-19T05:34:29.0103329Z Return KPI metrics (mock).
2025-08-19T05:34:29.0103580Z 
2025-08-19T05:34:29.0103768Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-19T05:34:29.0104114Z 
2025-08-19T05:34:29.0104196Z #### roi\_by\_vendor
2025-08-19T05:34:29.0104319Z 
2025-08-19T05:34:29.0104395Z ```python
2025-08-19T05:34:29.0104581Z @router.get("/stats/roi_by_vendor")
2025-08-19T05:34:29.0104854Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-19T05:34:29.0105089Z ```
2025-08-19T05:34:29.0105184Z 
2025-08-19T05:34:29.0105282Z Return ROI percent by vendor.
2025-08-19T05:34:29.0105427Z 
2025-08-19T05:34:29.0105523Z <a id="api.routes.stats.roi_trend"></a>
2025-08-19T05:34:29.0105701Z 
2025-08-19T05:34:29.0105768Z #### roi\_trend
2025-08-19T05:34:29.0105872Z 
2025-08-19T05:34:29.0105939Z ```python
2025-08-19T05:34:29.0106107Z @router.get("/stats/roi_trend")
2025-08-19T05:34:29.0106352Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-19T05:34:29.0106602Z ```
2025-08-19T05:34:29.0106693Z 
2025-08-19T05:34:29.0106770Z Return 30-day ROI trend.
2025-08-19T05:34:29.0106900Z 
2025-08-19T05:34:29.0106981Z <a id="api.routes.roi"></a>
2025-08-19T05:34:29.0107124Z 
2025-08-19T05:34:29.0107194Z # api.routes.roi
2025-08-19T05:34:29.0107302Z 
2025-08-19T05:34:29.0107396Z <a id="api.routes.health"></a>
2025-08-19T05:34:29.0107543Z 
2025-08-19T05:34:29.0107618Z # api.routes.health
2025-08-19T05:34:29.0107738Z 
2025-08-19T05:34:29.0107830Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-19T05:34:29.0108189Z 
2025-08-19T05:34:29.0108262Z #### MAX\_SKEW
2025-08-19T05:34:29.0108370Z 
2025-08-19T05:34:29.0108434Z seconds
2025-08-19T05:34:29.0108523Z 
2025-08-19T05:34:29.0108623Z <a id="api.routes.health.health"></a>
2025-08-19T05:34:29.0108791Z 
2025-08-19T05:34:29.0108854Z #### health
2025-08-19T05:34:29.0108951Z 
2025-08-19T05:34:29.0109015Z ```python
2025-08-19T05:34:29.0109211Z @router.get("/health", include_in_schema=False)
2025-08-19T05:34:29.0109592Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-19T05:34:29.0109932Z ```
2025-08-19T05:34:29.0110023Z 
2025-08-19T05:34:29.0110138Z Return 200 when DB reachable and clocks are in sync.
2025-08-19T05:34:29.0110335Z 
2025-08-19T05:34:29.0110431Z <a id="api.routes.repository"></a>
2025-08-19T05:34:29.0110592Z 
2025-08-19T05:34:29.0110671Z # api.routes.repository
2025-08-19T05:34:29.0110806Z 
2025-08-19T05:34:29.0110880Z <a id="api.routes"></a>
2025-08-19T05:34:29.0111049Z 
2025-08-19T05:34:29.0111116Z # api.routes
2025-08-19T05:34:29.0111224Z 
2025-08-19T05:34:29.0111315Z <a id="api.models.fee"></a>
2025-08-19T05:34:29.0111448Z 
2025-08-19T05:34:29.0111515Z # api.models.fee
2025-08-19T05:34:29.0111769Z 
2025-08-19T05:34:29.0111850Z <a id="api.models"></a>
2025-08-19T05:34:29.0111966Z 
2025-08-19T05:34:29.0112032Z # api.models
2025-08-19T05:34:29.0112133Z 
2025-08-19T05:34:29.0112215Z <a id="api.roi_repository"></a>
2025-08-19T05:34:29.0112357Z 
2025-08-19T05:34:29.0112435Z # api.roi\_repository
2025-08-19T05:34:29.0112552Z 
2025-08-19T05:34:29.0112622Z <a id="api.main"></a>
2025-08-19T05:34:29.0112734Z 
2025-08-19T05:34:29.0112808Z # api.main
2025-08-19T05:34:29.0112901Z 
2025-08-19T05:34:29.0112980Z <a id="api.main.ready"></a>
2025-08-19T05:34:29.0113120Z 
2025-08-19T05:34:29.0113183Z #### ready
2025-08-19T05:34:29.0113273Z 
2025-08-19T05:34:29.0113336Z ```python
2025-08-19T05:34:29.0113605Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-19T05:34:29.0114042Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-19T05:34:29.0114521Z                                                                       str]
2025-08-19T05:34:29.0114755Z ```
2025-08-19T05:34:29.0114839Z 
2025-08-19T05:34:29.0114937Z Return 200 only when migrations are at head.
2025-08-19T05:34:29.0115115Z 
2025-08-19T05:34:29.0115193Z <a id="api.config"></a>
2025-08-19T05:34:29.0115312Z 
2025-08-19T05:34:29.0115379Z # api.config
2025-08-19T05:34:29.0115482Z 
2025-08-19T05:34:29.0115549Z <a id="etl"></a>
2025-08-19T05:34:29.0115653Z 
2025-08-19T05:34:29.0115721Z # etl
2025-08-19T05:34:29.0115809Z 
2025-08-19T05:34:29.0115892Z <a id="etl.fba_fee_ingestor"></a>
2025-08-19T05:34:29.0116048Z 
2025-08-19T05:34:29.0116128Z # etl.fba\_fee\_ingestor
2025-08-19T05:34:29.0116253Z 
2025-08-19T05:34:29.0116336Z <a id="etl.sp_fees_ingestor"></a>
2025-08-19T05:34:29.0116492Z 
2025-08-19T05:34:29.0116565Z # etl.sp\_fees\_ingestor
2025-08-19T05:34:29.0116686Z 
2025-08-19T05:34:29.0116773Z <a id="etl.keepa_ingestor"></a>
2025-08-19T05:34:29.0116924Z 
2025-08-19T05:34:29.0116999Z # etl.keepa\_ingestor
2025-08-19T05:34:29.0117122Z 
2025-08-19T05:34:29.0117190Z <a id="etl.db"></a>
2025-08-19T05:34:29.0117299Z 
2025-08-19T05:34:29.0117363Z # etl.db
2025-08-19T05:34:29.0117460Z 
2025-08-19T05:34:29.0117545Z <a id="etl.dialects.schemas"></a>
2025-08-19T05:34:29.0117693Z 
2025-08-19T05:34:29.0117776Z # etl.dialects.schemas
2025-08-19T05:34:29.0117898Z 
2025-08-19T05:34:29.0118016Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-19T05:34:29.0118203Z 
2025-08-19T05:34:29.0118302Z # etl.dialects.amazon\_reimbursements
2025-08-19T05:34:29.0118468Z 
2025-08-19T05:34:29.0118564Z <a id="etl.dialects.amazon_ads_sp_cost"></a>
2025-08-19T05:34:29.0118746Z 
2025-08-19T05:34:29.0118834Z # etl.dialects.amazon\_ads\_sp\_cost
2025-08-19T05:34:29.0118992Z 
2025-08-19T05:34:29.0119088Z <a id="etl.dialects.amazon_returns"></a>
2025-08-19T05:34:29.0119258Z 
2025-08-19T05:34:29.0119344Z # etl.dialects.amazon\_returns
2025-08-19T05:34:29.0119868Z 
2025-08-19T05:34:29.0120083Z <a id="etl.dialects.amazon_fee_preview"></a>
2025-08-19T05:34:29.0120415Z 
2025-08-19T05:34:29.0120580Z # etl.dialects.amazon\_fee\_preview
2025-08-19T05:34:29.0120892Z 
2025-08-19T05:34:29.0121098Z <a id="etl.dialects.amazon_inventory_ledger"></a>
2025-08-19T05:34:29.0121341Z 
2025-08-19T05:34:29.0121445Z # etl.dialects.amazon\_inventory\_ledger
2025-08-19T05:34:29.0121774Z 
2025-08-19T05:34:29.0121876Z <a id="etl.dialects.amazon_settlements"></a>
2025-08-19T05:34:29.0122051Z 
2025-08-19T05:34:29.0122147Z # etl.dialects.amazon\_settlements
2025-08-19T05:34:29.0122301Z 
2025-08-19T05:34:29.0122379Z <a id="etl.dialects"></a>
2025-08-19T05:34:29.0122514Z 
2025-08-19T05:34:29.0122579Z # etl.dialects
2025-08-19T05:34:29.0122681Z 
2025-08-19T05:34:29.0122756Z <a id="ingest"></a>
2025-08-19T05:34:29.0122865Z 
2025-08-19T05:34:29.0122927Z # ingest
2025-08-19T05:34:29.0123015Z 
2025-08-19T05:34:29.0123103Z <a id="ingest.maintenance"></a>
2025-08-19T05:34:29.0123248Z 
2025-08-19T05:34:29.0123334Z # ingest.maintenance
2025-08-19T05:34:29.0123466Z 
2025-08-19T05:34:29.0123553Z <a id="ingest.copy_loader"></a>
2025-08-19T05:34:29.0123703Z 
2025-08-19T05:34:29.0123778Z # ingest.copy\_loader
2025-08-19T05:34:29.0123912Z 
2025-08-19T05:34:29.0124022Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-19T05:34:29.0124212Z 
2025-08-19T05:34:29.0124296Z #### copy\_df\_via\_temp
2025-08-19T05:34:29.0124423Z 
2025-08-19T05:34:29.0124490Z ```python
2025-08-19T05:34:29.0124673Z def copy_df_via_temp(engine: Engine,
2025-08-19T05:34:29.0125072Z                      df: pd.DataFrame,
2025-08-19T05:34:29.0125505Z                      target_table: str,
2025-08-19T05:34:29.0125907Z                      *,
2025-08-19T05:34:29.0126309Z                      target_schema: Optional[str] = None,
2025-08-19T05:34:29.0126809Z                      columns: Sequence[str],
2025-08-19T05:34:29.0127318Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-19T05:34:29.0127849Z                      analyze_after: bool = False,
2025-08-19T05:34:29.0128699Z                      connection: Any | None = None) -> int
2025-08-19T05:34:29.0129151Z ```
2025-08-19T05:34:29.0129305Z 
2025-08-19T05:34:29.0129599Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-19T05:34:29.0130049Z 
2025-08-19T05:34:29.0130169Z <a id="ingest.tests.test_smoke"></a>
2025-08-19T05:34:29.0130340Z 
2025-08-19T05:34:29.0130431Z # ingest.tests.test\_smoke
2025-08-19T05:34:29.0130570Z 
2025-08-19T05:34:29.0130648Z <a id="ingest.tests"></a>
2025-08-19T05:34:29.0130783Z 
2025-08-19T05:34:29.0130852Z # ingest.tests
2025-08-19T05:34:29.0130956Z 
2025-08-19T05:34:29.0131043Z <a id="ingest.upload_router"></a>
2025-08-19T05:34:29.0131204Z 
2025-08-19T05:34:29.0131282Z # ingest.upload\_router
2025-08-19T05:34:29.0131409Z 
2025-08-19T05:34:29.0131501Z <a id="ingest.email_watcher"></a>
2025-08-19T05:34:29.0131784Z 
2025-08-19T05:34:29.0131865Z # ingest.email\_watcher
2025-08-19T05:34:29.0131987Z 
2025-08-19T05:34:29.0132097Z <a id="ingest.email_watcher.main"></a>
2025-08-19T05:34:29.0132267Z 
2025-08-19T05:34:29.0132331Z #### main
2025-08-19T05:34:29.0132428Z 
2025-08-19T05:34:29.0132494Z ```python
2025-08-19T05:34:29.0132664Z def main() -> dict[str, str]
2025-08-19T05:34:29.0132864Z ```
2025-08-19T05:34:29.0132949Z 
2025-08-19T05:34:29.0133102Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-19T05:34:29.0133350Z 
2025-08-19T05:34:29.0133488Z Returns {"status": "success"} when processing completes.
2025-08-19T05:34:29.0133701Z 
2025-08-19T05:34:29.0133780Z <a id="ingest.tasks"></a>
2025-08-19T05:34:29.0133915Z 
2025-08-19T05:34:29.0133983Z # ingest.tasks
2025-08-19T05:34:29.0134088Z 
2025-08-19T05:34:29.0134194Z <a id="ingest.tasks.task_import_file"></a>
2025-08-19T05:34:29.0134372Z 
2025-08-19T05:34:29.0134447Z #### task\_import\_file
2025-08-19T05:34:29.0134564Z 
2025-08-19T05:34:29.0134639Z ```python
2025-08-19T05:34:29.0134850Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-19T05:34:29.0135320Z def task_import_file(self: Any,
2025-08-19T05:34:29.0135541Z                      uri: str,
2025-08-19T05:34:29.0135779Z                      report_type: Optional[str] = None,
2025-08-19T05:34:29.0136056Z                      force: bool = False) -> Dict[str, Any]
2025-08-19T05:34:29.0136305Z ```
2025-08-19T05:34:29.0136391Z 
2025-08-19T05:34:29.0136531Z Import a file into Postgres using existing ETL pipeline.
2025-08-19T05:34:29.0136741Z 
2025-08-19T05:34:29.0136825Z <a id="ingest.celery_app"></a>
2025-08-19T05:34:29.0136978Z 
2025-08-19T05:34:29.0137051Z # ingest.celery\_app
2025-08-19T05:34:29.0137167Z 
2025-08-19T05:34:29.0137252Z <a id="ingest.ingest_router"></a>
2025-08-19T05:34:29.0137408Z 
2025-08-19T05:34:29.0137483Z # ingest.ingest\_router
2025-08-19T05:34:29.0137604Z 
2025-08-19T05:34:29.0137684Z <a id="logistics_etl"></a>
2025-08-19T05:34:29.0137815Z 
2025-08-19T05:34:29.0137885Z # logistics\_etl
2025-08-19T05:34:29.0137999Z 
2025-08-19T05:34:29.0138074Z Daily logistics ETL job.
2025-08-19T05:34:29.0138212Z 
2025-08-19T05:34:29.0138295Z <a id="logistics_etl.__main__"></a>
2025-08-19T05:34:29.0138455Z 
2025-08-19T05:34:29.0138533Z # logistics\_etl.\_\_main\_\_
2025-08-19T05:34:29.0138670Z 
2025-08-19T05:34:29.0138757Z <a id="logistics_etl.dsn"></a>
2025-08-19T05:34:29.0138896Z 
2025-08-19T05:34:29.0138966Z # logistics\_etl.dsn
2025-08-19T05:34:29.0139080Z 
2025-08-19T05:34:29.0139202Z Local DSN builder to avoid cross-service dependency.
2025-08-19T05:34:29.0139407Z 
2025-08-19T05:34:29.0139501Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-19T05:34:29.0139677Z 
2025-08-19T05:34:29.0139742Z #### build\_dsn
2025-08-19T05:34:29.0139847Z 
2025-08-19T05:34:29.0139919Z ```python
2025-08-19T05:34:29.0140092Z def build_dsn(sync: bool = True) -> str
2025-08-19T05:34:29.0140318Z ```
2025-08-19T05:34:29.0140405Z 
2025-08-19T05:34:29.0140549Z Return a Postgres DSN assembled from environment variables.
2025-08-19T05:34:29.0140783Z 
2025-08-19T05:34:29.0140934Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-19T05:34:29.0141465Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-19T05:34:29.0141959Z error when any required variable is missing.
2025-08-19T05:34:29.0142140Z 
2025-08-19T05:34:29.0142243Z <a id="logistics_etl.tests.conftest"></a>
2025-08-19T05:34:29.0142418Z 
2025-08-19T05:34:29.0142503Z # logistics\_etl.tests.conftest
2025-08-19T05:34:29.0142647Z 
2025-08-19T05:34:29.0142758Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-19T05:34:29.0142948Z 
2025-08-19T05:34:29.0143039Z # logistics\_etl.tests.test\_repository
2025-08-19T05:34:29.0143211Z 
2025-08-19T05:34:29.0143304Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-19T05:34:29.0143473Z 
2025-08-19T05:34:29.0143563Z # logistics\_etl.tests.test\_cron
2025-08-19T05:34:29.0143714Z 
2025-08-19T05:34:29.0143813Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-19T05:34:29.0143996Z 
2025-08-19T05:34:29.0144084Z # logistics\_etl.tests.test\_imports
2025-08-19T05:34:29.0144249Z 
2025-08-19T05:34:29.0144349Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-19T05:34:29.0144528Z 
2025-08-19T05:34:29.0144612Z # logistics\_etl.tests.test\_smoke
2025-08-19T05:34:29.0144764Z 
2025-08-19T05:34:29.0144863Z <a id="logistics_etl.tests.test_client"></a>
2025-08-19T05:34:29.0145032Z 
2025-08-19T05:34:29.0145117Z # logistics\_etl.tests.test\_client
2025-08-19T05:34:29.0145276Z 
2025-08-19T05:34:29.0145359Z <a id="logistics_etl.tests"></a>
2025-08-19T05:34:29.0145503Z 
2025-08-19T05:34:29.0145577Z # logistics\_etl.tests
2025-08-19T05:34:29.0145700Z 
2025-08-19T05:34:29.0145780Z <a id="logistics_etl.flow"></a>
2025-08-19T05:34:29.0145919Z 
2025-08-19T05:34:29.0145997Z # logistics\_etl.flow
2025-08-19T05:34:29.0146115Z 
2025-08-19T05:34:29.0146199Z <a id="logistics_etl.client"></a>
2025-08-19T05:34:29.0146346Z 
2025-08-19T05:34:29.0146430Z # logistics\_etl.client
2025-08-19T05:34:29.0146552Z 
2025-08-19T05:34:29.0146631Z <a id="logistics_etl.cron"></a>
2025-08-19T05:34:29.0146774Z 
2025-08-19T05:34:29.0146973Z # logistics\_etl.cron
2025-08-19T05:34:29.0147100Z 
2025-08-19T05:34:29.0147185Z <a id="logistics_etl.db"></a>
2025-08-19T05:34:29.0147324Z 
2025-08-19T05:34:29.0177121Z # logistics\_etl.db
2025-08-19T05:34:29.0177430Z 
2025-08-19T05:34:29.0177638Z <a id="logistics_etl.repository"></a>
2025-08-19T05:34:29.0178009Z 
2025-08-19T05:34:29.0178191Z # logistics\_etl.repository
2025-08-19T05:34:29.0178484Z 
2025-08-19T05:34:29.0178638Z <a id="alert_bot"></a>
2025-08-19T05:34:29.0178898Z 
2025-08-19T05:34:29.0179036Z # alert\_bot
2025-08-19T05:34:29.0179244Z 
2025-08-19T05:34:29.0179357Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-19T05:34:29.0179573Z 
2025-08-19T05:34:29.0179674Z # alert\_bot.tests.test\_smoke
2025-08-19T05:34:29.0179853Z 
2025-08-19T05:34:29.0179957Z <a id="alert_bot.tests"></a>
2025-08-19T05:34:29.0180124Z 
2025-08-19T05:34:29.0180208Z # alert\_bot.tests
2025-08-19T05:34:29.0180353Z 
2025-08-19T05:34:29.0180457Z <a id="alert_bot.alert_bot"></a>
2025-08-19T05:34:29.0180640Z 
2025-08-19T05:34:29.0180747Z # alert\_bot.alert\_bot
2025-08-19T05:34:29.0180904Z 
2025-08-19T05:34:29.0180999Z <a id="alert_bot.rules"></a>
2025-08-19T05:34:29.0181164Z 
2025-08-19T05:34:29.0181252Z # alert\_bot.rules
2025-08-19T05:34:29.0181382Z 
2025-08-19T05:34:29.0181465Z <a id="common"></a>
2025-08-19T05:34:29.0181779Z 
2025-08-19T05:34:29.0181870Z # common
2025-08-19T05:34:29.0181986Z 
2025-08-19T05:34:29.0182082Z <a id="common.dsn"></a>
2025-08-19T05:34:29.0182237Z 
2025-08-19T05:34:29.0182317Z # common.dsn
2025-08-19T05:34:29.0182437Z 
2025-08-19T05:34:29.0182542Z <a id="common.dsn.build_dsn"></a>
2025-08-19T05:34:29.0182739Z 
2025-08-19T05:34:29.0182824Z #### build\_dsn
2025-08-19T05:34:29.0182952Z 
2025-08-19T05:34:29.0183041Z ```python
2025-08-19T05:34:29.0183263Z def build_dsn(sync: bool = True) -> str
2025-08-19T05:34:29.0183549Z ```
2025-08-19T05:34:29.0183655Z 
2025-08-19T05:34:29.0183813Z Return a Postgres DSN, validating required variables.
2025-08-19T05:34:29.0184079Z 
2025-08-19T05:34:29.0184321Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-19T05:34:29.0185061Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-19T05:34:29.0185592Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-19T05:34:29.0185997Z missing.
2025-08-19T05:34:29.0186110Z 
2025-08-19T05:34:29.0186216Z <a id="common.models_vendor"></a>
2025-08-19T05:34:29.0186412Z 
2025-08-19T05:34:29.0186504Z # common.models\_vendor
2025-08-19T05:34:29.0186656Z 
2025-08-19T05:34:29.0186767Z <a id="common.models_vendor.Vendor"></a>
2025-08-19T05:34:29.0186984Z 
2025-08-19T05:34:29.0187069Z ## Vendor Objects
2025-08-19T05:34:29.0187203Z 
2025-08-19T05:34:29.0187292Z ```python
2025-08-19T05:34:29.0187492Z class Vendor(Base)
2025-08-19T05:34:29.0187670Z ```
2025-08-19T05:34:29.0187753Z 
2025-08-19T05:34:29.0187832Z Vendor of inventory items.
2025-08-19T05:34:29.0187971Z 
2025-08-19T05:34:29.0188076Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-19T05:34:29.0188272Z 
2025-08-19T05:34:29.0188347Z ## VendorPrice Objects
2025-08-19T05:34:29.0188472Z 
2025-08-19T05:34:29.0188534Z ```python
2025-08-19T05:34:29.0188700Z class VendorPrice(Base)
2025-08-19T05:34:29.0188879Z ```
2025-08-19T05:34:29.0188963Z 
2025-08-19T05:34:29.0189075Z Association table linking vendors to pricing.
2025-08-19T05:34:29.0189270Z 
2025-08-19T05:34:29.0189346Z <a id="common.db_url"></a>
2025-08-19T05:34:29.0189483Z 
2025-08-19T05:34:29.0189551Z # common.db\_url
2025-08-19T05:34:29.0189658Z 
2025-08-19T05:34:29.0189752Z <a id="common.db_url.build_url"></a>
2025-08-19T05:34:29.0189910Z 
2025-08-19T05:34:29.0189976Z #### build\_url
2025-08-19T05:34:29.0190079Z 
2025-08-19T05:34:29.0190154Z ```python
2025-08-19T05:34:29.0190333Z def build_url(async_: bool = True) -> str
2025-08-19T05:34:29.0190565Z ```
2025-08-19T05:34:29.0190646Z 
2025-08-19T05:34:29.0190745Z Return Postgres DSN from env or PG_* parts.
2025-08-19T05:34:29.0190932Z 
2025-08-19T05:34:29.0191012Z <a id="common.keepa"></a>
2025-08-19T05:34:29.0191306Z 
2025-08-19T05:34:29.0191383Z # common.keepa
2025-08-19T05:34:29.0191489Z 
2025-08-19T05:34:29.0191664Z <a id="common.llm"></a>
2025-08-19T05:34:29.0191792Z 
2025-08-19T05:34:29.0191865Z # common.llm
2025-08-19T05:34:29.0191962Z 
2025-08-19T05:34:29.0192043Z <a id="common.settings"></a>
2025-08-19T05:34:29.0192188Z 
2025-08-19T05:34:29.0192258Z # common.settings
2025-08-19T05:34:29.0192370Z 
2025-08-19T05:34:29.0192442Z <a id="common.db"></a>
2025-08-19T05:34:29.0192568Z 
2025-08-19T05:34:29.0192632Z # common.db
2025-08-19T05:34:29.0192725Z 
2025-08-19T05:34:29.0192825Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-19T05:34:29.0193002Z 
2025-08-19T05:34:29.0193079Z #### build\_sqlalchemy\_url
2025-08-19T05:34:29.0193219Z 
2025-08-19T05:34:29.0193282Z ```python
2025-08-19T05:34:29.0193453Z def build_sqlalchemy_url() -> str
2025-08-19T05:34:29.0193664Z ```
2025-08-19T05:34:29.0193749Z 
2025-08-19T05:34:29.0193852Z Return Postgres URL for SQLAlchemy engines.
2025-08-19T05:34:29.0194035Z 
2025-08-19T05:34:29.0194136Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-19T05:34:29.0194310Z 
2025-08-19T05:34:29.0194391Z #### build\_asyncpg\_dsn
2025-08-19T05:34:29.0194514Z 
2025-08-19T05:34:29.0194578Z ```python
2025-08-19T05:34:29.0194754Z def build_asyncpg_dsn() -> str
2025-08-19T05:34:29.0194951Z ```
2025-08-19T05:34:29.0195094Z 
2025-08-19T05:34:29.0195226Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-19T05:34:29.0195441Z 
2025-08-19T05:34:29.0195533Z <a id="common.db.refresh_mvs"></a>
2025-08-19T05:34:29.0195686Z 
2025-08-19T05:34:29.0195754Z #### refresh\_mvs
2025-08-19T05:34:29.0195864Z 
2025-08-19T05:34:29.0195927Z ```python
2025-08-19T05:34:29.0196122Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-19T05:34:29.0196378Z ```
2025-08-19T05:34:29.0196461Z 
2025-08-19T05:34:29.0196599Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-19T05:34:29.0196829Z 
2025-08-19T05:34:29.0196909Z <a id="common.config"></a>
2025-08-19T05:34:29.0197046Z 
2025-08-19T05:34:29.0197321Z # common.config
2025-08-19T05:34:29.0197425Z 
2025-08-19T05:34:29.0197509Z <a id="common.base"></a>
2025-08-19T05:34:29.0197641Z 
2025-08-19T05:34:29.0197706Z # common.base
2025-08-19T05:34:29.0197803Z 
2025-08-19T05:34:29.0197886Z <a id="common.base.Base"></a>
2025-08-19T05:34:29.0198032Z 
2025-08-19T05:34:29.0198098Z ## Base Objects
2025-08-19T05:34:29.0198198Z 
2025-08-19T05:34:29.0198267Z ```python
2025-08-19T05:34:29.0198435Z class Base(DeclarativeBase)
2025-08-19T05:34:29.0198634Z ```
2025-08-19T05:34:29.0198717Z 
2025-08-19T05:34:29.0198802Z Base class for SQLAlchemy models.
2025-08-19T05:34:29.0198959Z 
2025-08-19T05:34:29.0199032Z <a id="repricer"></a>
2025-08-19T05:34:29.0199148Z 
2025-08-19T05:34:29.0199213Z # repricer
2025-08-19T05:34:29.0199310Z 
2025-08-19T05:34:29.0199398Z <a id="repricer.app.schemas"></a>
2025-08-19T05:34:29.0199550Z 
2025-08-19T05:34:29.0199634Z # repricer.app.schemas
2025-08-19T05:34:29.0199759Z 
2025-08-19T05:34:29.0199846Z <a id="repricer.app.deps"></a>
2025-08-19T05:34:29.0200007Z 
2025-08-19T05:34:29.0200082Z # repricer.app.deps
2025-08-19T05:34:29.0200196Z 
2025-08-19T05:34:29.0200312Z Placeholder module for Keepa / SP-API clients.
2025-08-19T05:34:29.0200508Z 
2025-08-19T05:34:29.0200592Z <a id="repricer.app.logic"></a>
2025-08-19T05:34:29.0200738Z 
2025-08-19T05:34:29.0200821Z # repricer.app.logic
2025-08-19T05:34:29.0200949Z 
2025-08-19T05:34:29.0201053Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-19T05:34:29.0201236Z 
2025-08-19T05:34:29.0201301Z #### MIN\_MARGIN
2025-08-19T05:34:29.0201406Z 
2025-08-19T05:34:29.0201469Z 15 % ROI
2025-08-19T05:34:29.0201661Z 
2025-08-19T05:34:29.0201771Z <a id="repricer.app.logic.compute_price"></a>
2025-08-19T05:34:29.0201953Z 
2025-08-19T05:34:29.0202029Z #### compute\_price
2025-08-19T05:34:29.0202138Z 
2025-08-19T05:34:29.0202203Z ```python
2025-08-19T05:34:29.0202460Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-19T05:34:29.0202764Z ```
2025-08-19T05:34:29.0202974Z 
2025-08-19T05:34:29.0203088Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-19T05:34:29.0203370Z Replace with real competitive logic later.
2025-08-19T05:34:29.0203549Z 
2025-08-19T05:34:29.0203633Z <a id="repricer.app.main"></a>
2025-08-19T05:34:29.0203773Z 
2025-08-19T05:34:29.0203851Z # repricer.app.main
2025-08-19T05:34:29.0203961Z 
2025-08-19T05:34:29.0204040Z <a id="repricer.app"></a>
2025-08-19T05:34:29.0204169Z 
2025-08-19T05:34:29.0204243Z # repricer.app
2025-08-19T05:34:29.0204345Z 
2025-08-19T05:34:29.0204437Z <a id="repricer.tests.test_imports"></a>
2025-08-19T05:34:29.0204616Z 
2025-08-19T05:34:29.0204699Z # repricer.tests.test\_imports
2025-08-19T05:34:29.0204840Z 
2025-08-19T05:34:29.0204934Z <a id="repricer.tests.test_smoke"></a>
2025-08-19T05:34:29.0205098Z 
2025-08-19T05:34:29.0205181Z # repricer.tests.test\_smoke
2025-08-19T05:34:29.0205321Z 
2025-08-19T05:34:29.0205404Z <a id="repricer.tests"></a>
2025-08-19T05:34:29.0205537Z 
2025-08-19T05:34:29.0205612Z # repricer.tests
2025-08-19T05:34:29.0205730Z 
2025-08-19T05:34:29.0205794Z <a id="db"></a>
2025-08-19T05:34:29.0205895Z 
2025-08-19T05:34:29.0205955Z # db
2025-08-19T05:34:29.0206046Z 
2025-08-19T05:34:29.0206124Z <a id="db.utils.views"></a>
2025-08-19T05:34:29.0206256Z 
2025-08-19T05:34:29.0206365Z # db.utils.views
2025-08-19T05:34:29.0206468Z 
2025-08-19T05:34:29.0206562Z <a id="db.utils.views.replace_view"></a>
2025-08-19T05:34:29.0206735Z 
2025-08-19T05:34:29.0206804Z #### replace\_view
2025-08-19T05:34:29.0206910Z 
2025-08-19T05:34:29.0206973Z ```python
2025-08-19T05:34:29.0207172Z def replace_view(name: str, new_sql: str) -> None
2025-08-19T05:34:29.0207421Z ```
2025-08-19T05:34:29.0207507Z 
2025-08-19T05:34:29.0207596Z Drop and recreate a SQL view atomically.
2025-08-19T05:34:29.0207772Z 
2025-08-19T05:34:29.0207848Z <a id="db.utils"></a>
2025-08-19T05:34:29.0207966Z 
2025-08-19T05:34:29.0208029Z # db.utils
2025-08-19T05:34:29.0208126Z 
2025-08-19T05:34:29.0208205Z <a id="price_importer"></a>
2025-08-19T05:34:29.0208342Z 
2025-08-19T05:34:29.0208530Z # price\_importer
2025-08-19T05:34:29.0208642Z 
2025-08-19T05:34:29.0208746Z <a id="price_importer.services_common.dsn"></a>
2025-08-19T05:34:29.0208931Z 
2025-08-19T05:34:29.0209029Z # price\_importer.services\_common.dsn
2025-08-19T05:34:29.0209194Z 
2025-08-19T05:34:29.0209322Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-19T05:34:29.0209537Z 
2025-08-19T05:34:29.0209601Z #### build\_dsn
2025-08-19T05:34:29.0209701Z 
2025-08-19T05:34:29.0209764Z ```python
2025-08-19T05:34:29.0209942Z def build_dsn(sync: bool = True) -> str
2025-08-19T05:34:29.0210170Z ```
2025-08-19T05:34:29.0210253Z 
2025-08-19T05:34:29.0210320Z Return safe DSN.
2025-08-19T05:34:29.0210426Z 
2025-08-19T05:34:29.0210775Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-19T05:34:29.0210984Z 
2025-08-19T05:34:29.0211114Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-19T05:34:29.0211333Z 
2025-08-19T05:34:29.0211445Z # price\_importer.services\_common.models\_vendor
2025-08-19T05:34:29.0211757Z 
2025-08-19T05:34:29.0211875Z <a id="price_importer.services_common.db_url"></a>
2025-08-19T05:34:29.0212064Z 
2025-08-19T05:34:29.0212163Z # price\_importer.services\_common.db\_url
2025-08-19T05:34:29.0212338Z 
2025-08-19T05:34:29.0212479Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-19T05:34:29.0212696Z 
2025-08-19T05:34:29.0212763Z #### build\_url
2025-08-19T05:34:29.0212871Z 
2025-08-19T05:34:29.0212936Z ```python
2025-08-19T05:34:29.0213110Z def build_url(async_: bool = True) -> str
2025-08-19T05:34:29.0213347Z ```
2025-08-19T05:34:29.0213430Z 
2025-08-19T05:34:29.0213535Z Return Postgres DSN from env or PG_* parts.
2025-08-19T05:34:29.0213709Z 
2025-08-19T05:34:29.0213819Z <a id="price_importer.services_common.keepa"></a>
2025-08-19T05:34:29.0214014Z 
2025-08-19T05:34:29.0214110Z # price\_importer.services\_common.keepa
2025-08-19T05:34:29.0214281Z 
2025-08-19T05:34:29.0214382Z <a id="price_importer.services_common.llm"></a>
2025-08-19T05:34:29.0214711Z 
2025-08-19T05:34:29.0214803Z # price\_importer.services\_common.llm
2025-08-19T05:34:29.0214970Z 
2025-08-19T05:34:29.0215093Z <a id="price_importer.services_common.settings"></a>
2025-08-19T05:34:29.0215289Z 
2025-08-19T05:34:29.0215386Z # price\_importer.services\_common.settings
2025-08-19T05:34:29.0215566Z 
2025-08-19T05:34:29.0215666Z <a id="price_importer.services_common.db"></a>
2025-08-19T05:34:29.0215845Z 
2025-08-19T05:34:29.0215936Z # price\_importer.services\_common.db
2025-08-19T05:34:29.0216105Z 
2025-08-19T05:34:29.0216261Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-19T05:34:29.0216504Z 
2025-08-19T05:34:29.0216587Z #### build\_sqlalchemy\_url
2025-08-19T05:34:29.0216720Z 
2025-08-19T05:34:29.0216783Z ```python
2025-08-19T05:34:29.0216965Z def build_sqlalchemy_url() -> str
2025-08-19T05:34:29.0217171Z ```
2025-08-19T05:34:29.0217259Z 
2025-08-19T05:34:29.0217356Z Return Postgres URL for SQLAlchemy engines.
2025-08-19T05:34:29.0217535Z 
2025-08-19T05:34:29.0217691Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-19T05:34:29.0217923Z 
2025-08-19T05:34:29.0217999Z #### build\_asyncpg\_dsn
2025-08-19T05:34:29.0218124Z 
2025-08-19T05:34:29.0218193Z ```python
2025-08-19T05:34:29.0218361Z def build_asyncpg_dsn() -> str
2025-08-19T05:34:29.0218564Z ```
2025-08-19T05:34:29.0218646Z 
2025-08-19T05:34:29.0218774Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-19T05:34:29.0218995Z 
2025-08-19T05:34:29.0219126Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-19T05:34:29.0219341Z 
2025-08-19T05:34:29.0219415Z #### refresh\_mvs
2025-08-19T05:34:29.0219521Z 
2025-08-19T05:34:29.0219582Z ```python
2025-08-19T05:34:29.0219779Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-19T05:34:29.0220027Z ```
2025-08-19T05:34:29.0220116Z 
2025-08-19T05:34:29.0220253Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-19T05:34:29.0220472Z 
2025-08-19T05:34:29.0220573Z <a id="price_importer.services_common"></a>
2025-08-19T05:34:29.0220877Z 
2025-08-19T05:34:29.0220965Z # price\_importer.services\_common
2025-08-19T05:34:29.0221121Z 
2025-08-19T05:34:29.0221230Z <a id="price_importer.services_common.base"></a>
2025-08-19T05:34:29.0221416Z 
2025-08-19T05:34:29.0221507Z # price\_importer.services\_common.base
2025-08-19T05:34:29.0221806Z 
2025-08-19T05:34:29.0221900Z <a id="price_importer.normaliser"></a>
2025-08-19T05:34:29.0222067Z 
2025-08-19T05:34:29.0222157Z # price\_importer.normaliser
2025-08-19T05:34:29.0222298Z 
2025-08-19T05:34:29.0222405Z <a id="price_importer.common.models_vendor"></a>
2025-08-19T05:34:29.0222595Z 
2025-08-19T05:34:29.0222695Z # price\_importer.common.models\_vendor
2025-08-19T05:34:29.0222865Z 
2025-08-19T05:34:29.0222961Z <a id="price_importer.common.db_url"></a>
2025-08-19T05:34:29.0223143Z 
2025-08-19T05:34:29.0223230Z # price\_importer.common.db\_url
2025-08-19T05:34:29.0223382Z 
2025-08-19T05:34:29.0223498Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-19T05:34:29.0223700Z 
2025-08-19T05:34:29.0223765Z #### make\_dsn
2025-08-19T05:34:29.0223871Z 
2025-08-19T05:34:29.0223943Z ```python
2025-08-19T05:34:29.0224116Z def make_dsn(async_: bool = False) -> str
2025-08-19T05:34:29.0224345Z ```
2025-08-19T05:34:29.0224431Z 
2025-08-19T05:34:29.0224552Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-19T05:34:29.0224762Z 
2025-08-19T05:34:29.0224872Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-19T05:34:29.0225068Z 
2025-08-19T05:34:29.0225141Z #### build\_url
2025-08-19T05:34:29.0225244Z 
2025-08-19T05:34:29.0225307Z ```python
2025-08-19T05:34:29.0225492Z def build_url(async_: bool = False) -> str
2025-08-19T05:34:29.0225720Z ```
2025-08-19T05:34:29.0225808Z 
2025-08-19T05:34:29.0225930Z Return Postgres DSN built from environment variables.
2025-08-19T05:34:29.0226134Z 
2025-08-19T05:34:29.0226221Z <a id="price_importer.common"></a>
2025-08-19T05:34:29.0226383Z 
2025-08-19T05:34:29.0226463Z # price\_importer.common
2025-08-19T05:34:29.0226780Z 
2025-08-19T05:34:29.0226886Z <a id="price_importer.common.base"></a>
2025-08-19T05:34:29.0227056Z 
2025-08-19T05:34:29.0227141Z # price\_importer.common.base
2025-08-19T05:34:29.0227290Z 
2025-08-19T05:34:29.0227389Z <a id="price_importer.tests.conftest"></a>
2025-08-19T05:34:29.0227567Z 
2025-08-19T05:34:29.0227653Z # price\_importer.tests.conftest
2025-08-19T05:34:29.0227837Z 
2025-08-19T05:34:29.0227937Z <a id="price_importer.tests.test_reader"></a>
2025-08-19T05:34:29.0228115Z 
2025-08-19T05:34:29.0228213Z # price\_importer.tests.test\_reader
2025-08-19T05:34:29.0228372Z 
2025-08-19T05:34:29.0228473Z <a id="price_importer.tests.test_imports"></a>
2025-08-19T05:34:29.0228659Z 
2025-08-19T05:34:29.0228748Z # price\_importer.tests.test\_imports
2025-08-19T05:34:29.0228909Z 
2025-08-19T05:34:29.0229008Z <a id="price_importer.tests.test_smoke"></a>
2025-08-19T05:34:29.0229188Z 
2025-08-19T05:34:29.0229274Z # price\_importer.tests.test\_smoke
2025-08-19T05:34:29.0229431Z 
2025-08-19T05:34:29.0229547Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-19T05:34:29.0229741Z 
2025-08-19T05:34:29.0229835Z # price\_importer.tests.test\_normaliser
2025-08-19T05:34:29.0230011Z 
2025-08-19T05:34:29.0230097Z <a id="price_importer.tests"></a>
2025-08-19T05:34:29.0230249Z 
2025-08-19T05:34:29.0230325Z # price\_importer.tests
2025-08-19T05:34:29.0230458Z 
2025-08-19T05:34:29.0230544Z <a id="price_importer.reader"></a>
2025-08-19T05:34:29.0230698Z 
2025-08-19T05:34:29.0230782Z # price\_importer.reader
2025-08-19T05:34:29.0230911Z 
2025-08-19T05:34:29.0231002Z <a id="price_importer.repository"></a>
2025-08-19T05:34:29.0231172Z 
2025-08-19T05:34:29.0231256Z # price\_importer.repository
2025-08-19T05:34:29.0231398Z 
2025-08-19T05:34:29.0231483Z <a id="price_importer.import"></a>
2025-08-19T05:34:29.0231741Z 
2025-08-19T05:34:29.0231820Z # price\_importer.import
2025-08-19T05:34:29.0231945Z 
2025-08-19T05:34:29.0232021Z <a id="fees_h10"></a>
2025-08-19T05:34:29.0232138Z 
2025-08-19T05:34:29.0232208Z # fees\_h10
2025-08-19T05:34:29.0232424Z 
2025-08-19T05:34:29.0232501Z <a id="fees_h10.worker"></a>
2025-08-19T05:34:29.0232635Z 
2025-08-19T05:34:29.0232702Z # fees\_h10.worker
2025-08-19T05:34:29.0232817Z 
2025-08-19T05:34:29.0232914Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-19T05:34:29.0233090Z 
2025-08-19T05:34:29.0233169Z #### list\_active\_asins
2025-08-19T05:34:29.0233289Z 
2025-08-19T05:34:29.0233352Z ```python
2025-08-19T05:34:29.0233529Z def list_active_asins() -> list[str]
2025-08-19T05:34:29.0233743Z ```
2025-08-19T05:34:29.0233830Z 
2025-08-19T05:34:29.0233942Z Return known ASINs or an empty list if unavailable.
2025-08-19T05:34:29.0234140Z 
2025-08-19T05:34:29.0234226Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-19T05:34:29.0234394Z 
2025-08-19T05:34:29.0234474Z # fees\_h10.tests.test\_smoke
2025-08-19T05:34:29.0234614Z 
2025-08-19T05:34:29.0234697Z <a id="fees_h10.tests"></a>
2025-08-19T05:34:29.0234829Z 
2025-08-19T05:34:29.0234895Z # fees\_h10.tests
2025-08-19T05:34:29.0235013Z 
2025-08-19T05:34:29.0235094Z <a id="fees_h10.client"></a>
2025-08-19T05:34:29.0235229Z 
2025-08-19T05:34:29.0235296Z # fees\_h10.client
2025-08-19T05:34:29.0235407Z 
2025-08-19T05:34:29.0235490Z <a id="fees_h10.repository"></a>
2025-08-19T05:34:29.0235636Z 
2025-08-19T05:34:29.0235714Z # fees\_h10.repository
2025-08-19T05:34:29.0235833Z 
2025-08-19T05:34:29.0235903Z <a id="emailer"></a>
2025-08-19T05:34:29.0236023Z 
2025-08-19T05:34:29.0236087Z # emailer
2025-08-19T05:34:29.0236182Z 
2025-08-19T05:34:29.0255900Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-19T05:34:29.0256272Z 
2025-08-19T05:34:29.0256438Z # emailer.tests.test\_import\_emailer
2025-08-19T05:34:29.0256719Z 
2025-08-19T05:34:29.0256818Z <a id="emailer.tests.test_smoke"></a>
2025-08-19T05:34:29.0257002Z 
2025-08-19T05:34:29.0257090Z # emailer.tests.test\_smoke
2025-08-19T05:34:29.0257234Z 
2025-08-19T05:34:29.0257321Z <a id="emailer.tests"></a>
2025-08-19T05:34:29.0257459Z 
2025-08-19T05:34:29.0257529Z # emailer.tests
2025-08-19T05:34:29.0257829Z 
2025-08-19T05:34:29.0257926Z <a id="emailer.generate_body"></a>
2025-08-19T05:34:29.0258090Z 
2025-08-19T05:34:29.0258174Z # emailer.generate\_body
2025-08-19T05:34:29.0258309Z 
2025-08-19T05:34:29.0258383Z <a id="llm_server"></a>
2025-08-19T05:34:29.0258504Z 
2025-08-19T05:34:29.0258576Z # llm\_server
2025-08-19T05:34:29.0258676Z 
2025-08-19T05:34:29.0258756Z <a id="llm_server.app"></a>
2025-08-19T05:34:29.0258898Z 
2025-08-19T05:34:29.0258968Z # llm\_server.app
2025-08-19T05:34:29.0259080Z 
