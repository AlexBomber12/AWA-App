2025-08-19T20:49:21.2955696Z ##[group]Run pydoc-markdown
2025-08-19T20:49:21.2955996Z [36;1mpydoc-markdown[0m
2025-08-19T20:49:21.2998658Z shell: /usr/bin/bash -e {0}
2025-08-19T20:49:21.2999115Z env:
2025-08-19T20:49:21.2999386Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T20:49:21.2999832Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-19T20:49:21.3000258Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T20:49:21.3000636Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T20:49:21.3001021Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T20:49:21.3001400Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-19T20:49:21.3001721Z ##[endgroup]
2025-08-19T20:49:21.6640131Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-19T20:49:21.6640848Z Unknown key(s) "{'output_directory'}" at:
2025-08-19T20:49:21.6641318Z In "pydoc-markdown.yml"
2025-08-19T20:49:21.6641742Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-19T20:49:21.6642438Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-19T20:49:21.6643214Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-19T20:49:21.6643746Z 
2025-08-19T20:49:22.0062095Z <a id="__init__"></a>
2025-08-19T20:49:22.0062656Z 
2025-08-19T20:49:22.0062840Z # \_\_init\_\_
2025-08-19T20:49:22.0063106Z 
2025-08-19T20:49:22.0063311Z <a id="api"></a>
2025-08-19T20:49:22.0063595Z 
2025-08-19T20:49:22.0063777Z # api
2025-08-19T20:49:22.0064003Z 
2025-08-19T20:49:22.0064205Z <a id="api.errors"></a>
2025-08-19T20:49:22.0064562Z 
2025-08-19T20:49:22.0064733Z # api.errors
2025-08-19T20:49:22.0064989Z 
2025-08-19T20:49:22.0065195Z <a id="api.sentry_config"></a>
2025-08-19T20:49:22.0065589Z 
2025-08-19T20:49:22.0065790Z # api.sentry\_config
2025-08-19T20:49:22.0066157Z 
2025-08-19T20:49:22.0066456Z <a id="api.tests.test_stats_contracts"></a>
2025-08-19T20:49:22.0067003Z 
2025-08-19T20:49:22.0067277Z # api.tests.test\_stats\_contracts
2025-08-19T20:49:22.0067812Z 
2025-08-19T20:49:22.0068056Z <a id="api.tests.test_sentry_scrub"></a>
2025-08-19T20:49:22.0068514Z 
2025-08-19T20:49:22.0068728Z # api.tests.test\_sentry\_scrub
2025-08-19T20:49:22.0069370Z 
2025-08-19T20:49:22.0069587Z <a id="api.tests.test_roi_basic_auth"></a>
2025-08-19T20:49:22.0070001Z 
2025-08-19T20:49:22.0070162Z # api.tests.test\_roi\_basic\_auth
2025-08-19T20:49:22.0070388Z 
2025-08-19T20:49:22.0070514Z <a id="api.tests.test_errors_json"></a>
2025-08-19T20:49:22.0070765Z 
2025-08-19T20:49:22.0070879Z # api.tests.test\_errors\_json
2025-08-19T20:49:22.0071082Z 
2025-08-19T20:49:22.0071193Z <a id="api.tests.test_llm"></a>
2025-08-19T20:49:22.0071403Z 
2025-08-19T20:49:22.0071505Z # api.tests.test\_llm
2025-08-19T20:49:22.0071674Z 
2025-08-19T20:49:22.0071802Z <a id="api.tests.test_roi_filters"></a>
2025-08-19T20:49:22.0072039Z 
2025-08-19T20:49:22.0072149Z # api.tests.test\_roi\_filters
2025-08-19T20:49:22.0072350Z 
2025-08-19T20:49:22.0072474Z <a id="api.tests.test_sentry_event"></a>
2025-08-19T20:49:22.0073012Z 
2025-08-19T20:49:22.0073125Z # api.tests.test\_sentry\_event
2025-08-19T20:49:22.0073332Z 
2025-08-19T20:49:22.0073514Z <a id="api.tests.test_sentry_event.DummyTransport"></a>
2025-08-19T20:49:22.0073825Z 
2025-08-19T20:49:22.0073946Z ## DummyTransport Objects
2025-08-19T20:49:22.0074138Z 
2025-08-19T20:49:22.0074235Z ```python
2025-08-19T20:49:22.0074486Z class DummyTransport()
2025-08-19T20:49:22.0074746Z ```
2025-08-19T20:49:22.0074871Z 
2025-08-19T20:49:22.0075122Z <a id="api.tests.test_sentry_event.DummyTransport.capture_envelope"></a>
2025-08-19T20:49:22.0075506Z 
2025-08-19T20:49:22.0075609Z #### capture\_envelope
2025-08-19T20:49:22.0075784Z 
2025-08-19T20:49:22.0075874Z ```python
2025-08-19T20:49:22.0076128Z def capture_envelope(envelope)
2025-08-19T20:49:22.0076419Z ```
2025-08-19T20:49:22.0076537Z 
2025-08-19T20:49:22.0076721Z Capture events sent as envelopes by Sentry SDK >= 2.0.
2025-08-19T20:49:22.0077020Z 
2025-08-19T20:49:22.0077137Z <a id="api.tests.test_cors"></a>
2025-08-19T20:49:22.0077566Z 
2025-08-19T20:49:22.0077674Z # api.tests.test\_cors
2025-08-19T20:49:22.0077842Z 
2025-08-19T20:49:22.0077967Z <a id="api.tests.test_imports"></a>
2025-08-19T20:49:22.0078191Z 
2025-08-19T20:49:22.0078302Z # api.tests.test\_imports
2025-08-19T20:49:22.0078429Z 
2025-08-19T20:49:22.0078524Z <a id="api.tests.test_rate_limit"></a>
2025-08-19T20:49:22.0078689Z 
2025-08-19T20:49:22.0078772Z # api.tests.test\_rate\_limit
2025-08-19T20:49:22.0079095Z 
2025-08-19T20:49:22.0079199Z <a id="api.tests.test_rate_limit.app"></a>
2025-08-19T20:49:22.0079374Z 
2025-08-19T20:49:22.0079443Z #### app
2025-08-19T20:49:22.0079533Z 
2025-08-19T20:49:22.0079595Z noqa: E402
2025-08-19T20:49:22.0079687Z 
2025-08-19T20:49:22.0079779Z <a id="api.tests.test_entrypoint"></a>
2025-08-19T20:49:22.0079942Z 
2025-08-19T20:49:22.0080024Z # api.tests.test\_entrypoint
2025-08-19T20:49:22.0080167Z 
2025-08-19T20:49:22.0080252Z <a id="api.tests.test_health"></a>
2025-08-19T20:49:22.0080411Z 
2025-08-19T20:49:22.0080493Z # api.tests.test\_health
2025-08-19T20:49:22.0080629Z 
2025-08-19T20:49:22.0080712Z <a id="api.tests.test_score"></a>
2025-08-19T20:49:22.0080860Z 
2025-08-19T20:49:22.0080941Z # api.tests.test\_score
2025-08-19T20:49:22.0081064Z 
2025-08-19T20:49:22.0081143Z <a id="api.logging_config"></a>
2025-08-19T20:49:22.0081290Z 
2025-08-19T20:49:22.0081362Z # api.logging\_config
2025-08-19T20:49:22.0081480Z 
2025-08-19T20:49:22.0081562Z <a id="api.migrations.env"></a>
2025-08-19T20:49:22.0081712Z 
2025-08-19T20:49:22.0081785Z # api.migrations.env
2025-08-19T20:49:22.0081902Z 
2025-08-19T20:49:22.0082028Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-19T20:49:22.0082241Z 
2025-08-19T20:49:22.0082357Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-19T20:49:22.0082558Z 
2025-08-19T20:49:22.0082671Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-19T20:49:22.0082867Z 
2025-08-19T20:49:22.0082960Z # api.migrations.versions.0004\_fee\_cron
2025-08-19T20:49:22.0083152Z 
2025-08-19T20:49:22.0083308Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-19T20:49:22.0083547Z 
2025-08-19T20:49:22.0083695Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-19T20:49:22.0083916Z 
2025-08-19T20:49:22.0084041Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-19T20:49:22.0084254Z 
2025-08-19T20:49:22.0084360Z # api.migrations.versions.0003\_vendor\_prices
2025-08-19T20:49:22.0084545Z 
2025-08-19T20:49:22.0084670Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-19T20:49:22.0084868Z 
2025-08-19T20:49:22.0084969Z # api.migrations.versions.0024\_create\_buybox
2025-08-19T20:49:22.0085152Z 
2025-08-19T20:49:22.0085282Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-19T20:49:22.0085488Z 
2025-08-19T20:49:22.0085598Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-19T20:49:22.0085795Z 
2025-08-19T20:49:22.0085909Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-19T20:49:22.0086330Z 
2025-08-19T20:49:22.0086440Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-19T20:49:22.0086663Z 
2025-08-19T20:49:22.0086787Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-19T20:49:22.0087001Z 
2025-08-19T20:49:22.0087105Z # api.migrations.versions.0020\_unified\_schema
2025-08-19T20:49:22.0087291Z 
2025-08-19T20:49:22.0087436Z <a id="api.migrations.versions.0025_pr4_indexes_loadlog"></a>
2025-08-19T20:49:22.0087658Z 
2025-08-19T20:49:22.0087785Z # api.migrations.versions.0025\_pr4\_indexes\_loadlog
2025-08-19T20:49:22.0087992Z 
2025-08-19T20:49:22.0088114Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-19T20:49:22.0088320Z 
2025-08-19T20:49:22.0088437Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-19T20:49:22.0088622Z 
2025-08-19T20:49:22.0088756Z <a id="api.migrations.versions.0026_amazon_new_reports"></a>
2025-08-19T20:49:22.0089108Z 
2025-08-19T20:49:22.0089234Z # api.migrations.versions.0026\_amazon\_new\_reports
2025-08-19T20:49:22.0089585Z 
2025-08-19T20:49:22.0089695Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-19T20:49:22.0089888Z 
2025-08-19T20:49:22.0089983Z # api.migrations.versions.0001\_baseline
2025-08-19T20:49:22.0090148Z 
2025-08-19T20:49:22.0090243Z <a id="api.migrations.versions"></a>
2025-08-19T20:49:22.0090406Z 
2025-08-19T20:49:22.0090488Z # api.migrations.versions
2025-08-19T20:49:22.0090616Z 
2025-08-19T20:49:22.0090703Z <a id="api.migrations"></a>
2025-08-19T20:49:22.0090834Z 
2025-08-19T20:49:22.0090903Z # api.migrations
2025-08-19T20:49:22.0091194Z 
2025-08-19T20:49:22.0091319Z <a id="api.db"></a>
2025-08-19T20:49:22.0091514Z 
2025-08-19T20:49:22.0091645Z # api.db
2025-08-19T20:49:22.0091809Z 
2025-08-19T20:49:22.0091957Z <a id="api.routes.score"></a>
2025-08-19T20:49:22.0092218Z 
2025-08-19T20:49:22.0092353Z # api.routes.score
2025-08-19T20:49:22.0092548Z 
2025-08-19T20:49:22.0092691Z <a id="api.routes.stats"></a>
2025-08-19T20:49:22.0092948Z 
2025-08-19T20:49:22.0093075Z # api.routes.stats
2025-08-19T20:49:22.0093286Z 
2025-08-19T20:49:22.0093365Z <a id="api.routes.roi"></a>
2025-08-19T20:49:22.0093507Z 
2025-08-19T20:49:22.0093573Z # api.routes.roi
2025-08-19T20:49:22.0093677Z 
2025-08-19T20:49:22.0093763Z <a id="api.routes.health"></a>
2025-08-19T20:49:22.0093905Z 
2025-08-19T20:49:22.0093975Z # api.routes.health
2025-08-19T20:49:22.0094090Z 
2025-08-19T20:49:22.0094185Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-19T20:49:22.0094351Z 
2025-08-19T20:49:22.0094414Z #### MAX\_SKEW
2025-08-19T20:49:22.0094522Z 
2025-08-19T20:49:22.0094583Z seconds
2025-08-19T20:49:22.0094668Z 
2025-08-19T20:49:22.0094765Z <a id="api.routes.health.health"></a>
2025-08-19T20:49:22.0094926Z 
2025-08-19T20:49:22.0094989Z #### health
2025-08-19T20:49:22.0095081Z 
2025-08-19T20:49:22.0095151Z ```python
2025-08-19T20:49:22.0095353Z @router.get("/health", include_in_schema=False)
2025-08-19T20:49:22.0095772Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-19T20:49:22.0096115Z ```
2025-08-19T20:49:22.0096217Z 
2025-08-19T20:49:22.0096336Z Return 200 when DB reachable and clocks are in sync.
2025-08-19T20:49:22.0096533Z 
2025-08-19T20:49:22.0096631Z <a id="api.routes.repository"></a>
2025-08-19T20:49:22.0096787Z 
2025-08-19T20:49:22.0096864Z # api.routes.repository
2025-08-19T20:49:22.0096994Z 
2025-08-19T20:49:22.0097065Z <a id="api.routes"></a>
2025-08-19T20:49:22.0097180Z 
2025-08-19T20:49:22.0097247Z # api.routes
2025-08-19T20:49:22.0097352Z 
2025-08-19T20:49:22.0097429Z <a id="api.models.fee"></a>
2025-08-19T20:49:22.0097558Z 
2025-08-19T20:49:22.0097631Z # api.models.fee
2025-08-19T20:49:22.0097737Z 
2025-08-19T20:49:22.0097814Z <a id="api.models"></a>
2025-08-19T20:49:22.0097928Z 
2025-08-19T20:49:22.0097998Z # api.models
2025-08-19T20:49:22.0098090Z 
2025-08-19T20:49:22.0098168Z <a id="api.roi_repository"></a>
2025-08-19T20:49:22.0098313Z 
2025-08-19T20:49:22.0098383Z # api.roi\_repository
2025-08-19T20:49:22.0098496Z 
2025-08-19T20:49:22.0098565Z <a id="api.main"></a>
2025-08-19T20:49:22.0099006Z 
2025-08-19T20:49:22.0099077Z # api.main
2025-08-19T20:49:22.0099170Z 
2025-08-19T20:49:22.0099253Z <a id="api.main.ready"></a>
2025-08-19T20:49:22.0099380Z 
2025-08-19T20:49:22.0099442Z #### ready
2025-08-19T20:49:22.0099533Z 
2025-08-19T20:49:22.0099599Z ```python
2025-08-19T20:49:22.0099856Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-19T20:49:22.0100284Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-19T20:49:22.0100637Z                                                                       str]
2025-08-19T20:49:22.0100862Z ```
2025-08-19T20:49:22.0100946Z 
2025-08-19T20:49:22.0101048Z Return 200 only when migrations are at head.
2025-08-19T20:49:22.0101217Z 
2025-08-19T20:49:22.0101289Z <a id="api.config"></a>
2025-08-19T20:49:22.0101411Z 
2025-08-19T20:49:22.0101474Z # api.config
2025-08-19T20:49:22.0101573Z 
2025-08-19T20:49:22.0101655Z <a id="api.security"></a>
2025-08-19T20:49:22.0101780Z 
2025-08-19T20:49:22.0101978Z # api.security
2025-08-19T20:49:22.0102078Z 
2025-08-19T20:49:22.0102154Z <a id="etl"></a>
2025-08-19T20:49:22.0102255Z 
2025-08-19T20:49:22.0102316Z # etl
2025-08-19T20:49:22.0102411Z 
2025-08-19T20:49:22.0102492Z <a id="etl.fba_fee_ingestor"></a>
2025-08-19T20:49:22.0102640Z 
2025-08-19T20:49:22.0102713Z # etl.fba\_fee\_ingestor
2025-08-19T20:49:22.0102844Z 
2025-08-19T20:49:22.0102923Z <a id="etl.sp_fees_ingestor"></a>
2025-08-19T20:49:22.0103067Z 
2025-08-19T20:49:22.0103149Z # etl.sp\_fees\_ingestor
2025-08-19T20:49:22.0103269Z 
2025-08-19T20:49:22.0103348Z <a id="etl.keepa_ingestor"></a>
2025-08-19T20:49:22.0103493Z 
2025-08-19T20:49:22.0103566Z # etl.keepa\_ingestor
2025-08-19T20:49:22.0103680Z 
2025-08-19T20:49:22.0103748Z <a id="etl.db"></a>
2025-08-19T20:49:22.0103857Z 
2025-08-19T20:49:22.0103919Z # etl.db
2025-08-19T20:49:22.0104006Z 
2025-08-19T20:49:22.0104097Z <a id="etl.dialects.schemas"></a>
2025-08-19T20:49:22.0104240Z 
2025-08-19T20:49:22.0104314Z # etl.dialects.schemas
2025-08-19T20:49:22.0104448Z 
2025-08-19T20:49:22.0104554Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-19T20:49:22.0104740Z 
2025-08-19T20:49:22.0104828Z # etl.dialects.amazon\_reimbursements
2025-08-19T20:49:22.0104996Z 
2025-08-19T20:49:22.0105090Z <a id="etl.dialects.amazon_ads_sp_cost"></a>
2025-08-19T20:49:22.0105260Z 
2025-08-19T20:49:22.0105354Z # etl.dialects.amazon\_ads\_sp\_cost
2025-08-19T20:49:22.0105508Z 
2025-08-19T20:49:22.0105593Z <a id="etl.dialects.test_generic"></a>
2025-08-19T20:49:22.0105755Z 
2025-08-19T20:49:22.0105835Z # etl.dialects.test\_generic
2025-08-19T20:49:22.0105970Z 
2025-08-19T20:49:22.0106057Z <a id="etl.dialects.amazon_returns"></a>
2025-08-19T20:49:22.0106228Z 
2025-08-19T20:49:22.0106311Z # etl.dialects.amazon\_returns
2025-08-19T20:49:22.0106448Z 
2025-08-19T20:49:22.0106544Z <a id="etl.dialects.amazon_fee_preview"></a>
2025-08-19T20:49:22.0106709Z 
2025-08-19T20:49:22.0106792Z # etl.dialects.amazon\_fee\_preview
2025-08-19T20:49:22.0106950Z 
2025-08-19T20:49:22.0107059Z <a id="etl.dialects.amazon_inventory_ledger"></a>
2025-08-19T20:49:22.0107245Z 
2025-08-19T20:49:22.0107331Z # etl.dialects.amazon\_inventory\_ledger
2025-08-19T20:49:22.0107502Z 
2025-08-19T20:49:22.0107595Z <a id="etl.dialects.amazon_settlements"></a>
2025-08-19T20:49:22.0107759Z 
2025-08-19T20:49:22.0107851Z # etl.dialects.amazon\_settlements
2025-08-19T20:49:22.0108000Z 
2025-08-19T20:49:22.0108073Z <a id="etl.dialects"></a>
2025-08-19T20:49:22.0108201Z 
2025-08-19T20:49:22.0108264Z # etl.dialects
2025-08-19T20:49:22.0108361Z 
2025-08-19T20:49:22.0108428Z <a id="ingest"></a>
2025-08-19T20:49:22.0108537Z 
2025-08-19T20:49:22.0108757Z # ingest
2025-08-19T20:49:22.0109050Z 
2025-08-19T20:49:22.0109219Z <a id="ingest.maintenance"></a>
2025-08-19T20:49:22.0109362Z 
2025-08-19T20:49:22.0109431Z # ingest.maintenance
2025-08-19T20:49:22.0109542Z 
2025-08-19T20:49:22.0109628Z <a id="ingest.copy_loader"></a>
2025-08-19T20:49:22.0109761Z 
2025-08-19T20:49:22.0109832Z # ingest.copy\_loader
2025-08-19T20:49:22.0109959Z 
2025-08-19T20:49:22.0110181Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-19T20:49:22.0110360Z 
2025-08-19T20:49:22.0110437Z #### copy\_df\_via\_temp
2025-08-19T20:49:22.0110555Z 
2025-08-19T20:49:22.0110617Z ```python
2025-08-19T20:49:22.0110796Z def copy_df_via_temp(engine: Engine,
2025-08-19T20:49:22.0111030Z                      df: pd.DataFrame,
2025-08-19T20:49:22.0111267Z                      target_table: str,
2025-08-19T20:49:22.0111482Z                      *,
2025-08-19T20:49:22.0111693Z                      target_schema: Optional[str] = None,
2025-08-19T20:49:22.0111947Z                      columns: Sequence[str],
2025-08-19T20:49:22.0112215Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-19T20:49:22.0112494Z                      analyze_after: bool = False,
2025-08-19T20:49:22.0112752Z                      connection: Any | None = None) -> int
2025-08-19T20:49:22.0112985Z ```
2025-08-19T20:49:22.0113068Z 
2025-08-19T20:49:22.0113217Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-19T20:49:22.0113640Z 
2025-08-19T20:49:22.0113728Z <a id="ingest.tests.test_smoke"></a>
2025-08-19T20:49:22.0113886Z 
2025-08-19T20:49:22.0113964Z # ingest.tests.test\_smoke
2025-08-19T20:49:22.0114098Z 
2025-08-19T20:49:22.0114173Z <a id="ingest.tests"></a>
2025-08-19T20:49:22.0114296Z 
2025-08-19T20:49:22.0114367Z # ingest.tests
2025-08-19T20:49:22.0114465Z 
2025-08-19T20:49:22.0114546Z <a id="ingest.upload_router"></a>
2025-08-19T20:49:22.0114701Z 
2025-08-19T20:49:22.0114776Z # ingest.upload\_router
2025-08-19T20:49:22.0114894Z 
2025-08-19T20:49:22.0114973Z <a id="ingest.email_watcher"></a>
2025-08-19T20:49:22.0115123Z 
2025-08-19T20:49:22.0115194Z # ingest.email\_watcher
2025-08-19T20:49:22.0115311Z 
2025-08-19T20:49:22.0115404Z <a id="ingest.email_watcher.main"></a>
2025-08-19T20:49:22.0115561Z 
2025-08-19T20:49:22.0115623Z #### main
2025-08-19T20:49:22.0115718Z 
2025-08-19T20:49:22.0115780Z ```python
2025-08-19T20:49:22.0115943Z def main() -> dict[str, str]
2025-08-19T20:49:22.0116151Z ```
2025-08-19T20:49:22.0116232Z 
2025-08-19T20:49:22.0116371Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-19T20:49:22.0116603Z 
2025-08-19T20:49:22.0116729Z Returns {"status": "success"} when processing completes.
2025-08-19T20:49:22.0116934Z 
2025-08-19T20:49:22.0117015Z <a id="ingest.tasks"></a>
2025-08-19T20:49:22.0117140Z 
2025-08-19T20:49:22.0117204Z # ingest.tasks
2025-08-19T20:49:22.0117311Z 
2025-08-19T20:49:22.0117405Z <a id="ingest.tasks.task_import_file"></a>
2025-08-19T20:49:22.0117575Z 
2025-08-19T20:49:22.0117647Z #### task\_import\_file
2025-08-19T20:49:22.0117768Z 
2025-08-19T20:49:22.0117837Z ```python
2025-08-19T20:49:22.0118048Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-19T20:49:22.0118343Z def task_import_file(self: Any,
2025-08-19T20:49:22.0118547Z                      uri: str,
2025-08-19T20:49:22.0118767Z                      report_type: str | None = None,
2025-08-19T20:49:22.0119144Z                      force: bool = False) -> dict[str, Any]
2025-08-19T20:49:22.0119395Z ```
2025-08-19T20:49:22.0119475Z 
2025-08-19T20:49:22.0119603Z Import a file into Postgres using existing ETL pipeline.
2025-08-19T20:49:22.0119812Z 
2025-08-19T20:49:22.0119890Z <a id="ingest.celery_app"></a>
2025-08-19T20:49:22.0120030Z 
2025-08-19T20:49:22.0120106Z # ingest.celery\_app
2025-08-19T20:49:22.0120218Z 
2025-08-19T20:49:22.0120297Z <a id="ingest.ingest_router"></a>
2025-08-19T20:49:22.0120448Z 
2025-08-19T20:49:22.0120520Z # ingest.ingest\_router
2025-08-19T20:49:22.0120637Z 
2025-08-19T20:49:22.0120712Z <a id="logistics_etl"></a>
2025-08-19T20:49:22.0120843Z 
2025-08-19T20:49:22.0120910Z # logistics\_etl
2025-08-19T20:49:22.0121013Z 
2025-08-19T20:49:22.0121093Z Daily logistics ETL job.
2025-08-19T20:49:22.0121215Z 
2025-08-19T20:49:22.0121295Z <a id="logistics_etl.__main__"></a>
2025-08-19T20:49:22.0121450Z 
2025-08-19T20:49:22.0121526Z # logistics\_etl.\_\_main\_\_
2025-08-19T20:49:22.0121658Z 
2025-08-19T20:49:22.0121860Z <a id="logistics_etl.dsn"></a>
2025-08-19T20:49:22.0122036Z 
2025-08-19T20:49:22.0122103Z # logistics\_etl.dsn
2025-08-19T20:49:22.0122213Z 
2025-08-19T20:49:22.0122334Z Local DSN builder to avoid cross-service dependency.
2025-08-19T20:49:22.0122526Z 
2025-08-19T20:49:22.0122616Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-19T20:49:22.0122786Z 
2025-08-19T20:49:22.0122851Z #### build\_dsn
2025-08-19T20:49:22.0122952Z 
2025-08-19T20:49:22.0123013Z ```python
2025-08-19T20:49:22.0123193Z def build_dsn(sync: bool = True) -> str
2025-08-19T20:49:22.0123410Z ```
2025-08-19T20:49:22.0123497Z 
2025-08-19T20:49:22.0123630Z Return a Postgres DSN assembled from environment variables.
2025-08-19T20:49:22.0123846Z 
2025-08-19T20:49:22.0123997Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-19T20:49:22.0124391Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-19T20:49:22.0124733Z error when any required variable is missing.
2025-08-19T20:49:22.0124905Z 
2025-08-19T20:49:22.0125119Z <a id="logistics_etl.tests.conftest"></a>
2025-08-19T20:49:22.0125298Z 
2025-08-19T20:49:22.0125383Z # logistics\_etl.tests.conftest
2025-08-19T20:49:22.0125528Z 
2025-08-19T20:49:22.0125643Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-19T20:49:22.0125831Z 
2025-08-19T20:49:22.0125921Z # logistics\_etl.tests.test\_repository
2025-08-19T20:49:22.0126089Z 
2025-08-19T20:49:22.0126181Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-19T20:49:22.0126346Z 
2025-08-19T20:49:22.0126430Z # logistics\_etl.tests.test\_cron
2025-08-19T20:49:22.0126586Z 
2025-08-19T20:49:22.0126684Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-19T20:49:22.0126857Z 
2025-08-19T20:49:22.0126950Z # logistics\_etl.tests.test\_imports
2025-08-19T20:49:22.0127107Z 
2025-08-19T20:49:22.0127199Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-19T20:49:22.0127373Z 
2025-08-19T20:49:22.0127455Z # logistics\_etl.tests.test\_smoke
2025-08-19T20:49:22.0127603Z 
2025-08-19T20:49:22.0127695Z <a id="logistics_etl.tests.test_client"></a>
2025-08-19T20:49:22.0127884Z 
2025-08-19T20:49:22.0127969Z # logistics\_etl.tests.test\_client
2025-08-19T20:49:22.0128121Z 
2025-08-19T20:49:22.0128209Z <a id="logistics_etl.tests"></a>
2025-08-19T20:49:22.0128354Z 
2025-08-19T20:49:22.0128424Z # logistics\_etl.tests
2025-08-19T20:49:22.0128552Z 
2025-08-19T20:49:22.0128629Z <a id="logistics_etl.flow"></a>
2025-08-19T20:49:22.0128766Z 
2025-08-19T20:49:22.0128836Z # logistics\_etl.flow
2025-08-19T20:49:22.0129067Z 
2025-08-19T20:49:22.0129149Z <a id="logistics_etl.client"></a>
2025-08-19T20:49:22.0129294Z 
2025-08-19T20:49:22.0129373Z # logistics\_etl.client
2025-08-19T20:49:22.0129490Z 
2025-08-19T20:49:22.0129566Z <a id="logistics_etl.cron"></a>
2025-08-19T20:49:22.0129704Z 
2025-08-19T20:49:22.0129772Z # logistics\_etl.cron
2025-08-19T20:49:22.0129885Z 
2025-08-19T20:49:22.0129962Z <a id="logistics_etl.db"></a>
2025-08-19T20:49:22.0130104Z 
2025-08-19T20:49:22.0130172Z # logistics\_etl.db
2025-08-19T20:49:22.0130283Z 
2025-08-19T20:49:22.0130381Z <a id="logistics_etl.repository"></a>
2025-08-19T20:49:22.0130538Z 
2025-08-19T20:49:22.0199817Z # logistics\_etl.repository
2025-08-19T20:49:22.0200208Z 
2025-08-19T20:49:22.0200369Z <a id="alert_bot"></a>
2025-08-19T20:49:22.0200640Z 
2025-08-19T20:49:22.0200786Z # alert\_bot
2025-08-19T20:49:22.0201008Z 
2025-08-19T20:49:22.0201220Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-19T20:49:22.0201613Z 
2025-08-19T20:49:22.0201801Z # alert\_bot.tests.test\_smoke
2025-08-19T20:49:22.0202126Z 
2025-08-19T20:49:22.0202308Z <a id="alert_bot.tests"></a>
2025-08-19T20:49:22.0202628Z 
2025-08-19T20:49:22.0202766Z # alert\_bot.tests
2025-08-19T20:49:22.0202987Z 
2025-08-19T20:49:22.0203159Z <a id="alert_bot.alert_bot"></a>
2025-08-19T20:49:22.0203464Z 
2025-08-19T20:49:22.0203556Z # alert\_bot.alert\_bot
2025-08-19T20:49:22.0203720Z 
2025-08-19T20:49:22.0203816Z <a id="alert_bot.rules"></a>
2025-08-19T20:49:22.0203986Z 
2025-08-19T20:49:22.0204068Z # alert\_bot.rules
2025-08-19T20:49:22.0204443Z 
2025-08-19T20:49:22.0204531Z <a id="common"></a>
2025-08-19T20:49:22.0204667Z 
2025-08-19T20:49:22.0204754Z # common
2025-08-19T20:49:22.0204866Z 
2025-08-19T20:49:22.0204956Z <a id="common.dsn"></a>
2025-08-19T20:49:22.0205107Z 
2025-08-19T20:49:22.0205186Z # common.dsn
2025-08-19T20:49:22.0205304Z 
2025-08-19T20:49:22.0205407Z <a id="common.dsn.build_dsn"></a>
2025-08-19T20:49:22.0205596Z 
2025-08-19T20:49:22.0205674Z #### build\_dsn
2025-08-19T20:49:22.0205801Z 
2025-08-19T20:49:22.0205887Z ```python
2025-08-19T20:49:22.0206115Z def build_dsn(sync: bool = True) -> str
2025-08-19T20:49:22.0206392Z ```
2025-08-19T20:49:22.0206494Z 
2025-08-19T20:49:22.0206649Z Return a Postgres DSN, validating required variables.
2025-08-19T20:49:22.0206905Z 
2025-08-19T20:49:22.0207133Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-19T20:49:22.0207700Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-19T20:49:22.0208117Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-19T20:49:22.0208549Z missing.
2025-08-19T20:49:22.0208636Z 
2025-08-19T20:49:22.0208723Z <a id="common.models_vendor"></a>
2025-08-19T20:49:22.0209063Z 
2025-08-19T20:49:22.0209152Z # common.models\_vendor
2025-08-19T20:49:22.0209275Z 
2025-08-19T20:49:22.0209366Z <a id="common.models_vendor.Vendor"></a>
2025-08-19T20:49:22.0209536Z 
2025-08-19T20:49:22.0209602Z ## Vendor Objects
2025-08-19T20:49:22.0209707Z 
2025-08-19T20:49:22.0209776Z ```python
2025-08-19T20:49:22.0209931Z class Vendor(Base)
2025-08-19T20:49:22.0210099Z ```
2025-08-19T20:49:22.0210179Z 
2025-08-19T20:49:22.0210259Z Vendor of inventory items.
2025-08-19T20:49:22.0210389Z 
2025-08-19T20:49:22.0210502Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-19T20:49:22.0210680Z 
2025-08-19T20:49:22.0210750Z ## VendorPrice Objects
2025-08-19T20:49:22.0210873Z 
2025-08-19T20:49:22.0210935Z ```python
2025-08-19T20:49:22.0211093Z class VendorPrice(Base)
2025-08-19T20:49:22.0211270Z ```
2025-08-19T20:49:22.0211360Z 
2025-08-19T20:49:22.0211467Z Association table linking vendors to pricing.
2025-08-19T20:49:22.0211646Z 
2025-08-19T20:49:22.0211722Z <a id="common.db_url"></a>
2025-08-19T20:49:22.0211852Z 
2025-08-19T20:49:22.0211916Z # common.db\_url
2025-08-19T20:49:22.0212019Z 
2025-08-19T20:49:22.0212102Z <a id="common.db_url.build_url"></a>
2025-08-19T20:49:22.0212261Z 
2025-08-19T20:49:22.0212325Z #### build\_url
2025-08-19T20:49:22.0212424Z 
2025-08-19T20:49:22.0212496Z ```python
2025-08-19T20:49:22.0212666Z def build_url(async_: bool = True) -> str
2025-08-19T20:49:22.0212892Z ```
2025-08-19T20:49:22.0212973Z 
2025-08-19T20:49:22.0213071Z Return Postgres DSN from env or PG_* parts.
2025-08-19T20:49:22.0213249Z 
2025-08-19T20:49:22.0213327Z <a id="common.keepa"></a>
2025-08-19T20:49:22.0213462Z 
2025-08-19T20:49:22.0213529Z # common.keepa
2025-08-19T20:49:22.0213641Z 
2025-08-19T20:49:22.0213716Z <a id="common.llm"></a>
2025-08-19T20:49:22.0213835Z 
2025-08-19T20:49:22.0213905Z # common.llm
2025-08-19T20:49:22.0214010Z 
2025-08-19T20:49:22.0214089Z <a id="common.settings"></a>
2025-08-19T20:49:22.0214226Z 
2025-08-19T20:49:22.0214299Z # common.settings
2025-08-19T20:49:22.0214405Z 
2025-08-19T20:49:22.0214475Z <a id="common.db"></a>
2025-08-19T20:49:22.0214600Z 
2025-08-19T20:49:22.0214663Z # common.db
2025-08-19T20:49:22.0214755Z 
2025-08-19T20:49:22.0214857Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-19T20:49:22.0215028Z 
2025-08-19T20:49:22.0215105Z #### build\_sqlalchemy\_url
2025-08-19T20:49:22.0215238Z 
2025-08-19T20:49:22.0215307Z ```python
2025-08-19T20:49:22.0215480Z def build_sqlalchemy_url() -> str
2025-08-19T20:49:22.0215695Z ```
2025-08-19T20:49:22.0215776Z 
2025-08-19T20:49:22.0215873Z Return Postgres URL for SQLAlchemy engines.
2025-08-19T20:49:22.0216052Z 
2025-08-19T20:49:22.0216140Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-19T20:49:22.0216304Z 
2025-08-19T20:49:22.0216387Z #### build\_asyncpg\_dsn
2025-08-19T20:49:22.0216512Z 
2025-08-19T20:49:22.0216579Z ```python
2025-08-19T20:49:22.0216886Z def build_asyncpg_dsn() -> str
2025-08-19T20:49:22.0217082Z ```
2025-08-19T20:49:22.0217171Z 
2025-08-19T20:49:22.0217305Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-19T20:49:22.0217515Z 
2025-08-19T20:49:22.0217600Z <a id="common.db.refresh_mvs"></a>
2025-08-19T20:49:22.0217758Z 
2025-08-19T20:49:22.0217824Z #### refresh\_mvs
2025-08-19T20:49:22.0217930Z 
2025-08-19T20:49:22.0217997Z ```python
2025-08-19T20:49:22.0218191Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-19T20:49:22.0218441Z ```
2025-08-19T20:49:22.0218526Z 
2025-08-19T20:49:22.0218662Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-19T20:49:22.0218995Z 
2025-08-19T20:49:22.0219076Z <a id="common.config"></a>
2025-08-19T20:49:22.0219207Z 
2025-08-19T20:49:22.0219280Z # common.config
2025-08-19T20:49:22.0219383Z 
2025-08-19T20:49:22.0219457Z <a id="common.base"></a>
2025-08-19T20:49:22.0219582Z 
2025-08-19T20:49:22.0219657Z # common.base
2025-08-19T20:49:22.0219896Z 
2025-08-19T20:49:22.0219976Z <a id="common.base.Base"></a>
2025-08-19T20:49:22.0220116Z 
2025-08-19T20:49:22.0220180Z ## Base Objects
2025-08-19T20:49:22.0220277Z 
2025-08-19T20:49:22.0220338Z ```python
2025-08-19T20:49:22.0220509Z class Base(DeclarativeBase)
2025-08-19T20:49:22.0220703Z ```
2025-08-19T20:49:22.0220788Z 
2025-08-19T20:49:22.0220871Z Base class for SQLAlchemy models.
2025-08-19T20:49:22.0221021Z 
2025-08-19T20:49:22.0221099Z <a id="repricer"></a>
2025-08-19T20:49:22.0221213Z 
2025-08-19T20:49:22.0221275Z # repricer
2025-08-19T20:49:22.0221372Z 
2025-08-19T20:49:22.0221458Z <a id="repricer.app.schemas"></a>
2025-08-19T20:49:22.0221606Z 
2025-08-19T20:49:22.0221682Z # repricer.app.schemas
2025-08-19T20:49:22.0221812Z 
2025-08-19T20:49:22.0221893Z <a id="repricer.app.deps"></a>
2025-08-19T20:49:22.0222032Z 
2025-08-19T20:49:22.0222109Z # repricer.app.deps
2025-08-19T20:49:22.0222219Z 
2025-08-19T20:49:22.0222341Z Placeholder module for Keepa / SP-API clients.
2025-08-19T20:49:22.0222538Z 
2025-08-19T20:49:22.0222626Z <a id="repricer.app.logic"></a>
2025-08-19T20:49:22.0222767Z 
2025-08-19T20:49:22.0222843Z # repricer.app.logic
2025-08-19T20:49:22.0222964Z 
2025-08-19T20:49:22.0223062Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-19T20:49:22.0223234Z 
2025-08-19T20:49:22.0223303Z #### MIN\_MARGIN
2025-08-19T20:49:22.0223404Z 
2025-08-19T20:49:22.0223466Z 15 % ROI
2025-08-19T20:49:22.0223560Z 
2025-08-19T20:49:22.0223665Z <a id="repricer.app.logic.compute_price"></a>
2025-08-19T20:49:22.0223844Z 
2025-08-19T20:49:22.0223912Z #### compute\_price
2025-08-19T20:49:22.0224025Z 
2025-08-19T20:49:22.0224089Z ```python
2025-08-19T20:49:22.0224339Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-19T20:49:22.0224637Z ```
2025-08-19T20:49:22.0224719Z 
2025-08-19T20:49:22.0224830Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-19T20:49:22.0225106Z Replace with real competitive logic later.
2025-08-19T20:49:22.0225280Z 
2025-08-19T20:49:22.0225362Z <a id="repricer.app.main"></a>
2025-08-19T20:49:22.0225511Z 
2025-08-19T20:49:22.0225583Z # repricer.app.main
2025-08-19T20:49:22.0225699Z 
2025-08-19T20:49:22.0225777Z <a id="repricer.app"></a>
2025-08-19T20:49:22.0225961Z 
2025-08-19T20:49:22.0226037Z # repricer.app
2025-08-19T20:49:22.0226140Z 
2025-08-19T20:49:22.0226231Z <a id="repricer.tests.test_imports"></a>
2025-08-19T20:49:22.0226404Z 
2025-08-19T20:49:22.0226488Z # repricer.tests.test\_imports
2025-08-19T20:49:22.0226627Z 
2025-08-19T20:49:22.0226717Z <a id="repricer.tests.test_smoke"></a>
2025-08-19T20:49:22.0226886Z 
2025-08-19T20:49:22.0226967Z # repricer.tests.test\_smoke
2025-08-19T20:49:22.0227105Z 
2025-08-19T20:49:22.0227187Z <a id="repricer.tests"></a>
2025-08-19T20:49:22.0227319Z 
2025-08-19T20:49:22.0227388Z # repricer.tests
2025-08-19T20:49:22.0227496Z 
2025-08-19T20:49:22.0227558Z <a id="db"></a>
2025-08-19T20:49:22.0227655Z 
2025-08-19T20:49:22.0227713Z # db
2025-08-19T20:49:22.0227804Z 
2025-08-19T20:49:22.0227880Z <a id="db.utils.views"></a>
2025-08-19T20:49:22.0228131Z 
2025-08-19T20:49:22.0228215Z # db.utils.views
2025-08-19T20:49:22.0228316Z 
2025-08-19T20:49:22.0228408Z <a id="db.utils.views.replace_view"></a>
2025-08-19T20:49:22.0228574Z 
2025-08-19T20:49:22.0228646Z #### replace\_view
2025-08-19T20:49:22.0228750Z 
2025-08-19T20:49:22.0228812Z ```python
2025-08-19T20:49:22.0229120Z def replace_view(name: str, new_sql: str) -> None
2025-08-19T20:49:22.0229361Z ```
2025-08-19T20:49:22.0229448Z 
2025-08-19T20:49:22.0229534Z Drop and recreate a SQL view atomically.
2025-08-19T20:49:22.0229696Z 
2025-08-19T20:49:22.0229771Z <a id="db.utils"></a>
2025-08-19T20:49:22.0229881Z 
2025-08-19T20:49:22.0229941Z # db.utils
2025-08-19T20:49:22.0230030Z 
2025-08-19T20:49:22.0230112Z <a id="price_importer"></a>
2025-08-19T20:49:22.0230241Z 
2025-08-19T20:49:22.0230309Z # price\_importer
2025-08-19T20:49:22.0230418Z 
2025-08-19T20:49:22.0230521Z <a id="price_importer.services_common.dsn"></a>
2025-08-19T20:49:22.0230706Z 
2025-08-19T20:49:22.0230801Z # price\_importer.services\_common.dsn
2025-08-19T20:49:22.0231084Z 
2025-08-19T20:49:22.0231211Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-19T20:49:22.0231416Z 
2025-08-19T20:49:22.0231485Z #### build\_dsn
2025-08-19T20:49:22.0231586Z 
2025-08-19T20:49:22.0231649Z ```python
2025-08-19T20:49:22.0231827Z def build_dsn(sync: bool = True) -> str
2025-08-19T20:49:22.0232044Z ```
2025-08-19T20:49:22.0232133Z 
2025-08-19T20:49:22.0232198Z Return safe DSN.
2025-08-19T20:49:22.0232301Z 
2025-08-19T20:49:22.0232660Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-19T20:49:22.0232861Z 
2025-08-19T20:49:22.0232988Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-19T20:49:22.0233202Z 
2025-08-19T20:49:22.0233312Z # price\_importer.services\_common.models\_vendor
2025-08-19T20:49:22.0233504Z 
2025-08-19T20:49:22.0233611Z <a id="price_importer.services_common.db_url"></a>
2025-08-19T20:49:22.0233803Z 
2025-08-19T20:49:22.0233897Z # price\_importer.services\_common.db\_url
2025-08-19T20:49:22.0234081Z 
2025-08-19T20:49:22.0234221Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-19T20:49:22.0234433Z 
2025-08-19T20:49:22.0234497Z #### build\_url
2025-08-19T20:49:22.0234601Z 
2025-08-19T20:49:22.0234665Z ```python
2025-08-19T20:49:22.0234836Z def build_url(async_: bool = True) -> str
2025-08-19T20:49:22.0235061Z ```
2025-08-19T20:49:22.0235140Z 
2025-08-19T20:49:22.0235241Z Return Postgres DSN from env or PG_* parts.
2025-08-19T20:49:22.0235413Z 
2025-08-19T20:49:22.0235518Z <a id="price_importer.services_common.keepa"></a>
2025-08-19T20:49:22.0235703Z 
2025-08-19T20:49:22.0235804Z # price\_importer.services\_common.keepa
2025-08-19T20:49:22.0235974Z 
2025-08-19T20:49:22.0236074Z <a id="price_importer.services_common.llm"></a>
2025-08-19T20:49:22.0236260Z 
2025-08-19T20:49:22.0236350Z # price\_importer.services\_common.llm
2025-08-19T20:49:22.0236511Z 
2025-08-19T20:49:22.0236629Z <a id="price_importer.services_common.settings"></a>
2025-08-19T20:49:22.0236827Z 
2025-08-19T20:49:22.0236926Z # price\_importer.services\_common.settings
2025-08-19T20:49:22.0237096Z 
2025-08-19T20:49:22.0237201Z <a id="price_importer.services_common.db"></a>
2025-08-19T20:49:22.0237375Z 
2025-08-19T20:49:22.0237464Z # price\_importer.services\_common.db
2025-08-19T20:49:22.0237624Z 
2025-08-19T20:49:22.0237780Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-19T20:49:22.0238017Z 
2025-08-19T20:49:22.0238101Z #### build\_sqlalchemy\_url
2025-08-19T20:49:22.0238232Z 
2025-08-19T20:49:22.0238297Z ```python
2025-08-19T20:49:22.0238473Z def build_sqlalchemy_url() -> str
2025-08-19T20:49:22.0238676Z ```
2025-08-19T20:49:22.0238768Z 
2025-08-19T20:49:22.0238865Z Return Postgres URL for SQLAlchemy engines.
2025-08-19T20:49:22.0239158Z 
2025-08-19T20:49:22.0239310Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-19T20:49:22.0239548Z 
2025-08-19T20:49:22.0239623Z #### build\_asyncpg\_dsn
2025-08-19T20:49:22.0239752Z 
2025-08-19T20:49:22.0239830Z ```python
2025-08-19T20:49:22.0240128Z def build_asyncpg_dsn() -> str
2025-08-19T20:49:22.0240325Z ```
2025-08-19T20:49:22.0240405Z 
2025-08-19T20:49:22.0240532Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-19T20:49:22.0240748Z 
2025-08-19T20:49:22.0240878Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-19T20:49:22.0241083Z 
2025-08-19T20:49:22.0241152Z #### refresh\_mvs
2025-08-19T20:49:22.0241257Z 
2025-08-19T20:49:22.0241323Z ```python
2025-08-19T20:49:22.0241524Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-19T20:49:22.0241762Z ```
2025-08-19T20:49:22.0241841Z 
2025-08-19T20:49:22.0241980Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-19T20:49:22.0242192Z 
2025-08-19T20:49:22.0242285Z <a id="price_importer.services_common"></a>
2025-08-19T20:49:22.0242459Z 
2025-08-19T20:49:22.0242544Z # price\_importer.services\_common
2025-08-19T20:49:22.0242696Z 
2025-08-19T20:49:22.0242804Z <a id="price_importer.services_common.base"></a>
2025-08-19T20:49:22.0243108Z 
2025-08-19T20:49:22.0243197Z # price\_importer.services\_common.base
2025-08-19T20:49:22.0243368Z 
2025-08-19T20:49:22.0243455Z <a id="price_importer.normaliser"></a>
2025-08-19T20:49:22.0243615Z 
2025-08-19T20:49:22.0243697Z # price\_importer.normaliser
2025-08-19T20:49:22.0243840Z 
2025-08-19T20:49:22.0243942Z <a id="price_importer.common.models_vendor"></a>
2025-08-19T20:49:22.0244124Z 
2025-08-19T20:49:22.0244217Z # price\_importer.common.models\_vendor
2025-08-19T20:49:22.0244379Z 
2025-08-19T20:49:22.0244470Z <a id="price_importer.common.db_url"></a>
2025-08-19T20:49:22.0244641Z 
2025-08-19T20:49:22.0244724Z # price\_importer.common.db\_url
2025-08-19T20:49:22.0244871Z 
2025-08-19T20:49:22.0244975Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-19T20:49:22.0245163Z 
2025-08-19T20:49:22.0245225Z #### make\_dsn
2025-08-19T20:49:22.0245323Z 
2025-08-19T20:49:22.0245391Z ```python
2025-08-19T20:49:22.0245564Z def make_dsn(async_: bool = False) -> str
2025-08-19T20:49:22.0245802Z ```
2025-08-19T20:49:22.0245881Z 
2025-08-19T20:49:22.0245998Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-19T20:49:22.0246200Z 
2025-08-19T20:49:22.0246307Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-19T20:49:22.0246493Z 
2025-08-19T20:49:22.0246556Z #### build\_url
2025-08-19T20:49:22.0246661Z 
2025-08-19T20:49:22.0246723Z ```python
2025-08-19T20:49:22.0246908Z def build_url(async_: bool = False) -> str
2025-08-19T20:49:22.0247129Z ```
2025-08-19T20:49:22.0247210Z 
2025-08-19T20:49:22.0247334Z Return Postgres DSN built from environment variables.
2025-08-19T20:49:22.0247530Z 
2025-08-19T20:49:22.0247615Z <a id="price_importer.common"></a>
2025-08-19T20:49:22.0247772Z 
2025-08-19T20:49:22.0247849Z # price\_importer.common
2025-08-19T20:49:22.0247974Z 
2025-08-19T20:49:22.0248070Z <a id="price_importer.common.base"></a>
2025-08-19T20:49:22.0248232Z 
2025-08-19T20:49:22.0248315Z # price\_importer.common.base
2025-08-19T20:49:22.0248454Z 
2025-08-19T20:49:22.0248560Z <a id="price_importer.tests.conftest"></a>
2025-08-19T20:49:22.0248735Z 
2025-08-19T20:49:22.0248817Z # price\_importer.tests.conftest
2025-08-19T20:49:22.0249114Z 
2025-08-19T20:49:22.0249214Z <a id="price_importer.tests.test_reader"></a>
2025-08-19T20:49:22.0249389Z 
2025-08-19T20:49:22.0249479Z # price\_importer.tests.test\_reader
2025-08-19T20:49:22.0249634Z 
2025-08-19T20:49:22.0249733Z <a id="price_importer.tests.test_imports"></a>
2025-08-19T20:49:22.0249910Z 
2025-08-19T20:49:22.0250014Z # price\_importer.tests.test\_imports
2025-08-19T20:49:22.0250177Z 
2025-08-19T20:49:22.0250272Z <a id="price_importer.tests.test_smoke"></a>
2025-08-19T20:49:22.0250448Z 
2025-08-19T20:49:22.0250532Z # price\_importer.tests.test\_smoke
2025-08-19T20:49:22.0250688Z 
2025-08-19T20:49:22.0250800Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-19T20:49:22.0251019Z 
2025-08-19T20:49:22.0251112Z # price\_importer.tests.test\_normaliser
2025-08-19T20:49:22.0251278Z 
2025-08-19T20:49:22.0251368Z <a id="price_importer.tests"></a>
2025-08-19T20:49:22.0251646Z 
2025-08-19T20:49:22.0251722Z # price\_importer.tests
2025-08-19T20:49:22.0251850Z 
2025-08-19T20:49:22.0251931Z <a id="price_importer.reader"></a>
2025-08-19T20:49:22.0252081Z 
2025-08-19T20:49:22.0252165Z # price\_importer.reader
2025-08-19T20:49:22.0252295Z 
2025-08-19T20:49:22.0252383Z <a id="price_importer.repository"></a>
2025-08-19T20:49:22.0252545Z 
2025-08-19T20:49:22.0252632Z # price\_importer.repository
2025-08-19T20:49:22.0252768Z 
2025-08-19T20:49:22.0252857Z <a id="price_importer.import"></a>
2025-08-19T20:49:22.0253012Z 
2025-08-19T20:49:22.0253088Z # price\_importer.import
2025-08-19T20:49:22.0253209Z 
2025-08-19T20:49:22.0253281Z <a id="fees_h10"></a>
2025-08-19T20:49:22.0253393Z 
2025-08-19T20:49:22.0253457Z # fees\_h10
2025-08-19T20:49:22.0253547Z 
2025-08-19T20:49:22.0253628Z <a id="fees_h10.worker"></a>
2025-08-19T20:49:22.0253757Z 
2025-08-19T20:49:22.0253822Z # fees\_h10.worker
2025-08-19T20:49:22.0253930Z 
2025-08-19T20:49:22.0254138Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-19T20:49:22.0254317Z 
2025-08-19T20:49:22.0254389Z #### list\_active\_asins
2025-08-19T20:49:22.0254515Z 
2025-08-19T20:49:22.0254582Z ```python
2025-08-19T20:49:22.0254755Z def list_active_asins() -> list[str]
2025-08-19T20:49:22.0254960Z ```
2025-08-19T20:49:22.0255041Z 
2025-08-19T20:49:22.0255159Z Return known ASINs or an empty list if unavailable.
2025-08-19T20:49:22.0255348Z 
2025-08-19T20:49:22.0255431Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-19T20:49:22.0255592Z 
2025-08-19T20:49:22.0255669Z # fees\_h10.tests.test\_smoke
2025-08-19T20:49:22.0255803Z 
2025-08-19T20:49:22.0255884Z <a id="fees_h10.tests"></a>
2025-08-19T20:49:22.0256020Z 
2025-08-19T20:49:22.0256088Z # fees\_h10.tests
2025-08-19T20:49:22.0256194Z 
2025-08-19T20:49:22.0256277Z <a id="fees_h10.client"></a>
2025-08-19T20:49:22.0256410Z 
2025-08-19T20:49:22.0256477Z # fees\_h10.client
2025-08-19T20:49:22.0256589Z 
2025-08-19T20:49:22.0256670Z <a id="fees_h10.repository"></a>
2025-08-19T20:49:22.0256825Z 
2025-08-19T20:49:22.0256897Z # fees\_h10.repository
2025-08-19T20:49:22.0257019Z 
2025-08-19T20:49:22.0257127Z <a id="fees_h10.repository.upsert_fees_raw"></a>
2025-08-19T20:49:22.0257308Z 
2025-08-19T20:49:22.0257386Z #### upsert\_fees\_raw
2025-08-19T20:49:22.0257500Z 
2025-08-19T20:49:22.0257561Z ```python
2025-08-19T20:49:22.0257735Z def upsert_fees_raw(engine: Engine,
2025-08-19T20:49:22.0257980Z                     rows: Iterable[Mapping[str, Any]],
2025-08-19T20:49:22.0258225Z                     *,
2025-08-19T20:49:22.0258452Z                     testing: bool = False) -> Optional[Dict[str, int]]
2025-08-19T20:49:22.0258719Z ```
2025-08-19T20:49:22.0258802Z 
2025-08-19T20:49:22.0258998Z Idempotent upsert for fees.
2025-08-19T20:49:22.0259137Z 
2025-08-19T20:49:22.0259289Z TESTING-only: returns counts for inserted/updated/skipped rows.
2025-08-19T20:49:22.0259634Z Assumes logical key (asin, marketplace, fee_type).
2025-08-19T20:49:22.0259934Z Only updates when one of the mutable fields changes.
2025-08-19T20:49:22.0260145Z 
2025-08-19T20:49:22.0260214Z <a id="emailer"></a>
2025-08-19T20:49:22.0260323Z 
2025-08-19T20:49:22.0260392Z # emailer
2025-08-19T20:49:22.0260482Z 
2025-08-19T20:49:22.0260583Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-19T20:49:22.0260761Z 
2025-08-19T20:49:22.0260859Z # emailer.tests.test\_import\_emailer
2025-08-19T20:49:22.0261022Z 
2025-08-19T20:49:22.0261106Z <a id="emailer.tests.test_smoke"></a>
2025-08-19T20:49:22.0261268Z 
2025-08-19T20:49:22.0261347Z # emailer.tests.test\_smoke
2025-08-19T20:49:22.0261480Z 
2025-08-19T20:49:22.0261564Z <a id="emailer.tests"></a>
2025-08-19T20:49:22.0261693Z 
2025-08-19T20:49:22.0261760Z # emailer.tests
2025-08-19T20:49:22.0261865Z 
2025-08-19T20:49:22.0261958Z <a id="emailer.generate_body"></a>
2025-08-19T20:49:22.0262109Z 
2025-08-19T20:49:22.0262186Z # emailer.generate\_body
2025-08-19T20:49:22.0262318Z 
2025-08-19T20:49:22.0262390Z <a id="llm_server"></a>
2025-08-19T20:49:22.0262510Z 
2025-08-19T20:49:22.0262695Z # llm\_server
2025-08-19T20:49:22.0262801Z 
2025-08-19T20:49:22.0262880Z <a id="llm_server.app"></a>
2025-08-19T20:49:22.0263012Z 
2025-08-19T20:49:22.0263089Z # llm\_server.app
2025-08-19T20:49:22.0263195Z 
