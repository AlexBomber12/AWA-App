2025-08-19T03:32:21.1612015Z ##[group]Run pydoc-markdown
2025-08-19T03:32:21.1612301Z [36;1mpydoc-markdown[0m
2025-08-19T03:32:21.1652868Z shell: /usr/bin/bash -e {0}
2025-08-19T03:32:21.1653094Z env:
2025-08-19T03:32:21.1653327Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T03:32:21.1653737Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-19T03:32:21.1654132Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T03:32:21.1654474Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T03:32:21.1654835Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T03:32:21.1655183Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-19T03:32:21.1655475Z ##[endgroup]
2025-08-19T03:32:21.5113292Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-19T03:32:21.5114000Z Unknown key(s) "{'output_directory'}" at:
2025-08-19T03:32:21.5114372Z In "pydoc-markdown.yml"
2025-08-19T03:32:21.5114720Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-19T03:32:21.5115221Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-19T03:32:21.5115806Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-19T03:32:21.5116230Z 
2025-08-19T03:32:21.8276119Z <a id="__init__"></a>
2025-08-19T03:32:21.8276454Z 
2025-08-19T03:32:21.8276614Z # \_\_init\_\_
2025-08-19T03:32:21.8276880Z 
2025-08-19T03:32:21.8277046Z <a id="api"></a>
2025-08-19T03:32:21.8277312Z 
2025-08-19T03:32:21.8277457Z # api
2025-08-19T03:32:21.8277674Z 
2025-08-19T03:32:21.8277861Z <a id="api.errors"></a>
2025-08-19T03:32:21.8278169Z 
2025-08-19T03:32:21.8278322Z # api.errors
2025-08-19T03:32:21.8278540Z 
2025-08-19T03:32:21.8278722Z <a id="api.sentry_config"></a>
2025-08-19T03:32:21.8278991Z 
2025-08-19T03:32:21.8279122Z # api.sentry\_config
2025-08-19T03:32:21.8279333Z 
2025-08-19T03:32:21.8279452Z <a id="api.tests.test_sentry_scrub"></a>
2025-08-19T03:32:21.8279675Z 
2025-08-19T03:32:21.8280049Z # api.tests.test\_sentry\_scrub
2025-08-19T03:32:21.8280238Z 
2025-08-19T03:32:21.8280352Z <a id="api.tests.test_errors_json"></a>
2025-08-19T03:32:21.8280554Z 
2025-08-19T03:32:21.8280650Z # api.tests.test\_errors\_json
2025-08-19T03:32:21.8281062Z 
2025-08-19T03:32:21.8281163Z <a id="api.tests.test_llm"></a>
2025-08-19T03:32:21.8281335Z 
2025-08-19T03:32:21.8281422Z # api.tests.test\_llm
2025-08-19T03:32:21.8281567Z 
2025-08-19T03:32:21.8281672Z <a id="api.tests.test_sentry_event"></a>
2025-08-19T03:32:21.8281877Z 
2025-08-19T03:32:21.8281976Z # api.tests.test\_sentry\_event
2025-08-19T03:32:21.8282141Z 
2025-08-19T03:32:21.8282291Z <a id="api.tests.test_sentry_event.DummyTransport"></a>
2025-08-19T03:32:21.8282558Z 
2025-08-19T03:32:21.8282727Z ## DummyTransport Objects
2025-08-19T03:32:21.8282890Z 
2025-08-19T03:32:21.8282967Z ```python
2025-08-19T03:32:21.8283171Z class DummyTransport()
2025-08-19T03:32:21.8283389Z ```
2025-08-19T03:32:21.8283487Z 
2025-08-19T03:32:21.8283695Z <a id="api.tests.test_sentry_event.DummyTransport.capture_envelope"></a>
2025-08-19T03:32:21.8284028Z 
2025-08-19T03:32:21.8284124Z #### capture\_envelope
2025-08-19T03:32:21.8284267Z 
2025-08-19T03:32:21.8284343Z ```python
2025-08-19T03:32:21.8284561Z def capture_envelope(envelope)
2025-08-19T03:32:21.8284803Z ```
2025-08-19T03:32:21.8284905Z 
2025-08-19T03:32:21.8285056Z Capture events sent as envelopes by Sentry SDK >= 2.0.
2025-08-19T03:32:21.8285310Z 
2025-08-19T03:32:21.8285413Z <a id="api.tests.test_cors"></a>
2025-08-19T03:32:21.8285591Z 
2025-08-19T03:32:21.8285678Z # api.tests.test\_cors
2025-08-19T03:32:21.8285824Z 
2025-08-19T03:32:21.8285922Z <a id="api.tests.test_imports"></a>
2025-08-19T03:32:21.8286112Z 
2025-08-19T03:32:21.8286203Z # api.tests.test\_imports
2025-08-19T03:32:21.8286360Z 
2025-08-19T03:32:21.8286466Z <a id="api.tests.test_rate_limit"></a>
2025-08-19T03:32:21.8286676Z 
2025-08-19T03:32:21.8286778Z # api.tests.test\_rate\_limit
2025-08-19T03:32:21.8286950Z 
2025-08-19T03:32:21.8287065Z <a id="api.tests.test_rate_limit.app"></a>
2025-08-19T03:32:21.8287515Z 
2025-08-19T03:32:21.8287596Z #### app
2025-08-19T03:32:21.8287703Z 
2025-08-19T03:32:21.8287779Z noqa: E402
2025-08-19T03:32:21.8287898Z 
2025-08-19T03:32:21.8288003Z <a id="api.tests.test_entrypoint"></a>
2025-08-19T03:32:21.8288204Z 
2025-08-19T03:32:21.8288304Z # api.tests.test\_entrypoint
2025-08-19T03:32:21.8288471Z 
2025-08-19T03:32:21.8288569Z <a id="api.tests.test_health"></a>
2025-08-19T03:32:21.8288762Z 
2025-08-19T03:32:21.8288856Z # api.tests.test\_health
2025-08-19T03:32:21.8289006Z 
2025-08-19T03:32:21.8289101Z <a id="api.logging_config"></a>
2025-08-19T03:32:21.8289270Z 
2025-08-19T03:32:21.8289339Z # api.logging\_config
2025-08-19T03:32:21.8289454Z 
2025-08-19T03:32:21.8289534Z <a id="api.migrations.env"></a>
2025-08-19T03:32:21.8289679Z 
2025-08-19T03:32:21.8289749Z # api.migrations.env
2025-08-19T03:32:21.8289862Z 
2025-08-19T03:32:21.8289986Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-19T03:32:21.8290181Z 
2025-08-19T03:32:21.8290292Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-19T03:32:21.8290482Z 
2025-08-19T03:32:21.8290588Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-19T03:32:21.8290903Z 
2025-08-19T03:32:21.8291003Z # api.migrations.versions.0004\_fee\_cron
2025-08-19T03:32:21.8291175Z 
2025-08-19T03:32:21.8291324Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-19T03:32:21.8291558Z 
2025-08-19T03:32:21.8291700Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-19T03:32:21.8291915Z 
2025-08-19T03:32:21.8292035Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-19T03:32:21.8292240Z 
2025-08-19T03:32:21.8292344Z # api.migrations.versions.0003\_vendor\_prices
2025-08-19T03:32:21.8292526Z 
2025-08-19T03:32:21.8292647Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-19T03:32:21.8292840Z 
2025-08-19T03:32:21.8292938Z # api.migrations.versions.0024\_create\_buybox
2025-08-19T03:32:21.8293122Z 
2025-08-19T03:32:21.8293243Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-19T03:32:21.8293572Z 
2025-08-19T03:32:21.8293678Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-19T03:32:21.8293871Z 
2025-08-19T03:32:21.8293985Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-19T03:32:21.8294179Z 
2025-08-19T03:32:21.8294293Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-19T03:32:21.8294477Z 
2025-08-19T03:32:21.8294597Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-19T03:32:21.8294801Z 
2025-08-19T03:32:21.8294901Z # api.migrations.versions.0020\_unified\_schema
2025-08-19T03:32:21.8295081Z 
2025-08-19T03:32:21.8295217Z <a id="api.migrations.versions.0025_pr4_indexes_loadlog"></a>
2025-08-19T03:32:21.8295436Z 
2025-08-19T03:32:21.8295554Z # api.migrations.versions.0025\_pr4\_indexes\_loadlog
2025-08-19T03:32:21.8295750Z 
2025-08-19T03:32:21.8295872Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-19T03:32:21.8296068Z 
2025-08-19T03:32:21.8296174Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-19T03:32:21.8296371Z 
2025-08-19T03:32:21.8296502Z <a id="api.migrations.versions.0026_amazon_new_reports"></a>
2025-08-19T03:32:21.8296789Z 
2025-08-19T03:32:21.8296905Z # api.migrations.versions.0026\_amazon\_new\_reports
2025-08-19T03:32:21.8297130Z 
2025-08-19T03:32:21.8297237Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-19T03:32:21.8297431Z 
2025-08-19T03:32:21.8297522Z # api.migrations.versions.0001\_baseline
2025-08-19T03:32:21.8297688Z 
2025-08-19T03:32:21.8297785Z <a id="api.migrations.versions"></a>
2025-08-19T03:32:21.8297942Z 
2025-08-19T03:32:21.8298021Z # api.migrations.versions
2025-08-19T03:32:21.8298151Z 
2025-08-19T03:32:21.8298228Z <a id="api.migrations"></a>
2025-08-19T03:32:21.8298360Z 
2025-08-19T03:32:21.8298425Z # api.migrations
2025-08-19T03:32:21.8298532Z 
2025-08-19T03:32:21.8298599Z <a id="api.db"></a>
2025-08-19T03:32:21.8298702Z 
2025-08-19T03:32:21.8298768Z # api.db
2025-08-19T03:32:21.8298856Z 
2025-08-19T03:32:21.8298941Z <a id="api.routes.stats"></a>
2025-08-19T03:32:21.8299231Z 
2025-08-19T03:32:21.8299355Z # api.routes.stats
2025-08-19T03:32:21.8299467Z 
2025-08-19T03:32:21.8299554Z <a id="api.routes.stats.kpi"></a>
2025-08-19T03:32:21.8299713Z 
2025-08-19T03:32:21.8299776Z #### kpi
2025-08-19T03:32:21.8299862Z 
2025-08-19T03:32:21.8299926Z ```python
2025-08-19T03:32:21.8300098Z @router.get("/stats/kpi")
2025-08-19T03:32:21.8300407Z def kpi() -> List[Dict[str, int]]
2025-08-19T03:32:21.8300609Z ```
2025-08-19T03:32:21.8300693Z 
2025-08-19T03:32:21.8300960Z Return KPI metrics (mock).
2025-08-19T03:32:21.8301097Z 
2025-08-19T03:32:21.8301196Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-19T03:32:21.8301381Z 
2025-08-19T03:32:21.8301448Z #### roi\_by\_vendor
2025-08-19T03:32:21.8301556Z 
2025-08-19T03:32:21.8301618Z ```python
2025-08-19T03:32:21.8301788Z @router.get("/stats/roi_by_vendor")
2025-08-19T03:32:21.8302035Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-19T03:32:21.8302258Z ```
2025-08-19T03:32:21.8302342Z 
2025-08-19T03:32:21.8302431Z Return ROI percent by vendor.
2025-08-19T03:32:21.8302570Z 
2025-08-19T03:32:21.8302658Z <a id="api.routes.stats.roi_trend"></a>
2025-08-19T03:32:21.8302832Z 
2025-08-19T03:32:21.8302895Z #### roi\_trend
2025-08-19T03:32:21.8302998Z 
2025-08-19T03:32:21.8303059Z ```python
2025-08-19T03:32:21.8303227Z @router.get("/stats/roi_trend")
2025-08-19T03:32:21.8303465Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-19T03:32:21.8303695Z ```
2025-08-19T03:32:21.8303775Z 
2025-08-19T03:32:21.8303854Z Return 30-day ROI trend.
2025-08-19T03:32:21.8303978Z 
2025-08-19T03:32:21.8304056Z <a id="api.routes.roi"></a>
2025-08-19T03:32:21.8304193Z 
2025-08-19T03:32:21.8304260Z # api.routes.roi
2025-08-19T03:32:21.8304366Z 
2025-08-19T03:32:21.8304446Z <a id="api.routes.health"></a>
2025-08-19T03:32:21.8304588Z 
2025-08-19T03:32:21.8304657Z # api.routes.health
2025-08-19T03:32:21.8304764Z 
2025-08-19T03:32:21.8304858Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-19T03:32:21.8305151Z 
2025-08-19T03:32:21.8305218Z #### MAX\_SKEW
2025-08-19T03:32:21.8305320Z 
2025-08-19T03:32:21.8305381Z seconds
2025-08-19T03:32:21.8305463Z 
2025-08-19T03:32:21.8305552Z <a id="api.routes.health.health"></a>
2025-08-19T03:32:21.8305717Z 
2025-08-19T03:32:21.8305777Z #### health
2025-08-19T03:32:21.8305864Z 
2025-08-19T03:32:21.8305926Z ```python
2025-08-19T03:32:21.8306134Z @router.get("/health", include_in_schema=False)
2025-08-19T03:32:21.8306508Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-19T03:32:21.8306850Z ```
2025-08-19T03:32:21.8306930Z 
2025-08-19T03:32:21.8307042Z Return 200 when DB reachable and clocks are in sync.
2025-08-19T03:32:21.8307244Z 
2025-08-19T03:32:21.8307332Z <a id="api.routes.repository"></a>
2025-08-19T03:32:21.8307492Z 
2025-08-19T03:32:21.8307575Z # api.routes.repository
2025-08-19T03:32:21.8307704Z 
2025-08-19T03:32:21.8307779Z <a id="api.routes"></a>
2025-08-19T03:32:21.8307900Z 
2025-08-19T03:32:21.8307964Z # api.routes
2025-08-19T03:32:21.8308065Z 
2025-08-19T03:32:21.8308145Z <a id="api.models.fee"></a>
2025-08-19T03:32:21.8308288Z 
2025-08-19T03:32:21.8308354Z # api.models.fee
2025-08-19T03:32:21.8308456Z 
2025-08-19T03:32:21.8308532Z <a id="api.models"></a>
2025-08-19T03:32:21.8308646Z 
2025-08-19T03:32:21.8308709Z # api.models
2025-08-19T03:32:21.8308806Z 
2025-08-19T03:32:21.8308889Z <a id="api.roi_repository"></a>
2025-08-19T03:32:21.8309031Z 
2025-08-19T03:32:21.8309101Z # api.roi\_repository
2025-08-19T03:32:21.8309219Z 
2025-08-19T03:32:21.8309287Z <a id="api.main"></a>
2025-08-19T03:32:21.8309396Z 
2025-08-19T03:32:21.8309461Z # api.main
2025-08-19T03:32:21.8309551Z 
2025-08-19T03:32:21.8309626Z <a id="api.main.ready"></a>
2025-08-19T03:32:21.8309753Z 
2025-08-19T03:32:21.8309820Z #### ready
2025-08-19T03:32:21.8309905Z 
2025-08-19T03:32:21.8309966Z ```python
2025-08-19T03:32:21.8310234Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-19T03:32:21.8310664Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-19T03:32:21.8311296Z                                                                       str]
2025-08-19T03:32:21.8311530Z ```
2025-08-19T03:32:21.8311611Z 
2025-08-19T03:32:21.8311708Z Return 200 only when migrations are at head.
2025-08-19T03:32:21.8311879Z 
2025-08-19T03:32:21.8311957Z <a id="api.config"></a>
2025-08-19T03:32:21.8312074Z 
2025-08-19T03:32:21.8312138Z # api.config
2025-08-19T03:32:21.8312236Z 
2025-08-19T03:32:21.8312302Z <a id="etl"></a>
2025-08-19T03:32:21.8312401Z 
2025-08-19T03:32:21.8312461Z # etl
2025-08-19T03:32:21.8312551Z 
2025-08-19T03:32:21.8312633Z <a id="etl.fba_fee_ingestor"></a>
2025-08-19T03:32:21.8312780Z 
2025-08-19T03:32:21.8312861Z # etl.fba\_fee\_ingestor
2025-08-19T03:32:21.8312982Z 
2025-08-19T03:32:21.8313063Z <a id="etl.sp_fees_ingestor"></a>
2025-08-19T03:32:21.8313212Z 
2025-08-19T03:32:21.8313282Z # etl.sp\_fees\_ingestor
2025-08-19T03:32:21.8313398Z 
2025-08-19T03:32:21.8313476Z <a id="etl.keepa_ingestor"></a>
2025-08-19T03:32:21.8313628Z 
2025-08-19T03:32:21.8313698Z # etl.keepa\_ingestor
2025-08-19T03:32:21.8313808Z 
2025-08-19T03:32:21.8313879Z <a id="etl.db"></a>
2025-08-19T03:32:21.8313986Z 
2025-08-19T03:32:21.8314048Z # etl.db
2025-08-19T03:32:21.8314135Z 
2025-08-19T03:32:21.8314224Z <a id="etl.dialects.schemas"></a>
2025-08-19T03:32:21.8314369Z 
2025-08-19T03:32:21.8314443Z # etl.dialects.schemas
2025-08-19T03:32:21.8314566Z 
2025-08-19T03:32:21.8314672Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-19T03:32:21.8314854Z 
2025-08-19T03:32:21.8314947Z # etl.dialects.amazon\_reimbursements
2025-08-19T03:32:21.8315106Z 
2025-08-19T03:32:21.8315203Z <a id="etl.dialects.amazon_ads_sp_cost"></a>
2025-08-19T03:32:21.8315372Z 
2025-08-19T03:32:21.8315464Z # etl.dialects.amazon\_ads\_sp\_cost
2025-08-19T03:32:21.8315619Z 
2025-08-19T03:32:21.8315706Z <a id="etl.dialects.amazon_returns"></a>
2025-08-19T03:32:21.8315875Z 
2025-08-19T03:32:21.8315957Z # etl.dialects.amazon\_returns
2025-08-19T03:32:21.8316209Z 
2025-08-19T03:32:21.8316310Z <a id="etl.dialects.amazon_fee_preview"></a>
2025-08-19T03:32:21.8316477Z 
2025-08-19T03:32:21.8316560Z # etl.dialects.amazon\_fee\_preview
2025-08-19T03:32:21.8316713Z 
2025-08-19T03:32:21.8316822Z <a id="etl.dialects.amazon_inventory_ledger"></a>
2025-08-19T03:32:21.8317007Z 
2025-08-19T03:32:21.8317097Z # etl.dialects.amazon\_inventory\_ledger
2025-08-19T03:32:21.8317268Z 
2025-08-19T03:32:21.8317360Z <a id="etl.dialects.amazon_settlements"></a>
2025-08-19T03:32:21.8317532Z 
2025-08-19T03:32:21.8317624Z # etl.dialects.amazon\_settlements
2025-08-19T03:32:21.8317778Z 
2025-08-19T03:32:21.8317857Z <a id="etl.dialects"></a>
2025-08-19T03:32:21.8317983Z 
2025-08-19T03:32:21.8318052Z # etl.dialects
2025-08-19T03:32:21.8318151Z 
2025-08-19T03:32:21.8318217Z <a id="ingest"></a>
2025-08-19T03:32:21.8318329Z 
2025-08-19T03:32:21.8318393Z # ingest
2025-08-19T03:32:21.8318477Z 
2025-08-19T03:32:21.8318562Z <a id="ingest.maintenance"></a>
2025-08-19T03:32:21.8318699Z 
2025-08-19T03:32:21.8318775Z # ingest.maintenance
2025-08-19T03:32:21.8318897Z 
2025-08-19T03:32:21.8318981Z <a id="ingest.copy_loader"></a>
2025-08-19T03:32:21.8319115Z 
2025-08-19T03:32:21.8319188Z # ingest.copy\_loader
2025-08-19T03:32:21.8319306Z 
2025-08-19T03:32:21.8319404Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-19T03:32:21.8319584Z 
2025-08-19T03:32:21.8319656Z #### copy\_df\_via\_temp
2025-08-19T03:32:21.8319782Z 
2025-08-19T03:32:21.8319844Z ```python
2025-08-19T03:32:21.8320015Z def copy_df_via_temp(engine: Engine,
2025-08-19T03:32:21.8320307Z                      df: pd.DataFrame,
2025-08-19T03:32:21.8320552Z                      target_table: str,
2025-08-19T03:32:21.8320962Z                      *,
2025-08-19T03:32:21.8321180Z                      target_schema: Optional[str] = None,
2025-08-19T03:32:21.8321443Z                      columns: Sequence[str],
2025-08-19T03:32:21.8321714Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-19T03:32:21.8322000Z                      analyze_after: bool = False,
2025-08-19T03:32:21.8322409Z                      connection: Any | None = None) -> int
2025-08-19T03:32:21.8322650Z ```
2025-08-19T03:32:21.8322732Z 
2025-08-19T03:32:21.8322888Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-19T03:32:21.8323125Z 
2025-08-19T03:32:21.8323210Z <a id="ingest.tests.test_smoke"></a>
2025-08-19T03:32:21.8323368Z 
2025-08-19T03:32:21.8323446Z # ingest.tests.test\_smoke
2025-08-19T03:32:21.8323583Z 
2025-08-19T03:32:21.8323660Z <a id="ingest.tests"></a>
2025-08-19T03:32:21.8323784Z 
2025-08-19T03:32:21.8323855Z # ingest.tests
2025-08-19T03:32:21.8323954Z 
2025-08-19T03:32:21.8324037Z <a id="ingest.upload_router"></a>
2025-08-19T03:32:21.8324192Z 
2025-08-19T03:32:21.8324267Z # ingest.upload\_router
2025-08-19T03:32:21.8324388Z 
2025-08-19T03:32:21.8324468Z <a id="ingest.email_watcher"></a>
2025-08-19T03:32:21.8324615Z 
2025-08-19T03:32:21.8324688Z # ingest.email\_watcher
2025-08-19T03:32:21.8324801Z 
2025-08-19T03:32:21.8324898Z <a id="ingest.email_watcher.main"></a>
2025-08-19T03:32:21.8325060Z 
2025-08-19T03:32:21.8325124Z #### main
2025-08-19T03:32:21.8325211Z 
2025-08-19T03:32:21.8325279Z ```python
2025-08-19T03:32:21.8325440Z def main() -> dict[str, str]
2025-08-19T03:32:21.8325633Z ```
2025-08-19T03:32:21.8325713Z 
2025-08-19T03:32:21.8325854Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-19T03:32:21.8326095Z 
2025-08-19T03:32:21.8326230Z Returns {"status": "success"} when processing completes.
2025-08-19T03:32:21.8326437Z 
2025-08-19T03:32:21.8326512Z <a id="ingest.tasks"></a>
2025-08-19T03:32:21.8326636Z 
2025-08-19T03:32:21.8326707Z # ingest.tasks
2025-08-19T03:32:21.8326809Z 
2025-08-19T03:32:21.8326906Z <a id="ingest.tasks.task_import_file"></a>
2025-08-19T03:32:21.8327085Z 
2025-08-19T03:32:21.8327158Z #### task\_import\_file
2025-08-19T03:32:21.8327271Z 
2025-08-19T03:32:21.8327340Z ```python
2025-08-19T03:32:21.8327575Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-19T03:32:21.8327979Z def task_import_file(self: Any,
2025-08-19T03:32:21.8328187Z                      uri: str,
2025-08-19T03:32:21.8328410Z                      report_type: Optional[str] = None,
2025-08-19T03:32:21.8328675Z                      force: bool = False) -> Dict[str, Any]
2025-08-19T03:32:21.8328911Z ```
2025-08-19T03:32:21.8328993Z 
2025-08-19T03:32:21.8329122Z Import a file into Postgres using existing ETL pipeline.
2025-08-19T03:32:21.8329331Z 
2025-08-19T03:32:21.8329416Z <a id="ingest.celery_app"></a>
2025-08-19T03:32:21.8329554Z 
2025-08-19T03:32:21.8329632Z # ingest.celery\_app
2025-08-19T03:32:21.8329751Z 
2025-08-19T03:32:21.8329836Z <a id="ingest.ingest_router"></a>
2025-08-19T03:32:21.8329988Z 
2025-08-19T03:32:21.8330060Z # ingest.ingest\_router
2025-08-19T03:32:21.8330174Z 
2025-08-19T03:32:21.8330249Z <a id="logistics_etl"></a>
2025-08-19T03:32:21.8330382Z 
2025-08-19T03:32:21.8330449Z # logistics\_etl
2025-08-19T03:32:21.8330554Z 
2025-08-19T03:32:21.8330639Z Daily logistics ETL job.
2025-08-19T03:32:21.8330892Z 
2025-08-19T03:32:21.8330974Z <a id="logistics_etl.__main__"></a>
2025-08-19T03:32:21.8331131Z 
2025-08-19T03:32:21.8331207Z # logistics\_etl.\_\_main\_\_
2025-08-19T03:32:21.8331341Z 
2025-08-19T03:32:21.8331418Z <a id="logistics_etl.dsn"></a>
2025-08-19T03:32:21.8331558Z 
2025-08-19T03:32:21.8331626Z # logistics\_etl.dsn
2025-08-19T03:32:21.8331735Z 
2025-08-19T03:32:21.8331856Z Local DSN builder to avoid cross-service dependency.
2025-08-19T03:32:21.8332050Z 
2025-08-19T03:32:21.8332138Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-19T03:32:21.8332310Z 
2025-08-19T03:32:21.8332372Z #### build\_dsn
2025-08-19T03:32:21.8332473Z 
2025-08-19T03:32:21.8332535Z ```python
2025-08-19T03:32:21.8332714Z def build_dsn(sync: bool = True) -> str
2025-08-19T03:32:21.8332930Z ```
2025-08-19T03:32:21.8333015Z 
2025-08-19T03:32:21.8333151Z Return a Postgres DSN assembled from environment variables.
2025-08-19T03:32:21.8333367Z 
2025-08-19T03:32:21.8333520Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-19T03:32:21.8334223Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-19T03:32:21.8334566Z error when any required variable is missing.
2025-08-19T03:32:21.8334741Z 
2025-08-19T03:32:21.8334836Z <a id="logistics_etl.tests.conftest"></a>
2025-08-19T03:32:21.8335014Z 
2025-08-19T03:32:21.8335096Z # logistics\_etl.tests.conftest
2025-08-19T03:32:21.8335237Z 
2025-08-19T03:32:21.8335346Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-19T03:32:21.8335529Z 
2025-08-19T03:32:21.8335618Z # logistics\_etl.tests.test\_repository
2025-08-19T03:32:21.8335786Z 
2025-08-19T03:32:21.8335877Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-19T03:32:21.8336042Z 
2025-08-19T03:32:21.8336126Z # logistics\_etl.tests.test\_cron
2025-08-19T03:32:21.8336283Z 
2025-08-19T03:32:21.8336380Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-19T03:32:21.8336553Z 
2025-08-19T03:32:21.8336642Z # logistics\_etl.tests.test\_imports
2025-08-19T03:32:21.8336801Z 
2025-08-19T03:32:21.8336895Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-19T03:32:21.8337069Z 
2025-08-19T03:32:21.8337151Z # logistics\_etl.tests.test\_smoke
2025-08-19T03:32:21.8337299Z 
2025-08-19T03:32:21.8337391Z <a id="logistics_etl.tests.test_client"></a>
2025-08-19T03:32:21.8337565Z 
2025-08-19T03:32:21.8337647Z # logistics\_etl.tests.test\_client
2025-08-19T03:32:21.8337803Z 
2025-08-19T03:32:21.8337893Z <a id="logistics_etl.tests"></a>
2025-08-19T03:32:21.8338037Z 
2025-08-19T03:32:21.8338108Z # logistics\_etl.tests
2025-08-19T03:32:21.8338231Z 
2025-08-19T03:32:21.8338308Z <a id="logistics_etl.flow"></a>
2025-08-19T03:32:21.8338443Z 
2025-08-19T03:32:21.8338514Z # logistics\_etl.flow
2025-08-19T03:32:21.8338634Z 
2025-08-19T03:32:21.8338716Z <a id="logistics_etl.client"></a>
2025-08-19T03:32:21.8338858Z 
2025-08-19T03:32:21.8338936Z # logistics\_etl.client
2025-08-19T03:32:21.8339055Z 
2025-08-19T03:32:21.8339132Z <a id="logistics_etl.cron"></a>
2025-08-19T03:32:21.8339265Z 
2025-08-19T03:32:21.8339453Z # logistics\_etl.cron
2025-08-19T03:32:21.8339567Z 
2025-08-19T03:32:21.8339645Z <a id="logistics_etl.db"></a>
2025-08-19T03:32:21.8339787Z 
2025-08-19T03:32:21.8387490Z # logistics\_etl.db
2025-08-19T03:32:21.8387745Z 
2025-08-19T03:32:21.8387946Z <a id="logistics_etl.repository"></a>
2025-08-19T03:32:21.8388308Z 
2025-08-19T03:32:21.8388479Z # logistics\_etl.repository
2025-08-19T03:32:21.8388771Z 
2025-08-19T03:32:21.8388866Z <a id="alert_bot"></a>
2025-08-19T03:32:21.8389013Z 
2025-08-19T03:32:21.8389090Z # alert\_bot
2025-08-19T03:32:21.8389216Z 
2025-08-19T03:32:21.8389325Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-19T03:32:21.8389617Z 
2025-08-19T03:32:21.8389805Z # alert\_bot.tests.test\_smoke
2025-08-19T03:32:21.8390099Z 
2025-08-19T03:32:21.8390267Z <a id="alert_bot.tests"></a>
2025-08-19T03:32:21.8390580Z 
2025-08-19T03:32:21.8390946Z # alert\_bot.tests
2025-08-19T03:32:21.8391189Z 
2025-08-19T03:32:21.8391361Z <a id="alert_bot.alert_bot"></a>
2025-08-19T03:32:21.8391699Z 
2025-08-19T03:32:21.8391972Z # alert\_bot.alert\_bot
2025-08-19T03:32:21.8392230Z 
2025-08-19T03:32:21.8392398Z <a id="alert_bot.rules"></a>
2025-08-19T03:32:21.8392692Z 
2025-08-19T03:32:21.8392836Z # alert\_bot.rules
2025-08-19T03:32:21.8393070Z 
2025-08-19T03:32:21.8393212Z <a id="common"></a>
2025-08-19T03:32:21.8393439Z 
2025-08-19T03:32:21.8393580Z # common
2025-08-19T03:32:21.8393765Z 
2025-08-19T03:32:21.8393916Z <a id="common.dsn"></a>
2025-08-19T03:32:21.8394167Z 
2025-08-19T03:32:21.8394311Z # common.dsn
2025-08-19T03:32:21.8394517Z 
2025-08-19T03:32:21.8394691Z <a id="common.dsn.build_dsn"></a>
2025-08-19T03:32:21.8395019Z 
2025-08-19T03:32:21.8395156Z #### build\_dsn
2025-08-19T03:32:21.8395365Z 
2025-08-19T03:32:21.8395505Z ```python
2025-08-19T03:32:21.8395778Z def build_dsn(sync: bool = True) -> str
2025-08-19T03:32:21.8396055Z ```
2025-08-19T03:32:21.8396164Z 
2025-08-19T03:32:21.8396315Z Return a Postgres DSN, validating required variables.
2025-08-19T03:32:21.8396577Z 
2025-08-19T03:32:21.8396823Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-19T03:32:21.8397570Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-19T03:32:21.8398088Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-19T03:32:21.8398473Z missing.
2025-08-19T03:32:21.8398583Z 
2025-08-19T03:32:21.8398687Z <a id="common.models_vendor"></a>
2025-08-19T03:32:21.8398870Z 
2025-08-19T03:32:21.8398949Z # common.models\_vendor
2025-08-19T03:32:21.8399068Z 
2025-08-19T03:32:21.8399156Z <a id="common.models_vendor.Vendor"></a>
2025-08-19T03:32:21.8399332Z 
2025-08-19T03:32:21.8399397Z ## Vendor Objects
2025-08-19T03:32:21.8399501Z 
2025-08-19T03:32:21.8399568Z ```python
2025-08-19T03:32:21.8399718Z class Vendor(Base)
2025-08-19T03:32:21.8399882Z ```
2025-08-19T03:32:21.8399964Z 
2025-08-19T03:32:21.8400042Z Vendor of inventory items.
2025-08-19T03:32:21.8400172Z 
2025-08-19T03:32:21.8400282Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-19T03:32:21.8400471Z 
2025-08-19T03:32:21.8400542Z ## VendorPrice Objects
2025-08-19T03:32:21.8400663Z 
2025-08-19T03:32:21.8400924Z ```python
2025-08-19T03:32:21.8401112Z class VendorPrice(Base)
2025-08-19T03:32:21.8401292Z ```
2025-08-19T03:32:21.8401372Z 
2025-08-19T03:32:21.8401476Z Association table linking vendors to pricing.
2025-08-19T03:32:21.8401655Z 
2025-08-19T03:32:21.8401728Z <a id="common.db_url"></a>
2025-08-19T03:32:21.8401860Z 
2025-08-19T03:32:21.8401924Z # common.db\_url
2025-08-19T03:32:21.8402026Z 
2025-08-19T03:32:21.8402107Z <a id="common.db_url.build_url"></a>
2025-08-19T03:32:21.8402267Z 
2025-08-19T03:32:21.8402330Z #### build\_url
2025-08-19T03:32:21.8402427Z 
2025-08-19T03:32:21.8402492Z ```python
2025-08-19T03:32:21.8402661Z def build_url(async_: bool = True) -> str
2025-08-19T03:32:21.8402886Z ```
2025-08-19T03:32:21.8402965Z 
2025-08-19T03:32:21.8403067Z Return Postgres DSN from env or PG_* parts.
2025-08-19T03:32:21.8403254Z 
2025-08-19T03:32:21.8403331Z <a id="common.keepa"></a>
2025-08-19T03:32:21.8403594Z 
2025-08-19T03:32:21.8403662Z # common.keepa
2025-08-19T03:32:21.8403779Z 
2025-08-19T03:32:21.8403855Z <a id="common.llm"></a>
2025-08-19T03:32:21.8403972Z 
2025-08-19T03:32:21.8404041Z # common.llm
2025-08-19T03:32:21.8404134Z 
2025-08-19T03:32:21.8404216Z <a id="common.settings"></a>
2025-08-19T03:32:21.8404351Z 
2025-08-19T03:32:21.8404423Z # common.settings
2025-08-19T03:32:21.8404528Z 
2025-08-19T03:32:21.8404598Z <a id="common.db"></a>
2025-08-19T03:32:21.8404720Z 
2025-08-19T03:32:21.8404784Z # common.db
2025-08-19T03:32:21.8404873Z 
2025-08-19T03:32:21.8404971Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-19T03:32:21.8405143Z 
2025-08-19T03:32:21.8405217Z #### build\_sqlalchemy\_url
2025-08-19T03:32:21.8405346Z 
2025-08-19T03:32:21.8405418Z ```python
2025-08-19T03:32:21.8405588Z def build_sqlalchemy_url() -> str
2025-08-19T03:32:21.8405798Z ```
2025-08-19T03:32:21.8405878Z 
2025-08-19T03:32:21.8405972Z Return Postgres URL for SQLAlchemy engines.
2025-08-19T03:32:21.8406151Z 
2025-08-19T03:32:21.8406243Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-19T03:32:21.8406411Z 
2025-08-19T03:32:21.8406491Z #### build\_asyncpg\_dsn
2025-08-19T03:32:21.8406612Z 
2025-08-19T03:32:21.8406674Z ```python
2025-08-19T03:32:21.8406844Z def build_asyncpg_dsn() -> str
2025-08-19T03:32:21.8407035Z ```
2025-08-19T03:32:21.8407123Z 
2025-08-19T03:32:21.8407250Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-19T03:32:21.8407466Z 
2025-08-19T03:32:21.8407549Z <a id="common.db.refresh_mvs"></a>
2025-08-19T03:32:21.8407706Z 
2025-08-19T03:32:21.8407778Z #### refresh\_mvs
2025-08-19T03:32:21.8407894Z 
2025-08-19T03:32:21.8407986Z ```python
2025-08-19T03:32:21.8408178Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-19T03:32:21.8408433Z ```
2025-08-19T03:32:21.8408511Z 
2025-08-19T03:32:21.8408646Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-19T03:32:21.8408867Z 
2025-08-19T03:32:21.8408942Z <a id="common.config"></a>
2025-08-19T03:32:21.8409072Z 
2025-08-19T03:32:21.8409307Z # common.config
2025-08-19T03:32:21.8409411Z 
2025-08-19T03:32:21.8409485Z <a id="common.base"></a>
2025-08-19T03:32:21.8409604Z 
2025-08-19T03:32:21.8409672Z # common.base
2025-08-19T03:32:21.8409768Z 
2025-08-19T03:32:21.8409847Z <a id="common.base.Base"></a>
2025-08-19T03:32:21.8409989Z 
2025-08-19T03:32:21.8410052Z ## Base Objects
2025-08-19T03:32:21.8410148Z 
2025-08-19T03:32:21.8410210Z ```python
2025-08-19T03:32:21.8410376Z class Base(DeclarativeBase)
2025-08-19T03:32:21.8410566Z ```
2025-08-19T03:32:21.8410645Z 
2025-08-19T03:32:21.8410904Z Base class for SQLAlchemy models.
2025-08-19T03:32:21.8411065Z 
2025-08-19T03:32:21.8411142Z <a id="repricer"></a>
2025-08-19T03:32:21.8411254Z 
2025-08-19T03:32:21.8411317Z # repricer
2025-08-19T03:32:21.8411412Z 
2025-08-19T03:32:21.8411498Z <a id="repricer.app.schemas"></a>
2025-08-19T03:32:21.8411645Z 
2025-08-19T03:32:21.8411721Z # repricer.app.schemas
2025-08-19T03:32:21.8411846Z 
2025-08-19T03:32:21.8411929Z <a id="repricer.app.deps"></a>
2025-08-19T03:32:21.8412076Z 
2025-08-19T03:32:21.8412155Z # repricer.app.deps
2025-08-19T03:32:21.8412265Z 
2025-08-19T03:32:21.8412377Z Placeholder module for Keepa / SP-API clients.
2025-08-19T03:32:21.8412569Z 
2025-08-19T03:32:21.8412650Z <a id="repricer.app.logic"></a>
2025-08-19T03:32:21.8412794Z 
2025-08-19T03:32:21.8412866Z # repricer.app.logic
2025-08-19T03:32:21.8412989Z 
2025-08-19T03:32:21.8413085Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-19T03:32:21.8413259Z 
2025-08-19T03:32:21.8413330Z #### MIN\_MARGIN
2025-08-19T03:32:21.8413430Z 
2025-08-19T03:32:21.8413492Z 15 % ROI
2025-08-19T03:32:21.8413583Z 
2025-08-19T03:32:21.8413683Z <a id="repricer.app.logic.compute_price"></a>
2025-08-19T03:32:21.8413862Z 
2025-08-19T03:32:21.8413929Z #### compute\_price
2025-08-19T03:32:21.8414041Z 
2025-08-19T03:32:21.8414109Z ```python
2025-08-19T03:32:21.8414357Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-19T03:32:21.8414653Z ```
2025-08-19T03:32:21.8414858Z 
2025-08-19T03:32:21.8414979Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-19T03:32:21.8415255Z Replace with real competitive logic later.
2025-08-19T03:32:21.8415429Z 
2025-08-19T03:32:21.8415510Z <a id="repricer.app.main"></a>
2025-08-19T03:32:21.8415649Z 
2025-08-19T03:32:21.8415721Z # repricer.app.main
2025-08-19T03:32:21.8415840Z 
2025-08-19T03:32:21.8415918Z <a id="repricer.app"></a>
2025-08-19T03:32:21.8416047Z 
2025-08-19T03:32:21.8416121Z # repricer.app
2025-08-19T03:32:21.8416222Z 
2025-08-19T03:32:21.8416314Z <a id="repricer.tests.test_imports"></a>
2025-08-19T03:32:21.8416490Z 
2025-08-19T03:32:21.8416571Z # repricer.tests.test\_imports
2025-08-19T03:32:21.8416707Z 
2025-08-19T03:32:21.8416795Z <a id="repricer.tests.test_smoke"></a>
2025-08-19T03:32:21.8416965Z 
2025-08-19T03:32:21.8417046Z # repricer.tests.test\_smoke
2025-08-19T03:32:21.8417183Z 
2025-08-19T03:32:21.8417265Z <a id="repricer.tests"></a>
2025-08-19T03:32:21.8417393Z 
2025-08-19T03:32:21.8417464Z # repricer.tests
2025-08-19T03:32:21.8417571Z 
2025-08-19T03:32:21.8417639Z <a id="db"></a>
2025-08-19T03:32:21.8417737Z 
2025-08-19T03:32:21.8417795Z # db
2025-08-19T03:32:21.8417883Z 
2025-08-19T03:32:21.8417957Z <a id="db.utils.views"></a>
2025-08-19T03:32:21.8418083Z 
2025-08-19T03:32:21.8418148Z # db.utils.views
2025-08-19T03:32:21.8418253Z 
2025-08-19T03:32:21.8418342Z <a id="db.utils.views.replace_view"></a>
2025-08-19T03:32:21.8418510Z 
2025-08-19T03:32:21.8418581Z #### replace\_view
2025-08-19T03:32:21.8418685Z 
2025-08-19T03:32:21.8418746Z ```python
2025-08-19T03:32:21.8418938Z def replace_view(name: str, new_sql: str) -> None
2025-08-19T03:32:21.8419222Z ```
2025-08-19T03:32:21.8419308Z 
2025-08-19T03:32:21.8419396Z Drop and recreate a SQL view atomically.
2025-08-19T03:32:21.8419557Z 
2025-08-19T03:32:21.8419631Z <a id="db.utils"></a>
2025-08-19T03:32:21.8419742Z 
2025-08-19T03:32:21.8419802Z # db.utils
2025-08-19T03:32:21.8419888Z 
2025-08-19T03:32:21.8419969Z <a id="price_importer"></a>
2025-08-19T03:32:21.8420102Z 
2025-08-19T03:32:21.8420284Z # price\_importer
2025-08-19T03:32:21.8420395Z 
2025-08-19T03:32:21.8420497Z <a id="price_importer.services_common.dsn"></a>
2025-08-19T03:32:21.8420679Z 
2025-08-19T03:32:21.8420944Z # price\_importer.services\_common.dsn
2025-08-19T03:32:21.8421123Z 
2025-08-19T03:32:21.8421250Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-19T03:32:21.8421456Z 
2025-08-19T03:32:21.8421525Z #### build\_dsn
2025-08-19T03:32:21.8421623Z 
2025-08-19T03:32:21.8421684Z ```python
2025-08-19T03:32:21.8421861Z def build_dsn(sync: bool = True) -> str
2025-08-19T03:32:21.8422076Z ```
2025-08-19T03:32:21.8422162Z 
2025-08-19T03:32:21.8422229Z Return safe DSN.
2025-08-19T03:32:21.8422329Z 
2025-08-19T03:32:21.8422678Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-19T03:32:21.8422884Z 
2025-08-19T03:32:21.8423011Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-19T03:32:21.8423218Z 
2025-08-19T03:32:21.8423336Z # price\_importer.services\_common.models\_vendor
2025-08-19T03:32:21.8423542Z 
2025-08-19T03:32:21.8423647Z <a id="price_importer.services_common.db_url"></a>
2025-08-19T03:32:21.8423839Z 
2025-08-19T03:32:21.8423935Z # price\_importer.services\_common.db\_url
2025-08-19T03:32:21.8424104Z 
2025-08-19T03:32:21.8424240Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-19T03:32:21.8424454Z 
2025-08-19T03:32:21.8424518Z #### build\_url
2025-08-19T03:32:21.8424623Z 
2025-08-19T03:32:21.8424686Z ```python
2025-08-19T03:32:21.8424856Z def build_url(async_: bool = True) -> str
2025-08-19T03:32:21.8425081Z ```
2025-08-19T03:32:21.8425161Z 
2025-08-19T03:32:21.8425256Z Return Postgres DSN from env or PG_* parts.
2025-08-19T03:32:21.8425434Z 
2025-08-19T03:32:21.8425542Z <a id="price_importer.services_common.keepa"></a>
2025-08-19T03:32:21.8425725Z 
2025-08-19T03:32:21.8425822Z # price\_importer.services\_common.keepa
2025-08-19T03:32:21.8425987Z 
2025-08-19T03:32:21.8426085Z <a id="price_importer.services_common.llm"></a>
2025-08-19T03:32:21.8426405Z 
2025-08-19T03:32:21.8426496Z # price\_importer.services\_common.llm
2025-08-19T03:32:21.8426658Z 
2025-08-19T03:32:21.8426770Z <a id="price_importer.services_common.settings"></a>
2025-08-19T03:32:21.8426973Z 
2025-08-19T03:32:21.8427070Z # price\_importer.services\_common.settings
2025-08-19T03:32:21.8427241Z 
2025-08-19T03:32:21.8427346Z <a id="price_importer.services_common.db"></a>
2025-08-19T03:32:21.8427523Z 
2025-08-19T03:32:21.8427612Z # price\_importer.services\_common.db
2025-08-19T03:32:21.8427774Z 
2025-08-19T03:32:21.8427927Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-19T03:32:21.8428163Z 
2025-08-19T03:32:21.8428246Z #### build\_sqlalchemy\_url
2025-08-19T03:32:21.8428378Z 
2025-08-19T03:32:21.8428441Z ```python
2025-08-19T03:32:21.8428622Z def build_sqlalchemy_url() -> str
2025-08-19T03:32:21.8428826Z ```
2025-08-19T03:32:21.8428907Z 
2025-08-19T03:32:21.8429004Z Return Postgres URL for SQLAlchemy engines.
2025-08-19T03:32:21.8429178Z 
2025-08-19T03:32:21.8429324Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-19T03:32:21.8429558Z 
2025-08-19T03:32:21.8429631Z #### build\_asyncpg\_dsn
2025-08-19T03:32:21.8429754Z 
2025-08-19T03:32:21.8429820Z ```python
2025-08-19T03:32:21.8429989Z def build_asyncpg_dsn() -> str
2025-08-19T03:32:21.8430187Z ```
2025-08-19T03:32:21.8430268Z 
2025-08-19T03:32:21.8430395Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-19T03:32:21.8430607Z 
2025-08-19T03:32:21.8430908Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-19T03:32:21.8431131Z 
2025-08-19T03:32:21.8431196Z #### refresh\_mvs
2025-08-19T03:32:21.8431304Z 
2025-08-19T03:32:21.8431365Z ```python
2025-08-19T03:32:21.8431558Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-19T03:32:21.8431801Z ```
2025-08-19T03:32:21.8431882Z 
2025-08-19T03:32:21.8432020Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-19T03:32:21.8432232Z 
2025-08-19T03:32:21.8432329Z <a id="price_importer.services_common"></a>
2025-08-19T03:32:21.8432631Z 
2025-08-19T03:32:21.8432716Z # price\_importer.services\_common
2025-08-19T03:32:21.8432869Z 
2025-08-19T03:32:21.8432980Z <a id="price_importer.services_common.base"></a>
2025-08-19T03:32:21.8433161Z 
2025-08-19T03:32:21.8433249Z # price\_importer.services\_common.base
2025-08-19T03:32:21.8433413Z 
2025-08-19T03:32:21.8433507Z <a id="price_importer.normaliser"></a>
2025-08-19T03:32:21.8433668Z 
2025-08-19T03:32:21.8433752Z # price\_importer.normaliser
2025-08-19T03:32:21.8433894Z 
2025-08-19T03:32:21.8433995Z <a id="price_importer.common.models_vendor"></a>
2025-08-19T03:32:21.8434178Z 
2025-08-19T03:32:21.8434269Z # price\_importer.common.models\_vendor
2025-08-19T03:32:21.8434429Z 
2025-08-19T03:32:21.8434519Z <a id="price_importer.common.db_url"></a>
2025-08-19T03:32:21.8434686Z 
2025-08-19T03:32:21.8434779Z # price\_importer.common.db\_url
2025-08-19T03:32:21.8434925Z 
2025-08-19T03:32:21.8435028Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-19T03:32:21.8435227Z 
2025-08-19T03:32:21.8435289Z #### make\_dsn
2025-08-19T03:32:21.8435386Z 
2025-08-19T03:32:21.8435453Z ```python
2025-08-19T03:32:21.8435620Z def make_dsn(async_: bool = False) -> str
2025-08-19T03:32:21.8435844Z ```
2025-08-19T03:32:21.8435922Z 
2025-08-19T03:32:21.8436038Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-19T03:32:21.8436241Z 
2025-08-19T03:32:21.8436345Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-19T03:32:21.8436532Z 
2025-08-19T03:32:21.8436596Z #### build\_url
2025-08-19T03:32:21.8436703Z 
2025-08-19T03:32:21.8436764Z ```python
2025-08-19T03:32:21.8436942Z def build_url(async_: bool = False) -> str
2025-08-19T03:32:21.8437161Z ```
2025-08-19T03:32:21.8437240Z 
2025-08-19T03:32:21.8437364Z Return Postgres DSN built from environment variables.
2025-08-19T03:32:21.8437563Z 
2025-08-19T03:32:21.8437647Z <a id="price_importer.common"></a>
2025-08-19T03:32:21.8437804Z 
2025-08-19T03:32:21.8437881Z # price\_importer.common
2025-08-19T03:32:21.8438119Z 
2025-08-19T03:32:21.8438212Z <a id="price_importer.common.base"></a>
2025-08-19T03:32:21.8438379Z 
2025-08-19T03:32:21.8438463Z # price\_importer.common.base
2025-08-19T03:32:21.8438602Z 
2025-08-19T03:32:21.8438708Z <a id="price_importer.tests.conftest"></a>
2025-08-19T03:32:21.8438878Z 
2025-08-19T03:32:21.8438962Z # price\_importer.tests.conftest
2025-08-19T03:32:21.8439146Z 
2025-08-19T03:32:21.8439244Z <a id="price_importer.tests.test_reader"></a>
2025-08-19T03:32:21.8439419Z 
2025-08-19T03:32:21.8439514Z # price\_importer.tests.test\_reader
2025-08-19T03:32:21.8439673Z 
2025-08-19T03:32:21.8439774Z <a id="price_importer.tests.test_imports"></a>
2025-08-19T03:32:21.8439950Z 
2025-08-19T03:32:21.8440044Z # price\_importer.tests.test\_imports
2025-08-19T03:32:21.8440203Z 
2025-08-19T03:32:21.8440298Z <a id="price_importer.tests.test_smoke"></a>
2025-08-19T03:32:21.8440474Z 
2025-08-19T03:32:21.8440558Z # price\_importer.tests.test\_smoke
2025-08-19T03:32:21.8440870Z 
2025-08-19T03:32:21.8441044Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-19T03:32:21.8441253Z 
2025-08-19T03:32:21.8441349Z # price\_importer.tests.test\_normaliser
2025-08-19T03:32:21.8441523Z 
2025-08-19T03:32:21.8441616Z <a id="price_importer.tests"></a>
2025-08-19T03:32:21.8441768Z 
2025-08-19T03:32:21.8441845Z # price\_importer.tests
2025-08-19T03:32:21.8441972Z 
2025-08-19T03:32:21.8442058Z <a id="price_importer.reader"></a>
2025-08-19T03:32:21.8442208Z 
2025-08-19T03:32:21.8442289Z # price\_importer.reader
2025-08-19T03:32:21.8442412Z 
2025-08-19T03:32:21.8442501Z <a id="price_importer.repository"></a>
2025-08-19T03:32:21.8442662Z 
2025-08-19T03:32:21.8442750Z # price\_importer.repository
2025-08-19T03:32:21.8442888Z 
2025-08-19T03:32:21.8442972Z <a id="price_importer.import"></a>
2025-08-19T03:32:21.8443124Z 
2025-08-19T03:32:21.8443199Z # price\_importer.import
2025-08-19T03:32:21.8443321Z 
2025-08-19T03:32:21.8443390Z <a id="fees_h10"></a>
2025-08-19T03:32:21.8443507Z 
2025-08-19T03:32:21.8443573Z # fees\_h10
2025-08-19T03:32:21.8443795Z 
2025-08-19T03:32:21.8443877Z <a id="fees_h10.worker"></a>
2025-08-19T03:32:21.8444006Z 
2025-08-19T03:32:21.8444071Z # fees\_h10.worker
2025-08-19T03:32:21.8444180Z 
2025-08-19T03:32:21.8444276Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-19T03:32:21.8444449Z 
2025-08-19T03:32:21.8444520Z #### list\_active\_asins
2025-08-19T03:32:21.8444645Z 
2025-08-19T03:32:21.8444709Z ```python
2025-08-19T03:32:21.8444881Z def list_active_asins() -> list[str]
2025-08-19T03:32:21.8445086Z ```
2025-08-19T03:32:21.8445165Z 
2025-08-19T03:32:21.8445281Z Return known ASINs or an empty list if unavailable.
2025-08-19T03:32:21.8445476Z 
2025-08-19T03:32:21.8445559Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-19T03:32:21.8445725Z 
2025-08-19T03:32:21.8445818Z # fees\_h10.tests.test\_smoke
2025-08-19T03:32:21.8445954Z 
2025-08-19T03:32:21.8446030Z <a id="fees_h10.tests"></a>
2025-08-19T03:32:21.8446163Z 
2025-08-19T03:32:21.8446228Z # fees\_h10.tests
2025-08-19T03:32:21.8446338Z 
2025-08-19T03:32:21.8446421Z <a id="fees_h10.client"></a>
2025-08-19T03:32:21.8446550Z 
2025-08-19T03:32:21.8446614Z # fees\_h10.client
2025-08-19T03:32:21.8446720Z 
2025-08-19T03:32:21.8446801Z <a id="fees_h10.repository"></a>
2025-08-19T03:32:21.8446943Z 
2025-08-19T03:32:21.8447015Z # fees\_h10.repository
2025-08-19T03:32:21.8447137Z 
2025-08-19T03:32:21.8447207Z <a id="emailer"></a>
2025-08-19T03:32:21.8447315Z 
2025-08-19T03:32:21.8447401Z # emailer
2025-08-19T03:32:21.8447488Z 
2025-08-19T03:32:21.8447587Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-19T03:32:21.8447769Z 
2025-08-19T03:32:21.8447855Z # emailer.tests.test\_import\_emailer
2025-08-19T03:32:21.8448013Z 
2025-08-19T03:32:21.8448097Z <a id="emailer.tests.test_smoke"></a>
2025-08-19T03:32:21.8448258Z 
2025-08-19T03:32:21.8448337Z # emailer.tests.test\_smoke
2025-08-19T03:32:21.8448470Z 
2025-08-19T03:32:21.8448554Z <a id="emailer.tests"></a>
2025-08-19T03:32:21.8448682Z 
2025-08-19T03:32:21.8448751Z # emailer.tests
2025-08-19T03:32:21.8448978Z 
2025-08-19T03:32:21.8449066Z <a id="emailer.generate_body"></a>
2025-08-19T03:32:21.8449213Z 
2025-08-19T03:32:21.8449289Z # emailer.generate\_body
2025-08-19T03:32:21.8449415Z 
2025-08-19T03:32:21.8449487Z <a id="llm_server"></a>
2025-08-19T03:32:21.8449602Z 
2025-08-19T03:32:21.8449670Z # llm\_server
2025-08-19T03:32:21.8449766Z 
2025-08-19T03:32:21.8471344Z <a id="llm_server.app"></a>
2025-08-19T03:32:21.8471571Z 
2025-08-19T03:32:21.8471664Z # llm\_server.app
2025-08-19T03:32:21.8471788Z 
