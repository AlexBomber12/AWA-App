2025-08-19T16:11:39.4492972Z ##[group]Run pydoc-markdown
2025-08-19T16:11:39.4493280Z [36;1mpydoc-markdown[0m
2025-08-19T16:11:39.4534005Z shell: /usr/bin/bash -e {0}
2025-08-19T16:11:39.4534231Z env:
2025-08-19T16:11:39.4534474Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T16:11:39.4534888Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-19T16:11:39.4535276Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T16:11:39.4535836Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T16:11:39.4536199Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-19T16:11:39.4536542Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-19T16:11:39.4536824Z ##[endgroup]
2025-08-19T16:11:39.8451959Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-19T16:11:39.8452756Z Unknown key(s) "{'output_directory'}" at:
2025-08-19T16:11:39.8453217Z In "pydoc-markdown.yml"
2025-08-19T16:11:39.8453646Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-19T16:11:39.8454317Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-19T16:11:39.8455052Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-19T16:11:39.8455560Z 
2025-08-19T16:11:40.1822619Z <a id="__init__"></a>
2025-08-19T16:11:40.1823003Z 
2025-08-19T16:11:40.1823150Z # \_\_init\_\_
2025-08-19T16:11:40.1823369Z 
2025-08-19T16:11:40.1823512Z <a id="api"></a>
2025-08-19T16:11:40.1823746Z 
2025-08-19T16:11:40.1824015Z # api
2025-08-19T16:11:40.1824212Z 
2025-08-19T16:11:40.1824393Z <a id="api.errors"></a>
2025-08-19T16:11:40.1824682Z 
2025-08-19T16:11:40.1824840Z # api.errors
2025-08-19T16:11:40.1825080Z 
2025-08-19T16:11:40.1825268Z <a id="api.sentry_config"></a>
2025-08-19T16:11:40.1825814Z 
2025-08-19T16:11:40.1825956Z # api.sentry\_config
2025-08-19T16:11:40.1826177Z 
2025-08-19T16:11:40.1826358Z <a id="api.tests.test_stats_contracts"></a>
2025-08-19T16:11:40.1826697Z 
2025-08-19T16:11:40.1826855Z # api.tests.test\_stats\_contracts
2025-08-19T16:11:40.1827174Z 
2025-08-19T16:11:40.1827327Z <a id="api.tests.test_sentry_scrub"></a>
2025-08-19T16:11:40.1827599Z 
2025-08-19T16:11:40.1827748Z # api.tests.test\_sentry\_scrub
2025-08-19T16:11:40.1828050Z 
2025-08-19T16:11:40.1828252Z <a id="api.tests.test_roi_basic_auth"></a>
2025-08-19T16:11:40.1828615Z 
2025-08-19T16:11:40.1828759Z # api.tests.test\_roi\_basic\_auth
2025-08-19T16:11:40.1829019Z 
2025-08-19T16:11:40.1829176Z <a id="api.tests.test_errors_json"></a>
2025-08-19T16:11:40.1829447Z 
2025-08-19T16:11:40.1829587Z # api.tests.test\_errors\_json
2025-08-19T16:11:40.1829836Z 
2025-08-19T16:11:40.1829974Z <a id="api.tests.test_llm"></a>
2025-08-19T16:11:40.1830214Z 
2025-08-19T16:11:40.1830343Z # api.tests.test\_llm
2025-08-19T16:11:40.1830550Z 
2025-08-19T16:11:40.1830758Z <a id="api.tests.test_roi_filters"></a>
2025-08-19T16:11:40.1831038Z 
2025-08-19T16:11:40.1831182Z # api.tests.test\_roi\_filters
2025-08-19T16:11:40.1831421Z 
2025-08-19T16:11:40.1831575Z <a id="api.tests.test_sentry_event"></a>
2025-08-19T16:11:40.1832225Z 
2025-08-19T16:11:40.1832377Z # api.tests.test\_sentry\_event
2025-08-19T16:11:40.1832624Z 
2025-08-19T16:11:40.1832840Z <a id="api.tests.test_sentry_event.DummyTransport"></a>
2025-08-19T16:11:40.1833211Z 
2025-08-19T16:11:40.1833350Z ## DummyTransport Objects
2025-08-19T16:11:40.1833575Z 
2025-08-19T16:11:40.1833696Z ```python
2025-08-19T16:11:40.1833989Z class DummyTransport()
2025-08-19T16:11:40.1834308Z ```
2025-08-19T16:11:40.1834455Z 
2025-08-19T16:11:40.1834754Z <a id="api.tests.test_sentry_event.DummyTransport.capture_envelope"></a>
2025-08-19T16:11:40.1835127Z 
2025-08-19T16:11:40.1835216Z #### capture\_envelope
2025-08-19T16:11:40.1835355Z 
2025-08-19T16:11:40.1835433Z ```python
2025-08-19T16:11:40.1835885Z def capture_envelope(envelope)
2025-08-19T16:11:40.1836130Z ```
2025-08-19T16:11:40.1836228Z 
2025-08-19T16:11:40.1836373Z Capture events sent as envelopes by Sentry SDK >= 2.0.
2025-08-19T16:11:40.1836612Z 
2025-08-19T16:11:40.1836717Z <a id="api.tests.test_cors"></a>
2025-08-19T16:11:40.1837122Z 
2025-08-19T16:11:40.1837203Z # api.tests.test\_cors
2025-08-19T16:11:40.1837332Z 
2025-08-19T16:11:40.1837421Z <a id="api.tests.test_imports"></a>
2025-08-19T16:11:40.1837583Z 
2025-08-19T16:11:40.1837663Z # api.tests.test\_imports
2025-08-19T16:11:40.1837804Z 
2025-08-19T16:11:40.1837898Z <a id="api.tests.test_rate_limit"></a>
2025-08-19T16:11:40.1838066Z 
2025-08-19T16:11:40.1838156Z # api.tests.test\_rate\_limit
2025-08-19T16:11:40.1838299Z 
2025-08-19T16:11:40.1838399Z <a id="api.tests.test_rate_limit.app"></a>
2025-08-19T16:11:40.1838578Z 
2025-08-19T16:11:40.1838645Z #### app
2025-08-19T16:11:40.1838734Z 
2025-08-19T16:11:40.1838801Z noqa: E402
2025-08-19T16:11:40.1838904Z 
2025-08-19T16:11:40.1838994Z <a id="api.tests.test_entrypoint"></a>
2025-08-19T16:11:40.1839159Z 
2025-08-19T16:11:40.1839246Z # api.tests.test\_entrypoint
2025-08-19T16:11:40.1839384Z 
2025-08-19T16:11:40.1839469Z <a id="api.tests.test_health"></a>
2025-08-19T16:11:40.1839630Z 
2025-08-19T16:11:40.1839713Z # api.tests.test\_health
2025-08-19T16:11:40.1839841Z 
2025-08-19T16:11:40.1839925Z <a id="api.tests.test_score"></a>
2025-08-19T16:11:40.1840082Z 
2025-08-19T16:11:40.1840161Z # api.tests.test\_score
2025-08-19T16:11:40.1840286Z 
2025-08-19T16:11:40.1840373Z <a id="api.logging_config"></a>
2025-08-19T16:11:40.1840517Z 
2025-08-19T16:11:40.1840591Z # api.logging\_config
2025-08-19T16:11:40.1840708Z 
2025-08-19T16:11:40.1840797Z <a id="api.migrations.env"></a>
2025-08-19T16:11:40.1840937Z 
2025-08-19T16:11:40.1841014Z # api.migrations.env
2025-08-19T16:11:40.1841138Z 
2025-08-19T16:11:40.1841278Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-19T16:11:40.1841490Z 
2025-08-19T16:11:40.1841604Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-19T16:11:40.1841791Z 
2025-08-19T16:11:40.1841903Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-19T16:11:40.1842105Z 
2025-08-19T16:11:40.1842202Z # api.migrations.versions.0004\_fee\_cron
2025-08-19T16:11:40.1842384Z 
2025-08-19T16:11:40.1842537Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-19T16:11:40.1842775Z 
2025-08-19T16:11:40.1842913Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-19T16:11:40.1843130Z 
2025-08-19T16:11:40.1843259Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-19T16:11:40.1843462Z 
2025-08-19T16:11:40.1843571Z # api.migrations.versions.0003\_vendor\_prices
2025-08-19T16:11:40.1843760Z 
2025-08-19T16:11:40.1843879Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-19T16:11:40.1844077Z 
2025-08-19T16:11:40.1844180Z # api.migrations.versions.0024\_create\_buybox
2025-08-19T16:11:40.1844368Z 
2025-08-19T16:11:40.1844496Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-19T16:11:40.1844704Z 
2025-08-19T16:11:40.1844821Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-19T16:11:40.1845016Z 
2025-08-19T16:11:40.1845135Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-19T16:11:40.1845777Z 
2025-08-19T16:11:40.1845916Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-19T16:11:40.1846146Z 
2025-08-19T16:11:40.1846273Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-19T16:11:40.1846481Z 
2025-08-19T16:11:40.1846591Z # api.migrations.versions.0020\_unified\_schema
2025-08-19T16:11:40.1846783Z 
2025-08-19T16:11:40.1846921Z <a id="api.migrations.versions.0025_pr4_indexes_loadlog"></a>
2025-08-19T16:11:40.1847142Z 
2025-08-19T16:11:40.1847266Z # api.migrations.versions.0025\_pr4\_indexes\_loadlog
2025-08-19T16:11:40.1847468Z 
2025-08-19T16:11:40.1847590Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-19T16:11:40.1847806Z 
2025-08-19T16:11:40.1847917Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-19T16:11:40.1848106Z 
2025-08-19T16:11:40.1848242Z <a id="api.migrations.versions.0026_amazon_new_reports"></a>
2025-08-19T16:11:40.1848470Z 
2025-08-19T16:11:40.1848588Z # api.migrations.versions.0026\_amazon\_new\_reports
2025-08-19T16:11:40.1848933Z 
2025-08-19T16:11:40.1849053Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-19T16:11:40.1849247Z 
2025-08-19T16:11:40.1849342Z # api.migrations.versions.0001\_baseline
2025-08-19T16:11:40.1849520Z 
2025-08-19T16:11:40.1849612Z <a id="api.migrations.versions"></a>
2025-08-19T16:11:40.1849774Z 
2025-08-19T16:11:40.1849856Z # api.migrations.versions
2025-08-19T16:11:40.1849995Z 
2025-08-19T16:11:40.1850075Z <a id="api.migrations"></a>
2025-08-19T16:11:40.1850213Z 
2025-08-19T16:11:40.1850289Z # api.migrations
2025-08-19T16:11:40.1850477Z 
2025-08-19T16:11:40.1850548Z <a id="api.db"></a>
2025-08-19T16:11:40.1850664Z 
2025-08-19T16:11:40.1850731Z # api.db
2025-08-19T16:11:40.1850823Z 
2025-08-19T16:11:40.1850907Z <a id="api.routes.score"></a>
2025-08-19T16:11:40.1851055Z 
2025-08-19T16:11:40.1851128Z # api.routes.score
2025-08-19T16:11:40.1851239Z 
2025-08-19T16:11:40.1851326Z <a id="api.routes.stats"></a>
2025-08-19T16:11:40.1851463Z 
2025-08-19T16:11:40.1851535Z # api.routes.stats
2025-08-19T16:11:40.1851657Z 
2025-08-19T16:11:40.1851739Z <a id="api.routes.roi"></a>
2025-08-19T16:11:40.1851871Z 
2025-08-19T16:11:40.1851942Z # api.routes.roi
2025-08-19T16:11:40.1852056Z 
2025-08-19T16:11:40.1852140Z <a id="api.routes.health"></a>
2025-08-19T16:11:40.1852281Z 
2025-08-19T16:11:40.1852360Z # api.routes.health
2025-08-19T16:11:40.1852470Z 
2025-08-19T16:11:40.1852563Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-19T16:11:40.1852732Z 
2025-08-19T16:11:40.1852805Z #### MAX\_SKEW
2025-08-19T16:11:40.1852907Z 
2025-08-19T16:11:40.1852972Z seconds
2025-08-19T16:11:40.1853064Z 
2025-08-19T16:11:40.1853156Z <a id="api.routes.health.health"></a>
2025-08-19T16:11:40.1853319Z 
2025-08-19T16:11:40.1853391Z #### health
2025-08-19T16:11:40.1853483Z 
2025-08-19T16:11:40.1853550Z ```python
2025-08-19T16:11:40.1853751Z @router.get("/health", include_in_schema=False)
2025-08-19T16:11:40.1854150Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-19T16:11:40.1854504Z ```
2025-08-19T16:11:40.1854601Z 
2025-08-19T16:11:40.1854721Z Return 200 when DB reachable and clocks are in sync.
2025-08-19T16:11:40.1854924Z 
2025-08-19T16:11:40.1855015Z <a id="api.routes.repository"></a>
2025-08-19T16:11:40.1855174Z 
2025-08-19T16:11:40.1855260Z # api.routes.repository
2025-08-19T16:11:40.1855388Z 
2025-08-19T16:11:40.1855463Z <a id="api.routes"></a>
2025-08-19T16:11:40.1855752Z 
2025-08-19T16:11:40.1855869Z # api.routes
2025-08-19T16:11:40.1855972Z 
2025-08-19T16:11:40.1856052Z <a id="api.models.fee"></a>
2025-08-19T16:11:40.1856191Z 
2025-08-19T16:11:40.1856261Z # api.models.fee
2025-08-19T16:11:40.1856367Z 
2025-08-19T16:11:40.1856441Z <a id="api.models"></a>
2025-08-19T16:11:40.1856562Z 
2025-08-19T16:11:40.1856629Z # api.models
2025-08-19T16:11:40.1856725Z 
2025-08-19T16:11:40.1856813Z <a id="api.roi_repository"></a>
2025-08-19T16:11:40.1856956Z 
2025-08-19T16:11:40.1857029Z # api.roi\_repository
2025-08-19T16:11:40.1857153Z 
2025-08-19T16:11:40.1857224Z <a id="api.main"></a>
2025-08-19T16:11:40.1857471Z 
2025-08-19T16:11:40.1857537Z # api.main
2025-08-19T16:11:40.1857635Z 
2025-08-19T16:11:40.1857713Z <a id="api.main.ready"></a>
2025-08-19T16:11:40.1857844Z 
2025-08-19T16:11:40.1857913Z #### ready
2025-08-19T16:11:40.1858002Z 
2025-08-19T16:11:40.1858068Z ```python
2025-08-19T16:11:40.1858336Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-19T16:11:40.1858766Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-19T16:11:40.1859125Z                                                                       str]
2025-08-19T16:11:40.1859357Z ```
2025-08-19T16:11:40.1859449Z 
2025-08-19T16:11:40.1859547Z Return 200 only when migrations are at head.
2025-08-19T16:11:40.1859723Z 
2025-08-19T16:11:40.1859802Z <a id="api.config"></a>
2025-08-19T16:11:40.1859919Z 
2025-08-19T16:11:40.1859986Z # api.config
2025-08-19T16:11:40.1860085Z 
2025-08-19T16:11:40.1860163Z <a id="api.security"></a>
2025-08-19T16:11:40.1860290Z 
2025-08-19T16:11:40.1860470Z # api.security
2025-08-19T16:11:40.1860576Z 
2025-08-19T16:11:40.1860644Z <a id="etl"></a>
2025-08-19T16:11:40.1860748Z 
2025-08-19T16:11:40.1860818Z # etl
2025-08-19T16:11:40.1860906Z 
2025-08-19T16:11:40.1860989Z <a id="etl.fba_fee_ingestor"></a>
2025-08-19T16:11:40.1861138Z 
2025-08-19T16:11:40.1861218Z # etl.fba\_fee\_ingestor
2025-08-19T16:11:40.1861345Z 
2025-08-19T16:11:40.1861431Z <a id="etl.sp_fees_ingestor"></a>
2025-08-19T16:11:40.1861580Z 
2025-08-19T16:11:40.1861655Z # etl.sp\_fees\_ingestor
2025-08-19T16:11:40.1861776Z 
2025-08-19T16:11:40.1861861Z <a id="etl.keepa_ingestor"></a>
2025-08-19T16:11:40.1862003Z 
2025-08-19T16:11:40.1862077Z # etl.keepa\_ingestor
2025-08-19T16:11:40.1862190Z 
2025-08-19T16:11:40.1862267Z <a id="etl.db"></a>
2025-08-19T16:11:40.1862374Z 
2025-08-19T16:11:40.1862444Z # etl.db
2025-08-19T16:11:40.1862541Z 
2025-08-19T16:11:40.1862626Z <a id="etl.dialects.schemas"></a>
2025-08-19T16:11:40.1862772Z 
2025-08-19T16:11:40.1862856Z # etl.dialects.schemas
2025-08-19T16:11:40.1862985Z 
2025-08-19T16:11:40.1863093Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-19T16:11:40.1863280Z 
2025-08-19T16:11:40.1863381Z # etl.dialects.amazon\_reimbursements
2025-08-19T16:11:40.1863544Z 
2025-08-19T16:11:40.1863644Z <a id="etl.dialects.amazon_ads_sp_cost"></a>
2025-08-19T16:11:40.1863824Z 
2025-08-19T16:11:40.1863911Z # etl.dialects.amazon\_ads\_sp\_cost
2025-08-19T16:11:40.1864072Z 
2025-08-19T16:11:40.1864168Z <a id="etl.dialects.test_generic"></a>
2025-08-19T16:11:40.1864330Z 
2025-08-19T16:11:40.1864411Z # etl.dialects.test\_generic
2025-08-19T16:11:40.1864549Z 
2025-08-19T16:11:40.1864648Z <a id="etl.dialects.amazon_returns"></a>
2025-08-19T16:11:40.1864813Z 
2025-08-19T16:11:40.1864896Z # etl.dialects.amazon\_returns
2025-08-19T16:11:40.1865042Z 
2025-08-19T16:11:40.1865139Z <a id="etl.dialects.amazon_fee_preview"></a>
2025-08-19T16:11:40.1865309Z 
2025-08-19T16:11:40.1865399Z # etl.dialects.amazon\_fee\_preview
2025-08-19T16:11:40.1865554Z 
2025-08-19T16:11:40.1865887Z <a id="etl.dialects.amazon_inventory_ledger"></a>
2025-08-19T16:11:40.1866089Z 
2025-08-19T16:11:40.1866187Z # etl.dialects.amazon\_inventory\_ledger
2025-08-19T16:11:40.1866365Z 
2025-08-19T16:11:40.1866463Z <a id="etl.dialects.amazon_settlements"></a>
2025-08-19T16:11:40.1866645Z 
2025-08-19T16:11:40.1866734Z # etl.dialects.amazon\_settlements
2025-08-19T16:11:40.1866887Z 
2025-08-19T16:11:40.1866969Z <a id="etl.dialects"></a>
2025-08-19T16:11:40.1867096Z 
2025-08-19T16:11:40.1867164Z # etl.dialects
2025-08-19T16:11:40.1867264Z 
2025-08-19T16:11:40.1867340Z <a id="ingest"></a>
2025-08-19T16:11:40.1867448Z 
2025-08-19T16:11:40.1867512Z # ingest
2025-08-19T16:11:40.1867607Z 
2025-08-19T16:11:40.1867690Z <a id="ingest.maintenance"></a>
2025-08-19T16:11:40.1867832Z 
2025-08-19T16:11:40.1867905Z # ingest.maintenance
2025-08-19T16:11:40.1868029Z 
2025-08-19T16:11:40.1868110Z <a id="ingest.copy_loader"></a>
2025-08-19T16:11:40.1868250Z 
2025-08-19T16:11:40.1868331Z # ingest.copy\_loader
2025-08-19T16:11:40.1868565Z 
2025-08-19T16:11:40.1868888Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-19T16:11:40.1869228Z 
2025-08-19T16:11:40.1869305Z #### copy\_df\_via\_temp
2025-08-19T16:11:40.1869430Z 
2025-08-19T16:11:40.1869495Z ```python
2025-08-19T16:11:40.1869676Z def copy_df_via_temp(engine: Engine,
2025-08-19T16:11:40.1869919Z                      df: pd.DataFrame,
2025-08-19T16:11:40.1870154Z                      target_table: str,
2025-08-19T16:11:40.1870382Z                      *,
2025-08-19T16:11:40.1870590Z                      target_schema: Optional[str] = None,
2025-08-19T16:11:40.1870867Z                      columns: Sequence[str],
2025-08-19T16:11:40.1871138Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-19T16:11:40.1871429Z                      analyze_after: bool = False,
2025-08-19T16:11:40.1871695Z                      connection: Any | None = None) -> int
2025-08-19T16:11:40.1871939Z ```
2025-08-19T16:11:40.1872027Z 
2025-08-19T16:11:40.1872187Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-19T16:11:40.1872545Z 
2025-08-19T16:11:40.1872633Z <a id="ingest.tests.test_smoke"></a>
2025-08-19T16:11:40.1872801Z 
2025-08-19T16:11:40.1872884Z # ingest.tests.test\_smoke
2025-08-19T16:11:40.1873015Z 
2025-08-19T16:11:40.1873092Z <a id="ingest.tests"></a>
2025-08-19T16:11:40.1873229Z 
2025-08-19T16:11:40.1873298Z # ingest.tests
2025-08-19T16:11:40.1873402Z 
2025-08-19T16:11:40.1873492Z <a id="ingest.upload_router"></a>
2025-08-19T16:11:40.1873641Z 
2025-08-19T16:11:40.1873717Z # ingest.upload\_router
2025-08-19T16:11:40.1873839Z 
2025-08-19T16:11:40.1873927Z <a id="ingest.email_watcher"></a>
2025-08-19T16:11:40.1874073Z 
2025-08-19T16:11:40.1874147Z # ingest.email\_watcher
2025-08-19T16:11:40.1874270Z 
2025-08-19T16:11:40.1874358Z <a id="ingest.email_watcher.main"></a>
2025-08-19T16:11:40.1874522Z 
2025-08-19T16:11:40.1874592Z #### main
2025-08-19T16:11:40.1874684Z 
2025-08-19T16:11:40.1874750Z ```python
2025-08-19T16:11:40.1874927Z def main() -> dict[str, str]
2025-08-19T16:11:40.1875130Z ```
2025-08-19T16:11:40.1875223Z 
2025-08-19T16:11:40.1875365Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-19T16:11:40.1875758Z 
2025-08-19T16:11:40.1875973Z Returns {"status": "success"} when processing completes.
2025-08-19T16:11:40.1876307Z 
2025-08-19T16:11:40.1876459Z <a id="ingest.tasks"></a>
2025-08-19T16:11:40.1876663Z 
2025-08-19T16:11:40.1876741Z # ingest.tasks
2025-08-19T16:11:40.1876845Z 
2025-08-19T16:11:40.1876944Z <a id="ingest.tasks.task_import_file"></a>
2025-08-19T16:11:40.1877126Z 
2025-08-19T16:11:40.1877201Z #### task\_import\_file
2025-08-19T16:11:40.1877317Z 
2025-08-19T16:11:40.1877382Z ```python
2025-08-19T16:11:40.1877601Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-19T16:11:40.1877907Z def task_import_file(self: Any,
2025-08-19T16:11:40.1878124Z                      uri: str,
2025-08-19T16:11:40.1878347Z                      report_type: str | None = None,
2025-08-19T16:11:40.1878622Z                      force: bool = False) -> dict[str, Any]
2025-08-19T16:11:40.1878877Z ```
2025-08-19T16:11:40.1878967Z 
2025-08-19T16:11:40.1879103Z Import a file into Postgres using existing ETL pipeline.
2025-08-19T16:11:40.1879313Z 
2025-08-19T16:11:40.1879396Z <a id="ingest.celery_app"></a>
2025-08-19T16:11:40.1879544Z 
2025-08-19T16:11:40.1879619Z # ingest.celery\_app
2025-08-19T16:11:40.1879739Z 
2025-08-19T16:11:40.1879832Z <a id="ingest.ingest_router"></a>
2025-08-19T16:11:40.1879984Z 
2025-08-19T16:11:40.1880062Z # ingest.ingest\_router
2025-08-19T16:11:40.1880191Z 
2025-08-19T16:11:40.1880270Z <a id="logistics_etl"></a>
2025-08-19T16:11:40.1880400Z 
2025-08-19T16:11:40.1880470Z # logistics\_etl
2025-08-19T16:11:40.1880584Z 
2025-08-19T16:11:40.1880662Z Daily logistics ETL job.
2025-08-19T16:11:40.1880787Z 
2025-08-19T16:11:40.1880877Z <a id="logistics_etl.__main__"></a>
2025-08-19T16:11:40.1881031Z 
2025-08-19T16:11:40.1881110Z # logistics\_etl.\_\_main\_\_
2025-08-19T16:11:40.1881249Z 
2025-08-19T16:11:40.1881569Z <a id="logistics_etl.dsn"></a>
2025-08-19T16:11:40.1881719Z 
2025-08-19T16:11:40.1881792Z # logistics\_etl.dsn
2025-08-19T16:11:40.1881916Z 
2025-08-19T16:11:40.1882039Z Local DSN builder to avoid cross-service dependency.
2025-08-19T16:11:40.1882250Z 
2025-08-19T16:11:40.1882351Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-19T16:11:40.1882524Z 
2025-08-19T16:11:40.1882594Z #### build\_dsn
2025-08-19T16:11:40.1882699Z 
2025-08-19T16:11:40.1882772Z ```python
2025-08-19T16:11:40.1882953Z def build_dsn(sync: bool = True) -> str
2025-08-19T16:11:40.1883184Z ```
2025-08-19T16:11:40.1883269Z 
2025-08-19T16:11:40.1883414Z Return a Postgres DSN assembled from environment variables.
2025-08-19T16:11:40.1883650Z 
2025-08-19T16:11:40.1883804Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-19T16:11:40.1884211Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-19T16:11:40.1884562Z error when any required variable is missing.
2025-08-19T16:11:40.1884739Z 
2025-08-19T16:11:40.1885105Z <a id="logistics_etl.tests.conftest"></a>
2025-08-19T16:11:40.1885288Z 
2025-08-19T16:11:40.1885375Z # logistics\_etl.tests.conftest
2025-08-19T16:11:40.1885529Z 
2025-08-19T16:11:40.1885828Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-19T16:11:40.1886035Z 
2025-08-19T16:11:40.1886136Z # logistics\_etl.tests.test\_repository
2025-08-19T16:11:40.1886306Z 
2025-08-19T16:11:40.1886403Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-19T16:11:40.1886576Z 
2025-08-19T16:11:40.1886669Z # logistics\_etl.tests.test\_cron
2025-08-19T16:11:40.1886823Z 
2025-08-19T16:11:40.1886924Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-19T16:11:40.1887105Z 
2025-08-19T16:11:40.1887192Z # logistics\_etl.tests.test\_imports
2025-08-19T16:11:40.1887350Z 
2025-08-19T16:11:40.1887449Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-19T16:11:40.1887620Z 
2025-08-19T16:11:40.1887705Z # logistics\_etl.tests.test\_smoke
2025-08-19T16:11:40.1887857Z 
2025-08-19T16:11:40.1887958Z <a id="logistics_etl.tests.test_client"></a>
2025-08-19T16:11:40.1888143Z 
2025-08-19T16:11:40.1888229Z # logistics\_etl.tests.test\_client
2025-08-19T16:11:40.1888393Z 
2025-08-19T16:11:40.1888484Z <a id="logistics_etl.tests"></a>
2025-08-19T16:11:40.1888636Z 
2025-08-19T16:11:40.1888714Z # logistics\_etl.tests
2025-08-19T16:11:40.1888834Z 
2025-08-19T16:11:40.1888917Z <a id="logistics_etl.flow"></a>
2025-08-19T16:11:40.1889059Z 
2025-08-19T16:11:40.1889138Z # logistics\_etl.flow
2025-08-19T16:11:40.1889256Z 
2025-08-19T16:11:40.1889341Z <a id="logistics_etl.client"></a>
2025-08-19T16:11:40.1889497Z 
2025-08-19T16:11:40.1889573Z # logistics\_etl.client
2025-08-19T16:11:40.1889694Z 
2025-08-19T16:11:40.1889780Z <a id="logistics_etl.cron"></a>
2025-08-19T16:11:40.1889918Z 
2025-08-19T16:11:40.1889990Z # logistics\_etl.cron
2025-08-19T16:11:40.1890105Z 
2025-08-19T16:11:40.1890191Z <a id="logistics_etl.db"></a>
2025-08-19T16:11:40.1890330Z 
2025-08-19T16:11:40.1890401Z # logistics\_etl.db
2025-08-19T16:11:40.1890521Z 
2025-08-19T16:11:40.1890616Z <a id="logistics_etl.repository"></a>
2025-08-19T16:11:40.1890778Z 
2025-08-19T16:11:40.1966720Z # logistics\_etl.repository
2025-08-19T16:11:40.1967148Z 
2025-08-19T16:11:40.1967315Z <a id="alert_bot"></a>
2025-08-19T16:11:40.1967591Z 
2025-08-19T16:11:40.1967731Z # alert\_bot
2025-08-19T16:11:40.1967935Z 
2025-08-19T16:11:40.1968121Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-19T16:11:40.1968476Z 
2025-08-19T16:11:40.1968657Z # alert\_bot.tests.test\_smoke
2025-08-19T16:11:40.1968872Z 
2025-08-19T16:11:40.1968981Z <a id="alert_bot.tests"></a>
2025-08-19T16:11:40.1969156Z 
2025-08-19T16:11:40.1969245Z # alert\_bot.tests
2025-08-19T16:11:40.1969399Z 
2025-08-19T16:11:40.1969508Z <a id="alert_bot.alert_bot"></a>
2025-08-19T16:11:40.1969694Z 
2025-08-19T16:11:40.1969789Z # alert\_bot.alert\_bot
2025-08-19T16:11:40.1969949Z 
2025-08-19T16:11:40.1970049Z <a id="alert_bot.rules"></a>
2025-08-19T16:11:40.1970216Z 
2025-08-19T16:11:40.1970308Z # alert\_bot.rules
2025-08-19T16:11:40.1970708Z 
2025-08-19T16:11:40.1970797Z <a id="common"></a>
2025-08-19T16:11:40.1970942Z 
2025-08-19T16:11:40.1971023Z # common
2025-08-19T16:11:40.1971137Z 
2025-08-19T16:11:40.1971231Z <a id="common.dsn"></a>
2025-08-19T16:11:40.1971389Z 
2025-08-19T16:11:40.1971472Z # common.dsn
2025-08-19T16:11:40.1971595Z 
2025-08-19T16:11:40.1971707Z <a id="common.dsn.build_dsn"></a>
2025-08-19T16:11:40.1971894Z 
2025-08-19T16:11:40.1971978Z #### build\_dsn
2025-08-19T16:11:40.1972107Z 
2025-08-19T16:11:40.1972197Z ```python
2025-08-19T16:11:40.1972423Z def build_dsn(sync: bool = True) -> str
2025-08-19T16:11:40.1972707Z ```
2025-08-19T16:11:40.1972813Z 
2025-08-19T16:11:40.1972967Z Return a Postgres DSN, validating required variables.
2025-08-19T16:11:40.1973232Z 
2025-08-19T16:11:40.1973465Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-19T16:11:40.1974018Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-19T16:11:40.1974533Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-19T16:11:40.1975067Z missing.
2025-08-19T16:11:40.1975183Z 
2025-08-19T16:11:40.1975290Z <a id="common.models_vendor"></a>
2025-08-19T16:11:40.1975485Z 
2025-08-19T16:11:40.1975832Z # common.models\_vendor
2025-08-19T16:11:40.1976041Z 
2025-08-19T16:11:40.1976164Z <a id="common.models_vendor.Vendor"></a>
2025-08-19T16:11:40.1976374Z 
2025-08-19T16:11:40.1976460Z ## Vendor Objects
2025-08-19T16:11:40.1976594Z 
2025-08-19T16:11:40.1976685Z ```python
2025-08-19T16:11:40.1976884Z class Vendor(Base)
2025-08-19T16:11:40.1977097Z ```
2025-08-19T16:11:40.1977202Z 
2025-08-19T16:11:40.1977303Z Vendor of inventory items.
2025-08-19T16:11:40.1977472Z 
2025-08-19T16:11:40.1977599Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-19T16:11:40.1977823Z 
2025-08-19T16:11:40.1977923Z ## VendorPrice Objects
2025-08-19T16:11:40.1978079Z 
2025-08-19T16:11:40.1978155Z ```python
2025-08-19T16:11:40.1978324Z class VendorPrice(Base)
2025-08-19T16:11:40.1978501Z ```
2025-08-19T16:11:40.1978599Z 
2025-08-19T16:11:40.1978706Z Association table linking vendors to pricing.
2025-08-19T16:11:40.1978886Z 
2025-08-19T16:11:40.1978964Z <a id="common.db_url"></a>
2025-08-19T16:11:40.1979099Z 
2025-08-19T16:11:40.1979168Z # common.db\_url
2025-08-19T16:11:40.1979275Z 
2025-08-19T16:11:40.1979366Z <a id="common.db_url.build_url"></a>
2025-08-19T16:11:40.1979525Z 
2025-08-19T16:11:40.1979593Z #### build\_url
2025-08-19T16:11:40.1979695Z 
2025-08-19T16:11:40.1979767Z ```python
2025-08-19T16:11:40.1979942Z def build_url(async_: bool = True) -> str
2025-08-19T16:11:40.1980178Z ```
2025-08-19T16:11:40.1980262Z 
2025-08-19T16:11:40.1980362Z Return Postgres DSN from env or PG_* parts.
2025-08-19T16:11:40.1980543Z 
2025-08-19T16:11:40.1980623Z <a id="common.keepa"></a>
2025-08-19T16:11:40.1980754Z 
2025-08-19T16:11:40.1980832Z # common.keepa
2025-08-19T16:11:40.1980936Z 
2025-08-19T16:11:40.1981011Z <a id="common.llm"></a>
2025-08-19T16:11:40.1981129Z 
2025-08-19T16:11:40.1981203Z # common.llm
2025-08-19T16:11:40.1981309Z 
2025-08-19T16:11:40.1981396Z <a id="common.settings"></a>
2025-08-19T16:11:40.1981544Z 
2025-08-19T16:11:40.1981616Z # common.settings
2025-08-19T16:11:40.1981724Z 
2025-08-19T16:11:40.1981804Z <a id="common.db"></a>
2025-08-19T16:11:40.1981926Z 
2025-08-19T16:11:40.1981993Z # common.db
2025-08-19T16:11:40.1982086Z 
2025-08-19T16:11:40.1982188Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-19T16:11:40.1982358Z 
2025-08-19T16:11:40.1982436Z #### build\_sqlalchemy\_url
2025-08-19T16:11:40.1982573Z 
2025-08-19T16:11:40.1982640Z ```python
2025-08-19T16:11:40.1982814Z def build_sqlalchemy_url() -> str
2025-08-19T16:11:40.1983040Z ```
2025-08-19T16:11:40.1983126Z 
2025-08-19T16:11:40.1983229Z Return Postgres URL for SQLAlchemy engines.
2025-08-19T16:11:40.1983401Z 
2025-08-19T16:11:40.1983491Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-19T16:11:40.1983660Z 
2025-08-19T16:11:40.1983746Z #### build\_asyncpg\_dsn
2025-08-19T16:11:40.1983878Z 
2025-08-19T16:11:40.1983950Z ```python
2025-08-19T16:11:40.1984261Z def build_asyncpg_dsn() -> str
2025-08-19T16:11:40.1984467Z ```
2025-08-19T16:11:40.1984557Z 
2025-08-19T16:11:40.1984691Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-19T16:11:40.1984905Z 
2025-08-19T16:11:40.1984997Z <a id="common.db.refresh_mvs"></a>
2025-08-19T16:11:40.1985150Z 
2025-08-19T16:11:40.1985218Z #### refresh\_mvs
2025-08-19T16:11:40.1985331Z 
2025-08-19T16:11:40.1985397Z ```python
2025-08-19T16:11:40.1985708Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-19T16:11:40.1985975Z ```
2025-08-19T16:11:40.1986060Z 
2025-08-19T16:11:40.1986199Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-19T16:11:40.1986424Z 
2025-08-19T16:11:40.1986505Z <a id="common.config"></a>
2025-08-19T16:11:40.1986636Z 
2025-08-19T16:11:40.1986711Z # common.config
2025-08-19T16:11:40.1986815Z 
2025-08-19T16:11:40.1986892Z <a id="common.base"></a>
2025-08-19T16:11:40.1987021Z 
2025-08-19T16:11:40.1987089Z # common.base
2025-08-19T16:11:40.1987309Z 
2025-08-19T16:11:40.1987393Z <a id="common.base.Base"></a>
2025-08-19T16:11:40.1987539Z 
2025-08-19T16:11:40.1987608Z ## Base Objects
2025-08-19T16:11:40.1987710Z 
2025-08-19T16:11:40.1987781Z ```python
2025-08-19T16:11:40.1987952Z class Base(DeclarativeBase)
2025-08-19T16:11:40.1988150Z ```
2025-08-19T16:11:40.1988233Z 
2025-08-19T16:11:40.1988321Z Base class for SQLAlchemy models.
2025-08-19T16:11:40.1988479Z 
2025-08-19T16:11:40.1988552Z <a id="repricer"></a>
2025-08-19T16:11:40.1988668Z 
2025-08-19T16:11:40.1988735Z # repricer
2025-08-19T16:11:40.1988836Z 
2025-08-19T16:11:40.1988926Z <a id="repricer.app.schemas"></a>
2025-08-19T16:11:40.1989076Z 
2025-08-19T16:11:40.1989162Z # repricer.app.schemas
2025-08-19T16:11:40.1989283Z 
2025-08-19T16:11:40.1989367Z <a id="repricer.app.deps"></a>
2025-08-19T16:11:40.1989515Z 
2025-08-19T16:11:40.1989590Z # repricer.app.deps
2025-08-19T16:11:40.1989703Z 
2025-08-19T16:11:40.1989822Z Placeholder module for Keepa / SP-API clients.
2025-08-19T16:11:40.1990021Z 
2025-08-19T16:11:40.1990110Z <a id="repricer.app.logic"></a>
2025-08-19T16:11:40.1990257Z 
2025-08-19T16:11:40.1990344Z # repricer.app.logic
2025-08-19T16:11:40.1990461Z 
2025-08-19T16:11:40.1990561Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-19T16:11:40.1990745Z 
2025-08-19T16:11:40.1990813Z #### MIN\_MARGIN
2025-08-19T16:11:40.1990919Z 
2025-08-19T16:11:40.1990983Z 15 % ROI
2025-08-19T16:11:40.1991080Z 
2025-08-19T16:11:40.1991186Z <a id="repricer.app.logic.compute_price"></a>
2025-08-19T16:11:40.1991372Z 
2025-08-19T16:11:40.1991449Z #### compute\_price
2025-08-19T16:11:40.1991564Z 
2025-08-19T16:11:40.1991632Z ```python
2025-08-19T16:11:40.1991884Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-19T16:11:40.1992188Z ```
2025-08-19T16:11:40.1992287Z 
2025-08-19T16:11:40.1992398Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-19T16:11:40.1992684Z Replace with real competitive logic later.
2025-08-19T16:11:40.1992864Z 
2025-08-19T16:11:40.1992951Z <a id="repricer.app.main"></a>
2025-08-19T16:11:40.1993102Z 
2025-08-19T16:11:40.1993183Z # repricer.app.main
2025-08-19T16:11:40.1993293Z 
2025-08-19T16:11:40.1993373Z <a id="repricer.app"></a>
2025-08-19T16:11:40.1993508Z 
2025-08-19T16:11:40.1993579Z # repricer.app
2025-08-19T16:11:40.1993683Z 
2025-08-19T16:11:40.1993778Z <a id="repricer.tests.test_imports"></a>
2025-08-19T16:11:40.1993958Z 
2025-08-19T16:11:40.1994044Z # repricer.tests.test\_imports
2025-08-19T16:11:40.1994185Z 
2025-08-19T16:11:40.1994280Z <a id="repricer.tests.test_smoke"></a>
2025-08-19T16:11:40.1994443Z 
2025-08-19T16:11:40.1994529Z # repricer.tests.test\_smoke
2025-08-19T16:11:40.1994669Z 
2025-08-19T16:11:40.1994757Z <a id="repricer.tests"></a>
2025-08-19T16:11:40.1994891Z 
2025-08-19T16:11:40.1994961Z # repricer.tests
2025-08-19T16:11:40.1995074Z 
2025-08-19T16:11:40.1995142Z <a id="db"></a>
2025-08-19T16:11:40.1995243Z 
2025-08-19T16:11:40.1995310Z # db
2025-08-19T16:11:40.1995398Z 
2025-08-19T16:11:40.1995475Z <a id="db.utils.views"></a>
2025-08-19T16:11:40.1995952Z 
2025-08-19T16:11:40.1996034Z # db.utils.views
2025-08-19T16:11:40.1996143Z 
2025-08-19T16:11:40.1996239Z <a id="db.utils.views.replace_view"></a>
2025-08-19T16:11:40.1996417Z 
2025-08-19T16:11:40.1996487Z #### replace\_view
2025-08-19T16:11:40.1996596Z 
2025-08-19T16:11:40.1996662Z ```python
2025-08-19T16:11:40.1996868Z def replace_view(name: str, new_sql: str) -> None
2025-08-19T16:11:40.1997128Z ```
2025-08-19T16:11:40.1997215Z 
2025-08-19T16:11:40.1997307Z Drop and recreate a SQL view atomically.
2025-08-19T16:11:40.1997477Z 
2025-08-19T16:11:40.1997555Z <a id="db.utils"></a>
2025-08-19T16:11:40.1997675Z 
2025-08-19T16:11:40.1997742Z # db.utils
2025-08-19T16:11:40.1997840Z 
2025-08-19T16:11:40.1997920Z <a id="price_importer"></a>
2025-08-19T16:11:40.1998056Z 
2025-08-19T16:11:40.1998128Z # price\_importer
2025-08-19T16:11:40.1998248Z 
2025-08-19T16:11:40.1998363Z <a id="price_importer.services_common.dsn"></a>
2025-08-19T16:11:40.1998552Z 
2025-08-19T16:11:40.1998651Z # price\_importer.services\_common.dsn
2025-08-19T16:11:40.1998938Z 
2025-08-19T16:11:40.1999064Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-19T16:11:40.1999280Z 
2025-08-19T16:11:40.1999352Z #### build\_dsn
2025-08-19T16:11:40.1999458Z 
2025-08-19T16:11:40.1999529Z ```python
2025-08-19T16:11:40.1999716Z def build_dsn(sync: bool = True) -> str
2025-08-19T16:11:40.1999952Z ```
2025-08-19T16:11:40.2000038Z 
2025-08-19T16:11:40.2000107Z Return safe DSN.
2025-08-19T16:11:40.2000216Z 
2025-08-19T16:11:40.2000568Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-19T16:11:40.2000779Z 
2025-08-19T16:11:40.2000912Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-19T16:11:40.2001131Z 
2025-08-19T16:11:40.2001245Z # price\_importer.services\_common.models\_vendor
2025-08-19T16:11:40.2001439Z 
2025-08-19T16:11:40.2001557Z <a id="price_importer.services_common.db_url"></a>
2025-08-19T16:11:40.2001749Z 
2025-08-19T16:11:40.2001846Z # price\_importer.services\_common.db\_url
2025-08-19T16:11:40.2002035Z 
2025-08-19T16:11:40.2002176Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-19T16:11:40.2002396Z 
2025-08-19T16:11:40.2002466Z #### build\_url
2025-08-19T16:11:40.2002580Z 
2025-08-19T16:11:40.2002648Z ```python
2025-08-19T16:11:40.2002827Z def build_url(async_: bool = True) -> str
2025-08-19T16:11:40.2003062Z ```
2025-08-19T16:11:40.2003149Z 
2025-08-19T16:11:40.2003253Z Return Postgres DSN from env or PG_* parts.
2025-08-19T16:11:40.2003433Z 
2025-08-19T16:11:40.2003544Z <a id="price_importer.services_common.keepa"></a>
2025-08-19T16:11:40.2003740Z 
2025-08-19T16:11:40.2003837Z # price\_importer.services\_common.keepa
2025-08-19T16:11:40.2004010Z 
2025-08-19T16:11:40.2004113Z <a id="price_importer.services_common.llm"></a>
2025-08-19T16:11:40.2004306Z 
2025-08-19T16:11:40.2004399Z # price\_importer.services\_common.llm
2025-08-19T16:11:40.2004564Z 
2025-08-19T16:11:40.2004726Z <a id="price_importer.services_common.settings"></a>
2025-08-19T16:11:40.2004928Z 
2025-08-19T16:11:40.2005032Z # price\_importer.services\_common.settings
2025-08-19T16:11:40.2005212Z 
2025-08-19T16:11:40.2005319Z <a id="price_importer.services_common.db"></a>
2025-08-19T16:11:40.2005502Z 
2025-08-19T16:11:40.2005695Z # price\_importer.services\_common.db
2025-08-19T16:11:40.2005870Z 
2025-08-19T16:11:40.2006027Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-19T16:11:40.2006276Z 
2025-08-19T16:11:40.2006367Z #### build\_sqlalchemy\_url
2025-08-19T16:11:40.2006502Z 
2025-08-19T16:11:40.2006570Z ```python
2025-08-19T16:11:40.2006754Z def build_sqlalchemy_url() -> str
2025-08-19T16:11:40.2006966Z ```
2025-08-19T16:11:40.2007058Z 
2025-08-19T16:11:40.2007154Z Return Postgres URL for SQLAlchemy engines.
2025-08-19T16:11:40.2007338Z 
2025-08-19T16:11:40.2007489Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-19T16:11:40.2007725Z 
2025-08-19T16:11:40.2007805Z #### build\_asyncpg\_dsn
2025-08-19T16:11:40.2007934Z 
2025-08-19T16:11:40.2008012Z ```python
2025-08-19T16:11:40.2008316Z def build_asyncpg_dsn() -> str
2025-08-19T16:11:40.2008525Z ```
2025-08-19T16:11:40.2008614Z 
2025-08-19T16:11:40.2008744Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-19T16:11:40.2008999Z 
2025-08-19T16:11:40.2009136Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-19T16:11:40.2009348Z 
2025-08-19T16:11:40.2009418Z #### refresh\_mvs
2025-08-19T16:11:40.2009527Z 
2025-08-19T16:11:40.2009599Z ```python
2025-08-19T16:11:40.2009799Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-19T16:11:40.2010061Z ```
2025-08-19T16:11:40.2010147Z 
2025-08-19T16:11:40.2010284Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-19T16:11:40.2010508Z 
2025-08-19T16:11:40.2010607Z <a id="price_importer.services_common"></a>
2025-08-19T16:11:40.2010786Z 
2025-08-19T16:11:40.2010881Z # price\_importer.services\_common
2025-08-19T16:11:40.2011036Z 
2025-08-19T16:11:40.2011140Z <a id="price_importer.services_common.base"></a>
2025-08-19T16:11:40.2011449Z 
2025-08-19T16:11:40.2011546Z # price\_importer.services\_common.base
2025-08-19T16:11:40.2011715Z 
2025-08-19T16:11:40.2011807Z <a id="price_importer.normaliser"></a>
2025-08-19T16:11:40.2011979Z 
2025-08-19T16:11:40.2012066Z # price\_importer.normaliser
2025-08-19T16:11:40.2012208Z 
2025-08-19T16:11:40.2012321Z <a id="price_importer.common.models_vendor"></a>
2025-08-19T16:11:40.2012510Z 
2025-08-19T16:11:40.2012601Z # price\_importer.common.models\_vendor
2025-08-19T16:11:40.2012774Z 
2025-08-19T16:11:40.2012868Z <a id="price_importer.common.db_url"></a>
2025-08-19T16:11:40.2013039Z 
2025-08-19T16:11:40.2013126Z # price\_importer.common.db\_url
2025-08-19T16:11:40.2013280Z 
2025-08-19T16:11:40.2013388Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-19T16:11:40.2013578Z 
2025-08-19T16:11:40.2013651Z #### make\_dsn
2025-08-19T16:11:40.2013752Z 
2025-08-19T16:11:40.2013823Z ```python
2025-08-19T16:11:40.2014007Z def make_dsn(async_: bool = False) -> str
2025-08-19T16:11:40.2014246Z ```
2025-08-19T16:11:40.2014338Z 
2025-08-19T16:11:40.2014461Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-19T16:11:40.2014664Z 
2025-08-19T16:11:40.2014780Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-19T16:11:40.2014972Z 
2025-08-19T16:11:40.2015040Z #### build\_url
2025-08-19T16:11:40.2015144Z 
2025-08-19T16:11:40.2015216Z ```python
2025-08-19T16:11:40.2015396Z def build_url(async_: bool = False) -> str
2025-08-19T16:11:40.2015824Z ```
2025-08-19T16:11:40.2015955Z 
2025-08-19T16:11:40.2016085Z Return Postgres DSN built from environment variables.
2025-08-19T16:11:40.2016296Z 
2025-08-19T16:11:40.2016384Z <a id="price_importer.common"></a>
2025-08-19T16:11:40.2016539Z 
2025-08-19T16:11:40.2016628Z # price\_importer.common
2025-08-19T16:11:40.2016758Z 
2025-08-19T16:11:40.2016851Z <a id="price_importer.common.base"></a>
2025-08-19T16:11:40.2017040Z 
2025-08-19T16:11:40.2017126Z # price\_importer.common.base
2025-08-19T16:11:40.2017270Z 
2025-08-19T16:11:40.2017373Z <a id="price_importer.tests.conftest"></a>
2025-08-19T16:11:40.2017559Z 
2025-08-19T16:11:40.2017647Z # price\_importer.tests.conftest
2025-08-19T16:11:40.2017799Z 
2025-08-19T16:11:40.2017905Z <a id="price_importer.tests.test_reader"></a>
2025-08-19T16:11:40.2018084Z 
2025-08-19T16:11:40.2018173Z # price\_importer.tests.test\_reader
2025-08-19T16:11:40.2018338Z 
2025-08-19T16:11:40.2018442Z <a id="price_importer.tests.test_imports"></a>
2025-08-19T16:11:40.2018629Z 
2025-08-19T16:11:40.2018723Z # price\_importer.tests.test\_imports
2025-08-19T16:11:40.2018895Z 
2025-08-19T16:11:40.2018998Z <a id="price_importer.tests.test_smoke"></a>
2025-08-19T16:11:40.2019174Z 
2025-08-19T16:11:40.2019273Z # price\_importer.tests.test\_smoke
2025-08-19T16:11:40.2019432Z 
2025-08-19T16:11:40.2019541Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-19T16:11:40.2019768Z 
2025-08-19T16:11:40.2019862Z # price\_importer.tests.test\_normaliser
2025-08-19T16:11:40.2020033Z 
2025-08-19T16:11:40.2020120Z <a id="price_importer.tests"></a>
2025-08-19T16:11:40.2020423Z 
2025-08-19T16:11:40.2020505Z # price\_importer.tests
2025-08-19T16:11:40.2020633Z 
2025-08-19T16:11:40.2020729Z <a id="price_importer.reader"></a>
2025-08-19T16:11:40.2020883Z 
2025-08-19T16:11:40.2020963Z # price\_importer.reader
2025-08-19T16:11:40.2021096Z 
2025-08-19T16:11:40.2021191Z <a id="price_importer.repository"></a>
2025-08-19T16:11:40.2021357Z 
2025-08-19T16:11:40.2021442Z # price\_importer.repository
2025-08-19T16:11:40.2021587Z 
2025-08-19T16:11:40.2021673Z <a id="price_importer.import"></a>
2025-08-19T16:11:40.2021827Z 
2025-08-19T16:11:40.2021909Z # price\_importer.import
2025-08-19T16:11:40.2022036Z 
2025-08-19T16:11:40.2022108Z <a id="fees_h10"></a>
2025-08-19T16:11:40.2022230Z 
2025-08-19T16:11:40.2022298Z # fees\_h10
2025-08-19T16:11:40.2022393Z 
2025-08-19T16:11:40.2022471Z <a id="fees_h10.worker"></a>
2025-08-19T16:11:40.2022614Z 
2025-08-19T16:11:40.2022683Z # fees\_h10.worker
2025-08-19T16:11:40.2022791Z 
2025-08-19T16:11:40.2023016Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-19T16:11:40.2023198Z 
2025-08-19T16:11:40.2023272Z #### list\_active\_asins
2025-08-19T16:11:40.2023397Z 
2025-08-19T16:11:40.2023470Z ```python
2025-08-19T16:11:40.2023644Z def list_active_asins() -> list[str]
2025-08-19T16:11:40.2023863Z ```
2025-08-19T16:11:40.2023949Z 
2025-08-19T16:11:40.2024062Z Return known ASINs or an empty list if unavailable.
2025-08-19T16:11:40.2024263Z 
2025-08-19T16:11:40.2024352Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-19T16:11:40.2024511Z 
2025-08-19T16:11:40.2024599Z # fees\_h10.tests.test\_smoke
2025-08-19T16:11:40.2024738Z 
2025-08-19T16:11:40.2024817Z <a id="fees_h10.tests"></a>
2025-08-19T16:11:40.2024954Z 
2025-08-19T16:11:40.2025022Z # fees\_h10.tests
2025-08-19T16:11:40.2025129Z 
2025-08-19T16:11:40.2025206Z <a id="fees_h10.client"></a>
2025-08-19T16:11:40.2025343Z 
2025-08-19T16:11:40.2025413Z # fees\_h10.client
2025-08-19T16:11:40.2025520Z 
2025-08-19T16:11:40.2025719Z <a id="fees_h10.repository"></a>
2025-08-19T16:11:40.2025877Z 
2025-08-19T16:11:40.2025955Z # fees\_h10.repository
2025-08-19T16:11:40.2026072Z 
2025-08-19T16:11:40.2026185Z <a id="fees_h10.repository.upsert_fees_raw"></a>
2025-08-19T16:11:40.2026372Z 
2025-08-19T16:11:40.2026447Z #### upsert\_fees\_raw
2025-08-19T16:11:40.2026569Z 
2025-08-19T16:11:40.2026637Z ```python
2025-08-19T16:11:40.2026810Z def upsert_fees_raw(engine: Engine,
2025-08-19T16:11:40.2027061Z                     rows: Iterable[Mapping[str, Any]],
2025-08-19T16:11:40.2027315Z                     *,
2025-08-19T16:11:40.2027544Z                     testing: bool = False) -> Optional[Dict[str, int]]
2025-08-19T16:11:40.2027819Z ```
2025-08-19T16:11:40.2027905Z 
2025-08-19T16:11:40.2027987Z Idempotent upsert for fees.
2025-08-19T16:11:40.2028130Z 
2025-08-19T16:11:40.2028283Z TESTING-only: returns counts for inserted/updated/skipped rows.
2025-08-19T16:11:40.2028631Z Assumes logical key (asin, marketplace, fee_type).
2025-08-19T16:11:40.2028951Z Only updates when one of the mutable fields changes.
2025-08-19T16:11:40.2029158Z 
2025-08-19T16:11:40.2029237Z <a id="emailer"></a>
2025-08-19T16:11:40.2029351Z 
2025-08-19T16:11:40.2029420Z # emailer
2025-08-19T16:11:40.2029517Z 
2025-08-19T16:11:40.2029623Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-19T16:11:40.2029804Z 
2025-08-19T16:11:40.2029894Z # emailer.tests.test\_import\_emailer
2025-08-19T16:11:40.2030065Z 
2025-08-19T16:11:40.2030152Z <a id="emailer.tests.test_smoke"></a>
2025-08-19T16:11:40.2030314Z 
2025-08-19T16:11:40.2030403Z # emailer.tests.test\_smoke
2025-08-19T16:11:40.2030540Z 
2025-08-19T16:11:40.2030620Z <a id="emailer.tests"></a>
2025-08-19T16:11:40.2030759Z 
2025-08-19T16:11:40.2030831Z # emailer.tests
2025-08-19T16:11:40.2030936Z 
2025-08-19T16:11:40.2031022Z <a id="emailer.generate_body"></a>
2025-08-19T16:11:40.2031184Z 
2025-08-19T16:11:40.2031265Z # emailer.generate\_body
2025-08-19T16:11:40.2031395Z 
2025-08-19T16:11:40.2031474Z <a id="llm_server"></a>
2025-08-19T16:11:40.2031595Z 
2025-08-19T16:11:40.2031790Z # llm\_server
2025-08-19T16:11:40.2031892Z 
2025-08-19T16:11:40.2031979Z <a id="llm_server.app"></a>
2025-08-19T16:11:40.2032113Z 
2025-08-19T16:11:40.2032182Z # llm\_server.app
2025-08-19T16:11:40.2032295Z 
