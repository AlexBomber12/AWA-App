2025-08-18T15:31:22.3233058Z ##[group]Run pydoc-markdown
2025-08-18T15:31:22.3233359Z [36;1mpydoc-markdown[0m
2025-08-18T15:31:22.3273002Z shell: /usr/bin/bash -e {0}
2025-08-18T15:31:22.3273276Z env:
2025-08-18T15:31:22.3273527Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T15:31:22.3273948Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-18T15:31:22.3274349Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T15:31:22.3274692Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T15:31:22.3275033Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-18T15:31:22.3275372Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-18T15:31:22.3275659Z ##[endgroup]
2025-08-18T15:31:22.7215228Z [WARNING - pydoc_markdown.main]: Unknown configuration options:
2025-08-18T15:31:22.7216011Z Unknown key(s) "{'output_directory'}" at:
2025-08-18T15:31:22.7216399Z In "pydoc-markdown.yml"
2025-08-18T15:31:22.7216713Z   $: TypeHint(pydoc_markdown.PydocMarkdown)
2025-08-18T15:31:22.7217273Z   .renderer: TypeHint(pydoc_markdown.interfaces.Renderer)
2025-08-18T15:31:22.7218090Z   ^: TypeHint(pydoc_markdown.contrib.renderers.markdown.MarkdownRenderer)
2025-08-18T15:31:22.7218507Z 
2025-08-18T15:31:23.0347918Z <a id="__init__"></a>
2025-08-18T15:31:23.0348290Z 
2025-08-18T15:31:23.0348423Z # \_\_init\_\_
2025-08-18T15:31:23.0348635Z 
2025-08-18T15:31:23.0348791Z <a id="api"></a>
2025-08-18T15:31:23.0349026Z 
2025-08-18T15:31:23.0349195Z # api
2025-08-18T15:31:23.0349403Z 
2025-08-18T15:31:23.0349582Z <a id="api.errors"></a>
2025-08-18T15:31:23.0349880Z 
2025-08-18T15:31:23.0350034Z # api.errors
2025-08-18T15:31:23.0350265Z 
2025-08-18T15:31:23.0350476Z <a id="api.tests.test_errors_json"></a>
2025-08-18T15:31:23.0350893Z 
2025-08-18T15:31:23.0351097Z # api.tests.test\_errors\_json
2025-08-18T15:31:23.0351423Z 
2025-08-18T15:31:23.0351603Z <a id="api.tests.test_llm"></a>
2025-08-18T15:31:23.0352000Z 
2025-08-18T15:31:23.0352179Z # api.tests.test\_llm
2025-08-18T15:31:23.0352573Z 
2025-08-18T15:31:23.0352813Z <a id="api.tests.test_cors"></a>
2025-08-18T15:31:23.0353270Z 
2025-08-18T15:31:23.0353495Z # api.tests.test\_cors
2025-08-18T15:31:23.0353871Z 
2025-08-18T15:31:23.0354121Z <a id="api.tests.test_imports"></a>
2025-08-18T15:31:23.0354643Z 
2025-08-18T15:31:23.0354885Z # api.tests.test\_imports
2025-08-18T15:31:23.0355309Z 
2025-08-18T15:31:23.0355597Z <a id="api.tests.test_rate_limit"></a>
2025-08-18T15:31:23.0356103Z 
2025-08-18T15:31:23.0356329Z # api.tests.test\_rate\_limit
2025-08-18T15:31:23.0356757Z 
2025-08-18T15:31:23.0357420Z <a id="api.tests.test_rate_limit.app"></a>
2025-08-18T15:31:23.0357926Z 
2025-08-18T15:31:23.0358051Z #### app
2025-08-18T15:31:23.0358216Z 
2025-08-18T15:31:23.0358333Z noqa: E402
2025-08-18T15:31:23.0358494Z 
2025-08-18T15:31:23.0358662Z <a id="api.tests.test_entrypoint"></a>
2025-08-18T15:31:23.0358963Z 
2025-08-18T15:31:23.0359104Z # api.tests.test\_entrypoint
2025-08-18T15:31:23.0359359Z 
2025-08-18T15:31:23.0359856Z <a id="api.tests.test_health"></a>
2025-08-18T15:31:23.0360082Z 
2025-08-18T15:31:23.0360188Z # api.tests.test\_health
2025-08-18T15:31:23.0360378Z 
2025-08-18T15:31:23.0360491Z <a id="api.logging_config"></a>
2025-08-18T15:31:23.0360669Z 
2025-08-18T15:31:23.0360760Z # api.logging\_config
2025-08-18T15:31:23.0360899Z 
2025-08-18T15:31:23.0360994Z <a id="api.migrations.env"></a>
2025-08-18T15:31:23.0361173Z 
2025-08-18T15:31:23.0361260Z # api.migrations.env
2025-08-18T15:31:23.0361399Z 
2025-08-18T15:31:23.0361543Z <a id="api.migrations.versions.0022_fix_roi_view"></a>
2025-08-18T15:31:23.0361802Z 
2025-08-18T15:31:23.0361927Z # api.migrations.versions.0022\_fix\_roi\_view
2025-08-18T15:31:23.0362153Z 
2025-08-18T15:31:23.0362290Z <a id="api.migrations.versions.0004_fee_cron"></a>
2025-08-18T15:31:23.0362522Z 
2025-08-18T15:31:23.0362632Z # api.migrations.versions.0004\_fee\_cron
2025-08-18T15:31:23.0362849Z 
2025-08-18T15:31:23.0363031Z <a id="api.migrations.versions.3e9d5c5aff2c_rename_fulf_fee"></a>
2025-08-18T15:31:23.0363542Z 
2025-08-18T15:31:23.0363707Z # api.migrations.versions.3e9d5c5aff2c\_rename\_fulf\_fee
2025-08-18T15:31:23.0363982Z 
2025-08-18T15:31:23.0364129Z <a id="api.migrations.versions.0003_vendor_prices"></a>
2025-08-18T15:31:23.0364374Z 
2025-08-18T15:31:23.0364509Z # api.migrations.versions.0003\_vendor\_prices
2025-08-18T15:31:23.0364737Z 
2025-08-18T15:31:23.0364876Z <a id="api.migrations.versions.0024_create_buybox"></a>
2025-08-18T15:31:23.0365125Z 
2025-08-18T15:31:23.0365246Z # api.migrations.versions.0024\_create\_buybox
2025-08-18T15:31:23.0365469Z 
2025-08-18T15:31:23.0365619Z <a id="api.migrations.versions.0002_create_roi_view"></a>
2025-08-18T15:31:23.0365867Z 
2025-08-18T15:31:23.0365993Z # api.migrations.versions.0002\_create\_roi\_view
2025-08-18T15:31:23.0366224Z 
2025-08-18T15:31:23.0366365Z <a id="api.migrations.versions.0006_fix_roi_views"></a>
2025-08-18T15:31:23.0366603Z 
2025-08-18T15:31:23.0366727Z # api.migrations.versions.0006\_fix\_roi\_views
2025-08-18T15:31:23.0366968Z 
2025-08-18T15:31:23.0367111Z <a id="api.migrations.versions.0020_unified_schema"></a>
2025-08-18T15:31:23.0367357Z 
2025-08-18T15:31:23.0367482Z # api.migrations.versions.0020\_unified\_schema
2025-08-18T15:31:23.0367823Z 
2025-08-18T15:31:23.0367985Z <a id="api.migrations.versions.0025_pr4_indexes_loadlog"></a>
2025-08-18T15:31:23.0368257Z 
2025-08-18T15:31:23.0368397Z # api.migrations.versions.0025\_pr4\_indexes\_loadlog
2025-08-18T15:31:23.0368638Z 
2025-08-18T15:31:23.0368779Z <a id="api.migrations.versions.0023_add_storage_fee"></a>
2025-08-18T15:31:23.0369036Z 
2025-08-18T15:31:23.0369163Z # api.migrations.versions.0023\_add\_storage\_fee
2025-08-18T15:31:23.0369391Z 
2025-08-18T15:31:23.0369563Z <a id="api.migrations.versions.0026_amazon_new_reports"></a>
2025-08-18T15:31:23.0369827Z 
2025-08-18T15:31:23.0369966Z # api.migrations.versions.0026\_amazon\_new\_reports
2025-08-18T15:31:23.0370180Z 
2025-08-18T15:31:23.0370290Z <a id="api.migrations.versions.0001_baseline"></a>
2025-08-18T15:31:23.0370492Z 
2025-08-18T15:31:23.0370587Z # api.migrations.versions.0001\_baseline
2025-08-18T15:31:23.0370766Z 
2025-08-18T15:31:23.0370857Z <a id="api.migrations.versions"></a>
2025-08-18T15:31:23.0371027Z 
2025-08-18T15:31:23.0371123Z # api.migrations.versions
2025-08-18T15:31:23.0371262Z 
2025-08-18T15:31:23.0371344Z <a id="api.migrations"></a>
2025-08-18T15:31:23.0371490Z 
2025-08-18T15:31:23.0371562Z # api.migrations
2025-08-18T15:31:23.0371671Z 
2025-08-18T15:31:23.0371741Z <a id="api.db"></a>
2025-08-18T15:31:23.0371863Z 
2025-08-18T15:31:23.0371926Z # api.db
2025-08-18T15:31:23.0372017Z 
2025-08-18T15:31:23.0372109Z <a id="api.routes.stats"></a>
2025-08-18T15:31:23.0372254Z 
2025-08-18T15:31:23.0372329Z # api.routes.stats
2025-08-18T15:31:23.0372445Z 
2025-08-18T15:31:23.0372535Z <a id="api.routes.stats.kpi"></a>
2025-08-18T15:31:23.0372692Z 
2025-08-18T15:31:23.0372755Z #### kpi
2025-08-18T15:31:23.0372851Z 
2025-08-18T15:31:23.0372919Z ```python
2025-08-18T15:31:23.0373097Z @router.get("/stats/kpi")
2025-08-18T15:31:23.0373484Z def kpi() -> List[Dict[str, int]]
2025-08-18T15:31:23.0373699Z ```
2025-08-18T15:31:23.0373864Z 
2025-08-18T15:31:23.0373945Z Return KPI metrics (mock).
2025-08-18T15:31:23.0374121Z 
2025-08-18T15:31:23.0374225Z <a id="api.routes.stats.roi_by_vendor"></a>
2025-08-18T15:31:23.0374408Z 
2025-08-18T15:31:23.0374485Z #### roi\_by\_vendor
2025-08-18T15:31:23.0374598Z 
2025-08-18T15:31:23.0374660Z ```python
2025-08-18T15:31:23.0374843Z @router.get("/stats/roi_by_vendor")
2025-08-18T15:31:23.0375102Z def roi_by_vendor() -> List[Dict[str, int]]
2025-08-18T15:31:23.0375336Z ```
2025-08-18T15:31:23.0375417Z 
2025-08-18T15:31:23.0375498Z Return ROI percent by vendor.
2025-08-18T15:31:23.0375645Z 
2025-08-18T15:31:23.0375743Z <a id="api.routes.stats.roi_trend"></a>
2025-08-18T15:31:23.0375914Z 
2025-08-18T15:31:23.0375985Z #### roi\_trend
2025-08-18T15:31:23.0376084Z 
2025-08-18T15:31:23.0376146Z ```python
2025-08-18T15:31:23.0376312Z @router.get("/stats/roi_trend")
2025-08-18T15:31:23.0376711Z def roi_trend() -> List[Dict[str, int | str]]
2025-08-18T15:31:23.0376949Z ```
2025-08-18T15:31:23.0377029Z 
2025-08-18T15:31:23.0377104Z Return 30-day ROI trend.
2025-08-18T15:31:23.0377248Z 
2025-08-18T15:31:23.0377325Z <a id="api.routes.roi"></a>
2025-08-18T15:31:23.0377461Z 
2025-08-18T15:31:23.0377642Z # api.routes.roi
2025-08-18T15:31:23.0377753Z 
2025-08-18T15:31:23.0377836Z <a id="api.routes.health"></a>
2025-08-18T15:31:23.0377984Z 
2025-08-18T15:31:23.0378055Z # api.routes.health
2025-08-18T15:31:23.0378163Z 
2025-08-18T15:31:23.0378253Z <a id="api.routes.health.MAX_SKEW"></a>
2025-08-18T15:31:23.0378425Z 
2025-08-18T15:31:23.0378488Z #### MAX\_SKEW
2025-08-18T15:31:23.0378585Z 
2025-08-18T15:31:23.0378653Z seconds
2025-08-18T15:31:23.0378737Z 
2025-08-18T15:31:23.0378827Z <a id="api.routes.health.health"></a>
2025-08-18T15:31:23.0378990Z 
2025-08-18T15:31:23.0379059Z #### health
2025-08-18T15:31:23.0379148Z 
2025-08-18T15:31:23.0379211Z ```python
2025-08-18T15:31:23.0379411Z @router.get("/health", include_in_schema=False)
2025-08-18T15:31:23.0379829Z async def health(session: AsyncSession = Depends(get_session)) -> JSONResponse
2025-08-18T15:31:23.0380178Z ```
2025-08-18T15:31:23.0380261Z 
2025-08-18T15:31:23.0380389Z Return 200 when DB reachable and clocks are in sync.
2025-08-18T15:31:23.0380596Z 
2025-08-18T15:31:23.0380689Z <a id="api.routes.repository"></a>
2025-08-18T15:31:23.0380860Z 
2025-08-18T15:31:23.0380939Z # api.routes.repository
2025-08-18T15:31:23.0381066Z 
2025-08-18T15:31:23.0381138Z <a id="api.routes"></a>
2025-08-18T15:31:23.0381259Z 
2025-08-18T15:31:23.0381324Z # api.routes
2025-08-18T15:31:23.0381422Z 
2025-08-18T15:31:23.0381505Z <a id="api.models.fee"></a>
2025-08-18T15:31:23.0381638Z 
2025-08-18T15:31:23.0381709Z # api.models.fee
2025-08-18T15:31:23.0381812Z 
2025-08-18T15:31:23.0381888Z <a id="api.models"></a>
2025-08-18T15:31:23.0382002Z 
2025-08-18T15:31:23.0382066Z # api.models
2025-08-18T15:31:23.0382167Z 
2025-08-18T15:31:23.0382248Z <a id="api.roi_repository"></a>
2025-08-18T15:31:23.0382401Z 
2025-08-18T15:31:23.0382478Z # api.roi\_repository
2025-08-18T15:31:23.0382595Z 
2025-08-18T15:31:23.0382664Z <a id="api.main"></a>
2025-08-18T15:31:23.0382775Z 
2025-08-18T15:31:23.0382846Z # api.main
2025-08-18T15:31:23.0382937Z 
2025-08-18T15:31:23.0383015Z <a id="api.main.ready"></a>
2025-08-18T15:31:23.0383151Z 
2025-08-18T15:31:23.0383215Z #### ready
2025-08-18T15:31:23.0383303Z 
2025-08-18T15:31:23.0383373Z ```python
2025-08-18T15:31:23.0383654Z @app.get("/ready", status_code=status.HTTP_200_OK, include_in_schema=False)
2025-08-18T15:31:23.0384105Z async def ready(session: AsyncSession = Depends(get_session)) -> dict[str,
2025-08-18T15:31:23.0384462Z                                                                       str]
2025-08-18T15:31:23.0384700Z ```
2025-08-18T15:31:23.0384781Z 
2025-08-18T15:31:23.0384877Z Return 200 only when migrations are at head.
2025-08-18T15:31:23.0385059Z 
2025-08-18T15:31:23.0385132Z <a id="api.config"></a>
2025-08-18T15:31:23.0385250Z 
2025-08-18T15:31:23.0385709Z # api.config
2025-08-18T15:31:23.0385854Z 
2025-08-18T15:31:23.0385920Z <a id="etl"></a>
2025-08-18T15:31:23.0386024Z 
2025-08-18T15:31:23.0386093Z # etl
2025-08-18T15:31:23.0386179Z 
2025-08-18T15:31:23.0386260Z <a id="etl.fba_fee_ingestor"></a>
2025-08-18T15:31:23.0386414Z 
2025-08-18T15:31:23.0386488Z # etl.fba\_fee\_ingestor
2025-08-18T15:31:23.0386611Z 
2025-08-18T15:31:23.0386693Z <a id="etl.sp_fees_ingestor"></a>
2025-08-18T15:31:23.0386844Z 
2025-08-18T15:31:23.0386917Z # etl.sp\_fees\_ingestor
2025-08-18T15:31:23.0387037Z 
2025-08-18T15:31:23.0387128Z <a id="etl.keepa_ingestor"></a>
2025-08-18T15:31:23.0387268Z 
2025-08-18T15:31:23.0387339Z # etl.keepa\_ingestor
2025-08-18T15:31:23.0387459Z 
2025-08-18T15:31:23.0387527Z <a id="etl.db"></a>
2025-08-18T15:31:23.0387739Z 
2025-08-18T15:31:23.0387804Z # etl.db
2025-08-18T15:31:23.0387901Z 
2025-08-18T15:31:23.0387984Z <a id="etl.dialects.schemas"></a>
2025-08-18T15:31:23.0388132Z 
2025-08-18T15:31:23.0388214Z # etl.dialects.schemas
2025-08-18T15:31:23.0388469Z 
2025-08-18T15:31:23.0388578Z <a id="etl.dialects.amazon_reimbursements"></a>
2025-08-18T15:31:23.0388765Z 
2025-08-18T15:31:23.0388866Z # etl.dialects.amazon\_reimbursements
2025-08-18T15:31:23.0389034Z 
2025-08-18T15:31:23.0389133Z <a id="etl.dialects.amazon_ads_sp_cost"></a>
2025-08-18T15:31:23.0389318Z 
2025-08-18T15:31:23.0389406Z # etl.dialects.amazon\_ads\_sp\_cost
2025-08-18T15:31:23.0389622Z 
2025-08-18T15:31:23.0389860Z <a id="etl.dialects.amazon_returns"></a>
2025-08-18T15:31:23.0390102Z 
2025-08-18T15:31:23.0390227Z # etl.dialects.amazon\_returns
2025-08-18T15:31:23.0390443Z 
2025-08-18T15:31:23.0390736Z <a id="etl.dialects.amazon_fee_preview"></a>
2025-08-18T15:31:23.0390916Z 
2025-08-18T15:31:23.0391003Z # etl.dialects.amazon\_fee\_preview
2025-08-18T15:31:23.0391168Z 
2025-08-18T15:31:23.0391277Z <a id="etl.dialects.amazon_inventory_ledger"></a>
2025-08-18T15:31:23.0391468Z 
2025-08-18T15:31:23.0391565Z # etl.dialects.amazon\_inventory\_ledger
2025-08-18T15:31:23.0391744Z 
2025-08-18T15:31:23.0391842Z <a id="etl.dialects.amazon_settlements"></a>
2025-08-18T15:31:23.0392015Z 
2025-08-18T15:31:23.0392107Z # etl.dialects.amazon\_settlements
2025-08-18T15:31:23.0392263Z 
2025-08-18T15:31:23.0392340Z <a id="etl.dialects"></a>
2025-08-18T15:31:23.0392474Z 
2025-08-18T15:31:23.0392543Z # etl.dialects
2025-08-18T15:31:23.0392644Z 
2025-08-18T15:31:23.0392715Z <a id="ingest"></a>
2025-08-18T15:31:23.0392823Z 
2025-08-18T15:31:23.0392883Z # ingest
2025-08-18T15:31:23.0392971Z 
2025-08-18T15:31:23.0393062Z <a id="ingest.maintenance"></a>
2025-08-18T15:31:23.0393206Z 
2025-08-18T15:31:23.0393279Z # ingest.maintenance
2025-08-18T15:31:23.0393398Z 
2025-08-18T15:31:23.0393477Z <a id="ingest.copy_loader"></a>
2025-08-18T15:31:23.0393616Z 
2025-08-18T15:31:23.0393686Z # ingest.copy\_loader
2025-08-18T15:31:23.0393810Z 
2025-08-18T15:31:23.0393913Z <a id="ingest.copy_loader.copy_df_via_temp"></a>
2025-08-18T15:31:23.0394096Z 
2025-08-18T15:31:23.0394177Z #### copy\_df\_via\_temp
2025-08-18T15:31:23.0394314Z 
2025-08-18T15:31:23.0394379Z ```python
2025-08-18T15:31:23.0394557Z def copy_df_via_temp(engine: Engine,
2025-08-18T15:31:23.0394795Z                      df: pd.DataFrame,
2025-08-18T15:31:23.0395030Z                      target_table: str,
2025-08-18T15:31:23.0395246Z                      *,
2025-08-18T15:31:23.0395462Z                      target_schema: Optional[str] = None,
2025-08-18T15:31:23.0395733Z                      columns: Sequence[str],
2025-08-18T15:31:23.0396003Z                      conflict_cols: Optional[Sequence[str]] = None,
2025-08-18T15:31:23.0396299Z                      analyze_after: bool = False,
2025-08-18T15:31:23.0396568Z                      connection: Any | None = None) -> int
2025-08-18T15:31:23.0396816Z ```
2025-08-18T15:31:23.0396901Z 
2025-08-18T15:31:23.0397060Z Bulk load *df* into *target_table* using COPY and a staging table.
2025-08-18T15:31:23.0397302Z 
2025-08-18T15:31:23.0397389Z <a id="ingest.tests.test_smoke"></a>
2025-08-18T15:31:23.0397809Z 
2025-08-18T15:31:23.0397898Z # ingest.tests.test\_smoke
2025-08-18T15:31:23.0398030Z 
2025-08-18T15:31:23.0398106Z <a id="ingest.tests"></a>
2025-08-18T15:31:23.0398241Z 
2025-08-18T15:31:23.0398310Z # ingest.tests
2025-08-18T15:31:23.0398413Z 
2025-08-18T15:31:23.0398499Z <a id="ingest.upload_router"></a>
2025-08-18T15:31:23.0398658Z 
2025-08-18T15:31:23.0398732Z # ingest.upload\_router
2025-08-18T15:31:23.0398853Z 
2025-08-18T15:31:23.0398941Z <a id="ingest.email_watcher"></a>
2025-08-18T15:31:23.0399086Z 
2025-08-18T15:31:23.0399158Z # ingest.email\_watcher
2025-08-18T15:31:23.0399281Z 
2025-08-18T15:31:23.0399368Z <a id="ingest.email_watcher.main"></a>
2025-08-18T15:31:23.0399527Z 
2025-08-18T15:31:23.0399590Z #### main
2025-08-18T15:31:23.0399685Z 
2025-08-18T15:31:23.0399750Z ```python
2025-08-18T15:31:23.0399920Z def main() -> dict[str, str]
2025-08-18T15:31:23.0400122Z ```
2025-08-18T15:31:23.0400204Z 
2025-08-18T15:31:23.0400351Z Upload CSV/XLSX attachments to MinIO and trigger ingestion.
2025-08-18T15:31:23.0400722Z 
2025-08-18T15:31:23.0400852Z Returns {"status": "success"} when processing completes.
2025-08-18T15:31:23.0401069Z 
2025-08-18T15:31:23.0401147Z <a id="ingest.tasks"></a>
2025-08-18T15:31:23.0401275Z 
2025-08-18T15:31:23.0401342Z # ingest.tasks
2025-08-18T15:31:23.0401454Z 
2025-08-18T15:31:23.0401555Z <a id="ingest.tasks.task_import_file"></a>
2025-08-18T15:31:23.0401731Z 
2025-08-18T15:31:23.0401809Z #### task\_import\_file
2025-08-18T15:31:23.0401926Z 
2025-08-18T15:31:23.0401988Z ```python
2025-08-18T15:31:23.0402206Z @celery_app.task(name="ingest.import_file", bind=True)
2025-08-18T15:31:23.0402486Z def task_import_file(self,
2025-08-18T15:31:23.0402691Z                      uri: str,
2025-08-18T15:31:23.0402908Z                      report_type: Optional[str] = None,
2025-08-18T15:31:23.0403183Z                      force: bool = False) -> Dict[str, Any]
2025-08-18T15:31:23.0403422Z ```
2025-08-18T15:31:23.0403504Z 
2025-08-18T15:31:23.0403641Z Import a file into Postgres using existing ETL pipeline.
2025-08-18T15:31:23.0403872Z 
2025-08-18T15:31:23.0403963Z <a id="ingest.celery_app"></a>
2025-08-18T15:31:23.0404105Z 
2025-08-18T15:31:23.0404177Z # ingest.celery\_app
2025-08-18T15:31:23.0404298Z 
2025-08-18T15:31:23.0404379Z <a id="ingest.ingest_router"></a>
2025-08-18T15:31:23.0404528Z 
2025-08-18T15:31:23.0404605Z # ingest.ingest\_router
2025-08-18T15:31:23.0404732Z 
2025-08-18T15:31:23.0404813Z <a id="logistics_etl"></a>
2025-08-18T15:31:23.0404941Z 
2025-08-18T15:31:23.0405006Z # logistics\_etl
2025-08-18T15:31:23.0405116Z 
2025-08-18T15:31:23.0405190Z Daily logistics ETL job.
2025-08-18T15:31:23.0405313Z 
2025-08-18T15:31:23.0405396Z <a id="logistics_etl.__main__"></a>
2025-08-18T15:31:23.0405555Z 
2025-08-18T15:31:23.0405633Z # logistics\_etl.\_\_main\_\_
2025-08-18T15:31:23.0405768Z 
2025-08-18T15:31:23.0405850Z <a id="logistics_etl.dsn"></a>
2025-08-18T15:31:23.0405987Z 
2025-08-18T15:31:23.0406056Z # logistics\_etl.dsn
2025-08-18T15:31:23.0406169Z 
2025-08-18T15:31:23.0406302Z Local DSN builder to avoid cross-service dependency.
2025-08-18T15:31:23.0406502Z 
2025-08-18T15:31:23.0406593Z <a id="logistics_etl.dsn.build_dsn"></a>
2025-08-18T15:31:23.0406765Z 
2025-08-18T15:31:23.0406829Z #### build\_dsn
2025-08-18T15:31:23.0406929Z 
2025-08-18T15:31:23.0406998Z ```python
2025-08-18T15:31:23.0407174Z def build_dsn(sync: bool = True) -> str
2025-08-18T15:31:23.0407402Z ```
2025-08-18T15:31:23.0407487Z 
2025-08-18T15:31:23.0407734Z Return a Postgres DSN assembled from environment variables.
2025-08-18T15:31:23.0407963Z 
2025-08-18T15:31:23.0408114Z Prefers explicit DSNs via ``PG_SYNC_DSN``/``PG_ASYNC_DSN`` or
2025-08-18T15:31:23.0408501Z ``DATABASE_URL``. Falls back to individual PG_* settings and raises an
2025-08-18T15:31:23.0408852Z error when any required variable is missing.
2025-08-18T15:31:23.0409029Z 
2025-08-18T15:31:23.0409128Z <a id="logistics_etl.tests.conftest"></a>
2025-08-18T15:31:23.0409300Z 
2025-08-18T15:31:23.0409386Z # logistics\_etl.tests.conftest
2025-08-18T15:31:23.0409674Z 
2025-08-18T15:31:23.0409779Z <a id="logistics_etl.tests.test_repository"></a>
2025-08-18T15:31:23.0409964Z 
2025-08-18T15:31:23.0410051Z # logistics\_etl.tests.test\_repository
2025-08-18T15:31:23.0410223Z 
2025-08-18T15:31:23.0410316Z <a id="logistics_etl.tests.test_cron"></a>
2025-08-18T15:31:23.0410485Z 
2025-08-18T15:31:23.0410575Z # logistics\_etl.tests.test\_cron
2025-08-18T15:31:23.0410724Z 
2025-08-18T15:31:23.0410823Z <a id="logistics_etl.tests.test_imports"></a>
2025-08-18T15:31:23.0411005Z 
2025-08-18T15:31:23.0411090Z # logistics\_etl.tests.test\_imports
2025-08-18T15:31:23.0411247Z 
2025-08-18T15:31:23.0411343Z <a id="logistics_etl.tests.test_smoke"></a>
2025-08-18T15:31:23.0411520Z 
2025-08-18T15:31:23.0411603Z # logistics\_etl.tests.test\_smoke
2025-08-18T15:31:23.0411756Z 
2025-08-18T15:31:23.0411858Z <a id="logistics_etl.tests.test_client"></a>
2025-08-18T15:31:23.0412028Z 
2025-08-18T15:31:23.0412114Z # logistics\_etl.tests.test\_client
2025-08-18T15:31:23.0412279Z 
2025-08-18T15:31:23.0412484Z <a id="logistics_etl.tests"></a>
2025-08-18T15:31:23.0412632Z 
2025-08-18T15:31:23.0412706Z # logistics\_etl.tests
2025-08-18T15:31:23.0412832Z 
2025-08-18T15:31:23.0412912Z <a id="logistics_etl.flow"></a>
2025-08-18T15:31:23.0413053Z 
2025-08-18T15:31:23.0413131Z # logistics\_etl.flow
2025-08-18T15:31:23.0413247Z 
2025-08-18T15:31:23.0413329Z <a id="logistics_etl.client"></a>
2025-08-18T15:31:23.0413476Z 
2025-08-18T15:31:23.0413555Z # logistics\_etl.client
2025-08-18T15:31:23.0413676Z 
2025-08-18T15:31:23.0413760Z <a id="logistics_etl.cron"></a>
2025-08-18T15:31:23.0413905Z 
2025-08-18T15:31:23.0413978Z # logistics\_etl.cron
2025-08-18T15:31:23.0414091Z 
2025-08-18T15:31:23.0414178Z <a id="logistics_etl.db"></a>
2025-08-18T15:31:23.0414315Z 
2025-08-18T15:31:23.0414383Z # logistics\_etl.db
2025-08-18T15:31:23.0414492Z 
2025-08-18T15:31:23.0414589Z <a id="logistics_etl.repository"></a>
2025-08-18T15:31:23.0414749Z 
2025-08-18T15:31:23.0414830Z # logistics\_etl.repository
2025-08-18T15:31:23.0414980Z 
2025-08-18T15:31:23.0415053Z <a id="alert_bot"></a>
2025-08-18T15:31:23.0415167Z 
2025-08-18T15:31:23.0415240Z # alert\_bot
2025-08-18T15:31:23.0415335Z 
2025-08-18T15:31:23.0415420Z <a id="alert_bot.tests.test_smoke"></a>
2025-08-18T15:31:23.0415618Z 
2025-08-18T15:31:23.0415703Z # alert\_bot.tests.test\_smoke
2025-08-18T15:31:23.0415841Z 
2025-08-18T15:31:23.0415921Z <a id="alert_bot.tests"></a>
2025-08-18T15:31:23.0416061Z 
2025-08-18T15:31:23.0416128Z # alert\_bot.tests
2025-08-18T15:31:23.0416234Z 
2025-08-18T15:31:23.0416313Z <a id="alert_bot.alert_bot"></a>
2025-08-18T15:31:23.0416458Z 
2025-08-18T15:31:23.0416532Z # alert\_bot.alert\_bot
2025-08-18T15:31:23.0416647Z 
2025-08-18T15:31:23.0416727Z <a id="alert_bot.rules"></a>
2025-08-18T15:31:23.0416856Z 
2025-08-18T15:31:23.0416939Z # alert\_bot.rules
2025-08-18T15:31:23.0417049Z 
2025-08-18T15:31:23.0417117Z <a id="common"></a>
2025-08-18T15:31:23.0417223Z 
2025-08-18T15:31:23.0417294Z # common
2025-08-18T15:31:23.0417384Z 
2025-08-18T15:31:23.0417470Z <a id="common.dsn"></a>
2025-08-18T15:31:23.0417690Z 
2025-08-18T15:31:23.0417758Z # common.dsn
2025-08-18T15:31:23.0417853Z 
2025-08-18T15:31:23.0417936Z <a id="common.dsn.build_dsn"></a>
2025-08-18T15:31:23.0418090Z 
2025-08-18T15:31:23.0418155Z #### build\_dsn
2025-08-18T15:31:23.0418254Z 
2025-08-18T15:31:23.0418325Z ```python
2025-08-18T15:31:23.0445287Z def build_dsn(sync: bool = True) -> str
2025-08-18T15:31:23.0445870Z ```
2025-08-18T15:31:23.0446067Z 
2025-08-18T15:31:23.0446348Z Return a Postgres DSN, validating required variables.
2025-08-18T15:31:23.0446789Z 
2025-08-18T15:31:23.0447184Z The function prefers explicit DSNs via ``PG_SYNC_DSN`` / ``PG_ASYNC_DSN`` or
2025-08-18T15:31:23.0448040Z ``DATABASE_URL``.  If those are absent it assembles a connection string from
2025-08-18T15:31:23.0448570Z ``PG_HOST`` and related variables and raises a helpful error when any are
2025-08-18T15:31:23.0448958Z missing.
2025-08-18T15:31:23.0449072Z 
2025-08-18T15:31:23.0449185Z <a id="common.models_vendor"></a>
2025-08-18T15:31:23.0449566Z 
2025-08-18T15:31:23.0449643Z # common.models\_vendor
2025-08-18T15:31:23.0449779Z 
2025-08-18T15:31:23.0449873Z <a id="common.models_vendor.Vendor"></a>
2025-08-18T15:31:23.0450043Z 
2025-08-18T15:31:23.0450116Z ## Vendor Objects
2025-08-18T15:31:23.0450224Z 
2025-08-18T15:31:23.0450287Z ```python
2025-08-18T15:31:23.0450450Z class Vendor(Base)
2025-08-18T15:31:23.0450615Z ```
2025-08-18T15:31:23.0450704Z 
2025-08-18T15:31:23.0450784Z Vendor of inventory items.
2025-08-18T15:31:23.0450918Z 
2025-08-18T15:31:23.0451023Z <a id="common.models_vendor.VendorPrice"></a>
2025-08-18T15:31:23.0451214Z 
2025-08-18T15:31:23.0451288Z ## VendorPrice Objects
2025-08-18T15:31:23.0451409Z 
2025-08-18T15:31:23.0451477Z ```python
2025-08-18T15:31:23.0451634Z class VendorPrice(Base)
2025-08-18T15:31:23.0451815Z ```
2025-08-18T15:31:23.0451897Z 
2025-08-18T15:31:23.0452001Z Association table linking vendors to pricing.
2025-08-18T15:31:23.0452196Z 
2025-08-18T15:31:23.0452271Z <a id="common.db_url"></a>
2025-08-18T15:31:23.0452530Z 
2025-08-18T15:31:23.0452596Z # common.db\_url
2025-08-18T15:31:23.0452705Z 
2025-08-18T15:31:23.0452790Z <a id="common.db_url.build_url"></a>
2025-08-18T15:31:23.0452949Z 
2025-08-18T15:31:23.0453022Z #### build\_url
2025-08-18T15:31:23.0453123Z 
2025-08-18T15:31:23.0453183Z ```python
2025-08-18T15:31:23.0453364Z def build_url(async_: bool = True) -> str
2025-08-18T15:31:23.0453590Z ```
2025-08-18T15:31:23.0453677Z 
2025-08-18T15:31:23.0453777Z Return Postgres DSN from env or PG_* parts.
2025-08-18T15:31:23.0453956Z 
2025-08-18T15:31:23.0454034Z <a id="common.keepa"></a>
2025-08-18T15:31:23.0454172Z 
2025-08-18T15:31:23.0454238Z # common.keepa
2025-08-18T15:31:23.0454340Z 
2025-08-18T15:31:23.0454419Z <a id="common.llm"></a>
2025-08-18T15:31:23.0454537Z 
2025-08-18T15:31:23.0454604Z # common.llm
2025-08-18T15:31:23.0454711Z 
2025-08-18T15:31:23.0454790Z <a id="common.settings"></a>
2025-08-18T15:31:23.0454929Z 
2025-08-18T15:31:23.0454999Z # common.settings
2025-08-18T15:31:23.0455121Z 
2025-08-18T15:31:23.0455192Z <a id="common.db"></a>
2025-08-18T15:31:23.0455309Z 
2025-08-18T15:31:23.0455376Z # common.db
2025-08-18T15:31:23.0455465Z 
2025-08-18T15:31:23.0455558Z <a id="common.db.build_sqlalchemy_url"></a>
2025-08-18T15:31:23.0455733Z 
2025-08-18T15:31:23.0455816Z #### build\_sqlalchemy\_url
2025-08-18T15:31:23.0455950Z 
2025-08-18T15:31:23.0456016Z ```python
2025-08-18T15:31:23.0456198Z def build_sqlalchemy_url() -> str
2025-08-18T15:31:23.0456405Z ```
2025-08-18T15:31:23.0456495Z 
2025-08-18T15:31:23.0456590Z Return Postgres URL for SQLAlchemy engines.
2025-08-18T15:31:23.0456764Z 
2025-08-18T15:31:23.0456861Z <a id="common.db.build_asyncpg_dsn"></a>
2025-08-18T15:31:23.0457032Z 
2025-08-18T15:31:23.0457106Z #### build\_asyncpg\_dsn
2025-08-18T15:31:23.0457239Z 
2025-08-18T15:31:23.0457303Z ```python
2025-08-18T15:31:23.0457474Z def build_asyncpg_dsn() -> str
2025-08-18T15:31:23.0457782Z ```
2025-08-18T15:31:23.0457866Z 
2025-08-18T15:31:23.0457998Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-18T15:31:23.0458234Z 
2025-08-18T15:31:23.0458320Z <a id="common.db.refresh_mvs"></a>
2025-08-18T15:31:23.0458475Z 
2025-08-18T15:31:23.0458546Z #### refresh\_mvs
2025-08-18T15:31:23.0458652Z 
2025-08-18T15:31:23.0458713Z ```python
2025-08-18T15:31:23.0458917Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-18T15:31:23.0459172Z ```
2025-08-18T15:31:23.0459261Z 
2025-08-18T15:31:23.0459398Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-18T15:31:23.0459617Z 
2025-08-18T15:31:23.0459697Z <a id="common.config"></a>
2025-08-18T15:31:23.0459827Z 
2025-08-18T15:31:23.0459895Z # common.config
2025-08-18T15:31:23.0459998Z 
2025-08-18T15:31:23.0460079Z <a id="common.base"></a>
2025-08-18T15:31:23.0460201Z 
2025-08-18T15:31:23.0460265Z # common.base
2025-08-18T15:31:23.0460368Z 
2025-08-18T15:31:23.0460449Z <a id="common.base.Base"></a>
2025-08-18T15:31:23.0460590Z 
2025-08-18T15:31:23.0460654Z ## Base Objects
2025-08-18T15:31:23.0460890Z 
2025-08-18T15:31:23.0460953Z ```python
2025-08-18T15:31:23.0461121Z class Base(DeclarativeBase)
2025-08-18T15:31:23.0461318Z ```
2025-08-18T15:31:23.0461402Z 
2025-08-18T15:31:23.0461492Z Base class for SQLAlchemy models.
2025-08-18T15:31:23.0461645Z 
2025-08-18T15:31:23.0461718Z <a id="repricer"></a>
2025-08-18T15:31:23.0461842Z 
2025-08-18T15:31:23.0461906Z # repricer
2025-08-18T15:31:23.0461997Z 
2025-08-18T15:31:23.0462084Z <a id="repricer.app.schemas"></a>
2025-08-18T15:31:23.0462241Z 
2025-08-18T15:31:23.0462318Z # repricer.app.schemas
2025-08-18T15:31:23.0462438Z 
2025-08-18T15:31:23.0462526Z <a id="repricer.app.deps"></a>
2025-08-18T15:31:23.0462671Z 
2025-08-18T15:31:23.0462744Z # repricer.app.deps
2025-08-18T15:31:23.0462863Z 
2025-08-18T15:31:23.0462979Z Placeholder module for Keepa / SP-API clients.
2025-08-18T15:31:23.0463168Z 
2025-08-18T15:31:23.0463252Z <a id="repricer.app.logic"></a>
2025-08-18T15:31:23.0463403Z 
2025-08-18T15:31:23.0463479Z # repricer.app.logic
2025-08-18T15:31:23.0463717Z 
2025-08-18T15:31:23.0463822Z <a id="repricer.app.logic.MIN_MARGIN"></a>
2025-08-18T15:31:23.0464003Z 
2025-08-18T15:31:23.0464068Z #### MIN\_MARGIN
2025-08-18T15:31:23.0464177Z 
2025-08-18T15:31:23.0464239Z 15 % ROI
2025-08-18T15:31:23.0464327Z 
2025-08-18T15:31:23.0464432Z <a id="repricer.app.logic.compute_price"></a>
2025-08-18T15:31:23.0464627Z 
2025-08-18T15:31:23.0464696Z #### compute\_price
2025-08-18T15:31:23.0464802Z 
2025-08-18T15:31:23.0464870Z ```python
2025-08-18T15:31:23.0465117Z def compute_price(asin: str, cost: Decimal, fees: Decimal) -> Decimal
2025-08-18T15:31:23.0465426Z ```
2025-08-18T15:31:23.0465508Z 
2025-08-18T15:31:23.0465616Z Toy algorithm: ensure 15 % ROI and round to cents.
2025-08-18T15:31:23.0465902Z Replace with real competitive logic later.
2025-08-18T15:31:23.0466074Z 
2025-08-18T15:31:23.0466155Z <a id="repricer.app.main"></a>
2025-08-18T15:31:23.0466304Z 
2025-08-18T15:31:23.0466374Z # repricer.app.main
2025-08-18T15:31:23.0466482Z 
2025-08-18T15:31:23.0466564Z <a id="repricer.app"></a>
2025-08-18T15:31:23.0466704Z 
2025-08-18T15:31:23.0466771Z # repricer.app
2025-08-18T15:31:23.0466878Z 
2025-08-18T15:31:23.0466971Z <a id="repricer.tests.test_imports"></a>
2025-08-18T15:31:23.0467142Z 
2025-08-18T15:31:23.0467223Z # repricer.tests.test\_imports
2025-08-18T15:31:23.0467375Z 
2025-08-18T15:31:23.0467465Z <a id="repricer.tests.test_smoke"></a>
2025-08-18T15:31:23.0467728Z 
2025-08-18T15:31:23.0467820Z # repricer.tests.test\_smoke
2025-08-18T15:31:23.0467966Z 
2025-08-18T15:31:23.0468048Z <a id="repricer.tests"></a>
2025-08-18T15:31:23.0468188Z 
2025-08-18T15:31:23.0468256Z # repricer.tests
2025-08-18T15:31:23.0468365Z 
2025-08-18T15:31:23.0468432Z <a id="db"></a>
2025-08-18T15:31:23.0468540Z 
2025-08-18T15:31:23.0468603Z # db
2025-08-18T15:31:23.0468690Z 
2025-08-18T15:31:23.0468771Z <a id="db.utils.views"></a>
2025-08-18T15:31:23.0468902Z 
2025-08-18T15:31:23.0468971Z # db.utils.views
2025-08-18T15:31:23.0469074Z 
2025-08-18T15:31:23.0469208Z <a id="db.utils.views.replace_view"></a>
2025-08-18T15:31:23.0469397Z 
2025-08-18T15:31:23.0469466Z #### replace\_view
2025-08-18T15:31:23.0469574Z 
2025-08-18T15:31:23.0469641Z ```python
2025-08-18T15:31:23.0469845Z def replace_view(name: str, new_sql: str) -> None
2025-08-18T15:31:23.0470094Z ```
2025-08-18T15:31:23.0470178Z 
2025-08-18T15:31:23.0470268Z Drop and recreate a SQL view atomically.
2025-08-18T15:31:23.0470434Z 
2025-08-18T15:31:23.0470511Z <a id="db.utils"></a>
2025-08-18T15:31:23.0470627Z 
2025-08-18T15:31:23.0470690Z # db.utils
2025-08-18T15:31:23.0470787Z 
2025-08-18T15:31:23.0470869Z <a id="price_importer"></a>
2025-08-18T15:31:23.0471002Z 
2025-08-18T15:31:23.0471069Z # price\_importer
2025-08-18T15:31:23.0471181Z 
2025-08-18T15:31:23.0471285Z <a id="price_importer.services_common.dsn"></a>
2025-08-18T15:31:23.0471474Z 
2025-08-18T15:31:23.0471574Z # price\_importer.services\_common.dsn
2025-08-18T15:31:23.0471739Z 
2025-08-18T15:31:23.0471868Z <a id="price_importer.services_common.dsn.build_dsn"></a>
2025-08-18T15:31:23.0472214Z 
2025-08-18T15:31:23.0472278Z #### build\_dsn
2025-08-18T15:31:23.0472380Z 
2025-08-18T15:31:23.0472442Z ```python
2025-08-18T15:31:23.0472622Z def build_dsn(sync: bool = True) -> str
2025-08-18T15:31:23.0472846Z ```
2025-08-18T15:31:23.0472929Z 
2025-08-18T15:31:23.0472996Z Return safe DSN.
2025-08-18T15:31:23.0473101Z 
2025-08-18T15:31:23.0473459Z sync=True → SQLAlchemy (+psycopg) else plain asyncpg.
2025-08-18T15:31:23.0473666Z 
2025-08-18T15:31:23.0473796Z <a id="price_importer.services_common.models_vendor"></a>
2025-08-18T15:31:23.0474009Z 
2025-08-18T15:31:23.0474122Z # price\_importer.services\_common.models\_vendor
2025-08-18T15:31:23.0474316Z 
2025-08-18T15:31:23.0474430Z <a id="price_importer.services_common.db_url"></a>
2025-08-18T15:31:23.0474617Z 
2025-08-18T15:31:23.0474712Z # price\_importer.services\_common.db\_url
2025-08-18T15:31:23.0474882Z 
2025-08-18T15:31:23.0475022Z <a id="price_importer.services_common.db_url.build_url"></a>
2025-08-18T15:31:23.0475238Z 
2025-08-18T15:31:23.0475441Z #### build\_url
2025-08-18T15:31:23.0475550Z 
2025-08-18T15:31:23.0475615Z ```python
2025-08-18T15:31:23.0475787Z def build_url(async_: bool = True) -> str
2025-08-18T15:31:23.0476018Z ```
2025-08-18T15:31:23.0476103Z 
2025-08-18T15:31:23.0476208Z Return Postgres DSN from env or PG_* parts.
2025-08-18T15:31:23.0476384Z 
2025-08-18T15:31:23.0476493Z <a id="price_importer.services_common.keepa"></a>
2025-08-18T15:31:23.0476687Z 
2025-08-18T15:31:23.0476780Z # price\_importer.services\_common.keepa
2025-08-18T15:31:23.0476949Z 
2025-08-18T15:31:23.0477050Z <a id="price_importer.services_common.llm"></a>
2025-08-18T15:31:23.0477236Z 
2025-08-18T15:31:23.0477327Z # price\_importer.services\_common.llm
2025-08-18T15:31:23.0477488Z 
2025-08-18T15:31:23.0477717Z <a id="price_importer.services_common.settings"></a>
2025-08-18T15:31:23.0477914Z 
2025-08-18T15:31:23.0478008Z # price\_importer.services\_common.settings
2025-08-18T15:31:23.0478201Z 
2025-08-18T15:31:23.0478303Z <a id="price_importer.services_common.db"></a>
2025-08-18T15:31:23.0478492Z 
2025-08-18T15:31:23.0478582Z # price\_importer.services\_common.db
2025-08-18T15:31:23.0478750Z 
2025-08-18T15:31:23.0478912Z <a id="price_importer.services_common.db.build_sqlalchemy_url"></a>
2025-08-18T15:31:23.0479154Z 
2025-08-18T15:31:23.0479236Z #### build\_sqlalchemy\_url
2025-08-18T15:31:23.0479372Z 
2025-08-18T15:31:23.0479435Z ```python
2025-08-18T15:31:23.0479614Z def build_sqlalchemy_url() -> str
2025-08-18T15:31:23.0479827Z ```
2025-08-18T15:31:23.0479916Z 
2025-08-18T15:31:23.0480012Z Return Postgres URL for SQLAlchemy engines.
2025-08-18T15:31:23.0480188Z 
2025-08-18T15:31:23.0480344Z <a id="price_importer.services_common.db.build_asyncpg_dsn"></a>
2025-08-18T15:31:23.0480574Z 
2025-08-18T15:31:23.0480650Z #### build\_asyncpg\_dsn
2025-08-18T15:31:23.0480776Z 
2025-08-18T15:31:23.0480850Z ```python
2025-08-18T15:31:23.0481018Z def build_asyncpg_dsn() -> str
2025-08-18T15:31:23.0481224Z ```
2025-08-18T15:31:23.0481306Z 
2025-08-18T15:31:23.0481439Z Return DSN suitable for asyncpg (without driver suffix).
2025-08-18T15:31:23.0481663Z 
2025-08-18T15:31:23.0481796Z <a id="price_importer.services_common.db.refresh_mvs"></a>
2025-08-18T15:31:23.0482010Z 
2025-08-18T15:31:23.0482091Z #### refresh\_mvs
2025-08-18T15:31:23.0482198Z 
2025-08-18T15:31:23.0482263Z ```python
2025-08-18T15:31:23.0482465Z def refresh_mvs(conn: Engine | Connection) -> None
2025-08-18T15:31:23.0482711Z ```
2025-08-18T15:31:23.0482799Z 
2025-08-18T15:31:23.0482935Z Refresh materialized views, using CONCURRENTLY when safe.
2025-08-18T15:31:23.0483149Z 
2025-08-18T15:31:23.0483252Z <a id="price_importer.services_common"></a>
2025-08-18T15:31:23.0483427Z 
2025-08-18T15:31:23.0483517Z # price\_importer.services\_common
2025-08-18T15:31:23.0483672Z 
2025-08-18T15:31:23.0483786Z <a id="price_importer.services_common.base"></a>
2025-08-18T15:31:23.0483973Z 
2025-08-18T15:31:23.0484063Z # price\_importer.services\_common.base
2025-08-18T15:31:23.0484238Z 
2025-08-18T15:31:23.0484329Z <a id="price_importer.normaliser"></a>
2025-08-18T15:31:23.0484625Z 
2025-08-18T15:31:23.0484717Z # price\_importer.normaliser
2025-08-18T15:31:23.0484859Z 
2025-08-18T15:31:23.0484962Z <a id="price_importer.common.models_vendor"></a>
2025-08-18T15:31:23.0485148Z 
2025-08-18T15:31:23.0485241Z # price\_importer.common.models\_vendor
2025-08-18T15:31:23.0485403Z 
2025-08-18T15:31:23.0485499Z <a id="price_importer.common.db_url"></a>
2025-08-18T15:31:23.0485677Z 
2025-08-18T15:31:23.0485761Z # price\_importer.common.db\_url
2025-08-18T15:31:23.0485911Z 
2025-08-18T15:31:23.0486023Z <a id="price_importer.common.db_url.make_dsn"></a>
2025-08-18T15:31:23.0486209Z 
2025-08-18T15:31:23.0486273Z #### make\_dsn
2025-08-18T15:31:23.0486375Z 
2025-08-18T15:31:23.0486444Z ```python
2025-08-18T15:31:23.0486617Z def make_dsn(async_: bool = False) -> str
2025-08-18T15:31:23.0486846Z ```
2025-08-18T15:31:23.0486929Z 
2025-08-18T15:31:23.0487052Z Return DSN built from either PG_* or POSTGRES_* vars.
2025-08-18T15:31:23.0487261Z 
2025-08-18T15:31:23.0487490Z <a id="price_importer.common.db_url.build_url"></a>
2025-08-18T15:31:23.0487811Z 
2025-08-18T15:31:23.0487883Z #### build\_url
2025-08-18T15:31:23.0487983Z 
2025-08-18T15:31:23.0488045Z ```python
2025-08-18T15:31:23.0488221Z def build_url(async_: bool = False) -> str
2025-08-18T15:31:23.0488447Z ```
2025-08-18T15:31:23.0488534Z 
2025-08-18T15:31:23.0488656Z Return Postgres DSN built from environment variables.
2025-08-18T15:31:23.0488856Z 
2025-08-18T15:31:23.0488942Z <a id="price_importer.common"></a>
2025-08-18T15:31:23.0489105Z 
2025-08-18T15:31:23.0489183Z # price\_importer.common
2025-08-18T15:31:23.0489321Z 
2025-08-18T15:31:23.0489421Z <a id="price_importer.common.base"></a>
2025-08-18T15:31:23.0489592Z 
2025-08-18T15:31:23.0489678Z # price\_importer.common.base
2025-08-18T15:31:23.0489830Z 
2025-08-18T15:31:23.0489928Z <a id="price_importer.tests.conftest"></a>
2025-08-18T15:31:23.0490104Z 
2025-08-18T15:31:23.0490191Z # price\_importer.tests.conftest
2025-08-18T15:31:23.0490357Z 
2025-08-18T15:31:23.0490464Z <a id="price_importer.tests.test_reader"></a>
2025-08-18T15:31:23.0490643Z 
2025-08-18T15:31:23.0490742Z # price\_importer.tests.test\_reader
2025-08-18T15:31:23.0490902Z 
2025-08-18T15:31:23.0491004Z <a id="price_importer.tests.test_imports"></a>
2025-08-18T15:31:23.0491189Z 
2025-08-18T15:31:23.0491278Z # price\_importer.tests.test\_imports
2025-08-18T15:31:23.0491438Z 
2025-08-18T15:31:23.0491535Z <a id="price_importer.tests.test_smoke"></a>
2025-08-18T15:31:23.0491719Z 
2025-08-18T15:31:23.0491803Z # price\_importer.tests.test\_smoke
2025-08-18T15:31:23.0491970Z 
2025-08-18T15:31:23.0492086Z <a id="price_importer.tests.test_normaliser"></a>
2025-08-18T15:31:23.0492275Z 
2025-08-18T15:31:23.0492368Z # price\_importer.tests.test\_normaliser
2025-08-18T15:31:23.0492545Z 
2025-08-18T15:31:23.0492629Z <a id="price_importer.tests"></a>
2025-08-18T15:31:23.0492781Z 
2025-08-18T15:31:23.0492858Z # price\_importer.tests
2025-08-18T15:31:23.0492994Z 
2025-08-18T15:31:23.0493079Z <a id="price_importer.reader"></a>
2025-08-18T15:31:23.0493242Z 
2025-08-18T15:31:23.0493326Z # price\_importer.reader
2025-08-18T15:31:23.0493452Z 
2025-08-18T15:31:23.0493543Z <a id="price_importer.repository"></a>
2025-08-18T15:31:23.0493718Z 
2025-08-18T15:31:23.0493801Z # price\_importer.repository
2025-08-18T15:31:23.0493941Z 
2025-08-18T15:31:23.0494026Z <a id="price_importer.import"></a>
2025-08-18T15:31:23.0494185Z 
2025-08-18T15:31:23.0494262Z # price\_importer.import
2025-08-18T15:31:23.0494386Z 
2025-08-18T15:31:23.0494464Z <a id="fees_h10"></a>
2025-08-18T15:31:23.0494613Z 
2025-08-18T15:31:23.0494680Z # fees\_h10
2025-08-18T15:31:23.0494778Z 
2025-08-18T15:31:23.0494852Z <a id="fees_h10.worker"></a>
2025-08-18T15:31:23.0494985Z 
2025-08-18T15:31:23.0495051Z # fees\_h10.worker
2025-08-18T15:31:23.0495164Z 
2025-08-18T15:31:23.0495261Z <a id="fees_h10.worker.list_active_asins"></a>
2025-08-18T15:31:23.0495439Z 
2025-08-18T15:31:23.0495520Z #### list\_active\_asins
2025-08-18T15:31:23.0495638Z 
2025-08-18T15:31:23.0495833Z ```python
2025-08-18T15:31:23.0496011Z def list_active_asins() -> list[str]
2025-08-18T15:31:23.0496223Z ```
2025-08-18T15:31:23.0496309Z 
2025-08-18T15:31:23.0496422Z Return known ASINs or an empty list if unavailable.
2025-08-18T15:31:23.0496616Z 
2025-08-18T15:31:23.0496699Z <a id="fees_h10.tests.test_smoke"></a>
2025-08-18T15:31:23.0496862Z 
2025-08-18T15:31:23.0496941Z # fees\_h10.tests.test\_smoke
2025-08-18T15:31:23.0497076Z 
2025-08-18T15:31:23.0497157Z <a id="fees_h10.tests"></a>
2025-08-18T15:31:23.0497288Z 
2025-08-18T15:31:23.0497353Z # fees\_h10.tests
2025-08-18T15:31:23.0497463Z 
2025-08-18T15:31:23.0497641Z <a id="fees_h10.client"></a>
2025-08-18T15:31:23.0497776Z 
2025-08-18T15:31:23.0497843Z # fees\_h10.client
2025-08-18T15:31:23.0497952Z 
2025-08-18T15:31:23.0498032Z <a id="fees_h10.repository"></a>
2025-08-18T15:31:23.0498176Z 
2025-08-18T15:31:23.0498252Z # fees\_h10.repository
2025-08-18T15:31:23.0498368Z 
2025-08-18T15:31:23.0498437Z <a id="emailer"></a>
2025-08-18T15:31:23.0498671Z 
2025-08-18T15:31:23.0498740Z # emailer
2025-08-18T15:31:23.0498830Z 
2025-08-18T15:31:23.0498930Z <a id="emailer.tests.test_import_emailer"></a>
2025-08-18T15:31:23.0499118Z 
2025-08-18T15:31:23.0499208Z # emailer.tests.test\_import\_emailer
2025-08-18T15:31:23.0499368Z 
2025-08-18T15:31:23.0499462Z <a id="emailer.tests.test_smoke"></a>
2025-08-18T15:31:23.0499618Z 
2025-08-18T15:31:23.0499698Z # emailer.tests.test\_smoke
2025-08-18T15:31:23.0499832Z 
2025-08-18T15:31:23.0499914Z <a id="emailer.tests"></a>
2025-08-18T15:31:23.0500045Z 
2025-08-18T15:31:23.0500115Z # emailer.tests
2025-08-18T15:31:23.0500229Z 
2025-08-18T15:31:23.0500312Z <a id="emailer.generate_body"></a>
2025-08-18T15:31:23.0500464Z 
2025-08-18T15:31:23.0500545Z # emailer.generate\_body
2025-08-18T15:31:23.0500670Z 
2025-08-18T15:31:23.0500741Z <a id="llm_server"></a>
2025-08-18T15:31:23.0500859Z 
2025-08-18T15:31:23.0500930Z # llm\_server
2025-08-18T15:31:23.0501025Z 
2025-08-18T15:31:23.0501104Z <a id="llm_server.app"></a>
2025-08-18T15:31:23.0501253Z 
2025-08-18T15:31:23.0501320Z # llm\_server.app
2025-08-18T15:31:23.0501426Z 
