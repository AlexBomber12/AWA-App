2025-08-19T20:11:05.1250363Z ##[group]Run pytest -q --cov=services
2025-08-19T20:11:05.1250956Z [36;1mpytest -q --cov=services[0m
2025-08-19T20:11:05.1298550Z shell: /usr/bin/bash -e {0}
2025-08-19T20:11:05.1298816Z env:
2025-08-19T20:11:05.1299040Z   REDIS_URL: redis://localhost:6379/0
2025-08-19T20:11:05.1299323Z   RATE_LIMIT_DEFAULT: 100/minute
2025-08-19T20:11:05.1299569Z   TRUST_X_FORWARDED: 1
2025-08-19T20:11:05.1299794Z   PG_USER: postgres
2025-08-19T20:11:05.1300004Z   PG_PASSWORD: pass
2025-08-19T20:11:05.1300203Z   PG_DATABASE: awa
2025-08-19T20:11:05.1300401Z   PG_HOST: localhost
2025-08-19T20:11:05.1300601Z   PG_PORT: 5432
2025-08-19T20:11:05.1301044Z   PG_SYNC_DSN: ***localhost:5432/awa
2025-08-19T20:11:05.1301465Z   PG_ASYNC_DSN: ***localhost:5432/awa
2025-08-19T20:11:05.1301885Z   DATABASE_URL: ***localhost:5432/awa
2025-08-19T20:11:05.1302163Z   DATA_DIR: /home/runner/work/_temp/awa-data
2025-08-19T20:11:05.1302431Z   ENABLE_LIVE: 0
2025-08-19T20:11:05.1302621Z   TESTING: 1
2025-08-19T20:11:05.1302880Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:11:05.1303336Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-08-19T20:11:05.1303735Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:11:05.1304097Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:11:05.1304464Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:11:05.1304862Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-08-19T20:11:05.1305223Z   POSTGRES_USER: postgres
2025-08-19T20:11:05.1305449Z   POSTGRES_PASSWORD: pass
2025-08-19T20:11:05.1305663Z   POSTGRES_DB: awa
2025-08-19T20:11:05.1305856Z   LLM_PROVIDER: lan
2025-08-19T20:11:05.1306077Z   LLM_BASE_URL: http://localhost:8000
2025-08-19T20:11:05.1306337Z ##[endgroup]
2025-08-19T20:11:38.4174682Z ........s.............................sssssss........................... [ 43%]
2025-08-19T20:12:11.3564662Z ..........................F............................................. [ 86%]
2025-08-19T20:12:12.1960096Z ......................                                                   [100%]
2025-08-19T20:12:12.1961066Z =================================== FAILURES ===================================
2025-08-19T20:12:12.1961926Z _________________________________ test_offline _________________________________
2025-08-19T20:12:12.1962366Z 
2025-08-19T20:12:12.1962889Z self = <sqlalchemy.engine.base.Connection object at 0x7fa84468c920>
2025-08-19T20:12:12.1963992Z dialect = <sqlalchemy.dialects.postgresql.psycopg.PGDialect_psycopg object at 0x7fa84468c830>
2025-08-19T20:12:12.1965252Z context = <sqlalchemy.dialects.postgresql.psycopg.PGExecutionContext_psycopg object at 0x7fa8478b1ac0>
2025-08-19T20:12:12.1966567Z statement = <sqlalchemy.dialects.postgresql.psycopg.PGCompiler_psycopg object at 0x7fa84468fec0>
2025-08-19T20:12:12.1967742Z parameters = [{'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}]
2025-08-19T20:12:12.1968542Z 
2025-08-19T20:12:12.1968728Z     def _exec_single_context(
2025-08-19T20:12:12.1969117Z         self,
2025-08-19T20:12:12.1969449Z         dialect: Dialect,
2025-08-19T20:12:12.1969884Z         context: ExecutionContext,
2025-08-19T20:12:12.1970373Z         statement: Union[str, Compiled],
2025-08-19T20:12:12.1971031Z         parameters: Optional[_AnyMultiExecuteParams],
2025-08-19T20:12:12.1971584Z     ) -> CursorResult[Any]:
2025-08-19T20:12:12.1972611Z         """continue the _execute_context() method for a single DBAPI
2025-08-19T20:12:12.1973349Z         cursor.execute() or cursor.executemany() call.
2025-08-19T20:12:12.1973863Z     
2025-08-19T20:12:12.1974166Z         """
2025-08-19T20:12:12.1974679Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-08-19T20:12:12.1975436Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-08-19T20:12:12.1975973Z     
2025-08-19T20:12:12.1976327Z             if generic_setinputsizes:
2025-08-19T20:12:12.1976720Z                 try:
2025-08-19T20:12:12.1977466Z                     dialect.do_set_input_sizes(
2025-08-19T20:12:12.1978241Z                         context.cursor, generic_setinputsizes, context
2025-08-19T20:12:12.1978730Z                     )
2025-08-19T20:12:12.1979140Z                 except BaseException as e:
2025-08-19T20:12:12.1979652Z                     self._handle_dbapi_exception(
2025-08-19T20:12:12.1980237Z                         e, str(statement), parameters, None, context
2025-08-19T20:12:12.1980702Z                     )
2025-08-19T20:12:12.1981001Z     
2025-08-19T20:12:12.1981352Z         cursor, str_statement, parameters = (
2025-08-19T20:12:12.1981783Z             context.cursor,
2025-08-19T20:12:12.1982171Z             context.statement,
2025-08-19T20:12:12.1982604Z             context.parameters,
2025-08-19T20:12:12.1982974Z         )
2025-08-19T20:12:12.1983269Z     
2025-08-19T20:12:12.1983727Z         effective_parameters: Optional[_AnyExecuteParams]
2025-08-19T20:12:12.1984239Z     
2025-08-19T20:12:12.1984616Z         if not context.executemany:
2025-08-19T20:12:12.1985177Z             effective_parameters = parameters[0]
2025-08-19T20:12:12.1985670Z         else:
2025-08-19T20:12:12.1986064Z             effective_parameters = parameters
2025-08-19T20:12:12.1986508Z     
2025-08-19T20:12:12.1986938Z         if self._has_events or self.engine._has_events:
2025-08-19T20:12:12.1987588Z             for fn in self.dispatch.before_cursor_execute:
2025-08-19T20:12:12.1988446Z                 str_statement, effective_parameters = fn(
2025-08-19T20:12:12.1988983Z                     self,
2025-08-19T20:12:12.1989340Z                     cursor,
2025-08-19T20:12:12.1989759Z                     str_statement,
2025-08-19T20:12:12.1990251Z                     effective_parameters,
2025-08-19T20:12:12.1990704Z                     context,
2025-08-19T20:12:12.1991151Z                     context.executemany,
2025-08-19T20:12:12.1991564Z                 )
2025-08-19T20:12:12.1991866Z     
2025-08-19T20:12:12.1992177Z         if self._echo:
2025-08-19T20:12:12.1992652Z             self._log_info(str_statement)
2025-08-19T20:12:12.1993069Z     
2025-08-19T20:12:12.1993446Z             stats = context._get_cache_stats()
2025-08-19T20:12:12.1993864Z     
2025-08-19T20:12:12.1994253Z             if not self.engine.hide_parameters:
2025-08-19T20:12:12.1994757Z                 self._log_info(
2025-08-19T20:12:12.1995215Z                     "[%s] %r",
2025-08-19T20:12:12.1995611Z                     stats,
2025-08-19T20:12:12.1996172Z                     sql_util._repr_params(
2025-08-19T20:12:12.1996714Z                         effective_parameters,
2025-08-19T20:12:12.1997214Z                         batches=10,
2025-08-19T20:12:12.1997713Z                         ismulti=context.executemany,
2025-08-19T20:12:12.1998558Z                     ),
2025-08-19T20:12:12.1998898Z                 )
2025-08-19T20:12:12.1999196Z             else:
2025-08-19T20:12:12.1999538Z                 self._log_info(
2025-08-19T20:12:12.2000083Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-08-19T20:12:12.2000649Z                     stats,
2025-08-19T20:12:12.2000971Z                 )
2025-08-19T20:12:12.2001250Z     
2025-08-19T20:12:12.2001558Z         evt_handled: bool = False
2025-08-19T20:12:12.2001931Z         try:
2025-08-19T20:12:12.2002372Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-08-19T20:12:12.2003375Z                 effective_parameters = cast(
2025-08-19T20:12:12.2003945Z                     "_CoreMultiExecuteParams", effective_parameters
2025-08-19T20:12:12.2004394Z                 )
2025-08-19T20:12:12.2004750Z                 if self.dialect._has_events:
2025-08-19T20:12:12.2005287Z                     for fn in self.dialect.dispatch.do_executemany:
2025-08-19T20:12:12.2005789Z                         if fn(
2025-08-19T20:12:12.2006172Z                             cursor,
2025-08-19T20:12:12.2006583Z                             str_statement,
2025-08-19T20:12:12.2007029Z                             effective_parameters,
2025-08-19T20:12:12.2007764Z                             context,
2025-08-19T20:12:12.2008370Z                         ):
2025-08-19T20:12:12.2008757Z                             evt_handled = True
2025-08-19T20:12:12.2009178Z                             break
2025-08-19T20:12:12.2009579Z                 if not evt_handled:
2025-08-19T20:12:12.2010041Z                     self.dialect.do_executemany(
2025-08-19T20:12:12.2010479Z                         cursor,
2025-08-19T20:12:12.2010868Z                         str_statement,
2025-08-19T20:12:12.2011309Z                         effective_parameters,
2025-08-19T20:12:12.2011736Z                         context,
2025-08-19T20:12:12.2012072Z                     )
2025-08-19T20:12:12.2012549Z             elif not effective_parameters and context.no_parameters:
2025-08-19T20:12:12.2013086Z                 if self.dialect._has_events:
2025-08-19T20:12:12.2013655Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-08-19T20:12:12.2014250Z                         if fn(cursor, str_statement, context):
2025-08-19T20:12:12.2014805Z                             evt_handled = True
2025-08-19T20:12:12.2015240Z                             break
2025-08-19T20:12:12.2015628Z                 if not evt_handled:
2025-08-19T20:12:12.2016088Z                     self.dialect.do_execute_no_params(
2025-08-19T20:12:12.2016605Z                         cursor, str_statement, context
2025-08-19T20:12:12.2017011Z                     )
2025-08-19T20:12:12.2017307Z             else:
2025-08-19T20:12:12.2017662Z                 effective_parameters = cast(
2025-08-19T20:12:12.2018368Z                     "_CoreSingleExecuteParams", effective_parameters
2025-08-19T20:12:12.2018832Z                 )
2025-08-19T20:12:12.2019189Z                 if self.dialect._has_events:
2025-08-19T20:12:12.2019710Z                     for fn in self.dialect.dispatch.do_execute:
2025-08-19T20:12:12.2020192Z                         if fn(
2025-08-19T20:12:12.2020585Z                             cursor,
2025-08-19T20:12:12.2021001Z                             str_statement,
2025-08-19T20:12:12.2021452Z                             effective_parameters,
2025-08-19T20:12:12.2021884Z                             context,
2025-08-19T20:12:12.2022233Z                         ):
2025-08-19T20:12:12.2022619Z                             evt_handled = True
2025-08-19T20:12:12.2023062Z                             break
2025-08-19T20:12:12.2023449Z                 if not evt_handled:
2025-08-19T20:12:12.2023908Z >                   self.dialect.do_execute(
2025-08-19T20:12:12.2024460Z                         cursor, str_statement, effective_parameters, context
2025-08-19T20:12:12.2024924Z                     )
2025-08-19T20:12:12.2025105Z 
2025-08-19T20:12:12.2025760Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: 
2025-08-19T20:12:12.2026678Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:12:12.2027765Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T20:12:12.2028815Z     cursor.execute(statement, parameters)
2025-08-19T20:12:12.2029423Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:12:12.2029740Z 
2025-08-19T20:12:12.2030615Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7fa8478b6f90>
2025-08-19T20:12:12.2032620Z query = '\n    WITH v(asin, marketplace, fee_type, amount, currency, source, effective_date) AS (VALUES (%(asin0)s, %(marketpl...CT FROM v.currency OR t.source IS DISTINCT FROM v.source OR t.effective_date IS DISTINCT FROM v.effective_date);\n    '
2025-08-19T20:12:12.2034298Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T20:12:12.2034738Z 
2025-08-19T20:12:12.2034868Z     def execute(
2025-08-19T20:12:12.2035167Z         self,
2025-08-19T20:12:12.2035782Z         query: Query,
2025-08-19T20:12:12.2036139Z         params: Params | None = None,
2025-08-19T20:12:12.2036505Z         *,
2025-08-19T20:12:12.2036846Z         prepare: bool | None = None,
2025-08-19T20:12:12.2037293Z         binary: bool | None = None,
2025-08-19T20:12:12.2037659Z     ) -> Self:
2025-08-19T20:12:12.2038077Z         """
2025-08-19T20:12:12.2038492Z         Execute a query or command to the database.
2025-08-19T20:12:12.2038901Z         """
2025-08-19T20:12:12.2039164Z         try:
2025-08-19T20:12:12.2039479Z             with self._conn.lock:
2025-08-19T20:12:12.2039875Z                 self._conn.wait(
2025-08-19T20:12:12.2040465Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T20:12:12.2041002Z                 )
2025-08-19T20:12:12.2041353Z         except e._NO_TRACEBACK as ex:
2025-08-19T20:12:12.2041829Z >           raise ex.with_traceback(None)
2025-08-19T20:12:12.2042547Z E           psycopg.errors.UndefinedFunction: operator does not exist: date = text
2025-08-19T20:12:12.2043438Z E           LINE 7: ...rce IS DISTINCT FROM v.source OR t.effective_date IS DISTINC...
2025-08-19T20:12:12.2044117Z E                                                                        ^
2025-08-19T20:12:12.2045020Z E           HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-08-19T20:12:12.2045608Z 
2025-08-19T20:12:12.2046309Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: UndefinedFunction
2025-08-19T20:12:12.2046985Z 
2025-08-19T20:12:12.2047404Z The above exception was the direct cause of the following exception:
2025-08-19T20:12:12.2047833Z 
2025-08-19T20:12:12.2048424Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fa847967170>
2025-08-19T20:12:12.2049277Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_offline0')
2025-08-19T20:12:12.2050379Z pg_engine = Engine(***localhost:5432/awa)
2025-08-19T20:12:12.2050899Z ensure_test_fees_raw_table = None
2025-08-19T20:12:12.2051157Z 
2025-08-19T20:12:12.2051616Z     def test_offline(monkeypatch, tmp_path, pg_engine, ensure_test_fees_raw_table) -> None:
2025-08-19T20:12:12.2052345Z         os.environ["FEES_RAW_TABLE"] = "test_fees_raw"
2025-08-19T20:12:12.2052837Z         os.environ["ENABLE_LIVE"] = "0"
2025-08-19T20:12:12.2053298Z         os.environ["SP_REFRESH_TOKEN"] = "t"
2025-08-19T20:12:12.2053769Z         os.environ["SP_CLIENT_ID"] = "i"
2025-08-19T20:12:12.2054234Z         os.environ["SP_CLIENT_SECRET"] = "s"
2025-08-19T20:12:12.2054695Z         os.environ["SELLER_ID"] = "seller"
2025-08-19T20:12:12.2055130Z         os.environ["REGION"] = "EU"
2025-08-19T20:12:12.2055608Z         os.environ["DATABASE_URL"] = build_dsn(sync=True)
2025-08-19T20:12:12.2056159Z         _ = pg_engine, ensure_test_fees_raw_table
2025-08-19T20:12:12.2056680Z >       res = sp_fees_ingestor.main()
2025-08-19T20:12:12.2057100Z               ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T20:12:12.2057341Z 
2025-08-19T20:12:12.2057555Z tests/test_sp_fees_ingestor.py:52: 
2025-08-19T20:12:12.2058287Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:12:12.2058862Z services/etl/sp_fees_ingestor.py:79: in main
2025-08-19T20:12:12.2059493Z     repo.upsert_fees_raw(engine, rows, testing=os.getenv("TESTING") == "1")
2025-08-19T20:12:12.2060467Z services/fees_h10/repository.py:65: in upsert_fees_raw
2025-08-19T20:12:12.2061098Z     res2 = conn.execute(text(update_sql), params)
2025-08-19T20:12:12.2061584Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T20:12:12.2062556Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-08-19T20:12:12.2063324Z     return meth(
2025-08-19T20:12:12.2064333Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-08-19T20:12:12.2065294Z     return connection._execute_clauseelement(
2025-08-19T20:12:12.2066595Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-08-19T20:12:12.2067492Z     ret = self._execute_context(
2025-08-19T20:12:12.2068677Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-08-19T20:12:12.2069563Z     return self._exec_single_context(
2025-08-19T20:12:12.2070638Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-08-19T20:12:12.2071520Z     self._handle_dbapi_exception(
2025-08-19T20:12:12.2072604Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-08-19T20:12:12.2073649Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-08-19T20:12:12.2074823Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-08-19T20:12:12.2075684Z     self.dialect.do_execute(
2025-08-19T20:12:12.2076660Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T20:12:12.2077549Z     cursor.execute(statement, parameters)
2025-08-19T20:12:12.2078323Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:12:12.2078665Z 
2025-08-19T20:12:12.2079264Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7fa8478b6f90>
2025-08-19T20:12:12.2081294Z query = '\n    WITH v(asin, marketplace, fee_type, amount, currency, source, effective_date) AS (VALUES (%(asin0)s, %(marketpl...CT FROM v.currency OR t.source IS DISTINCT FROM v.source OR t.effective_date IS DISTINCT FROM v.effective_date);\n    '
2025-08-19T20:12:12.2082968Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T20:12:12.2083430Z 
2025-08-19T20:12:12.2083567Z     def execute(
2025-08-19T20:12:12.2083872Z         self,
2025-08-19T20:12:12.2084184Z         query: Query,
2025-08-19T20:12:12.2084564Z         params: Params | None = None,
2025-08-19T20:12:12.2084942Z         *,
2025-08-19T20:12:12.2085287Z         prepare: bool | None = None,
2025-08-19T20:12:12.2085729Z         binary: bool | None = None,
2025-08-19T20:12:12.2086119Z     ) -> Self:
2025-08-19T20:12:12.2086399Z         """
2025-08-19T20:12:12.2086777Z         Execute a query or command to the database.
2025-08-19T20:12:12.2087200Z         """
2025-08-19T20:12:12.2087472Z         try:
2025-08-19T20:12:12.2087819Z             with self._conn.lock:
2025-08-19T20:12:12.2088382Z                 self._conn.wait(
2025-08-19T20:12:12.2088950Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T20:12:12.2089456Z                 )
2025-08-19T20:12:12.2089821Z         except e._NO_TRACEBACK as ex:
2025-08-19T20:12:12.2090301Z >           raise ex.with_traceback(None)
2025-08-19T20:12:12.2091323Z E           sqlalchemy.exc.ProgrammingError: (psycopg.errors.UndefinedFunction) operator does not exist: date = text
2025-08-19T20:12:12.2092412Z E           LINE 7: ...rce IS DISTINCT FROM v.source OR t.effective_date IS DISTINC...
2025-08-19T20:12:12.2093136Z E                                                                        ^
2025-08-19T20:12:12.2094304Z E           HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-08-19T20:12:12.2095031Z E           [SQL: 
2025-08-19T20:12:12.2096992Z E               WITH v(asin, marketplace, fee_type, amount, currency, source, effective_date) AS (VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, %(effective_date0)s), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, %(effective_date1)s))
2025-08-19T20:12:12.2098760Z E               UPDATE test_fees_raw AS t
2025-08-19T20:12:12.2099653Z E               SET amount = v.amount, currency = v.currency, source = v.source, effective_date = v.effective_date
2025-08-19T20:12:12.2100553Z E               FROM v
2025-08-19T20:12:12.2101257Z E               WHERE t.asin = v.asin AND t.marketplace = v.marketplace AND t.fee_type = v.fee_type
2025-08-19T20:12:12.2102842Z E                 AND (t.amount IS DISTINCT FROM v.amount OR t.currency IS DISTINCT FROM v.currency OR t.source IS DISTINCT FROM v.source OR t.effective_date IS DISTINCT FROM v.effective_date);
2025-08-19T20:12:12.2103895Z E               ]
2025-08-19T20:12:12.2105800Z E           [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'effective_date0': None, 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp', 'effective_date1': None}]
2025-08-19T20:12:12.2107466Z E           (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T20:12:12.2107864Z 
2025-08-19T20:12:12.2108710Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: ProgrammingError
2025-08-19T20:12:12.2109668Z =============================== warnings summary ===============================
2025-08-19T20:12:12.2110218Z services/alert_bot/tests/test_smoke.py:5
2025-08-19T20:12:12.2112268Z   /home/runner/work/AWA-App/AWA-App/services/alert_bot/tests/test_smoke.py:5: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
2025-08-19T20:12:12.2114178Z     import pkg_resources  # noqa: F401
2025-08-19T20:12:12.2114516Z 
2025-08-19T20:12:12.2114792Z tests/api/test_ingest_endpoints.py: 12 warnings
2025-08-19T20:12:12.2115339Z tests/ingest/test_tasks_eager.py: 3 warnings
2025-08-19T20:12:12.2115850Z tests/test_api_fast.py: 1 warning
2025-08-19T20:12:12.2116314Z tests/test_health.py: 5 warnings
2025-08-19T20:12:12.2116760Z tests/test_smoke.py: 5 warnings
2025-08-19T20:12:12.2117237Z services/api/tests/test_cors.py: 1 warning
2025-08-19T20:12:12.2117816Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T20:12:12.2118546Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:12:12.2119100Z services/api/tests/test_rate_limit.py: 122 warnings
2025-08-19T20:12:12.2119704Z services/api/tests/test_roi_basic_auth.py: 4 warnings
2025-08-19T20:12:12.2120307Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T20:12:12.2120930Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T20:12:12.2123423Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/asgi_correlation_id/extensions/sentry.py:27: DeprecationWarning: sentry_sdk.configure_scope is deprecated and will be removed in the next major version. Please consult our migration guide to learn how to migrate to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x#scope-configuring
2025-08-19T20:12:12.2125624Z     with configure_scope() as scope:
2025-08-19T20:12:12.2125934Z 
2025-08-19T20:12:12.2126207Z tests/api/test_ingest_endpoints.py: 3 warnings
2025-08-19T20:12:12.2126727Z tests/test_api_fast.py: 1 warning
2025-08-19T20:12:12.2127185Z tests/test_health.py: 5 warnings
2025-08-19T20:12:12.2127659Z tests/test_smoke.py: 5 warnings
2025-08-19T20:12:12.2128585Z services/api/tests/test_cors.py: 3 warnings
2025-08-19T20:12:12.2129160Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T20:12:12.2129725Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:12:12.2130303Z services/api/tests/test_rate_limit.py: 2 warnings
2025-08-19T20:12:12.2130902Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T20:12:12.2131545Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T20:12:12.2133046Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/fastapi_limiter/__init__.py:89: DeprecationWarning: Call to deprecated close. (Use aclose() instead) -- Deprecated since version 5.0.1.
2025-08-19T20:12:12.2134513Z     await cls.redis.close()
2025-08-19T20:12:12.2134748Z 
2025-08-19T20:12:12.2135050Z tests/test_api_fast.py::test_health_endpoint
2025-08-19T20:12:12.2136857Z   /home/runner/work/AWA-App/AWA-App/tests/test_api_fast.py:13: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:12:12.2138647Z     return datetime.datetime.utcnow()
2025-08-19T20:12:12.2138929Z 
2025-08-19T20:12:12.2139128Z tests/test_api_fast.py: 1 warning
2025-08-19T20:12:12.2139564Z tests/test_health.py: 5 warnings
2025-08-19T20:12:12.2139986Z tests/test_smoke.py: 5 warnings
2025-08-19T20:12:12.2140460Z services/api/tests/test_cors.py: 1 warning
2025-08-19T20:12:12.2140988Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:12:12.2141578Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T20:12:12.2143431Z   /home/runner/work/AWA-App/AWA-App/services/api/routes/health.py:24: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:12:12.2145191Z     app_now = datetime.utcnow().replace(tzinfo=timezone.utc)
2025-08-19T20:12:12.2145554Z 
2025-08-19T20:12:12.2145791Z tests/test_health.py::test_health[0]
2025-08-19T20:12:12.2146265Z tests/test_health.py::test_health[1]
2025-08-19T20:12:12.2146727Z tests/test_health.py::test_health[2]
2025-08-19T20:12:12.2147195Z tests/test_health.py::test_health[3]
2025-08-19T20:12:12.2147664Z tests/test_health.py::test_health[4]
2025-08-19T20:12:12.2149565Z   /home/runner/work/AWA-App/AWA-App/tests/test_health.py:22: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:12:12.2151178Z     return datetime.datetime.utcnow()
2025-08-19T20:12:12.2151458Z 
2025-08-19T20:12:12.2151670Z tests/test_smoke.py::test_health[0]
2025-08-19T20:12:12.2152118Z tests/test_smoke.py::test_health[1]
2025-08-19T20:12:12.2152569Z tests/test_smoke.py::test_health[2]
2025-08-19T20:12:12.2153011Z tests/test_smoke.py::test_health[3]
2025-08-19T20:12:12.2153462Z tests/test_smoke.py::test_health[4]
2025-08-19T20:12:12.2155139Z   /home/runner/work/AWA-App/AWA-App/tests/test_smoke.py:32: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:12:12.2156687Z     return datetime.datetime.utcnow()
2025-08-19T20:12:12.2156959Z 
2025-08-19T20:12:12.8634856Z services/api/tests/test_cors.py::test_cors_simple_get_allowed
2025-08-19T20:12:12.8637394Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_cors.py:27: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:12:12.8640014Z     return datetime.datetime.utcnow()
2025-08-19T20:12:12.8640364Z 
2025-08-19T20:12:12.8640753Z services/api/tests/test_health.py::test_health_route
2025-08-19T20:12:12.8643250Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_health.py:14: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:12:12.8644727Z     return datetime.datetime.utcnow()
2025-08-19T20:12:12.8644961Z 
2025-08-19T20:12:12.8645208Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T20:12:12.8646850Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_rate_limit.py:33: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:12:12.8649507Z     return datetime.datetime.utcnow()
2025-08-19T20:12:12.8649973Z 
2025-08-19T20:12:12.8650847Z services/api/tests/test_sentry_event.py::test_unhandled_exception_is_captured_and_tagged
2025-08-19T20:12:12.8654039Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_sentry_event.py:47: SentryHubDeprecationWarning: `sentry_sdk.Hub` is deprecated and will be removed in a future major release. Please consult our 1.x to 2.x migration guide for details on how to migrate `Hub` usage to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x
2025-08-19T20:12:12.8656317Z     hub = sentry_sdk.Hub.current
2025-08-19T20:12:12.8656641Z 
2025-08-19T20:12:12.8657169Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-08-19T20:12:12.8657898Z ================================ tests coverage ================================
2025-08-19T20:12:12.8658927Z _______________ coverage: platform linux, python 3.12.11-final-0 _______________
2025-08-19T20:12:12.8659213Z 
2025-08-19T20:12:12.8659389Z Coverage XML written to file coverage.xml
2025-08-19T20:12:12.8659808Z Required test coverage of 65% reached. Total coverage: 65.43%
2025-08-19T20:12:12.8660260Z =========================== short test summary info ============================
2025-08-19T20:12:12.8661144Z FAILED tests/test_sp_fees_ingestor.py::test_offline - sqlalchemy.exc.ProgrammingError: (psycopg.errors.UndefinedFunction) operator does not exist: date = text
2025-08-19T20:12:12.8661969Z LINE 7: ...rce IS DISTINCT FROM v.source OR t.effective_date IS DISTINC...
2025-08-19T20:12:12.8662369Z                                                              ^
2025-08-19T20:12:12.8662930Z HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-08-19T20:12:12.8663361Z [SQL: 
2025-08-19T20:12:12.8664981Z     WITH v(asin, marketplace, fee_type, amount, currency, source, effective_date) AS (VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, %(effective_date0)s), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, %(effective_date1)s))
2025-08-19T20:12:12.8666720Z     UPDATE test_fees_raw AS t
2025-08-19T20:12:12.8667591Z     SET amount = v.amount, currency = v.currency, source = v.source, effective_date = v.effective_date
2025-08-19T20:12:12.8668535Z     FROM v
2025-08-19T20:12:12.8669211Z     WHERE t.asin = v.asin AND t.marketplace = v.marketplace AND t.fee_type = v.fee_type
2025-08-19T20:12:12.8670463Z       AND (t.amount IS DISTINCT FROM v.amount OR t.currency IS DISTINCT FROM v.currency OR t.source IS DISTINCT FROM v.source OR t.effective_date IS DISTINCT FROM v.effective_date);
2025-08-19T20:12:12.8671091Z     ]
2025-08-19T20:12:12.8672232Z [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'effective_date0': None, 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp', 'effective_date1': None}]
2025-08-19T20:12:12.8673280Z (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T20:12:12.8673757Z Sentry is attempting to send 0 pending events
2025-08-19T20:12:12.8674309Z Waiting up to True seconds
2025-08-19T20:12:12.8674561Z Press Ctrl-C to quit
2025-08-19T20:12:13.5527343Z ##[error]Process completed with exit code 1.
