2025-08-19T20:28:43.4794824Z ##[group]Run pytest -q --cov=services
2025-08-19T20:28:43.4795187Z [36;1mpytest -q --cov=services[0m
2025-08-19T20:28:43.4835596Z shell: /usr/bin/bash -e {0}
2025-08-19T20:28:43.4835831Z env:
2025-08-19T20:28:43.4836034Z   REDIS_URL: redis://localhost:6379/0
2025-08-19T20:28:43.4836545Z   RATE_LIMIT_DEFAULT: 100/minute
2025-08-19T20:28:43.4836832Z   TRUST_X_FORWARDED: 1
2025-08-19T20:28:43.4837030Z   PG_USER: postgres
2025-08-19T20:28:43.4837223Z   PG_PASSWORD: pass
2025-08-19T20:28:43.4837422Z   PG_DATABASE: awa
2025-08-19T20:28:43.4837606Z   PG_HOST: localhost
2025-08-19T20:28:43.4837792Z   PG_PORT: 5432
2025-08-19T20:28:43.4838211Z   PG_SYNC_DSN: ***localhost:5432/awa
2025-08-19T20:28:43.4838634Z   PG_ASYNC_DSN: ***localhost:5432/awa
2025-08-19T20:28:43.4839026Z   DATABASE_URL: ***localhost:5432/awa
2025-08-19T20:28:43.4839283Z   DATA_DIR: /home/runner/work/_temp/awa-data
2025-08-19T20:28:43.4839533Z   ENABLE_LIVE: 0
2025-08-19T20:28:43.4839707Z   TESTING: 1
2025-08-19T20:28:43.4839948Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:28:43.4840375Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-08-19T20:28:43.4840759Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:28:43.4841107Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:28:43.4841465Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:28:43.4841822Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-08-19T20:28:43.4842135Z   POSTGRES_USER: postgres
2025-08-19T20:28:43.4842349Z   POSTGRES_PASSWORD: pass
2025-08-19T20:28:43.4842549Z   POSTGRES_DB: awa
2025-08-19T20:28:43.4842731Z   LLM_PROVIDER: lan
2025-08-19T20:28:43.4842944Z   LLM_BASE_URL: http://localhost:8000
2025-08-19T20:28:43.4843187Z ##[endgroup]
2025-08-19T20:29:13.3087674Z ........s.............................sssssss........................... [ 43%]
2025-08-19T20:29:45.9964348Z ..........................F............................................. [ 86%]
2025-08-19T20:29:46.7298948Z ......................                                                   [100%]
2025-08-19T20:29:46.7299784Z =================================== FAILURES ===================================
2025-08-19T20:29:46.7300565Z _________________________________ test_offline _________________________________
2025-08-19T20:29:46.7301079Z 
2025-08-19T20:29:46.7301693Z self = <sqlalchemy.engine.base.Connection object at 0x7fb840c54da0>
2025-08-19T20:29:46.7303190Z dialect = <sqlalchemy.dialects.postgresql.psycopg.PGDialect_psycopg object at 0x7fb840c545f0>
2025-08-19T20:29:46.7304956Z context = <sqlalchemy.dialects.postgresql.psycopg.PGExecutionContext_psycopg object at 0x7fb840c57290>
2025-08-19T20:29:46.7306190Z statement = <sqlalchemy.dialects.postgresql.psycopg.PGCompiler_psycopg object at 0x7fb840c57650>
2025-08-19T20:29:46.7307383Z parameters = [{'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}]
2025-08-19T20:29:46.7307758Z 
2025-08-19T20:29:46.7307898Z     def _exec_single_context(
2025-08-19T20:29:46.7308183Z         self,
2025-08-19T20:29:46.7320927Z         dialect: Dialect,
2025-08-19T20:29:46.7321426Z         context: ExecutionContext,
2025-08-19T20:29:46.7321919Z         statement: Union[str, Compiled],
2025-08-19T20:29:46.7322502Z         parameters: Optional[_AnyMultiExecuteParams],
2025-08-19T20:29:46.7322945Z     ) -> CursorResult[Any]:
2025-08-19T20:29:46.7323313Z         """continue the _execute_context() method for a single DBAPI
2025-08-19T20:29:46.7323969Z         cursor.execute() or cursor.executemany() call.
2025-08-19T20:29:46.7324253Z     
2025-08-19T20:29:46.7324425Z         """
2025-08-19T20:29:46.7324706Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-08-19T20:29:46.7325137Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-08-19T20:29:46.7325439Z     
2025-08-19T20:29:46.7325655Z             if generic_setinputsizes:
2025-08-19T20:29:46.7325914Z                 try:
2025-08-19T20:29:46.7326656Z                     dialect.do_set_input_sizes(
2025-08-19T20:29:46.7327020Z                         context.cursor, generic_setinputsizes, context
2025-08-19T20:29:46.7327312Z                     )
2025-08-19T20:29:46.7327560Z                 except BaseException as e:
2025-08-19T20:29:46.7327866Z                     self._handle_dbapi_exception(
2025-08-19T20:29:46.7328209Z                         e, str(statement), parameters, None, context
2025-08-19T20:29:46.7328487Z                     )
2025-08-19T20:29:46.7328680Z     
2025-08-19T20:29:46.7328893Z         cursor, str_statement, parameters = (
2025-08-19T20:29:46.7329170Z             context.cursor,
2025-08-19T20:29:46.7329420Z             context.statement,
2025-08-19T20:29:46.7329675Z             context.parameters,
2025-08-19T20:29:46.7329898Z         )
2025-08-19T20:29:46.7330061Z     
2025-08-19T20:29:46.7330318Z         effective_parameters: Optional[_AnyExecuteParams]
2025-08-19T20:29:46.7330598Z     
2025-08-19T20:29:46.7330797Z         if not context.executemany:
2025-08-19T20:29:46.7331106Z             effective_parameters = parameters[0]
2025-08-19T20:29:46.7331368Z         else:
2025-08-19T20:29:46.7331600Z             effective_parameters = parameters
2025-08-19T20:29:46.7331845Z     
2025-08-19T20:29:46.7332085Z         if self._has_events or self.engine._has_events:
2025-08-19T20:29:46.7332438Z             for fn in self.dispatch.before_cursor_execute:
2025-08-19T20:29:46.7332786Z                 str_statement, effective_parameters = fn(
2025-08-19T20:29:46.7333065Z                     self,
2025-08-19T20:29:46.7333273Z                     cursor,
2025-08-19T20:29:46.7333509Z                     str_statement,
2025-08-19T20:29:46.7333778Z                     effective_parameters,
2025-08-19T20:29:46.7334030Z                     context,
2025-08-19T20:29:46.7334286Z                     context.executemany,
2025-08-19T20:29:46.7334528Z                 )
2025-08-19T20:29:46.7334703Z     
2025-08-19T20:29:46.7334875Z         if self._echo:
2025-08-19T20:29:46.7335118Z             self._log_info(str_statement)
2025-08-19T20:29:46.7335354Z     
2025-08-19T20:29:46.7335570Z             stats = context._get_cache_stats()
2025-08-19T20:29:46.7335806Z     
2025-08-19T20:29:46.7336029Z             if not self.engine.hide_parameters:
2025-08-19T20:29:46.7336492Z                 self._log_info(
2025-08-19T20:29:46.7336804Z                     "[%s] %r",
2025-08-19T20:29:46.7337026Z                     stats,
2025-08-19T20:29:46.7337276Z                     sql_util._repr_params(
2025-08-19T20:29:46.7337562Z                         effective_parameters,
2025-08-19T20:29:46.7337836Z                         batches=10,
2025-08-19T20:29:46.7338127Z                         ismulti=context.executemany,
2025-08-19T20:29:46.7338393Z                     ),
2025-08-19T20:29:46.7338577Z                 )
2025-08-19T20:29:46.7338756Z             else:
2025-08-19T20:29:46.7338963Z                 self._log_info(
2025-08-19T20:29:46.7339294Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-08-19T20:29:46.7339609Z                     stats,
2025-08-19T20:29:46.7339811Z                 )
2025-08-19T20:29:46.7339983Z     
2025-08-19T20:29:46.7340181Z         evt_handled: bool = False
2025-08-19T20:29:46.7340418Z         try:
2025-08-19T20:29:46.7340697Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-08-19T20:29:46.7341052Z                 effective_parameters = cast(
2025-08-19T20:29:46.7341545Z                     "_CoreMultiExecuteParams", effective_parameters
2025-08-19T20:29:46.7341836Z                 )
2025-08-19T20:29:46.7342062Z                 if self.dialect._has_events:
2025-08-19T20:29:46.7342392Z                     for fn in self.dialect.dispatch.do_executemany:
2025-08-19T20:29:46.7342701Z                         if fn(
2025-08-19T20:29:46.7342941Z                             cursor,
2025-08-19T20:29:46.7343198Z                             str_statement,
2025-08-19T20:29:46.7343484Z                             effective_parameters,
2025-08-19T20:29:46.7343890Z                             context,
2025-08-19T20:29:46.7344121Z                         ):
2025-08-19T20:29:46.7344365Z                             evt_handled = True
2025-08-19T20:29:46.7344628Z                             break
2025-08-19T20:29:46.7344875Z                 if not evt_handled:
2025-08-19T20:29:46.7345153Z                     self.dialect.do_executemany(
2025-08-19T20:29:46.7345427Z                         cursor,
2025-08-19T20:29:46.7345683Z                         str_statement,
2025-08-19T20:29:46.7345963Z                         effective_parameters,
2025-08-19T20:29:46.7346234Z                         context,
2025-08-19T20:29:46.7346667Z                     )
2025-08-19T20:29:46.7346978Z             elif not effective_parameters and context.no_parameters:
2025-08-19T20:29:46.7347323Z                 if self.dialect._has_events:
2025-08-19T20:29:46.7347669Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-08-19T20:29:46.7348043Z                         if fn(cursor, str_statement, context):
2025-08-19T20:29:46.7348348Z                             evt_handled = True
2025-08-19T20:29:46.7348650Z                             break
2025-08-19T20:29:46.7348903Z                 if not evt_handled:
2025-08-19T20:29:46.7349192Z                     self.dialect.do_execute_no_params(
2025-08-19T20:29:46.7349505Z                         cursor, str_statement, context
2025-08-19T20:29:46.7349768Z                     )
2025-08-19T20:29:46.7349962Z             else:
2025-08-19T20:29:46.7350193Z                 effective_parameters = cast(
2025-08-19T20:29:46.7350534Z                     "_CoreSingleExecuteParams", effective_parameters
2025-08-19T20:29:46.7350817Z                 )
2025-08-19T20:29:46.7351042Z                 if self.dialect._has_events:
2025-08-19T20:29:46.7351363Z                     for fn in self.dialect.dispatch.do_execute:
2025-08-19T20:29:46.7351664Z                         if fn(
2025-08-19T20:29:46.7351906Z                             cursor,
2025-08-19T20:29:46.7352167Z                             str_statement,
2025-08-19T20:29:46.7352448Z                             effective_parameters,
2025-08-19T20:29:46.7352720Z                             context,
2025-08-19T20:29:46.7352947Z                         ):
2025-08-19T20:29:46.7353190Z                             evt_handled = True
2025-08-19T20:29:46.7353454Z                             break
2025-08-19T20:29:46.7353704Z                 if not evt_handled:
2025-08-19T20:29:46.7353996Z >                   self.dialect.do_execute(
2025-08-19T20:29:46.7354331Z                         cursor, str_statement, effective_parameters, context
2025-08-19T20:29:46.7354636Z                     )
2025-08-19T20:29:46.7354759Z 
2025-08-19T20:29:46.7355171Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: 
2025-08-19T20:29:46.7355759Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:29:46.7356604Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T20:29:46.7357171Z     cursor.execute(statement, parameters)
2025-08-19T20:29:46.7359252Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:29:46.7359593Z 
2025-08-19T20:29:46.7360221Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7fb842127f50>
2025-08-19T20:29:46.7362524Z query = '\n    INSERT INTO test_fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)\n    VALUES (..., %(currency1)s, %(source1)s, :effective_date1::DATE)\n    ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;\n    '
2025-08-19T20:29:46.7363700Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T20:29:46.7363982Z 
2025-08-19T20:29:46.7364075Z     def execute(
2025-08-19T20:29:46.7364271Z         self,
2025-08-19T20:29:46.7364622Z         query: Query,
2025-08-19T20:29:46.7364869Z         params: Params | None = None,
2025-08-19T20:29:46.7365105Z         *,
2025-08-19T20:29:46.7365316Z         prepare: bool | None = None,
2025-08-19T20:29:46.7365589Z         binary: bool | None = None,
2025-08-19T20:29:46.7365823Z     ) -> Self:
2025-08-19T20:29:46.7366000Z         """
2025-08-19T20:29:46.7366238Z         Execute a query or command to the database.
2025-08-19T20:29:46.7366734Z         """
2025-08-19T20:29:46.7366912Z         try:
2025-08-19T20:29:46.7367126Z             with self._conn.lock:
2025-08-19T20:29:46.7367382Z                 self._conn.wait(
2025-08-19T20:29:46.7367744Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T20:29:46.7368078Z                 )
2025-08-19T20:29:46.7368306Z         except e._NO_TRACEBACK as ex:
2025-08-19T20:29:46.7368607Z >           raise ex.with_traceback(None)
2025-08-19T20:29:46.7369009Z E           psycopg.errors.SyntaxError: syntax error at or near ":"
2025-08-19T20:29:46.7369505Z E           LINE 3:     VALUES ($1, $2, $3, $4, $5, $6, :effective_date0::DATE),...
2025-08-19T20:29:46.7369892Z E                                                       ^
2025-08-19T20:29:46.7370071Z 
2025-08-19T20:29:46.7370493Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: SyntaxError
2025-08-19T20:29:46.7370880Z 
2025-08-19T20:29:46.7371133Z The above exception was the direct cause of the following exception:
2025-08-19T20:29:46.7371402Z 
2025-08-19T20:29:46.7371680Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fb841f2b890>
2025-08-19T20:29:46.7372202Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_offline0')
2025-08-19T20:29:46.7372913Z pg_engine = Engine(***localhost:5432/awa)
2025-08-19T20:29:46.7373235Z ensure_test_fees_raw_table = None
2025-08-19T20:29:46.7373399Z 
2025-08-19T20:29:46.7373687Z     def test_offline(monkeypatch, tmp_path, pg_engine, ensure_test_fees_raw_table) -> None:
2025-08-19T20:29:46.7374160Z         os.environ["FEES_RAW_TABLE"] = "test_fees_raw"
2025-08-19T20:29:46.7374472Z         os.environ["ENABLE_LIVE"] = "0"
2025-08-19T20:29:46.7374767Z         os.environ["SP_REFRESH_TOKEN"] = "t"
2025-08-19T20:29:46.7375061Z         os.environ["SP_CLIENT_ID"] = "i"
2025-08-19T20:29:46.7375349Z         os.environ["SP_CLIENT_SECRET"] = "s"
2025-08-19T20:29:46.7375639Z         os.environ["SELLER_ID"] = "seller"
2025-08-19T20:29:46.7375920Z         os.environ["REGION"] = "EU"
2025-08-19T20:29:46.7376242Z         os.environ["DATABASE_URL"] = build_dsn(sync=True)
2025-08-19T20:29:46.7376800Z         _ = pg_engine, ensure_test_fees_raw_table
2025-08-19T20:29:46.7377126Z >       res = sp_fees_ingestor.main()
2025-08-19T20:29:46.7377394Z               ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T20:29:46.7377541Z 
2025-08-19T20:29:46.7377686Z tests/test_sp_fees_ingestor.py:52: 
2025-08-19T20:29:46.7378054Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:29:46.7378427Z services/etl/sp_fees_ingestor.py:79: in main
2025-08-19T20:29:46.7378843Z     repo.upsert_fees_raw(engine, rows, testing=os.getenv("TESTING") == "1")
2025-08-19T20:29:46.7379312Z services/fees_h10/repository.py:67: in upsert_fees_raw
2025-08-19T20:29:46.7379676Z     res1 = conn.execute(text(insert_sql), params)
2025-08-19T20:29:46.7379980Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T20:29:46.7380590Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-08-19T20:29:46.7381226Z     return meth(
2025-08-19T20:29:46.7381868Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-08-19T20:29:46.7382473Z     return connection._execute_clauseelement(
2025-08-19T20:29:46.7383168Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-08-19T20:29:46.7383739Z     ret = self._execute_context(
2025-08-19T20:29:46.7384477Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-08-19T20:29:46.7385028Z     return self._exec_single_context(
2025-08-19T20:29:46.7385676Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-08-19T20:29:46.7386230Z     self._handle_dbapi_exception(
2025-08-19T20:29:46.7387106Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-08-19T20:29:46.7387765Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-08-19T20:29:46.7388485Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-08-19T20:29:46.7389018Z     self.dialect.do_execute(
2025-08-19T20:29:46.7389617Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T20:29:46.7390165Z     cursor.execute(statement, parameters)
2025-08-19T20:29:46.7390543Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:29:46.7390755Z 
2025-08-19T20:29:46.7391124Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7fb842127f50>
2025-08-19T20:29:46.7392336Z query = '\n    INSERT INTO test_fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)\n    VALUES (..., %(currency1)s, %(source1)s, :effective_date1::DATE)\n    ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;\n    '
2025-08-19T20:29:46.7393313Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T20:29:46.7393591Z 
2025-08-19T20:29:46.7393669Z     def execute(
2025-08-19T20:29:46.7393859Z         self,
2025-08-19T20:29:46.7394046Z         query: Query,
2025-08-19T20:29:46.7394286Z         params: Params | None = None,
2025-08-19T20:29:46.7394530Z         *,
2025-08-19T20:29:46.7394738Z         prepare: bool | None = None,
2025-08-19T20:29:46.7394998Z         binary: bool | None = None,
2025-08-19T20:29:46.7395236Z     ) -> Self:
2025-08-19T20:29:46.7395415Z         """
2025-08-19T20:29:46.7395649Z         Execute a query or command to the database.
2025-08-19T20:29:46.7395912Z         """
2025-08-19T20:29:46.7396082Z         try:
2025-08-19T20:29:46.7396448Z             with self._conn.lock:
2025-08-19T20:29:46.7396724Z                 self._conn.wait(
2025-08-19T20:29:46.7397089Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T20:29:46.7397423Z                 )
2025-08-19T20:29:46.7397646Z         except e._NO_TRACEBACK as ex:
2025-08-19T20:29:46.7397940Z >           raise ex.with_traceback(None)
2025-08-19T20:29:46.7398485Z E           sqlalchemy.exc.ProgrammingError: (psycopg.errors.SyntaxError) syntax error at or near ":"
2025-08-19T20:29:46.7399075Z E           LINE 3:     VALUES ($1, $2, $3, $4, $5, $6, :effective_date0::DATE),...
2025-08-19T20:29:46.7399466Z E                                                       ^
2025-08-19T20:29:46.7399725Z E           [SQL: 
2025-08-19T20:29:46.7400200Z E               INSERT INTO test_fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)
2025-08-19T20:29:46.7401320Z E               VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, :effective_date0::DATE), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, :effective_date1::DATE)
2025-08-19T20:29:46.7402274Z E               ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;
2025-08-19T20:29:46.7402581Z E               ]
2025-08-19T20:29:46.7403555Z E           [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp'}]
2025-08-19T20:29:46.7404582Z E           (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T20:29:46.7404828Z 
2025-08-19T20:29:46.7405265Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: ProgrammingError
2025-08-19T20:29:46.7405869Z =============================== warnings summary ===============================
2025-08-19T20:29:46.7406224Z services/alert_bot/tests/test_smoke.py:5
2025-08-19T20:29:46.7407689Z   /home/runner/work/AWA-App/AWA-App/services/alert_bot/tests/test_smoke.py:5: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
2025-08-19T20:29:46.7408821Z     import pkg_resources  # noqa: F401
2025-08-19T20:29:46.7408992Z 
2025-08-19T20:29:46.7409163Z tests/api/test_ingest_endpoints.py: 12 warnings
2025-08-19T20:29:46.7409521Z tests/ingest/test_tasks_eager.py: 3 warnings
2025-08-19T20:29:46.7409832Z tests/test_api_fast.py: 1 warning
2025-08-19T20:29:46.7410114Z tests/test_health.py: 5 warnings
2025-08-19T20:29:46.7410388Z tests/test_smoke.py: 5 warnings
2025-08-19T20:29:46.7410687Z services/api/tests/test_cors.py: 1 warning
2025-08-19T20:29:46.7411045Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T20:29:46.7411398Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:29:46.7411761Z services/api/tests/test_rate_limit.py: 122 warnings
2025-08-19T20:29:46.7412148Z services/api/tests/test_roi_basic_auth.py: 4 warnings
2025-08-19T20:29:46.7412525Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T20:29:46.7412911Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T20:29:46.7414437Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/asgi_correlation_id/extensions/sentry.py:27: DeprecationWarning: sentry_sdk.configure_scope is deprecated and will be removed in the next major version. Please consult our migration guide to learn how to migrate to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x#scope-configuring
2025-08-19T20:29:46.7415756Z     with configure_scope() as scope:
2025-08-19T20:29:46.7415928Z 
2025-08-19T20:29:46.7416090Z tests/api/test_ingest_endpoints.py: 3 warnings
2025-08-19T20:29:46.7416606Z tests/test_api_fast.py: 1 warning
2025-08-19T20:29:46.7416894Z tests/test_health.py: 5 warnings
2025-08-19T20:29:46.7417170Z tests/test_smoke.py: 5 warnings
2025-08-19T20:29:46.7417465Z services/api/tests/test_cors.py: 3 warnings
2025-08-19T20:29:46.7417807Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T20:29:46.7418157Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:29:46.7418502Z services/api/tests/test_rate_limit.py: 2 warnings
2025-08-19T20:29:46.7418866Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T20:29:46.7419251Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T20:29:46.7420177Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/fastapi_limiter/__init__.py:89: DeprecationWarning: Call to deprecated close. (Use aclose() instead) -- Deprecated since version 5.0.1.
2025-08-19T20:29:46.7420950Z     await cls.redis.close()
2025-08-19T20:29:46.7421102Z 
2025-08-19T20:29:46.7421259Z tests/test_api_fast.py::test_health_endpoint
2025-08-19T20:29:46.7422364Z   /home/runner/work/AWA-App/AWA-App/tests/test_api_fast.py:13: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:29:46.7423490Z     return datetime.datetime.utcnow()
2025-08-19T20:29:46.7423668Z 
2025-08-19T20:29:46.7423791Z tests/test_api_fast.py: 1 warning
2025-08-19T20:29:46.7424069Z tests/test_health.py: 5 warnings
2025-08-19T20:29:46.7424342Z tests/test_smoke.py: 5 warnings
2025-08-19T20:29:46.7424630Z services/api/tests/test_cors.py: 1 warning
2025-08-19T20:29:46.7425068Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:29:46.7425423Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T20:29:46.7426803Z   /home/runner/work/AWA-App/AWA-App/services/api/routes/health.py:24: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:29:46.7427903Z     app_now = datetime.utcnow().replace(tzinfo=timezone.utc)
2025-08-19T20:29:46.7428128Z 
2025-08-19T20:29:46.7428269Z tests/test_health.py::test_health[0]
2025-08-19T20:29:46.7428562Z tests/test_health.py::test_health[1]
2025-08-19T20:29:46.7428847Z tests/test_health.py::test_health[2]
2025-08-19T20:29:46.7429134Z tests/test_health.py::test_health[3]
2025-08-19T20:29:46.7429419Z tests/test_health.py::test_health[4]
2025-08-19T20:29:46.7430493Z   /home/runner/work/AWA-App/AWA-App/tests/test_health.py:22: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:29:46.7431498Z     return datetime.datetime.utcnow()
2025-08-19T20:29:46.7431676Z 
2025-08-19T20:29:46.7431808Z tests/test_smoke.py::test_health[0]
2025-08-19T20:29:46.7432096Z tests/test_smoke.py::test_health[1]
2025-08-19T20:29:46.7432375Z tests/test_smoke.py::test_health[2]
2025-08-19T20:29:46.7432658Z tests/test_smoke.py::test_health[3]
2025-08-19T20:29:46.7432936Z tests/test_smoke.py::test_health[4]
2025-08-19T20:29:46.7433992Z   /home/runner/work/AWA-App/AWA-App/tests/test_smoke.py:32: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:29:46.7434966Z     return datetime.datetime.utcnow()
2025-08-19T20:29:46.7435138Z 
2025-08-19T20:29:46.7435375Z services/api/tests/test_cors.py::test_cors_simple_get_allowed
2025-08-19T20:29:46.7436703Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_cors.py:27: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:29:46.7437728Z     return datetime.datetime.utcnow()
2025-08-19T20:29:46.7437896Z 
2025-08-19T20:29:46.7438095Z services/api/tests/test_health.py::test_health_route
2025-08-19T20:29:46.7439270Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_health.py:14: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:29:46.7440299Z     return datetime.datetime.utcnow()
2025-08-19T20:29:46.7440466Z 
2025-08-19T20:29:47.1535443Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T20:29:47.1538854Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_rate_limit.py:33: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:29:47.1540903Z     return datetime.datetime.utcnow()
2025-08-19T20:29:47.1541245Z 
2025-08-19T20:29:47.1541811Z services/api/tests/test_sentry_event.py::test_unhandled_exception_is_captured_and_tagged
2025-08-19T20:29:47.1544877Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_sentry_event.py:47: SentryHubDeprecationWarning: `sentry_sdk.Hub` is deprecated and will be removed in a future major release. Please consult our 1.x to 2.x migration guide for details on how to migrate `Hub` usage to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x
2025-08-19T20:29:47.1547190Z     hub = sentry_sdk.Hub.current
2025-08-19T20:29:47.1547402Z 
2025-08-19T20:29:47.1547964Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-08-19T20:29:47.1548564Z ================================ tests coverage ================================
2025-08-19T20:29:47.1549140Z _______________ coverage: platform linux, python 3.12.11-final-0 _______________
2025-08-19T20:29:47.1549470Z 
2025-08-19T20:29:47.1549652Z Coverage XML written to file coverage.xml
2025-08-19T20:29:47.1550095Z Required test coverage of 65% reached. Total coverage: 65.36%
2025-08-19T20:29:47.1550546Z =========================== short test summary info ============================
2025-08-19T20:29:47.1551343Z FAILED tests/test_sp_fees_ingestor.py::test_offline - sqlalchemy.exc.ProgrammingError: (psycopg.errors.SyntaxError) syntax error at or near ":"
2025-08-19T20:29:47.1552071Z LINE 3:     VALUES ($1, $2, $3, $4, $5, $6, :effective_date0::DATE),...
2025-08-19T20:29:47.1552416Z                                             ^
2025-08-19T20:29:47.1552658Z [SQL: 
2025-08-19T20:29:47.1553069Z     INSERT INTO test_fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)
2025-08-19T20:29:47.1554074Z     VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, :effective_date0::DATE), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, :effective_date1::DATE)
2025-08-19T20:29:47.1554862Z     ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;
2025-08-19T20:29:47.1555150Z     ]
2025-08-19T20:29:47.1556110Z [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp'}]
2025-08-19T20:29:47.1557191Z (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T20:29:47.1557650Z Sentry is attempting to send 0 pending events
2025-08-19T20:29:47.1557955Z Waiting up to True seconds
2025-08-19T20:29:47.1558200Z Press Ctrl-C to quit
2025-08-19T20:29:47.5523943Z ##[error]Process completed with exit code 1.
