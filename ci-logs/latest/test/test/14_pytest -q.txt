2025-08-19T16:06:45.9148756Z ##[group]Run pytest -q --cov=services
2025-08-19T16:06:45.9149333Z [36;1mpytest -q --cov=services[0m
2025-08-19T16:06:45.9197681Z shell: /usr/bin/bash -e {0}
2025-08-19T16:06:45.9197928Z env:
2025-08-19T16:06:45.9198139Z   REDIS_URL: redis://localhost:6379/0
2025-08-19T16:06:45.9198417Z   RATE_LIMIT_DEFAULT: 100/minute
2025-08-19T16:06:45.9198667Z   TRUST_X_FORWARDED: 1
2025-08-19T16:06:45.9198872Z   PG_USER: postgres
2025-08-19T16:06:45.9199072Z   PG_PASSWORD: pass
2025-08-19T16:06:45.9199258Z   PG_DATABASE: awa
2025-08-19T16:06:45.9199442Z   PG_HOST: localhost
2025-08-19T16:06:45.9199626Z   PG_PORT: 5432
2025-08-19T16:06:45.9200060Z   PG_SYNC_DSN: ***localhost:5432/awa
2025-08-19T16:06:45.9200473Z   PG_ASYNC_DSN: ***localhost:5432/awa
2025-08-19T16:06:45.9201000Z   DATABASE_URL: ***localhost:5432/awa
2025-08-19T16:06:45.9201465Z   DATA_DIR: /home/runner/work/_temp/awa-data
2025-08-19T16:06:45.9201912Z   ENABLE_LIVE: 0
2025-08-19T16:06:45.9202232Z   TESTING: 1
2025-08-19T16:06:45.9202856Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T16:06:45.9203658Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-08-19T16:06:45.9204385Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T16:06:45.9205053Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T16:06:45.9205707Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T16:06:45.9206371Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-08-19T16:06:45.9206936Z   POSTGRES_USER: postgres
2025-08-19T16:06:45.9207336Z   POSTGRES_PASSWORD: pass
2025-08-19T16:06:45.9207713Z   POSTGRES_DB: awa
2025-08-19T16:06:45.9208045Z   LLM_PROVIDER: lan
2025-08-19T16:06:45.9208431Z   LLM_BASE_URL: http://localhost:8000
2025-08-19T16:06:45.9208871Z ##[endgroup]
2025-08-19T16:07:14.4247963Z ........s.............................sssssss........................... [ 43%]
2025-08-19T16:07:47.1402530Z ..........................F............................................. [ 86%]
2025-08-19T16:07:47.8812528Z ......................                                                   [100%]
2025-08-19T16:07:47.8813614Z =================================== FAILURES ===================================
2025-08-19T16:07:47.8814216Z _________________________________ test_offline _________________________________
2025-08-19T16:07:47.8814555Z 
2025-08-19T16:07:47.8814908Z self = <sqlalchemy.engine.base.Connection object at 0x7f888629d8b0>
2025-08-19T16:07:47.8815753Z dialect = <sqlalchemy.dialects.postgresql.psycopg.PGDialect_psycopg object at 0x7f888629e2d0>
2025-08-19T16:07:47.8816807Z context = <sqlalchemy.dialects.postgresql.psycopg.PGExecutionContext_psycopg object at 0x7f888629d040>
2025-08-19T16:07:47.8817856Z statement = <sqlalchemy.dialects.postgresql.psycopg.PGCompiler_psycopg object at 0x7f888627b320>
2025-08-19T16:07:47.8818764Z parameters = [{'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}]
2025-08-19T16:07:47.8819154Z 
2025-08-19T16:07:47.8819262Z     def _exec_single_context(
2025-08-19T16:07:47.8819502Z         self,
2025-08-19T16:07:47.8819699Z         dialect: Dialect,
2025-08-19T16:07:47.8819991Z         context: ExecutionContext,
2025-08-19T16:07:47.8820286Z         statement: Union[str, Compiled],
2025-08-19T16:07:47.8820626Z         parameters: Optional[_AnyMultiExecuteParams],
2025-08-19T16:07:47.8821212Z     ) -> CursorResult[Any]:
2025-08-19T16:07:47.8821560Z         """continue the _execute_context() method for a single DBAPI
2025-08-19T16:07:47.8821963Z         cursor.execute() or cursor.executemany() call.
2025-08-19T16:07:47.8822285Z     
2025-08-19T16:07:47.8822452Z         """
2025-08-19T16:07:47.8822877Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-08-19T16:07:47.8823324Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-08-19T16:07:47.8823649Z     
2025-08-19T16:07:47.8823859Z             if generic_setinputsizes:
2025-08-19T16:07:47.8824114Z                 try:
2025-08-19T16:07:47.8824546Z                     dialect.do_set_input_sizes(
2025-08-19T16:07:47.8824908Z                         context.cursor, generic_setinputsizes, context
2025-08-19T16:07:47.8825206Z                     )
2025-08-19T16:07:47.8825452Z                 except BaseException as e:
2025-08-19T16:07:47.8825765Z                     self._handle_dbapi_exception(
2025-08-19T16:07:47.8826123Z                         e, str(statement), parameters, None, context
2025-08-19T16:07:47.8826409Z                     )
2025-08-19T16:07:47.8826595Z     
2025-08-19T16:07:47.8826820Z         cursor, str_statement, parameters = (
2025-08-19T16:07:47.8827099Z             context.cursor,
2025-08-19T16:07:47.8827349Z             context.statement,
2025-08-19T16:07:47.8827615Z             context.parameters,
2025-08-19T16:07:47.8827847Z         )
2025-08-19T16:07:47.8828012Z     
2025-08-19T16:07:47.8828274Z         effective_parameters: Optional[_AnyExecuteParams]
2025-08-19T16:07:47.8828572Z     
2025-08-19T16:07:47.8828776Z         if not context.executemany:
2025-08-19T16:07:47.8829090Z             effective_parameters = parameters[0]
2025-08-19T16:07:47.8829360Z         else:
2025-08-19T16:07:47.8829587Z             effective_parameters = parameters
2025-08-19T16:07:47.8829831Z     
2025-08-19T16:07:47.8830064Z         if self._has_events or self.engine._has_events:
2025-08-19T16:07:47.8830644Z             for fn in self.dispatch.before_cursor_execute:
2025-08-19T16:07:47.8831211Z                 str_statement, effective_parameters = fn(
2025-08-19T16:07:47.8831493Z                     self,
2025-08-19T16:07:47.8831701Z                     cursor,
2025-08-19T16:07:47.8831931Z                     str_statement,
2025-08-19T16:07:47.8832198Z                     effective_parameters,
2025-08-19T16:07:47.8832445Z                     context,
2025-08-19T16:07:47.8832874Z                     context.executemany,
2025-08-19T16:07:47.8833150Z                 )
2025-08-19T16:07:47.8833323Z     
2025-08-19T16:07:47.8833487Z         if self._echo:
2025-08-19T16:07:47.8833731Z             self._log_info(str_statement)
2025-08-19T16:07:47.8833964Z     
2025-08-19T16:07:47.8834166Z             stats = context._get_cache_stats()
2025-08-19T16:07:47.8834401Z     
2025-08-19T16:07:47.8834611Z             if not self.engine.hide_parameters:
2025-08-19T16:07:47.8834882Z                 self._log_info(
2025-08-19T16:07:47.8835121Z                     "[%s] %r",
2025-08-19T16:07:47.8835334Z                     stats,
2025-08-19T16:07:47.8835573Z                     sql_util._repr_params(
2025-08-19T16:07:47.8835858Z                         effective_parameters,
2025-08-19T16:07:47.8836128Z                         batches=10,
2025-08-19T16:07:47.8836418Z                         ismulti=context.executemany,
2025-08-19T16:07:47.8836676Z                     ),
2025-08-19T16:07:47.8836865Z                 )
2025-08-19T16:07:47.8837042Z             else:
2025-08-19T16:07:47.8837241Z                 self._log_info(
2025-08-19T16:07:47.8837559Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-08-19T16:07:47.8837866Z                     stats,
2025-08-19T16:07:47.8838062Z                 )
2025-08-19T16:07:47.8838227Z     
2025-08-19T16:07:47.8838416Z         evt_handled: bool = False
2025-08-19T16:07:47.8838657Z         try:
2025-08-19T16:07:47.8838933Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-08-19T16:07:47.8839436Z                 effective_parameters = cast(
2025-08-19T16:07:47.8839778Z                     "_CoreMultiExecuteParams", effective_parameters
2025-08-19T16:07:47.8840055Z                 )
2025-08-19T16:07:47.8840273Z                 if self.dialect._has_events:
2025-08-19T16:07:47.8840596Z                     for fn in self.dialect.dispatch.do_executemany:
2025-08-19T16:07:47.8840894Z                         if fn(
2025-08-19T16:07:47.8841132Z                             cursor,
2025-08-19T16:07:47.8841382Z                             str_statement,
2025-08-19T16:07:47.8841659Z                             effective_parameters,
2025-08-19T16:07:47.8842056Z                             context,
2025-08-19T16:07:47.8842285Z                         ):
2025-08-19T16:07:47.8842525Z                             evt_handled = True
2025-08-19T16:07:47.8843027Z                             break
2025-08-19T16:07:47.8843279Z                 if not evt_handled:
2025-08-19T16:07:47.8843560Z                     self.dialect.do_executemany(
2025-08-19T16:07:47.8843835Z                         cursor,
2025-08-19T16:07:47.8844073Z                         str_statement,
2025-08-19T16:07:47.8844343Z                         effective_parameters,
2025-08-19T16:07:47.8844608Z                         context,
2025-08-19T16:07:47.8844824Z                     )
2025-08-19T16:07:47.8845113Z             elif not effective_parameters and context.no_parameters:
2025-08-19T16:07:47.8845451Z                 if self.dialect._has_events:
2025-08-19T16:07:47.8845789Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-08-19T16:07:47.8846159Z                         if fn(cursor, str_statement, context):
2025-08-19T16:07:47.8846461Z                             evt_handled = True
2025-08-19T16:07:47.8846724Z                             break
2025-08-19T16:07:47.8846968Z                 if not evt_handled:
2025-08-19T16:07:47.8847249Z                     self.dialect.do_execute_no_params(
2025-08-19T16:07:47.8847561Z                         cursor, str_statement, context
2025-08-19T16:07:47.8847811Z                     )
2025-08-19T16:07:47.8847994Z             else:
2025-08-19T16:07:47.8848215Z                 effective_parameters = cast(
2025-08-19T16:07:47.8848542Z                     "_CoreSingleExecuteParams", effective_parameters
2025-08-19T16:07:47.8848823Z                 )
2025-08-19T16:07:47.8849039Z                 if self.dialect._has_events:
2025-08-19T16:07:47.8849360Z                     for fn in self.dialect.dispatch.do_execute:
2025-08-19T16:07:47.8849657Z                         if fn(
2025-08-19T16:07:47.8849900Z                             cursor,
2025-08-19T16:07:47.8850166Z                             str_statement,
2025-08-19T16:07:47.8850451Z                             effective_parameters,
2025-08-19T16:07:47.8850723Z                             context,
2025-08-19T16:07:47.8850952Z                         ):
2025-08-19T16:07:47.8851198Z                             evt_handled = True
2025-08-19T16:07:47.8851459Z                             break
2025-08-19T16:07:47.8851704Z                 if not evt_handled:
2025-08-19T16:07:47.8852003Z >                   self.dialect.do_execute(
2025-08-19T16:07:47.8852349Z                         cursor, str_statement, effective_parameters, context
2025-08-19T16:07:47.8852787Z                     )
2025-08-19T16:07:47.8852918Z 
2025-08-19T16:07:47.8853326Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: 
2025-08-19T16:07:47.8853912Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T16:07:47.8854604Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T16:07:47.8855150Z     cursor.execute(statement, parameters)
2025-08-19T16:07:47.8855519Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T16:07:47.8855860Z 
2025-08-19T16:07:47.8856212Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7f88863a2810>
2025-08-19T16:07:47.8857389Z query = '\n    INSERT INTO fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)\n    VALUES (%(asi...1)s, %(currency1)s, %(source1)s, %(effective_date1)s)\n    ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;\n    '
2025-08-19T16:07:47.8858348Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T16:07:47.8858621Z 
2025-08-19T16:07:47.8858694Z     def execute(
2025-08-19T16:07:47.8858875Z         self,
2025-08-19T16:07:47.8859167Z         query: Query,
2025-08-19T16:07:47.8859400Z         params: Params | None = None,
2025-08-19T16:07:47.8859638Z         *,
2025-08-19T16:07:47.8859842Z         prepare: bool | None = None,
2025-08-19T16:07:47.8860107Z         binary: bool | None = None,
2025-08-19T16:07:47.8860351Z     ) -> Self:
2025-08-19T16:07:47.8860533Z         """
2025-08-19T16:07:47.8860759Z         Execute a query or command to the database.
2025-08-19T16:07:47.8861020Z         """
2025-08-19T16:07:47.8861181Z         try:
2025-08-19T16:07:47.8861385Z             with self._conn.lock:
2025-08-19T16:07:47.8861639Z                 self._conn.wait(
2025-08-19T16:07:47.8862000Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T16:07:47.8862324Z                 )
2025-08-19T16:07:47.8862543Z         except e._NO_TRACEBACK as ex:
2025-08-19T16:07:47.8862948Z >           raise ex.with_traceback(None)
2025-08-19T16:07:47.8863480Z E           psycopg.errors.UndefinedColumn: column "marketplace" of relation "fees_raw" does not exist
2025-08-19T16:07:47.8864080Z E           LINE 2:     INSERT INTO fees_raw (asin, marketplace, fee_type, amoun...
2025-08-19T16:07:47.8864465Z E                                                   ^
2025-08-19T16:07:47.8864641Z 
2025-08-19T16:07:47.8865055Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: UndefinedColumn
2025-08-19T16:07:47.8865455Z 
2025-08-19T16:07:47.8865694Z The above exception was the direct cause of the following exception:
2025-08-19T16:07:47.8865949Z 
2025-08-19T16:07:47.8866210Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f888627aff0>
2025-08-19T16:07:47.8866718Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_offline0')
2025-08-19T16:07:47.8866970Z 
2025-08-19T16:07:47.8867099Z     def test_offline(monkeypatch, tmp_path):
2025-08-19T16:07:47.8867397Z         os.environ["ENABLE_LIVE"] = "0"
2025-08-19T16:07:47.8867686Z         os.environ["SP_REFRESH_TOKEN"] = "t"
2025-08-19T16:07:47.8867978Z         os.environ["SP_CLIENT_ID"] = "i"
2025-08-19T16:07:47.8868260Z         os.environ["SP_CLIENT_SECRET"] = "s"
2025-08-19T16:07:47.8868540Z         os.environ["SELLER_ID"] = "seller"
2025-08-19T16:07:47.8868811Z         os.environ["REGION"] = "EU"
2025-08-19T16:07:47.8869118Z         os.environ["DATABASE_URL"] = build_dsn(sync=True)
2025-08-19T16:07:47.8869458Z >       res = sp_fees_ingestor.main()
2025-08-19T16:07:47.8869721Z               ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T16:07:47.8869867Z 
2025-08-19T16:07:47.8870007Z tests/test_sp_fees_ingestor.py:50: 
2025-08-19T16:07:47.8870356Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T16:07:47.8870706Z services/etl/sp_fees_ingestor.py:79: in main
2025-08-19T16:07:47.8871101Z     repo.upsert_fees_raw(engine, rows, testing=os.getenv("TESTING") == "1")
2025-08-19T16:07:47.8871552Z services/fees_h10/repository.py:66: in upsert_fees_raw
2025-08-19T16:07:47.8871902Z     res1 = conn.execute(text(insert_sql), params)
2025-08-19T16:07:47.8872204Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T16:07:47.8872976Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-08-19T16:07:47.8873488Z     return meth(
2025-08-19T16:07:47.8874095Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-08-19T16:07:47.8874815Z     return connection._execute_clauseelement(
2025-08-19T16:07:47.8875514Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-08-19T16:07:47.8876069Z     ret = self._execute_context(
2025-08-19T16:07:47.8876688Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-08-19T16:07:47.8877226Z     return self._exec_single_context(
2025-08-19T16:07:47.8877865Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-08-19T16:07:47.8878521Z     self._handle_dbapi_exception(
2025-08-19T16:07:47.8879200Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-08-19T16:07:47.8879848Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-08-19T16:07:47.8880575Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-08-19T16:07:47.8881108Z     self.dialect.do_execute(
2025-08-19T16:07:47.8881699Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T16:07:47.8882239Z     cursor.execute(statement, parameters)
2025-08-19T16:07:47.8882618Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T16:07:47.8882939Z 
2025-08-19T16:07:47.8883293Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7f88863a2810>
2025-08-19T16:07:47.8884466Z query = '\n    INSERT INTO fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)\n    VALUES (%(asi...1)s, %(currency1)s, %(source1)s, %(effective_date1)s)\n    ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;\n    '
2025-08-19T16:07:47.8885418Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T16:07:47.8885692Z 
2025-08-19T16:07:47.8885765Z     def execute(
2025-08-19T16:07:47.8885946Z         self,
2025-08-19T16:07:47.8886124Z         query: Query,
2025-08-19T16:07:47.8886359Z         params: Params | None = None,
2025-08-19T16:07:47.8886591Z         *,
2025-08-19T16:07:47.8886797Z         prepare: bool | None = None,
2025-08-19T16:07:47.8887061Z         binary: bool | None = None,
2025-08-19T16:07:47.8887293Z     ) -> Self:
2025-08-19T16:07:47.8887467Z         """
2025-08-19T16:07:47.8887688Z         Execute a query or command to the database.
2025-08-19T16:07:47.8887951Z         """
2025-08-19T16:07:47.8888113Z         try:
2025-08-19T16:07:47.8888319Z             with self._conn.lock:
2025-08-19T16:07:47.8888571Z                 self._conn.wait(
2025-08-19T16:07:47.8888931Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T16:07:47.8889256Z                 )
2025-08-19T16:07:47.8889474Z         except e._NO_TRACEBACK as ex:
2025-08-19T16:07:47.8889765Z >           raise ex.with_traceback(None)
2025-08-19T16:07:47.8890444Z E           sqlalchemy.exc.ProgrammingError: (psycopg.errors.UndefinedColumn) column "marketplace" of relation "fees_raw" does not exist
2025-08-19T16:07:47.8891149Z E           LINE 2:     INSERT INTO fees_raw (asin, marketplace, fee_type, amoun...
2025-08-19T16:07:47.8891536Z E                                                   ^
2025-08-19T16:07:47.8891787Z E           [SQL: 
2025-08-19T16:07:47.8892235Z E               INSERT INTO fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)
2025-08-19T16:07:47.8893415Z E               VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, %(effective_date0)s), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, %(effective_date1)s)
2025-08-19T16:07:47.8894320Z E               ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;
2025-08-19T16:07:47.8894614Z E               ]
2025-08-19T16:07:47.8895739Z E           [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'effective_date0': None, 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp', 'effective_date1': None}]
2025-08-19T16:07:47.8896754Z E           (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T16:07:47.8897003Z 
2025-08-19T16:07:47.8897417Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: ProgrammingError
2025-08-19T16:07:47.8898112Z =============================== warnings summary ===============================
2025-08-19T16:07:47.8898462Z services/alert_bot/tests/test_smoke.py:5
2025-08-19T16:07:47.8899723Z   /home/runner/work/AWA-App/AWA-App/services/alert_bot/tests/test_smoke.py:5: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
2025-08-19T16:07:47.8900839Z     import pkg_resources  # noqa: F401
2025-08-19T16:07:47.8901013Z 
2025-08-19T16:07:47.8901178Z tests/api/test_ingest_endpoints.py: 12 warnings
2025-08-19T16:07:47.8901519Z tests/ingest/test_tasks_eager.py: 3 warnings
2025-08-19T16:07:47.8901826Z tests/test_api_fast.py: 1 warning
2025-08-19T16:07:47.8902100Z tests/test_health.py: 5 warnings
2025-08-19T16:07:47.8902370Z tests/test_smoke.py: 5 warnings
2025-08-19T16:07:47.8902765Z services/api/tests/test_cors.py: 1 warning
2025-08-19T16:07:47.8903116Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T16:07:47.8903453Z services/api/tests/test_health.py: 1 warning
2025-08-19T16:07:47.8903799Z services/api/tests/test_rate_limit.py: 122 warnings
2025-08-19T16:07:47.8904183Z services/api/tests/test_roi_basic_auth.py: 4 warnings
2025-08-19T16:07:47.8904552Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T16:07:47.8904926Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T16:07:47.8906430Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/asgi_correlation_id/extensions/sentry.py:27: DeprecationWarning: sentry_sdk.configure_scope is deprecated and will be removed in the next major version. Please consult our migration guide to learn how to migrate to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x#scope-configuring
2025-08-19T16:07:47.8907731Z     with configure_scope() as scope:
2025-08-19T16:07:47.8907908Z 
2025-08-19T16:07:47.8908068Z tests/api/test_ingest_endpoints.py: 3 warnings
2025-08-19T16:07:47.8908381Z tests/test_api_fast.py: 1 warning
2025-08-19T16:07:47.8908657Z tests/test_health.py: 5 warnings
2025-08-19T16:07:47.8908929Z tests/test_smoke.py: 5 warnings
2025-08-19T16:07:47.8909226Z services/api/tests/test_cors.py: 3 warnings
2025-08-19T16:07:47.8909576Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T16:07:47.8909918Z services/api/tests/test_health.py: 1 warning
2025-08-19T16:07:47.8910271Z services/api/tests/test_rate_limit.py: 2 warnings
2025-08-19T16:07:47.8910632Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T16:07:47.8911004Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T16:07:47.8911911Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/fastapi_limiter/__init__.py:89: DeprecationWarning: Call to deprecated close. (Use aclose() instead) -- Deprecated since version 5.0.1.
2025-08-19T16:07:47.8912771Z     await cls.redis.close()
2025-08-19T16:07:47.8912922Z 
2025-08-19T16:07:47.8913101Z tests/test_api_fast.py::test_health_endpoint
2025-08-19T16:07:47.8914198Z   /home/runner/work/AWA-App/AWA-App/tests/test_api_fast.py:13: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T16:07:47.8915307Z     return datetime.datetime.utcnow()
2025-08-19T16:07:47.8915487Z 
2025-08-19T16:07:47.8915611Z tests/test_api_fast.py: 1 warning
2025-08-19T16:07:47.8915883Z tests/test_health.py: 5 warnings
2025-08-19T16:07:47.8916151Z tests/test_smoke.py: 5 warnings
2025-08-19T16:07:47.8916432Z services/api/tests/test_cors.py: 1 warning
2025-08-19T16:07:47.8916750Z services/api/tests/test_health.py: 1 warning
2025-08-19T16:07:47.8917095Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T16:07:47.8918235Z   /home/runner/work/AWA-App/AWA-App/services/api/routes/health.py:24: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T16:07:47.8919418Z     app_now = datetime.utcnow().replace(tzinfo=timezone.utc)
2025-08-19T16:07:47.8919643Z 
2025-08-19T16:07:47.8919784Z tests/test_health.py::test_health[0]
2025-08-19T16:07:47.8920105Z tests/test_health.py::test_health[1]
2025-08-19T16:07:47.8920384Z tests/test_health.py::test_health[2]
2025-08-19T16:07:47.8920662Z tests/test_health.py::test_health[3]
2025-08-19T16:07:47.8920941Z tests/test_health.py::test_health[4]
2025-08-19T16:07:47.8921994Z   /home/runner/work/AWA-App/AWA-App/tests/test_health.py:22: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T16:07:47.8923061Z     return datetime.datetime.utcnow()
2025-08-19T16:07:47.8923239Z 
2025-08-19T16:07:47.8923372Z tests/test_smoke.py::test_health[0]
2025-08-19T16:07:47.8923649Z tests/test_smoke.py::test_health[1]
2025-08-19T16:07:47.8923924Z tests/test_smoke.py::test_health[2]
2025-08-19T16:07:47.8924197Z tests/test_smoke.py::test_health[3]
2025-08-19T16:07:47.8924474Z tests/test_smoke.py::test_health[4]
2025-08-19T16:07:47.8925526Z   /home/runner/work/AWA-App/AWA-App/tests/test_smoke.py:32: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T16:07:47.8926485Z     return datetime.datetime.utcnow()
2025-08-19T16:07:47.8926657Z 
2025-08-19T16:07:47.8926879Z services/api/tests/test_cors.py::test_cors_simple_get_allowed
2025-08-19T16:07:47.8928061Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_cors.py:27: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T16:07:47.8929065Z     return datetime.datetime.utcnow()
2025-08-19T16:07:47.8929237Z 
2025-08-19T16:07:47.8929424Z services/api/tests/test_health.py::test_health_route
2025-08-19T16:07:47.8930578Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_health.py:14: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T16:07:47.8931597Z     return datetime.datetime.utcnow()
2025-08-19T16:07:47.8931769Z 
2025-08-19T16:07:47.8931939Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T16:07:47.8933214Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_rate_limit.py:33: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T16:07:48.3563278Z     return datetime.datetime.utcnow()
2025-08-19T16:07:48.3563702Z 
2025-08-19T16:07:48.3564534Z services/api/tests/test_sentry_event.py::test_unhandled_exception_is_captured_and_tagged
2025-08-19T16:07:48.3568435Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_sentry_event.py:47: SentryHubDeprecationWarning: `sentry_sdk.Hub` is deprecated and will be removed in a future major release. Please consult our 1.x to 2.x migration guide for details on how to migrate `Hub` usage to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x
2025-08-19T16:07:48.3571464Z     hub = sentry_sdk.Hub.current
2025-08-19T16:07:48.3571793Z 
2025-08-19T16:07:48.3572349Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-08-19T16:07:48.3573393Z ================================ tests coverage ================================
2025-08-19T16:07:48.3574024Z _______________ coverage: platform linux, python 3.12.11-final-0 _______________
2025-08-19T16:07:48.3574628Z 
2025-08-19T16:07:48.3574831Z Coverage XML written to file coverage.xml
2025-08-19T16:07:48.3575354Z Required test coverage of 65% reached. Total coverage: 65.32%
2025-08-19T16:07:48.3575937Z =========================== short test summary info ============================
2025-08-19T16:07:48.3577206Z FAILED tests/test_sp_fees_ingestor.py::test_offline - sqlalchemy.exc.ProgrammingError: (psycopg.errors.UndefinedColumn) column "marketplace" of relation "fees_raw" does not exist
2025-08-19T16:07:48.3578361Z LINE 2:     INSERT INTO fees_raw (asin, marketplace, fee_type, amoun...
2025-08-19T16:07:48.3578829Z                                         ^
2025-08-19T16:07:48.3579068Z [SQL: 
2025-08-19T16:07:48.3579462Z     INSERT INTO fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)
2025-08-19T16:07:48.3580407Z     VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, %(effective_date0)s), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, %(effective_date1)s)
2025-08-19T16:07:48.3581167Z     ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;
2025-08-19T16:07:48.3581452Z     ]
2025-08-19T16:07:48.3582572Z [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'effective_date0': None, 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp', 'effective_date1': None}]
2025-08-19T16:07:48.3583823Z (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T16:07:48.3584300Z Sentry is attempting to send 0 pending events
2025-08-19T16:07:48.3584609Z Waiting up to True seconds
2025-08-19T16:07:48.3584845Z Press Ctrl-C to quit
2025-08-19T16:07:48.7956880Z ##[error]Process completed with exit code 1.
