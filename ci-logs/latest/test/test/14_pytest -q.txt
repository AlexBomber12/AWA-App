2025-08-19T20:25:19.1525458Z ##[group]Run pytest -q --cov=services
2025-08-19T20:25:19.1525805Z [36;1mpytest -q --cov=services[0m
2025-08-19T20:25:19.1567114Z shell: /usr/bin/bash -e {0}
2025-08-19T20:25:19.1567350Z env:
2025-08-19T20:25:19.1567838Z   REDIS_URL: redis://localhost:6379/0
2025-08-19T20:25:19.1568119Z   RATE_LIMIT_DEFAULT: 100/minute
2025-08-19T20:25:19.1568349Z   TRUST_X_FORWARDED: 1
2025-08-19T20:25:19.1568546Z   PG_USER: postgres
2025-08-19T20:25:19.1568736Z   PG_PASSWORD: pass
2025-08-19T20:25:19.1568924Z   PG_DATABASE: awa
2025-08-19T20:25:19.1569101Z   PG_HOST: localhost
2025-08-19T20:25:19.1569289Z   PG_PORT: 5432
2025-08-19T20:25:19.1569731Z   PG_SYNC_DSN: ***localhost:5432/awa
2025-08-19T20:25:19.1570147Z   PG_ASYNC_DSN: ***localhost:5432/awa
2025-08-19T20:25:19.1570645Z   DATABASE_URL: ***localhost:5432/awa
2025-08-19T20:25:19.1570912Z   DATA_DIR: /home/runner/work/_temp/awa-data
2025-08-19T20:25:19.1571165Z   ENABLE_LIVE: 0
2025-08-19T20:25:19.1571341Z   TESTING: 1
2025-08-19T20:25:19.1571581Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:25:19.1572004Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-08-19T20:25:19.1572400Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:25:19.1572753Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:25:19.1573104Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:25:19.1573457Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-08-19T20:25:19.1573759Z   POSTGRES_USER: postgres
2025-08-19T20:25:19.1573967Z   POSTGRES_PASSWORD: pass
2025-08-19T20:25:19.1574167Z   POSTGRES_DB: awa
2025-08-19T20:25:19.1574353Z   LLM_PROVIDER: lan
2025-08-19T20:25:19.1574561Z   LLM_BASE_URL: http://localhost:8000
2025-08-19T20:25:19.1574802Z ##[endgroup]
2025-08-19T20:25:57.8417130Z ........s.............................sssssss........................... [ 43%]
2025-08-19T20:26:30.6713611Z ..........................F............................................. [ 86%]
2025-08-19T20:26:31.4450064Z ......................                                                   [100%]
2025-08-19T20:26:31.4450981Z =================================== FAILURES ===================================
2025-08-19T20:26:31.4451976Z _________________________________ test_offline _________________________________
2025-08-19T20:26:31.4452525Z 
2025-08-19T20:26:31.4453081Z self = <sqlalchemy.engine.base.Connection object at 0x7fb8143b4e90>
2025-08-19T20:26:31.4454476Z dialect = <sqlalchemy.dialects.postgresql.psycopg.PGDialect_psycopg object at 0x7fb8143b45c0>
2025-08-19T20:26:31.4456035Z context = <sqlalchemy.dialects.postgresql.psycopg.PGExecutionContext_psycopg object at 0x7fb8143b46e0>
2025-08-19T20:26:31.4457098Z statement = <sqlalchemy.dialects.postgresql.psycopg.PGCompiler_psycopg object at 0x7fb8143b5970>
2025-08-19T20:26:31.4458249Z parameters = [{'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}]
2025-08-19T20:26:31.4458614Z 
2025-08-19T20:26:31.4458746Z     def _exec_single_context(
2025-08-19T20:26:31.4459018Z         self,
2025-08-19T20:26:31.4459245Z         dialect: Dialect,
2025-08-19T20:26:31.4459547Z         context: ExecutionContext,
2025-08-19T20:26:31.4460167Z         statement: Union[str, Compiled],
2025-08-19T20:26:31.4460578Z         parameters: Optional[_AnyMultiExecuteParams],
2025-08-19T20:26:31.4460949Z     ) -> CursorResult[Any]:
2025-08-19T20:26:31.4461351Z         """continue the _execute_context() method for a single DBAPI
2025-08-19T20:26:31.4461820Z         cursor.execute() or cursor.executemany() call.
2025-08-19T20:26:31.4462153Z     
2025-08-19T20:26:31.4462345Z         """
2025-08-19T20:26:31.4462667Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-08-19T20:26:31.4463179Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-08-19T20:26:31.4463557Z     
2025-08-19T20:26:31.4463798Z             if generic_setinputsizes:
2025-08-19T20:26:31.4464088Z                 try:
2025-08-19T20:26:31.4464593Z                     dialect.do_set_input_sizes(
2025-08-19T20:26:31.4465022Z                         context.cursor, generic_setinputsizes, context
2025-08-19T20:26:31.4465375Z                     )
2025-08-19T20:26:31.4465667Z                 except BaseException as e:
2025-08-19T20:26:31.4466032Z                     self._handle_dbapi_exception(
2025-08-19T20:26:31.4466441Z                         e, str(statement), parameters, None, context
2025-08-19T20:26:31.4466786Z                     )
2025-08-19T20:26:31.4467001Z     
2025-08-19T20:26:31.4467235Z         cursor, str_statement, parameters = (
2025-08-19T20:26:31.4467717Z             context.cursor,
2025-08-19T20:26:31.4467984Z             context.statement,
2025-08-19T20:26:31.4468243Z             context.parameters,
2025-08-19T20:26:31.4468467Z         )
2025-08-19T20:26:31.4468628Z     
2025-08-19T20:26:31.4468887Z         effective_parameters: Optional[_AnyExecuteParams]
2025-08-19T20:26:31.4469168Z     
2025-08-19T20:26:31.4469369Z         if not context.executemany:
2025-08-19T20:26:31.4469673Z             effective_parameters = parameters[0]
2025-08-19T20:26:31.4469924Z         else:
2025-08-19T20:26:31.4470214Z             effective_parameters = parameters
2025-08-19T20:26:31.4470636Z     
2025-08-19T20:26:31.4471040Z         if self._has_events or self.engine._has_events:
2025-08-19T20:26:31.4471645Z             for fn in self.dispatch.before_cursor_execute:
2025-08-19T20:26:31.4472066Z                 str_statement, effective_parameters = fn(
2025-08-19T20:26:31.4472339Z                     self,
2025-08-19T20:26:31.4472545Z                     cursor,
2025-08-19T20:26:31.4472778Z                     str_statement,
2025-08-19T20:26:31.4473055Z                     effective_parameters,
2025-08-19T20:26:31.4473303Z                     context,
2025-08-19T20:26:31.4473547Z                     context.executemany,
2025-08-19T20:26:31.4473790Z                 )
2025-08-19T20:26:31.4473967Z     
2025-08-19T20:26:31.4474133Z         if self._echo:
2025-08-19T20:26:31.4474376Z             self._log_info(str_statement)
2025-08-19T20:26:31.4474603Z     
2025-08-19T20:26:31.4474812Z             stats = context._get_cache_stats()
2025-08-19T20:26:31.4475052Z     
2025-08-19T20:26:31.4475281Z             if not self.engine.hide_parameters:
2025-08-19T20:26:31.4475566Z                 self._log_info(
2025-08-19T20:26:31.4475806Z                     "[%s] %r",
2025-08-19T20:26:31.4476022Z                     stats,
2025-08-19T20:26:31.4476357Z                     sql_util._repr_params(
2025-08-19T20:26:31.4476680Z                         effective_parameters,
2025-08-19T20:26:31.4476960Z                         batches=10,
2025-08-19T20:26:31.4477255Z                         ismulti=context.executemany,
2025-08-19T20:26:31.4477701Z                     ),
2025-08-19T20:26:31.4477952Z                 )
2025-08-19T20:26:31.4478136Z             else:
2025-08-19T20:26:31.4478347Z                 self._log_info(
2025-08-19T20:26:31.4478682Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-08-19T20:26:31.4479001Z                     stats,
2025-08-19T20:26:31.4479203Z                 )
2025-08-19T20:26:31.4479377Z     
2025-08-19T20:26:31.4479747Z         evt_handled: bool = False
2025-08-19T20:26:31.4479984Z         try:
2025-08-19T20:26:31.4480267Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-08-19T20:26:31.4482464Z                 effective_parameters = cast(
2025-08-19T20:26:31.4483032Z                     "_CoreMultiExecuteParams", effective_parameters
2025-08-19T20:26:31.4483495Z                 )
2025-08-19T20:26:31.4483938Z                 if self.dialect._has_events:
2025-08-19T20:26:31.4484485Z                     for fn in self.dialect.dispatch.do_executemany:
2025-08-19T20:26:31.4485009Z                         if fn(
2025-08-19T20:26:31.4485409Z                             cursor,
2025-08-19T20:26:31.4485833Z                             str_statement,
2025-08-19T20:26:31.4486304Z                             effective_parameters,
2025-08-19T20:26:31.4486843Z                             context,
2025-08-19T20:26:31.4487081Z                         ):
2025-08-19T20:26:31.4487335Z                             evt_handled = True
2025-08-19T20:26:31.4487848Z                             break
2025-08-19T20:26:31.4488102Z                 if not evt_handled:
2025-08-19T20:26:31.4488388Z                     self.dialect.do_executemany(
2025-08-19T20:26:31.4488666Z                         cursor,
2025-08-19T20:26:31.4488911Z                         str_statement,
2025-08-19T20:26:31.4489185Z                         effective_parameters,
2025-08-19T20:26:31.4489449Z                         context,
2025-08-19T20:26:31.4489667Z                     )
2025-08-19T20:26:31.4489965Z             elif not effective_parameters and context.no_parameters:
2025-08-19T20:26:31.4490310Z                 if self.dialect._has_events:
2025-08-19T20:26:31.4490652Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-08-19T20:26:31.4491018Z                         if fn(cursor, str_statement, context):
2025-08-19T20:26:31.4491324Z                             evt_handled = True
2025-08-19T20:26:31.4491586Z                             break
2025-08-19T20:26:31.4491834Z                 if not evt_handled:
2025-08-19T20:26:31.4492119Z                     self.dialect.do_execute_no_params(
2025-08-19T20:26:31.4492426Z                         cursor, str_statement, context
2025-08-19T20:26:31.4492673Z                     )
2025-08-19T20:26:31.4492859Z             else:
2025-08-19T20:26:31.4493087Z                 effective_parameters = cast(
2025-08-19T20:26:31.4493420Z                     "_CoreSingleExecuteParams", effective_parameters
2025-08-19T20:26:31.4493698Z                 )
2025-08-19T20:26:31.4493918Z                 if self.dialect._has_events:
2025-08-19T20:26:31.4494237Z                     for fn in self.dialect.dispatch.do_execute:
2025-08-19T20:26:31.4494528Z                         if fn(
2025-08-19T20:26:31.4494769Z                             cursor,
2025-08-19T20:26:31.4495023Z                             str_statement,
2025-08-19T20:26:31.4495298Z                             effective_parameters,
2025-08-19T20:26:31.4495571Z                             context,
2025-08-19T20:26:31.4495796Z                         ):
2025-08-19T20:26:31.4496036Z                             evt_handled = True
2025-08-19T20:26:31.4496302Z                             break
2025-08-19T20:26:31.4496543Z                 if not evt_handled:
2025-08-19T20:26:31.4496835Z >                   self.dialect.do_execute(
2025-08-19T20:26:31.4497181Z                         cursor, str_statement, effective_parameters, context
2025-08-19T20:26:31.4497474Z                     )
2025-08-19T20:26:31.4497898Z 
2025-08-19T20:26:31.4498324Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: 
2025-08-19T20:26:31.4498909Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:26:31.4499592Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T20:26:31.4500147Z     cursor.execute(statement, parameters)
2025-08-19T20:26:31.4500670Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:26:31.4500874Z 
2025-08-19T20:26:31.4501229Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7fb81466e990>
2025-08-19T20:26:31.4502463Z query = '\n    INSERT INTO test_fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)\n    VALUES (..., %(currency1)s, %(source1)s, :effective_date1::DATE)\n    ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;\n    '
2025-08-19T20:26:31.4503536Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T20:26:31.4503815Z 
2025-08-19T20:26:31.4503891Z     def execute(
2025-08-19T20:26:31.4504076Z         self,
2025-08-19T20:26:31.4504373Z         query: Query,
2025-08-19T20:26:31.4504612Z         params: Params | None = None,
2025-08-19T20:26:31.4504850Z         *,
2025-08-19T20:26:31.4505054Z         prepare: bool | None = None,
2025-08-19T20:26:31.4505324Z         binary: bool | None = None,
2025-08-19T20:26:31.4505554Z     ) -> Self:
2025-08-19T20:26:31.4505729Z         """
2025-08-19T20:26:31.4505961Z         Execute a query or command to the database.
2025-08-19T20:26:31.4506214Z         """
2025-08-19T20:26:31.4506376Z         try:
2025-08-19T20:26:31.4506588Z             with self._conn.lock:
2025-08-19T20:26:31.4506846Z                 self._conn.wait(
2025-08-19T20:26:31.4507208Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T20:26:31.4507723Z                 )
2025-08-19T20:26:31.4507958Z         except e._NO_TRACEBACK as ex:
2025-08-19T20:26:31.4508257Z >           raise ex.with_traceback(None)
2025-08-19T20:26:31.4508652Z E           psycopg.errors.SyntaxError: syntax error at or near ":"
2025-08-19T20:26:31.4509135Z E           LINE 3:     VALUES ($1, $2, $3, $4, $5, $6, :effective_date0::DATE),...
2025-08-19T20:26:31.4509517Z E                                                       ^
2025-08-19T20:26:31.4509696Z 
2025-08-19T20:26:31.4510101Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: SyntaxError
2025-08-19T20:26:31.4510479Z 
2025-08-19T20:26:31.4510729Z The above exception was the direct cause of the following exception:
2025-08-19T20:26:31.4510982Z 
2025-08-19T20:26:31.4511243Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fb814532120>
2025-08-19T20:26:31.4511754Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_offline0')
2025-08-19T20:26:31.4512446Z pg_engine = Engine(***localhost:5432/awa)
2025-08-19T20:26:31.4512764Z ensure_test_fees_raw_table = None
2025-08-19T20:26:31.4512932Z 
2025-08-19T20:26:31.4513210Z     def test_offline(monkeypatch, tmp_path, pg_engine, ensure_test_fees_raw_table) -> None:
2025-08-19T20:26:31.4513676Z         os.environ["FEES_RAW_TABLE"] = "test_fees_raw"
2025-08-19T20:26:31.4513979Z         os.environ["ENABLE_LIVE"] = "0"
2025-08-19T20:26:31.4514271Z         os.environ["SP_REFRESH_TOKEN"] = "t"
2025-08-19T20:26:31.4514567Z         os.environ["SP_CLIENT_ID"] = "i"
2025-08-19T20:26:31.4514851Z         os.environ["SP_CLIENT_SECRET"] = "s"
2025-08-19T20:26:31.4515135Z         os.environ["SELLER_ID"] = "seller"
2025-08-19T20:26:31.4515412Z         os.environ["REGION"] = "EU"
2025-08-19T20:26:31.4515717Z         os.environ["DATABASE_URL"] = build_dsn(sync=True)
2025-08-19T20:26:31.4516046Z         _ = pg_engine, ensure_test_fees_raw_table
2025-08-19T20:26:31.4516357Z >       res = sp_fees_ingestor.main()
2025-08-19T20:26:31.4516621Z               ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T20:26:31.4516775Z 
2025-08-19T20:26:31.4516913Z tests/test_sp_fees_ingestor.py:52: 
2025-08-19T20:26:31.4517268Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:26:31.4517815Z services/etl/sp_fees_ingestor.py:79: in main
2025-08-19T20:26:31.4518234Z     repo.upsert_fees_raw(engine, rows, testing=os.getenv("TESTING") == "1")
2025-08-19T20:26:31.4518829Z services/fees_h10/repository.py:67: in upsert_fees_raw
2025-08-19T20:26:31.4519183Z     res1 = conn.execute(text(insert_sql), params)
2025-08-19T20:26:31.4519479Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T20:26:31.4520104Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-08-19T20:26:31.4520583Z     return meth(
2025-08-19T20:26:31.4521196Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-08-19T20:26:31.4521784Z     return connection._execute_clauseelement(
2025-08-19T20:26:31.4522460Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-08-19T20:26:31.4523019Z     ret = self._execute_context(
2025-08-19T20:26:31.4523754Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-08-19T20:26:31.4524302Z     return self._exec_single_context(
2025-08-19T20:26:31.4524940Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-08-19T20:26:31.4525493Z     self._handle_dbapi_exception(
2025-08-19T20:26:31.4526154Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-08-19T20:26:31.4526822Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-08-19T20:26:31.4527728Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-08-19T20:26:31.4528272Z     self.dialect.do_execute(
2025-08-19T20:26:31.4528866Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T20:26:31.4529418Z     cursor.execute(statement, parameters)
2025-08-19T20:26:31.4529789Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:26:31.4530005Z 
2025-08-19T20:26:31.4530360Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7fb81466e990>
2025-08-19T20:26:31.4531555Z query = '\n    INSERT INTO test_fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)\n    VALUES (..., %(currency1)s, %(source1)s, :effective_date1::DATE)\n    ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;\n    '
2025-08-19T20:26:31.4532511Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T20:26:31.4532782Z 
2025-08-19T20:26:31.4532857Z     def execute(
2025-08-19T20:26:31.4533044Z         self,
2025-08-19T20:26:31.4533225Z         query: Query,
2025-08-19T20:26:31.4533463Z         params: Params | None = None,
2025-08-19T20:26:31.4533700Z         *,
2025-08-19T20:26:31.4533905Z         prepare: bool | None = None,
2025-08-19T20:26:31.4534172Z         binary: bool | None = None,
2025-08-19T20:26:31.4534406Z     ) -> Self:
2025-08-19T20:26:31.4534581Z         """
2025-08-19T20:26:31.4534813Z         Execute a query or command to the database.
2025-08-19T20:26:31.4535064Z         """
2025-08-19T20:26:31.4535229Z         try:
2025-08-19T20:26:31.4535436Z             with self._conn.lock:
2025-08-19T20:26:31.4535691Z                 self._conn.wait(
2025-08-19T20:26:31.4536051Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T20:26:31.4536372Z                 )
2025-08-19T20:26:31.4536594Z         except e._NO_TRACEBACK as ex:
2025-08-19T20:26:31.4536891Z >           raise ex.with_traceback(None)
2025-08-19T20:26:31.4537422Z E           sqlalchemy.exc.ProgrammingError: (psycopg.errors.SyntaxError) syntax error at or near ":"
2025-08-19T20:26:31.4538302Z E           LINE 3:     VALUES ($1, $2, $3, $4, $5, $6, :effective_date0::DATE),...
2025-08-19T20:26:31.4538693Z E                                                       ^
2025-08-19T20:26:31.4538956Z E           [SQL: 
2025-08-19T20:26:31.4539592Z E               INSERT INTO test_fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)
2025-08-19T20:26:31.4540715Z E               VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, :effective_date0::DATE), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, :effective_date1::DATE)
2025-08-19T20:26:31.4541536Z E               ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;
2025-08-19T20:26:31.4541837Z E               ]
2025-08-19T20:26:31.4542808Z E           [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp'}]
2025-08-19T20:26:31.4543847Z E           (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T20:26:31.4544097Z 
2025-08-19T20:26:31.4544530Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: ProgrammingError
2025-08-19T20:26:31.4545129Z =============================== warnings summary ===============================
2025-08-19T20:26:31.4545482Z services/alert_bot/tests/test_smoke.py:5
2025-08-19T20:26:31.4546752Z   /home/runner/work/AWA-App/AWA-App/services/alert_bot/tests/test_smoke.py:5: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
2025-08-19T20:26:31.4548166Z     import pkg_resources  # noqa: F401
2025-08-19T20:26:31.4548346Z 
2025-08-19T20:26:31.4548511Z tests/api/test_ingest_endpoints.py: 12 warnings
2025-08-19T20:26:31.4548864Z tests/ingest/test_tasks_eager.py: 3 warnings
2025-08-19T20:26:31.4549170Z tests/test_api_fast.py: 1 warning
2025-08-19T20:26:31.4549451Z tests/test_health.py: 5 warnings
2025-08-19T20:26:31.4549732Z tests/test_smoke.py: 5 warnings
2025-08-19T20:26:31.4550023Z services/api/tests/test_cors.py: 1 warning
2025-08-19T20:26:31.4550370Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T20:26:31.4550718Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:26:31.4551062Z services/api/tests/test_rate_limit.py: 122 warnings
2025-08-19T20:26:31.4551440Z services/api/tests/test_roi_basic_auth.py: 4 warnings
2025-08-19T20:26:31.4551815Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T20:26:31.4552195Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T20:26:31.4553716Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/asgi_correlation_id/extensions/sentry.py:27: DeprecationWarning: sentry_sdk.configure_scope is deprecated and will be removed in the next major version. Please consult our migration guide to learn how to migrate to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x#scope-configuring
2025-08-19T20:26:31.4555041Z     with configure_scope() as scope:
2025-08-19T20:26:31.4555212Z 
2025-08-19T20:26:31.4555374Z tests/api/test_ingest_endpoints.py: 3 warnings
2025-08-19T20:26:31.4555690Z tests/test_api_fast.py: 1 warning
2025-08-19T20:26:31.4555971Z tests/test_health.py: 5 warnings
2025-08-19T20:26:31.4556248Z tests/test_smoke.py: 5 warnings
2025-08-19T20:26:31.4556543Z services/api/tests/test_cors.py: 3 warnings
2025-08-19T20:26:31.4556891Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T20:26:31.4557235Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:26:31.4557696Z services/api/tests/test_rate_limit.py: 2 warnings
2025-08-19T20:26:31.4558078Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T20:26:31.4558458Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T20:26:31.4559372Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/fastapi_limiter/__init__.py:89: DeprecationWarning: Call to deprecated close. (Use aclose() instead) -- Deprecated since version 5.0.1.
2025-08-19T20:26:31.4560303Z     await cls.redis.close()
2025-08-19T20:26:31.4560448Z 
2025-08-19T20:26:31.4560610Z tests/test_api_fast.py::test_health_endpoint
2025-08-19T20:26:31.4561713Z   /home/runner/work/AWA-App/AWA-App/tests/test_api_fast.py:13: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:26:31.4562704Z     return datetime.datetime.utcnow()
2025-08-19T20:26:31.4562879Z 
2025-08-19T20:26:31.4563004Z tests/test_api_fast.py: 1 warning
2025-08-19T20:26:31.4563284Z tests/test_health.py: 5 warnings
2025-08-19T20:26:31.4563553Z tests/test_smoke.py: 5 warnings
2025-08-19T20:26:31.4563840Z services/api/tests/test_cors.py: 1 warning
2025-08-19T20:26:31.4564290Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:26:31.4564643Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T20:26:31.4565816Z   /home/runner/work/AWA-App/AWA-App/services/api/routes/health.py:24: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:26:31.4566906Z     app_now = datetime.utcnow().replace(tzinfo=timezone.utc)
2025-08-19T20:26:31.4567132Z 
2025-08-19T20:26:31.4567267Z tests/test_health.py::test_health[0]
2025-08-19T20:26:31.4567670Z tests/test_health.py::test_health[1]
2025-08-19T20:26:31.4567961Z tests/test_health.py::test_health[2]
2025-08-19T20:26:31.4568243Z tests/test_health.py::test_health[3]
2025-08-19T20:26:31.4568522Z tests/test_health.py::test_health[4]
2025-08-19T20:26:31.4569584Z   /home/runner/work/AWA-App/AWA-App/tests/test_health.py:22: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:26:31.4570574Z     return datetime.datetime.utcnow()
2025-08-19T20:26:31.4570744Z 
2025-08-19T20:26:31.4570881Z tests/test_smoke.py::test_health[0]
2025-08-19T20:26:31.4571168Z tests/test_smoke.py::test_health[1]
2025-08-19T20:26:31.4571442Z tests/test_smoke.py::test_health[2]
2025-08-19T20:26:31.4571720Z tests/test_smoke.py::test_health[3]
2025-08-19T20:26:31.4571995Z tests/test_smoke.py::test_health[4]
2025-08-19T20:26:31.4573044Z   /home/runner/work/AWA-App/AWA-App/tests/test_smoke.py:32: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:26:31.4574015Z     return datetime.datetime.utcnow()
2025-08-19T20:26:31.4574189Z 
2025-08-19T20:26:31.4574416Z services/api/tests/test_cors.py::test_cors_simple_get_allowed
2025-08-19T20:26:31.4575599Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_cors.py:27: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:26:31.4576612Z     return datetime.datetime.utcnow()
2025-08-19T20:26:31.4576786Z 
2025-08-19T20:26:31.4576968Z services/api/tests/test_health.py::test_health_route
2025-08-19T20:26:31.4578339Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_health.py:14: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:26:31.4579369Z     return datetime.datetime.utcnow()
2025-08-19T20:26:31.4579542Z 
2025-08-19T20:26:32.0374191Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T20:26:32.0376645Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_rate_limit.py:33: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:26:32.0379477Z     return datetime.datetime.utcnow()
2025-08-19T20:26:32.0379798Z 
2025-08-19T20:26:32.0380390Z services/api/tests/test_sentry_event.py::test_unhandled_exception_is_captured_and_tagged
2025-08-19T20:26:32.0383020Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_sentry_event.py:47: SentryHubDeprecationWarning: `sentry_sdk.Hub` is deprecated and will be removed in a future major release. Please consult our 1.x to 2.x migration guide for details on how to migrate `Hub` usage to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x
2025-08-19T20:26:32.0385831Z     hub = sentry_sdk.Hub.current
2025-08-19T20:26:32.0386198Z 
2025-08-19T20:26:32.0387124Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-08-19T20:26:32.0388378Z ================================ tests coverage ================================
2025-08-19T20:26:32.0389232Z _______________ coverage: platform linux, python 3.12.11-final-0 _______________
2025-08-19T20:26:32.0389706Z 
2025-08-19T20:26:32.0389970Z Coverage XML written to file coverage.xml
2025-08-19T20:26:32.0390680Z Required test coverage of 65% reached. Total coverage: 65.36%
2025-08-19T20:26:32.0391461Z =========================== short test summary info ============================
2025-08-19T20:26:32.0392884Z FAILED tests/test_sp_fees_ingestor.py::test_offline - sqlalchemy.exc.ProgrammingError: (psycopg.errors.SyntaxError) syntax error at or near ":"
2025-08-19T20:26:32.0394193Z LINE 3:     VALUES ($1, $2, $3, $4, $5, $6, :effective_date0::DATE),...
2025-08-19T20:26:32.0394788Z                                             ^
2025-08-19T20:26:32.0395186Z [SQL: 
2025-08-19T20:26:32.0395890Z     INSERT INTO test_fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)
2025-08-19T20:26:32.0397952Z     VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, :effective_date0::DATE), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, :effective_date1::DATE)
2025-08-19T20:26:32.0399396Z     ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;
2025-08-19T20:26:32.0399891Z     ]
2025-08-19T20:26:32.0401462Z [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp'}]
2025-08-19T20:26:32.0402910Z (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T20:26:32.0403697Z Sentry is attempting to send 0 pending events
2025-08-19T20:26:32.0404234Z Waiting up to True seconds
2025-08-19T20:26:32.0404641Z Press Ctrl-C to quit
2025-08-19T20:26:32.5910076Z ##[error]Process completed with exit code 1.
