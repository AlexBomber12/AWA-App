2025-08-19T16:13:14.4716526Z ##[group]Run pytest -q --cov=services
2025-08-19T16:13:14.4716876Z [36;1mpytest -q --cov=services[0m
2025-08-19T16:13:14.4757564Z shell: /usr/bin/bash -e {0}
2025-08-19T16:13:14.4757806Z env:
2025-08-19T16:13:14.4758017Z   REDIS_URL: redis://localhost:6379/0
2025-08-19T16:13:14.4758298Z   RATE_LIMIT_DEFAULT: 100/minute
2025-08-19T16:13:14.4758709Z   TRUST_X_FORWARDED: 1
2025-08-19T16:13:14.4758912Z   PG_USER: postgres
2025-08-19T16:13:14.4759112Z   PG_PASSWORD: pass
2025-08-19T16:13:14.4759312Z   PG_DATABASE: awa
2025-08-19T16:13:14.4759509Z   PG_HOST: localhost
2025-08-19T16:13:14.4759705Z   PG_PORT: 5432
2025-08-19T16:13:14.4760134Z   PG_SYNC_DSN: ***localhost:5432/awa
2025-08-19T16:13:14.4760567Z   PG_ASYNC_DSN: ***localhost:5432/awa
2025-08-19T16:13:14.4761108Z   DATABASE_URL: ***localhost:5432/awa
2025-08-19T16:13:14.4761386Z   DATA_DIR: /home/runner/work/_temp/awa-data
2025-08-19T16:13:14.4761652Z   ENABLE_LIVE: 0
2025-08-19T16:13:14.4761832Z   TESTING: 1
2025-08-19T16:13:14.4762079Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T16:13:14.4762532Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-08-19T16:13:14.4762937Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T16:13:14.4763305Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T16:13:14.4763679Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T16:13:14.4764061Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-08-19T16:13:14.4764385Z   POSTGRES_USER: postgres
2025-08-19T16:13:14.4764844Z   POSTGRES_PASSWORD: pass
2025-08-19T16:13:14.4765071Z   POSTGRES_DB: awa
2025-08-19T16:13:14.4765261Z   LLM_PROVIDER: lan
2025-08-19T16:13:14.4765481Z   LLM_BASE_URL: http://localhost:8000
2025-08-19T16:13:14.4765738Z ##[endgroup]
2025-08-19T16:13:47.6119342Z ........s.............................sssssss........................... [ 43%]
2025-08-19T16:14:20.2609815Z ..........................F............................................. [ 86%]
2025-08-19T16:14:20.9977216Z ......................                                                   [100%]
2025-08-19T16:14:20.9978259Z =================================== FAILURES ===================================
2025-08-19T16:14:20.9979236Z _________________________________ test_offline _________________________________
2025-08-19T16:14:20.9979826Z 
2025-08-19T16:14:20.9980442Z self = <sqlalchemy.engine.base.Connection object at 0x7f70205d2660>
2025-08-19T16:14:20.9981979Z dialect = <sqlalchemy.dialects.postgresql.psycopg.PGDialect_psycopg object at 0x7f70205d24e0>
2025-08-19T16:14:20.9983892Z context = <sqlalchemy.dialects.postgresql.psycopg.PGExecutionContext_psycopg object at 0x7f70205d2c30>
2025-08-19T16:14:20.9985587Z statement = <sqlalchemy.dialects.postgresql.psycopg.PGCompiler_psycopg object at 0x7f70205d05c0>
2025-08-19T16:14:20.9986527Z parameters = [{'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}]
2025-08-19T16:14:20.9986931Z 
2025-08-19T16:14:20.9987074Z     def _exec_single_context(
2025-08-19T16:14:20.9987376Z         self,
2025-08-19T16:14:20.9987619Z         dialect: Dialect,
2025-08-19T16:14:20.9987942Z         context: ExecutionContext,
2025-08-19T16:14:20.9988314Z         statement: Union[str, Compiled],
2025-08-19T16:14:20.9988749Z         parameters: Optional[_AnyMultiExecuteParams],
2025-08-19T16:14:20.9989276Z     ) -> CursorResult[Any]:
2025-08-19T16:14:20.9989808Z         """continue the _execute_context() method for a single DBAPI
2025-08-19T16:14:20.9990550Z         cursor.execute() or cursor.executemany() call.
2025-08-19T16:14:20.9991027Z     
2025-08-19T16:14:20.9991336Z         """
2025-08-19T16:14:20.9991887Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-08-19T16:14:20.9992504Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-08-19T16:14:21.0008198Z     
2025-08-19T16:14:21.0008598Z             if generic_setinputsizes:
2025-08-19T16:14:21.0009059Z                 try:
2025-08-19T16:14:21.0009841Z                     dialect.do_set_input_sizes(
2025-08-19T16:14:21.0010510Z                         context.cursor, generic_setinputsizes, context
2025-08-19T16:14:21.0011021Z                     )
2025-08-19T16:14:21.0011442Z                 except BaseException as e:
2025-08-19T16:14:21.0011969Z                     self._handle_dbapi_exception(
2025-08-19T16:14:21.0012782Z                         e, str(statement), parameters, None, context
2025-08-19T16:14:21.0013329Z                     )
2025-08-19T16:14:21.0013535Z     
2025-08-19T16:14:21.0013766Z         cursor, str_statement, parameters = (
2025-08-19T16:14:21.0014041Z             context.cursor,
2025-08-19T16:14:21.0014296Z             context.statement,
2025-08-19T16:14:21.0014552Z             context.parameters,
2025-08-19T16:14:21.0014979Z         )
2025-08-19T16:14:21.0015147Z     
2025-08-19T16:14:21.0015405Z         effective_parameters: Optional[_AnyExecuteParams]
2025-08-19T16:14:21.0015705Z     
2025-08-19T16:14:21.0015909Z         if not context.executemany:
2025-08-19T16:14:21.0016229Z             effective_parameters = parameters[0]
2025-08-19T16:14:21.0016488Z         else:
2025-08-19T16:14:21.0016721Z             effective_parameters = parameters
2025-08-19T16:14:21.0016965Z     
2025-08-19T16:14:21.0017204Z         if self._has_events or self.engine._has_events:
2025-08-19T16:14:21.0017576Z             for fn in self.dispatch.before_cursor_execute:
2025-08-19T16:14:21.0017928Z                 str_statement, effective_parameters = fn(
2025-08-19T16:14:21.0018194Z                     self,
2025-08-19T16:14:21.0018400Z                     cursor,
2025-08-19T16:14:21.0018638Z                     str_statement,
2025-08-19T16:14:21.0018911Z                     effective_parameters,
2025-08-19T16:14:21.0019161Z                     context,
2025-08-19T16:14:21.0019411Z                     context.executemany,
2025-08-19T16:14:21.0019652Z                 )
2025-08-19T16:14:21.0019829Z     
2025-08-19T16:14:21.0019994Z         if self._echo:
2025-08-19T16:14:21.0020238Z             self._log_info(str_statement)
2025-08-19T16:14:21.0020464Z     
2025-08-19T16:14:21.0020674Z             stats = context._get_cache_stats()
2025-08-19T16:14:21.0020912Z     
2025-08-19T16:14:21.0021123Z             if not self.engine.hide_parameters:
2025-08-19T16:14:21.0021421Z                 self._log_info(
2025-08-19T16:14:21.0021673Z                     "[%s] %r",
2025-08-19T16:14:21.0021894Z                     stats,
2025-08-19T16:14:21.0022136Z                     sql_util._repr_params(
2025-08-19T16:14:21.0022434Z                         effective_parameters,
2025-08-19T16:14:21.0022703Z                         batches=10,
2025-08-19T16:14:21.0022993Z                         ismulti=context.executemany,
2025-08-19T16:14:21.0023252Z                     ),
2025-08-19T16:14:21.0023438Z                 )
2025-08-19T16:14:21.0023616Z             else:
2025-08-19T16:14:21.0023825Z                 self._log_info(
2025-08-19T16:14:21.0024150Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-08-19T16:14:21.0024465Z                     stats,
2025-08-19T16:14:21.0024835Z                 )
2025-08-19T16:14:21.0025123Z     
2025-08-19T16:14:21.0025320Z         evt_handled: bool = False
2025-08-19T16:14:21.0025556Z         try:
2025-08-19T16:14:21.0025839Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-08-19T16:14:21.0026186Z                 effective_parameters = cast(
2025-08-19T16:14:21.0026527Z                     "_CoreMultiExecuteParams", effective_parameters
2025-08-19T16:14:21.0026804Z                 )
2025-08-19T16:14:21.0027028Z                 if self.dialect._has_events:
2025-08-19T16:14:21.0027359Z                     for fn in self.dialect.dispatch.do_executemany:
2025-08-19T16:14:21.0027662Z                         if fn(
2025-08-19T16:14:21.0027904Z                             cursor,
2025-08-19T16:14:21.0028159Z                             str_statement,
2025-08-19T16:14:21.0028435Z                             effective_parameters,
2025-08-19T16:14:21.0028883Z                             context,
2025-08-19T16:14:21.0029109Z                         ):
2025-08-19T16:14:21.0029352Z                             evt_handled = True
2025-08-19T16:14:21.0029618Z                             break
2025-08-19T16:14:21.0029860Z                 if not evt_handled:
2025-08-19T16:14:21.0030254Z                     self.dialect.do_executemany(
2025-08-19T16:14:21.0030524Z                         cursor,
2025-08-19T16:14:21.0030767Z                         str_statement,
2025-08-19T16:14:21.0031041Z                         effective_parameters,
2025-08-19T16:14:21.0031311Z                         context,
2025-08-19T16:14:21.0031520Z                     )
2025-08-19T16:14:21.0031817Z             elif not effective_parameters and context.no_parameters:
2025-08-19T16:14:21.0032161Z                 if self.dialect._has_events:
2025-08-19T16:14:21.0032503Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-08-19T16:14:21.0032876Z                         if fn(cursor, str_statement, context):
2025-08-19T16:14:21.0033181Z                             evt_handled = True
2025-08-19T16:14:21.0033442Z                             break
2025-08-19T16:14:21.0033687Z                 if not evt_handled:
2025-08-19T16:14:21.0033972Z                     self.dialect.do_execute_no_params(
2025-08-19T16:14:21.0034293Z                         cursor, str_statement, context
2025-08-19T16:14:21.0034552Z                     )
2025-08-19T16:14:21.0034966Z             else:
2025-08-19T16:14:21.0035199Z                 effective_parameters = cast(
2025-08-19T16:14:21.0035537Z                     "_CoreSingleExecuteParams", effective_parameters
2025-08-19T16:14:21.0035820Z                 )
2025-08-19T16:14:21.0036044Z                 if self.dialect._has_events:
2025-08-19T16:14:21.0036362Z                     for fn in self.dialect.dispatch.do_execute:
2025-08-19T16:14:21.0036659Z                         if fn(
2025-08-19T16:14:21.0036902Z                             cursor,
2025-08-19T16:14:21.0037158Z                             str_statement,
2025-08-19T16:14:21.0037437Z                             effective_parameters,
2025-08-19T16:14:21.0037768Z                             context,
2025-08-19T16:14:21.0038085Z                         ):
2025-08-19T16:14:21.0038341Z                             evt_handled = True
2025-08-19T16:14:21.0038599Z                             break
2025-08-19T16:14:21.0038842Z                 if not evt_handled:
2025-08-19T16:14:21.0039132Z >                   self.dialect.do_execute(
2025-08-19T16:14:21.0039474Z                         cursor, str_statement, effective_parameters, context
2025-08-19T16:14:21.0039769Z                     )
2025-08-19T16:14:21.0039890Z 
2025-08-19T16:14:21.0040308Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: 
2025-08-19T16:14:21.0041038Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T16:14:21.0041745Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T16:14:21.0042313Z     cursor.execute(statement, parameters)
2025-08-19T16:14:21.0042693Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T16:14:21.0042905Z 
2025-08-19T16:14:21.0043274Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7f70206c2810>
2025-08-19T16:14:21.0044489Z query = '\n    INSERT INTO fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)\n    VALUES (%(asi...1)s, %(currency1)s, %(source1)s, %(effective_date1)s)\n    ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;\n    '
2025-08-19T16:14:21.0045718Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T16:14:21.0046007Z 
2025-08-19T16:14:21.0046084Z     def execute(
2025-08-19T16:14:21.0046291Z         self,
2025-08-19T16:14:21.0046629Z         query: Query,
2025-08-19T16:14:21.0046875Z         params: Params | None = None,
2025-08-19T16:14:21.0047113Z         *,
2025-08-19T16:14:21.0047321Z         prepare: bool | None = None,
2025-08-19T16:14:21.0047585Z         binary: bool | None = None,
2025-08-19T16:14:21.0047817Z     ) -> Self:
2025-08-19T16:14:21.0048103Z         """
2025-08-19T16:14:21.0048340Z         Execute a query or command to the database.
2025-08-19T16:14:21.0048591Z         """
2025-08-19T16:14:21.0048751Z         try:
2025-08-19T16:14:21.0048956Z             with self._conn.lock:
2025-08-19T16:14:21.0049213Z                 self._conn.wait(
2025-08-19T16:14:21.0049575Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T16:14:21.0049899Z                 )
2025-08-19T16:14:21.0050122Z         except e._NO_TRACEBACK as ex:
2025-08-19T16:14:21.0050438Z >           raise ex.with_traceback(None)
2025-08-19T16:14:21.0050988Z E           psycopg.errors.UndefinedColumn: column "marketplace" of relation "fees_raw" does not exist
2025-08-19T16:14:21.0051601Z E           LINE 2:     INSERT INTO fees_raw (asin, marketplace, fee_type, amoun...
2025-08-19T16:14:21.0052005Z E                                                   ^
2025-08-19T16:14:21.0052178Z 
2025-08-19T16:14:21.0052609Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: UndefinedColumn
2025-08-19T16:14:21.0053012Z 
2025-08-19T16:14:21.0053263Z The above exception was the direct cause of the following exception:
2025-08-19T16:14:21.0053533Z 
2025-08-19T16:14:21.0053800Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f70207319d0>
2025-08-19T16:14:21.0054317Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_offline0')
2025-08-19T16:14:21.0054575Z 
2025-08-19T16:14:21.0054933Z     def test_offline(monkeypatch, tmp_path):
2025-08-19T16:14:21.0055250Z         os.environ["ENABLE_LIVE"] = "0"
2025-08-19T16:14:21.0055547Z         os.environ["SP_REFRESH_TOKEN"] = "t"
2025-08-19T16:14:21.0055841Z         os.environ["SP_CLIENT_ID"] = "i"
2025-08-19T16:14:21.0056122Z         os.environ["SP_CLIENT_SECRET"] = "s"
2025-08-19T16:14:21.0056409Z         os.environ["SELLER_ID"] = "seller"
2025-08-19T16:14:21.0056685Z         os.environ["REGION"] = "EU"
2025-08-19T16:14:21.0056999Z         os.environ["DATABASE_URL"] = build_dsn(sync=True)
2025-08-19T16:14:21.0057339Z >       res = sp_fees_ingestor.main()
2025-08-19T16:14:21.0057609Z               ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T16:14:21.0057762Z 
2025-08-19T16:14:21.0057898Z tests/test_sp_fees_ingestor.py:50: 
2025-08-19T16:14:21.0058257Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T16:14:21.0058620Z services/etl/sp_fees_ingestor.py:79: in main
2025-08-19T16:14:21.0059026Z     repo.upsert_fees_raw(engine, rows, testing=os.getenv("TESTING") == "1")
2025-08-19T16:14:21.0059490Z services/fees_h10/repository.py:66: in upsert_fees_raw
2025-08-19T16:14:21.0059845Z     res1 = conn.execute(text(insert_sql), params)
2025-08-19T16:14:21.0060152Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T16:14:21.0060759Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-08-19T16:14:21.0061241Z     return meth(
2025-08-19T16:14:21.0061859Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-08-19T16:14:21.0062453Z     return connection._execute_clauseelement(
2025-08-19T16:14:21.0063178Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-08-19T16:14:21.0063738Z     ret = self._execute_context(
2025-08-19T16:14:21.0064362Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-08-19T16:14:21.0065144Z     return self._exec_single_context(
2025-08-19T16:14:21.0065806Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-08-19T16:14:21.0066516Z     self._handle_dbapi_exception(
2025-08-19T16:14:21.0067193Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-08-19T16:14:21.0067848Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-08-19T16:14:21.0068683Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-08-19T16:14:21.0069217Z     self.dialect.do_execute(
2025-08-19T16:14:21.0069821Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T16:14:21.0070362Z     cursor.execute(statement, parameters)
2025-08-19T16:14:21.0070740Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T16:14:21.0070944Z 
2025-08-19T16:14:21.0071306Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7f70206c2810>
2025-08-19T16:14:21.0072506Z query = '\n    INSERT INTO fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)\n    VALUES (%(asi...1)s, %(currency1)s, %(source1)s, %(effective_date1)s)\n    ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;\n    '
2025-08-19T16:14:21.0073476Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T16:14:21.0073750Z 
2025-08-19T16:14:21.0073824Z     def execute(
2025-08-19T16:14:21.0074012Z         self,
2025-08-19T16:14:21.0074195Z         query: Query,
2025-08-19T16:14:21.0074430Z         params: Params | None = None,
2025-08-19T16:14:21.0074772Z         *,
2025-08-19T16:14:21.0074980Z         prepare: bool | None = None,
2025-08-19T16:14:21.0075241Z         binary: bool | None = None,
2025-08-19T16:14:21.0075472Z     ) -> Self:
2025-08-19T16:14:21.0075645Z         """
2025-08-19T16:14:21.0075881Z         Execute a query or command to the database.
2025-08-19T16:14:21.0076143Z         """
2025-08-19T16:14:21.0076305Z         try:
2025-08-19T16:14:21.0076514Z             with self._conn.lock:
2025-08-19T16:14:21.0076770Z                 self._conn.wait(
2025-08-19T16:14:21.0077131Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T16:14:21.0077458Z                 )
2025-08-19T16:14:21.0077678Z         except e._NO_TRACEBACK as ex:
2025-08-19T16:14:21.0077969Z >           raise ex.with_traceback(None)
2025-08-19T16:14:21.0078665Z E           sqlalchemy.exc.ProgrammingError: (psycopg.errors.UndefinedColumn) column "marketplace" of relation "fees_raw" does not exist
2025-08-19T16:14:21.0079384Z E           LINE 2:     INSERT INTO fees_raw (asin, marketplace, fee_type, amoun...
2025-08-19T16:14:21.0079783Z E                                                   ^
2025-08-19T16:14:21.0080040Z E           [SQL: 
2025-08-19T16:14:21.0080502Z E               INSERT INTO fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)
2025-08-19T16:14:21.0081594Z E               VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, %(effective_date0)s), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, %(effective_date1)s)
2025-08-19T16:14:21.0082395Z E               ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;
2025-08-19T16:14:21.0082694Z E               ]
2025-08-19T16:14:21.0083865Z E           [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'effective_date0': None, 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp', 'effective_date1': None}]
2025-08-19T16:14:21.0085006Z E           (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T16:14:21.0085260Z 
2025-08-19T16:14:21.0085693Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: ProgrammingError
2025-08-19T16:14:21.0086415Z =============================== warnings summary ===============================
2025-08-19T16:14:21.0086764Z services/alert_bot/tests/test_smoke.py:5
2025-08-19T16:14:21.0088068Z   /home/runner/work/AWA-App/AWA-App/services/alert_bot/tests/test_smoke.py:5: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
2025-08-19T16:14:21.0089321Z     import pkg_resources  # noqa: F401
2025-08-19T16:14:21.0089491Z 
2025-08-19T16:14:21.0089733Z tests/api/test_ingest_endpoints.py: 12 warnings
2025-08-19T16:14:21.0090189Z tests/ingest/test_tasks_eager.py: 3 warnings
2025-08-19T16:14:21.0090500Z tests/test_api_fast.py: 1 warning
2025-08-19T16:14:21.0090781Z tests/test_health.py: 5 warnings
2025-08-19T16:14:21.0091054Z tests/test_smoke.py: 5 warnings
2025-08-19T16:14:21.0091349Z services/api/tests/test_cors.py: 1 warning
2025-08-19T16:14:21.0091696Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T16:14:21.0092046Z services/api/tests/test_health.py: 1 warning
2025-08-19T16:14:21.0092399Z services/api/tests/test_rate_limit.py: 122 warnings
2025-08-19T16:14:21.0092785Z services/api/tests/test_roi_basic_auth.py: 4 warnings
2025-08-19T16:14:21.0093169Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T16:14:21.0093551Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T16:14:21.0095221Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/asgi_correlation_id/extensions/sentry.py:27: DeprecationWarning: sentry_sdk.configure_scope is deprecated and will be removed in the next major version. Please consult our migration guide to learn how to migrate to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x#scope-configuring
2025-08-19T16:14:21.0096570Z     with configure_scope() as scope:
2025-08-19T16:14:21.0096749Z 
2025-08-19T16:14:21.0096913Z tests/api/test_ingest_endpoints.py: 3 warnings
2025-08-19T16:14:21.0097231Z tests/test_api_fast.py: 1 warning
2025-08-19T16:14:21.0097513Z tests/test_health.py: 5 warnings
2025-08-19T16:14:21.0097788Z tests/test_smoke.py: 5 warnings
2025-08-19T16:14:21.0098085Z services/api/tests/test_cors.py: 3 warnings
2025-08-19T16:14:21.0098446Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T16:14:21.0098790Z services/api/tests/test_health.py: 1 warning
2025-08-19T16:14:21.0099140Z services/api/tests/test_rate_limit.py: 2 warnings
2025-08-19T16:14:21.0099504Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T16:14:21.0099889Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T16:14:21.0100814Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/fastapi_limiter/__init__.py:89: DeprecationWarning: Call to deprecated close. (Use aclose() instead) -- Deprecated since version 5.0.1.
2025-08-19T16:14:21.0101594Z     await cls.redis.close()
2025-08-19T16:14:21.0101744Z 
2025-08-19T16:14:21.0101935Z tests/test_api_fast.py::test_health_endpoint
2025-08-19T16:14:21.0103062Z   /home/runner/work/AWA-App/AWA-App/tests/test_api_fast.py:13: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T16:14:21.0104069Z     return datetime.datetime.utcnow()
2025-08-19T16:14:21.0104250Z 
2025-08-19T16:14:21.0104378Z tests/test_api_fast.py: 1 warning
2025-08-19T16:14:21.0104817Z tests/test_health.py: 5 warnings
2025-08-19T16:14:21.0105147Z tests/test_smoke.py: 5 warnings
2025-08-19T16:14:21.0105441Z services/api/tests/test_cors.py: 1 warning
2025-08-19T16:14:21.0105768Z services/api/tests/test_health.py: 1 warning
2025-08-19T16:14:21.0106117Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T16:14:21.0107293Z   /home/runner/work/AWA-App/AWA-App/services/api/routes/health.py:24: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T16:14:21.0108578Z     app_now = datetime.utcnow().replace(tzinfo=timezone.utc)
2025-08-19T16:14:21.0108802Z 
2025-08-19T16:14:21.0109200Z tests/test_health.py::test_health[0]
2025-08-19T16:14:21.0109500Z tests/test_health.py::test_health[1]
2025-08-19T16:14:21.0109781Z tests/test_health.py::test_health[2]
2025-08-19T16:14:21.0110062Z tests/test_health.py::test_health[3]
2025-08-19T16:14:21.0110344Z tests/test_health.py::test_health[4]
2025-08-19T16:14:21.0111425Z   /home/runner/work/AWA-App/AWA-App/tests/test_health.py:22: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T16:14:21.0112417Z     return datetime.datetime.utcnow()
2025-08-19T16:14:21.0112599Z 
2025-08-19T16:14:21.0112732Z tests/test_smoke.py::test_health[0]
2025-08-19T16:14:21.0113020Z tests/test_smoke.py::test_health[1]
2025-08-19T16:14:21.0113342Z tests/test_smoke.py::test_health[2]
2025-08-19T16:14:21.0113620Z tests/test_smoke.py::test_health[3]
2025-08-19T16:14:21.0113897Z tests/test_smoke.py::test_health[4]
2025-08-19T16:14:21.0115089Z   /home/runner/work/AWA-App/AWA-App/tests/test_smoke.py:32: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T16:14:21.0116083Z     return datetime.datetime.utcnow()
2025-08-19T16:14:21.0116252Z 
2025-08-19T16:14:21.0116484Z services/api/tests/test_cors.py::test_cors_simple_get_allowed
2025-08-19T16:14:21.0117695Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_cors.py:27: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T16:14:21.0118733Z     return datetime.datetime.utcnow()
2025-08-19T16:14:21.0118902Z 
2025-08-19T16:14:21.0119095Z services/api/tests/test_health.py::test_health_route
2025-08-19T16:14:21.0120284Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_health.py:14: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T16:14:21.0121329Z     return datetime.datetime.utcnow()
2025-08-19T16:14:21.0121500Z 
2025-08-19T16:14:21.0121673Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T16:14:21.0122883Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_rate_limit.py:33: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T16:14:21.5250322Z     return datetime.datetime.utcnow()
2025-08-19T16:14:21.5250833Z 
2025-08-19T16:14:21.5252714Z services/api/tests/test_sentry_event.py::test_unhandled_exception_is_captured_and_tagged
2025-08-19T16:14:21.5255446Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_sentry_event.py:47: SentryHubDeprecationWarning: `sentry_sdk.Hub` is deprecated and will be removed in a future major release. Please consult our 1.x to 2.x migration guide for details on how to migrate `Hub` usage to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x
2025-08-19T16:14:21.5257292Z     hub = sentry_sdk.Hub.current
2025-08-19T16:14:21.5257482Z 
2025-08-19T16:14:21.5257789Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-08-19T16:14:21.5258333Z ================================ tests coverage ================================
2025-08-19T16:14:21.5258838Z _______________ coverage: platform linux, python 3.12.11-final-0 _______________
2025-08-19T16:14:21.5259407Z 
2025-08-19T16:14:21.5259574Z Coverage XML written to file coverage.xml
2025-08-19T16:14:21.5260008Z Required test coverage of 65% reached. Total coverage: 65.32%
2025-08-19T16:14:21.5260476Z =========================== short test summary info ============================
2025-08-19T16:14:21.5261641Z FAILED tests/test_sp_fees_ingestor.py::test_offline - sqlalchemy.exc.ProgrammingError: (psycopg.errors.UndefinedColumn) column "marketplace" of relation "fees_raw" does not exist
2025-08-19T16:14:21.5262571Z LINE 2:     INSERT INTO fees_raw (asin, marketplace, fee_type, amoun...
2025-08-19T16:14:21.5262947Z                                         ^
2025-08-19T16:14:21.5263193Z [SQL: 
2025-08-19T16:14:21.5263601Z     INSERT INTO fees_raw (asin, marketplace, fee_type, amount, currency, source, effective_date)
2025-08-19T16:14:21.5265279Z     VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, %(effective_date0)s), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, %(effective_date1)s)
2025-08-19T16:14:21.5266699Z     ON CONFLICT (asin, marketplace, fee_type) DO NOTHING;
2025-08-19T16:14:21.5267186Z     ]
2025-08-19T16:14:21.5269119Z [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'effective_date0': None, 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp', 'effective_date1': None}]
2025-08-19T16:14:21.5270167Z (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T16:14:21.5270628Z Sentry is attempting to send 0 pending events
2025-08-19T16:14:21.5270935Z Waiting up to True seconds
2025-08-19T16:14:21.5271175Z Press Ctrl-C to quit
2025-08-19T16:14:22.0120179Z ##[error]Process completed with exit code 1.
