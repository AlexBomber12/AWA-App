2025-08-19T20:07:20.1707467Z ##[group]Run pytest -q --cov=services
2025-08-19T20:07:20.1719855Z [36;1mpytest -q --cov=services[0m
2025-08-19T20:07:20.1771709Z shell: /usr/bin/bash -e {0}
2025-08-19T20:07:20.1771955Z env:
2025-08-19T20:07:20.1772166Z   REDIS_URL: redis://localhost:6379/0
2025-08-19T20:07:20.1772443Z   RATE_LIMIT_DEFAULT: 100/minute
2025-08-19T20:07:20.1772676Z   TRUST_X_FORWARDED: 1
2025-08-19T20:07:20.1772882Z   PG_USER: postgres
2025-08-19T20:07:20.1773080Z   PG_PASSWORD: pass
2025-08-19T20:07:20.1773706Z   PG_DATABASE: awa
2025-08-19T20:07:20.1774063Z   PG_HOST: localhost
2025-08-19T20:07:20.1774462Z   PG_PORT: 5432
2025-08-19T20:07:20.1775042Z   PG_SYNC_DSN: ***localhost:5432/awa
2025-08-19T20:07:20.1775765Z   PG_ASYNC_DSN: ***localhost:5432/awa
2025-08-19T20:07:20.1776750Z   DATABASE_URL: ***localhost:5432/awa
2025-08-19T20:07:20.1777265Z   DATA_DIR: /home/runner/work/_temp/awa-data
2025-08-19T20:07:20.1777779Z   ENABLE_LIVE: 0
2025-08-19T20:07:20.1778129Z   TESTING: 1
2025-08-19T20:07:20.1778602Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:07:20.1779384Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-08-19T20:07:20.1780112Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:07:20.1780778Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:07:20.1781452Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-19T20:07:20.1782128Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-08-19T20:07:20.1782697Z   POSTGRES_USER: postgres
2025-08-19T20:07:20.1783099Z   POSTGRES_PASSWORD: pass
2025-08-19T20:07:20.1783486Z   POSTGRES_DB: awa
2025-08-19T20:07:20.1783833Z   LLM_PROVIDER: lan
2025-08-19T20:07:20.1784231Z   LLM_BASE_URL: http://localhost:8000
2025-08-19T20:07:20.1784694Z ##[endgroup]
2025-08-19T20:07:49.8485368Z ........s.............................sssssss........................... [ 43%]
2025-08-19T20:08:22.6136721Z ..........................F............................................. [ 86%]
2025-08-19T20:08:23.3766839Z ......................                                                   [100%]
2025-08-19T20:08:23.3767855Z =================================== FAILURES ===================================
2025-08-19T20:08:23.3768664Z _________________________________ test_offline _________________________________
2025-08-19T20:08:23.3769143Z 
2025-08-19T20:08:23.3769688Z self = <sqlalchemy.engine.base.Connection object at 0x7fb669d59490>
2025-08-19T20:08:23.3771137Z dialect = <sqlalchemy.dialects.postgresql.psycopg.PGDialect_psycopg object at 0x7fb669d58dd0>
2025-08-19T20:08:23.3772870Z context = <sqlalchemy.dialects.postgresql.psycopg.PGExecutionContext_psycopg object at 0x7fb669ed1460>
2025-08-19T20:08:23.3774022Z statement = <sqlalchemy.dialects.postgresql.psycopg.PGCompiler_psycopg object at 0x7fb669d5b1d0>
2025-08-19T20:08:23.3774930Z parameters = [{'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}]
2025-08-19T20:08:23.3775748Z 
2025-08-19T20:08:23.3775877Z     def _exec_single_context(
2025-08-19T20:08:23.3776387Z         self,
2025-08-19T20:08:23.3776625Z         dialect: Dialect,
2025-08-19T20:08:23.3776921Z         context: ExecutionContext,
2025-08-19T20:08:23.3777258Z         statement: Union[str, Compiled],
2025-08-19T20:08:23.3777654Z         parameters: Optional[_AnyMultiExecuteParams],
2025-08-19T20:08:23.3778028Z     ) -> CursorResult[Any]:
2025-08-19T20:08:23.3778415Z         """continue the _execute_context() method for a single DBAPI
2025-08-19T20:08:23.3778874Z         cursor.execute() or cursor.executemany() call.
2025-08-19T20:08:23.3779199Z     
2025-08-19T20:08:23.3779389Z         """
2025-08-19T20:08:23.3779705Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-08-19T20:08:23.3780206Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-08-19T20:08:23.3780577Z     
2025-08-19T20:08:23.3780816Z             if generic_setinputsizes:
2025-08-19T20:08:23.3781113Z                 try:
2025-08-19T20:08:23.3781615Z                     dialect.do_set_input_sizes(
2025-08-19T20:08:23.3782027Z                         context.cursor, generic_setinputsizes, context
2025-08-19T20:08:23.3782374Z                     )
2025-08-19T20:08:23.3782656Z                 except BaseException as e:
2025-08-19T20:08:23.3783016Z                     self._handle_dbapi_exception(
2025-08-19T20:08:23.3783423Z                         e, str(statement), parameters, None, context
2025-08-19T20:08:23.3783751Z                     )
2025-08-19T20:08:23.3783964Z     
2025-08-19T20:08:23.3784218Z         cursor, str_statement, parameters = (
2025-08-19T20:08:23.3784531Z             context.cursor,
2025-08-19T20:08:23.3784814Z             context.statement,
2025-08-19T20:08:23.3785112Z             context.parameters,
2025-08-19T20:08:23.3785409Z         )
2025-08-19T20:08:23.3785697Z     
2025-08-19T20:08:23.3786344Z         effective_parameters: Optional[_AnyExecuteParams]
2025-08-19T20:08:23.3786819Z     
2025-08-19T20:08:23.3787158Z         if not context.executemany:
2025-08-19T20:08:23.3787710Z             effective_parameters = parameters[0]
2025-08-19T20:08:23.3788203Z         else:
2025-08-19T20:08:23.3788611Z             effective_parameters = parameters
2025-08-19T20:08:23.3789049Z     
2025-08-19T20:08:23.3789492Z         if self._has_events or self.engine._has_events:
2025-08-19T20:08:23.3790154Z             for fn in self.dispatch.before_cursor_execute:
2025-08-19T20:08:23.3790800Z                 str_statement, effective_parameters = fn(
2025-08-19T20:08:23.3791278Z                     self,
2025-08-19T20:08:23.3791645Z                     cursor,
2025-08-19T20:08:23.3792054Z                     str_statement,
2025-08-19T20:08:23.3792536Z                     effective_parameters,
2025-08-19T20:08:23.3792975Z                     context,
2025-08-19T20:08:23.3793413Z                     context.executemany,
2025-08-19T20:08:23.3793833Z                 )
2025-08-19T20:08:23.3794131Z     
2025-08-19T20:08:23.3794432Z         if self._echo:
2025-08-19T20:08:23.3794848Z             self._log_info(str_statement)
2025-08-19T20:08:23.3795263Z     
2025-08-19T20:08:23.3795621Z             stats = context._get_cache_stats()
2025-08-19T20:08:23.3796038Z     
2025-08-19T20:08:23.3796579Z             if not self.engine.hide_parameters:
2025-08-19T20:08:23.3796967Z                 self._log_info(
2025-08-19T20:08:23.3797204Z                     "[%s] %r",
2025-08-19T20:08:23.3797423Z                     stats,
2025-08-19T20:08:23.3797666Z                     sql_util._repr_params(
2025-08-19T20:08:23.3797954Z                         effective_parameters,
2025-08-19T20:08:23.3798229Z                         batches=10,
2025-08-19T20:08:23.3798516Z                         ismulti=context.executemany,
2025-08-19T20:08:23.3798789Z                     ),
2025-08-19T20:08:23.3798983Z                 )
2025-08-19T20:08:23.3799173Z             else:
2025-08-19T20:08:23.3799378Z                 self._log_info(
2025-08-19T20:08:23.3799885Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-08-19T20:08:23.3800206Z                     stats,
2025-08-19T20:08:23.3800409Z                 )
2025-08-19T20:08:23.3800581Z     
2025-08-19T20:08:23.3800784Z         evt_handled: bool = False
2025-08-19T20:08:23.3801015Z         try:
2025-08-19T20:08:23.3801296Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-08-19T20:08:23.3801647Z                 effective_parameters = cast(
2025-08-19T20:08:23.3801987Z                     "_CoreMultiExecuteParams", effective_parameters
2025-08-19T20:08:23.3802268Z                 )
2025-08-19T20:08:23.3802493Z                 if self.dialect._has_events:
2025-08-19T20:08:23.3802826Z                     for fn in self.dialect.dispatch.do_executemany:
2025-08-19T20:08:23.3803127Z                         if fn(
2025-08-19T20:08:23.3803363Z                             cursor,
2025-08-19T20:08:23.3803618Z                             str_statement,
2025-08-19T20:08:23.3803913Z                             effective_parameters,
2025-08-19T20:08:23.3804329Z                             context,
2025-08-19T20:08:23.3804562Z                         ):
2025-08-19T20:08:23.3804808Z                             evt_handled = True
2025-08-19T20:08:23.3805073Z                             break
2025-08-19T20:08:23.3805321Z                 if not evt_handled:
2025-08-19T20:08:23.3805600Z                     self.dialect.do_executemany(
2025-08-19T20:08:23.3805889Z                         cursor,
2025-08-19T20:08:23.3806335Z                         str_statement,
2025-08-19T20:08:23.3806668Z                         effective_parameters,
2025-08-19T20:08:23.3806941Z                         context,
2025-08-19T20:08:23.3807162Z                     )
2025-08-19T20:08:23.3807461Z             elif not effective_parameters and context.no_parameters:
2025-08-19T20:08:23.3807804Z                 if self.dialect._has_events:
2025-08-19T20:08:23.3808149Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-08-19T20:08:23.3808525Z                         if fn(cursor, str_statement, context):
2025-08-19T20:08:23.3808832Z                             evt_handled = True
2025-08-19T20:08:23.3809101Z                             break
2025-08-19T20:08:23.3809343Z                 if not evt_handled:
2025-08-19T20:08:23.3809627Z                     self.dialect.do_execute_no_params(
2025-08-19T20:08:23.3809945Z                         cursor, str_statement, context
2025-08-19T20:08:23.3810201Z                     )
2025-08-19T20:08:23.3810393Z             else:
2025-08-19T20:08:23.3810627Z                 effective_parameters = cast(
2025-08-19T20:08:23.3810970Z                     "_CoreSingleExecuteParams", effective_parameters
2025-08-19T20:08:23.3811258Z                 )
2025-08-19T20:08:23.3811485Z                 if self.dialect._has_events:
2025-08-19T20:08:23.3811808Z                     for fn in self.dialect.dispatch.do_execute:
2025-08-19T20:08:23.3812114Z                         if fn(
2025-08-19T20:08:23.3812352Z                             cursor,
2025-08-19T20:08:23.3812610Z                             str_statement,
2025-08-19T20:08:23.3812896Z                             effective_parameters,
2025-08-19T20:08:23.3813172Z                             context,
2025-08-19T20:08:23.3813400Z                         ):
2025-08-19T20:08:23.3813644Z                             evt_handled = True
2025-08-19T20:08:23.3813911Z                             break
2025-08-19T20:08:23.3814159Z                 if not evt_handled:
2025-08-19T20:08:23.3814452Z >                   self.dialect.do_execute(
2025-08-19T20:08:23.3814796Z                         cursor, str_statement, effective_parameters, context
2025-08-19T20:08:23.3815095Z                     )
2025-08-19T20:08:23.3815213Z 
2025-08-19T20:08:23.3815631Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: 
2025-08-19T20:08:23.3816421Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:08:23.3817255Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T20:08:23.3817817Z     cursor.execute(statement, parameters)
2025-08-19T20:08:23.3818203Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:08:23.3818413Z 
2025-08-19T20:08:23.3818786Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7fb669e7af90>
2025-08-19T20:08:23.3820007Z query = '\n    WITH v(asin, marketplace, fee_type, amount, currency, source, effective_date) AS (VALUES (%(asin0)s, %(marketpl...CT FROM v.currency OR t.source IS DISTINCT FROM v.source OR t.effective_date IS DISTINCT FROM v.effective_date);\n    '
2025-08-19T20:08:23.3821005Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T20:08:23.3821280Z 
2025-08-19T20:08:23.3821366Z     def execute(
2025-08-19T20:08:23.3821561Z         self,
2025-08-19T20:08:23.3821868Z         query: Query,
2025-08-19T20:08:23.3822111Z         params: Params | None = None,
2025-08-19T20:08:23.3822349Z         *,
2025-08-19T20:08:23.3822557Z         prepare: bool | None = None,
2025-08-19T20:08:23.3822824Z         binary: bool | None = None,
2025-08-19T20:08:23.3823055Z     ) -> Self:
2025-08-19T20:08:23.3823234Z         """
2025-08-19T20:08:23.3823479Z         Execute a query or command to the database.
2025-08-19T20:08:23.3823744Z         """
2025-08-19T20:08:23.3823916Z         try:
2025-08-19T20:08:23.3824127Z             with self._conn.lock:
2025-08-19T20:08:23.3824383Z                 self._conn.wait(
2025-08-19T20:08:23.3824743Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T20:08:23.3825077Z                 )
2025-08-19T20:08:23.3825307Z         except e._NO_TRACEBACK as ex:
2025-08-19T20:08:23.3825610Z >           raise ex.with_traceback(None)
2025-08-19T20:08:23.3826082Z E           psycopg.errors.UndefinedFunction: operator does not exist: date = text
2025-08-19T20:08:23.3826847Z E           LINE 7: ...rce IS DISTINCT FROM v.source OR t.effective_date IS DISTINC...
2025-08-19T20:08:23.3827282Z E                                                                        ^
2025-08-19T20:08:23.3827850Z E           HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-08-19T20:08:23.3828205Z 
2025-08-19T20:08:23.3828651Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: UndefinedFunction
2025-08-19T20:08:23.3829052Z 
2025-08-19T20:08:23.3829305Z The above exception was the direct cause of the following exception:
2025-08-19T20:08:23.3829561Z 
2025-08-19T20:08:23.3829834Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fb669d3baa0>
2025-08-19T20:08:23.3830353Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_offline0')
2025-08-19T20:08:23.3831074Z pg_engine = Engine(***localhost:5432/awa)
2025-08-19T20:08:23.3831412Z ensure_test_fees_raw_table = None
2025-08-19T20:08:23.3831575Z 
2025-08-19T20:08:23.3831861Z     def test_offline(monkeypatch, tmp_path, pg_engine, ensure_test_fees_raw_table) -> None:
2025-08-19T20:08:23.3832346Z         os.environ["FEES_RAW_TABLE"] = "test_fees_raw"
2025-08-19T20:08:23.3832663Z         os.environ["ENABLE_LIVE"] = "0"
2025-08-19T20:08:23.3832961Z         os.environ["SP_REFRESH_TOKEN"] = "t"
2025-08-19T20:08:23.3833257Z         os.environ["SP_CLIENT_ID"] = "i"
2025-08-19T20:08:23.3833551Z         os.environ["SP_CLIENT_SECRET"] = "s"
2025-08-19T20:08:23.3833850Z         os.environ["SELLER_ID"] = "seller"
2025-08-19T20:08:23.3834136Z         os.environ["REGION"] = "EU"
2025-08-19T20:08:23.3834453Z         os.environ["DATABASE_URL"] = build_dsn(sync=True)
2025-08-19T20:08:23.3834791Z         _ = pg_engine, ensure_test_fees_raw_table
2025-08-19T20:08:23.3835115Z >       res = sp_fees_ingestor.main()
2025-08-19T20:08:23.3835384Z               ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T20:08:23.3835675Z 
2025-08-19T20:08:23.3835824Z tests/test_sp_fees_ingestor.py:52: 
2025-08-19T20:08:23.3836381Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:08:23.3836768Z services/etl/sp_fees_ingestor.py:79: in main
2025-08-19T20:08:23.3837175Z     repo.upsert_fees_raw(engine, rows, testing=os.getenv("TESTING") == "1")
2025-08-19T20:08:23.3837636Z services/fees_h10/repository.py:65: in upsert_fees_raw
2025-08-19T20:08:23.3838028Z     res2 = conn.execute(text(update_sql), params)
2025-08-19T20:08:23.3838329Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-19T20:08:23.3838927Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-08-19T20:08:23.3839420Z     return meth(
2025-08-19T20:08:23.3840045Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-08-19T20:08:23.3840649Z     return connection._execute_clauseelement(
2025-08-19T20:08:23.3841477Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-08-19T20:08:23.3842050Z     ret = self._execute_context(
2025-08-19T20:08:23.3842672Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-08-19T20:08:23.3843221Z     return self._exec_single_context(
2025-08-19T20:08:23.3843870Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-08-19T20:08:23.3844430Z     self._handle_dbapi_exception(
2025-08-19T20:08:23.3845093Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-08-19T20:08:23.3845740Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-08-19T20:08:23.3846592Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-08-19T20:08:23.3847147Z     self.dialect.do_execute(
2025-08-19T20:08:23.3847748Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/sqlalchemy/engine/default.py:951: in do_execute
2025-08-19T20:08:23.3848293Z     cursor.execute(statement, parameters)
2025-08-19T20:08:23.3848673Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-19T20:08:23.3848885Z 
2025-08-19T20:08:23.3849244Z self = <psycopg.Cursor [closed] [IDLE] (host=localhost user=postgres database=awa) at 0x7fb669e7af90>
2025-08-19T20:08:23.3850453Z query = '\n    WITH v(asin, marketplace, fee_type, amount, currency, source, effective_date) AS (VALUES (%(asin0)s, %(marketpl...CT FROM v.currency OR t.source IS DISTINCT FROM v.source OR t.effective_date IS DISTINCT FROM v.effective_date);\n    '
2025-08-19T20:08:23.3851434Z params = {'amount0': 1.11, 'amount1': 2.22, 'asin0': 'DUMMY1', 'asin1': 'DUMMY2', ...}
2025-08-19T20:08:23.3851714Z 
2025-08-19T20:08:23.3851797Z     def execute(
2025-08-19T20:08:23.3851985Z         self,
2025-08-19T20:08:23.3852172Z         query: Query,
2025-08-19T20:08:23.3852415Z         params: Params | None = None,
2025-08-19T20:08:23.3852656Z         *,
2025-08-19T20:08:23.3852873Z         prepare: bool | None = None,
2025-08-19T20:08:23.3853142Z         binary: bool | None = None,
2025-08-19T20:08:23.3853382Z     ) -> Self:
2025-08-19T20:08:23.3853562Z         """
2025-08-19T20:08:23.3853791Z         Execute a query or command to the database.
2025-08-19T20:08:23.3854049Z         """
2025-08-19T20:08:23.3854220Z         try:
2025-08-19T20:08:23.3854429Z             with self._conn.lock:
2025-08-19T20:08:23.3854687Z                 self._conn.wait(
2025-08-19T20:08:23.3855048Z                     self._execute_gen(query, params, prepare=prepare, binary=binary)
2025-08-19T20:08:23.3855380Z                 )
2025-08-19T20:08:23.3855606Z         except e._NO_TRACEBACK as ex:
2025-08-19T20:08:23.3856039Z >           raise ex.with_traceback(None)
2025-08-19T20:08:23.3856749Z E           sqlalchemy.exc.ProgrammingError: (psycopg.errors.UndefinedFunction) operator does not exist: date = text
2025-08-19T20:08:23.3857415Z E           LINE 7: ...rce IS DISTINCT FROM v.source OR t.effective_date IS DISTINC...
2025-08-19T20:08:23.3857846Z E                                                                        ^
2025-08-19T20:08:23.3858411Z E           HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-08-19T20:08:23.3858855Z E           [SQL: 
2025-08-19T20:08:23.3860014Z E               WITH v(asin, marketplace, fee_type, amount, currency, source, effective_date) AS (VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, %(effective_date0)s), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, %(effective_date1)s))
2025-08-19T20:08:23.3860968Z E               UPDATE test_fees_raw AS t
2025-08-19T20:08:23.3861505Z E               SET amount = v.amount, currency = v.currency, source = v.source, effective_date = v.effective_date
2025-08-19T20:08:23.3862048Z E               FROM v
2025-08-19T20:08:23.3862476Z E               WHERE t.asin = v.asin AND t.marketplace = v.marketplace AND t.fee_type = v.fee_type
2025-08-19T20:08:23.3863413Z E                 AND (t.amount IS DISTINCT FROM v.amount OR t.currency IS DISTINCT FROM v.currency OR t.source IS DISTINCT FROM v.source OR t.effective_date IS DISTINCT FROM v.effective_date);
2025-08-19T20:08:23.3864031Z E               ]
2025-08-19T20:08:23.3865177Z E           [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'effective_date0': None, 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp', 'effective_date1': None}]
2025-08-19T20:08:23.3866304Z E           (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T20:08:23.3866574Z 
2025-08-19T20:08:23.3867002Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/psycopg/cursor.py:97: ProgrammingError
2025-08-19T20:08:23.3867599Z =============================== warnings summary ===============================
2025-08-19T20:08:23.3867949Z services/alert_bot/tests/test_smoke.py:5
2025-08-19T20:08:23.3869221Z   /home/runner/work/AWA-App/AWA-App/services/alert_bot/tests/test_smoke.py:5: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
2025-08-19T20:08:23.3870347Z     import pkg_resources  # noqa: F401
2025-08-19T20:08:23.3870523Z 
2025-08-19T20:08:23.3870690Z tests/api/test_ingest_endpoints.py: 12 warnings
2025-08-19T20:08:23.3871039Z tests/ingest/test_tasks_eager.py: 3 warnings
2025-08-19T20:08:23.3871349Z tests/test_api_fast.py: 1 warning
2025-08-19T20:08:23.3871649Z tests/test_health.py: 5 warnings
2025-08-19T20:08:23.3871927Z tests/test_smoke.py: 5 warnings
2025-08-19T20:08:23.3872225Z services/api/tests/test_cors.py: 1 warning
2025-08-19T20:08:23.3872574Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T20:08:23.3872927Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:08:23.3873281Z services/api/tests/test_rate_limit.py: 122 warnings
2025-08-19T20:08:23.3873669Z services/api/tests/test_roi_basic_auth.py: 4 warnings
2025-08-19T20:08:23.3874051Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T20:08:23.3874436Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T20:08:23.3875956Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/asgi_correlation_id/extensions/sentry.py:27: DeprecationWarning: sentry_sdk.configure_scope is deprecated and will be removed in the next major version. Please consult our migration guide to learn how to migrate to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x#scope-configuring
2025-08-19T20:08:23.3877504Z     with configure_scope() as scope:
2025-08-19T20:08:23.3877678Z 
2025-08-19T20:08:23.3877841Z tests/api/test_ingest_endpoints.py: 3 warnings
2025-08-19T20:08:23.3878161Z tests/test_api_fast.py: 1 warning
2025-08-19T20:08:23.3878442Z tests/test_health.py: 5 warnings
2025-08-19T20:08:23.3878719Z tests/test_smoke.py: 5 warnings
2025-08-19T20:08:23.3879013Z services/api/tests/test_cors.py: 3 warnings
2025-08-19T20:08:23.3879364Z services/api/tests/test_errors_json.py: 2 warnings
2025-08-19T20:08:23.3879715Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:08:23.3880062Z services/api/tests/test_rate_limit.py: 2 warnings
2025-08-19T20:08:23.3880427Z services/api/tests/test_sentry_event.py: 1 warning
2025-08-19T20:08:23.3880813Z services/api/tests/test_stats_contracts.py: 3 warnings
2025-08-19T20:08:23.3881734Z   /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/fastapi_limiter/__init__.py:89: DeprecationWarning: Call to deprecated close. (Use aclose() instead) -- Deprecated since version 5.0.1.
2025-08-19T20:08:23.3882645Z     await cls.redis.close()
2025-08-19T20:08:23.3882798Z 
2025-08-19T20:08:23.3882988Z tests/test_api_fast.py::test_health_endpoint
2025-08-19T20:08:23.3884091Z   /home/runner/work/AWA-App/AWA-App/tests/test_api_fast.py:13: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:08:23.3885079Z     return datetime.datetime.utcnow()
2025-08-19T20:08:23.3885258Z 
2025-08-19T20:08:23.3885383Z tests/test_api_fast.py: 1 warning
2025-08-19T20:08:23.3885661Z tests/test_health.py: 5 warnings
2025-08-19T20:08:23.3885936Z tests/test_smoke.py: 5 warnings
2025-08-19T20:08:23.3886331Z services/api/tests/test_cors.py: 1 warning
2025-08-19T20:08:23.3886661Z services/api/tests/test_health.py: 1 warning
2025-08-19T20:08:23.3887018Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T20:08:23.3888175Z   /home/runner/work/AWA-App/AWA-App/services/api/routes/health.py:24: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:08:23.3889255Z     app_now = datetime.utcnow().replace(tzinfo=timezone.utc)
2025-08-19T20:08:23.3889480Z 
2025-08-19T20:08:23.3889622Z tests/test_health.py::test_health[0]
2025-08-19T20:08:23.3889923Z tests/test_health.py::test_health[1]
2025-08-19T20:08:23.3890213Z tests/test_health.py::test_health[2]
2025-08-19T20:08:23.3890501Z tests/test_health.py::test_health[3]
2025-08-19T20:08:23.3890780Z tests/test_health.py::test_health[4]
2025-08-19T20:08:23.3891845Z   /home/runner/work/AWA-App/AWA-App/tests/test_health.py:22: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:08:23.3892833Z     return datetime.datetime.utcnow()
2025-08-19T20:08:23.3893011Z 
2025-08-19T20:08:23.3893143Z tests/test_smoke.py::test_health[0]
2025-08-19T20:08:23.3893435Z tests/test_smoke.py::test_health[1]
2025-08-19T20:08:23.3893721Z tests/test_smoke.py::test_health[2]
2025-08-19T20:08:23.3894004Z tests/test_smoke.py::test_health[3]
2025-08-19T20:08:23.3894290Z tests/test_smoke.py::test_health[4]
2025-08-19T20:08:23.3895348Z   /home/runner/work/AWA-App/AWA-App/tests/test_smoke.py:32: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:08:23.3896428Z     return datetime.datetime.utcnow()
2025-08-19T20:08:23.3896606Z 
2025-08-19T20:08:23.8776630Z services/api/tests/test_cors.py::test_cors_simple_get_allowed
2025-08-19T20:08:23.8779174Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_cors.py:27: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:08:23.8781414Z     return datetime.datetime.utcnow()
2025-08-19T20:08:23.8781693Z 
2025-08-19T20:08:23.8782012Z services/api/tests/test_health.py::test_health_route
2025-08-19T20:08:23.8783905Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_health.py:14: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:08:23.8785525Z     return datetime.datetime.utcnow()
2025-08-19T20:08:23.8785738Z 
2025-08-19T20:08:23.8785962Z services/api/tests/test_rate_limit.py: 102 warnings
2025-08-19T20:08:23.8787648Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_rate_limit.py:33: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-19T20:08:23.8789124Z     return datetime.datetime.utcnow()
2025-08-19T20:08:23.8789335Z 
2025-08-19T20:08:23.8789754Z services/api/tests/test_sentry_event.py::test_unhandled_exception_is_captured_and_tagged
2025-08-19T20:08:23.8791670Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_sentry_event.py:47: SentryHubDeprecationWarning: `sentry_sdk.Hub` is deprecated and will be removed in a future major release. Please consult our 1.x to 2.x migration guide for details on how to migrate `Hub` usage to the new API: https://docs.sentry.io/platforms/python/migration/1.x-to-2.x
2025-08-19T20:08:23.8793177Z     hub = sentry_sdk.Hub.current
2025-08-19T20:08:23.8793367Z 
2025-08-19T20:08:23.8793698Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-08-19T20:08:23.8794302Z Sentry is attempting to send 0 pending events
2025-08-19T20:08:23.8794678Z Waiting up to True seconds
2025-08-19T20:08:23.8794964Z Press Ctrl-C to quit
2025-08-19T20:08:23.8795364Z ================================ tests coverage ================================
2025-08-19T20:08:23.8795913Z _______________ coverage: platform linux, python 3.12.11-final-0 _______________
2025-08-19T20:08:23.8796287Z 
2025-08-19T20:08:23.8796446Z Coverage XML written to file coverage.xml
2025-08-19T20:08:23.8796844Z Required test coverage of 65% reached. Total coverage: 65.43%
2025-08-19T20:08:23.8797275Z =========================== short test summary info ============================
2025-08-19T20:08:23.8798120Z FAILED tests/test_sp_fees_ingestor.py::test_offline - sqlalchemy.exc.ProgrammingError: (psycopg.errors.UndefinedFunction) operator does not exist: date = text
2025-08-19T20:08:23.8798910Z LINE 7: ...rce IS DISTINCT FROM v.source OR t.effective_date IS DISTINC...
2025-08-19T20:08:23.8799301Z                                                              ^
2025-08-19T20:08:23.8799855Z HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-08-19T20:08:23.8800278Z [SQL: 
2025-08-19T20:08:23.8801267Z     WITH v(asin, marketplace, fee_type, amount, currency, source, effective_date) AS (VALUES (%(asin0)s, %(marketplace0)s, %(fee_type0)s, %(amount0)s, %(currency0)s, %(source0)s, %(effective_date0)s), (%(asin1)s, %(marketplace1)s, %(fee_type1)s, %(amount1)s, %(currency1)s, %(source1)s, %(effective_date1)s))
2025-08-19T20:08:23.8802176Z     UPDATE test_fees_raw AS t
2025-08-19T20:08:23.8802621Z     SET amount = v.amount, currency = v.currency, source = v.source, effective_date = v.effective_date
2025-08-19T20:08:23.8803024Z     FROM v
2025-08-19T20:08:23.8803373Z     WHERE t.asin = v.asin AND t.marketplace = v.marketplace AND t.fee_type = v.fee_type
2025-08-19T20:08:23.8804202Z       AND (t.amount IS DISTINCT FROM v.amount OR t.currency IS DISTINCT FROM v.currency OR t.source IS DISTINCT FROM v.source OR t.effective_date IS DISTINCT FROM v.effective_date);
2025-08-19T20:08:23.8804935Z     ]
2025-08-19T20:08:23.8806056Z [parameters: {'asin0': 'DUMMY1', 'marketplace0': 'US', 'fee_type0': 'fba_pick_pack', 'amount0': 1.11, 'currency0': 'USD', 'source0': 'sp', 'effective_date0': None, 'asin1': 'DUMMY2', 'marketplace1': 'US', 'fee_type1': 'fba_pick_pack', 'amount1': 2.22, 'currency1': 'USD', 'source1': 'sp', 'effective_date1': None}]
2025-08-19T20:08:23.8807180Z (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-19T20:08:24.3310156Z ##[error]Process completed with exit code 1.
