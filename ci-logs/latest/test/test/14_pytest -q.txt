2025-08-17T16:46:02.3957017Z ##[group]Run pytest -q --cov=services
2025-08-17T16:46:02.3957343Z [36;1mpytest -q --cov=services[0m
2025-08-17T16:46:02.3997726Z shell: /usr/bin/bash -e {0}
2025-08-17T16:46:02.3997964Z env:
2025-08-17T16:46:02.3998142Z   PG_USER: postgres
2025-08-17T16:46:02.3998341Z   PG_PASSWORD: pass
2025-08-17T16:46:02.3998525Z   PG_DATABASE: awa
2025-08-17T16:46:02.3998700Z   PG_HOST: localhost
2025-08-17T16:46:02.3998882Z   PG_PORT: 5432
2025-08-17T16:46:02.3999294Z   PG_SYNC_DSN: ***localhost:5432/awa
2025-08-17T16:46:02.3999692Z   PG_ASYNC_DSN: ***localhost:5432/awa
2025-08-17T16:46:02.4000059Z   DATABASE_URL: ***localhost:5432/awa
2025-08-17T16:46:02.4000326Z   DATA_DIR: /home/runner/work/_temp/awa-data
2025-08-17T16:46:02.4000571Z   ENABLE_LIVE: 0
2025-08-17T16:46:02.4000746Z   TESTING: 1
2025-08-17T16:46:02.4000981Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-17T16:46:02.4001369Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-08-17T16:46:02.4001767Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-17T16:46:02.4002139Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-17T16:46:02.4002480Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-17T16:46:02.4002821Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-08-17T16:46:02.4003121Z   POSTGRES_USER: postgres
2025-08-17T16:46:02.4003333Z   POSTGRES_PASSWORD: pass
2025-08-17T16:46:02.4003533Z   POSTGRES_DB: awa
2025-08-17T16:46:02.4003715Z   LLM_PROVIDER: lan
2025-08-17T16:46:02.4003920Z   LLM_BASE_URL: http://localhost:8000
2025-08-17T16:46:02.4004165Z ##[endgroup]
2025-08-17T16:46:36.8156614Z .....FFFs.........................sss....F.............................. [ 53%]
2025-08-17T16:47:07.8664465Z ...............................................................          [100%]
2025-08-17T16:47:07.8666458Z =================================== FAILURES ===================================
2025-08-17T16:47:07.8667291Z ___________________________ test_ingest_file_upload ____________________________
2025-08-17T16:47:07.8667999Z 
2025-08-17T16:47:07.8668510Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f43e0640f20>
2025-08-17T16:47:07.8669456Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_ingest_file_upload0')
2025-08-17T16:47:07.8669948Z 
2025-08-17T16:47:07.8670263Z     def test_ingest_file_upload(monkeypatch, tmp_path) -> None:
2025-08-17T16:47:07.8670972Z         def fake_import_file(path: str, report_type=None, celery_update=None):
2025-08-17T16:47:07.8671754Z             return {"rows": 2, "dialect": "returns_report", "target_table": "returns_raw"}
2025-08-17T16:47:07.8672293Z     
2025-08-17T16:47:07.8672761Z         monkeypatch.setattr("etl.load_csv.import_file", fake_import_file)
2025-08-17T16:47:07.8673368Z         client = _get_client(monkeypatch)
2025-08-17T16:47:07.8673726Z     
2025-08-17T16:47:07.8674199Z         resp = client.post("/ingest", files={"file": ("test.csv", b"a,b\n1,2\n")})
2025-08-17T16:47:07.8674834Z         assert resp.status_code == 200
2025-08-17T16:47:07.8675268Z         task_id = resp.json()["task_id"]
2025-08-17T16:47:07.8675619Z     
2025-08-17T16:47:07.8675925Z         res = client.get(f"/jobs/{task_id}")
2025-08-17T16:47:07.8676358Z         assert res.status_code == 200
2025-08-17T16:47:07.8676731Z         body = res.json()
2025-08-17T16:47:07.8677142Z >       assert body["state"] == "SUCCESS"
2025-08-17T16:47:07.8677848Z E       AssertionError: assert 'PENDING' == 'SUCCESS'
2025-08-17T16:47:07.8678252Z E         
2025-08-17T16:47:07.8678564Z E         - SUCCESS
2025-08-17T16:47:07.8679192Z E         + PENDING
2025-08-17T16:47:07.8679367Z 
2025-08-17T16:47:07.8679681Z tests/api/test_ingest_endpoints.py:30: AssertionError
2025-08-17T16:47:07.8680393Z ------------------------------ Captured log call -------------------------------
2025-08-17T16:47:07.8681370Z WARNING  kombu.connection:connection.py:669 No hostname was supplied. Reverting to default 'localhost'
2025-08-17T16:47:07.8682308Z _____________________________ test_ingest_json_uri _____________________________
2025-08-17T16:47:07.8682938Z 
2025-08-17T16:47:07.8683415Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f43dff6b2c0>
2025-08-17T16:47:07.8684278Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_ingest_json_uri0')
2025-08-17T16:47:07.8684710Z 
2025-08-17T16:47:07.8684995Z     def test_ingest_json_uri(monkeypatch, tmp_path) -> None:
2025-08-17T16:47:07.8685680Z         def fake_import_file(path: str, report_type=None, celery_update=None):
2025-08-17T16:47:07.8686432Z             return {"rows": 1, "dialect": "returns_report", "target_table": "returns_raw"}
2025-08-17T16:47:07.8686961Z     
2025-08-17T16:47:07.8687572Z         monkeypatch.setattr("etl.load_csv.import_file", fake_import_file)
2025-08-17T16:47:07.8688155Z         client = _get_client(monkeypatch)
2025-08-17T16:47:07.8688511Z     
2025-08-17T16:47:07.8688819Z         f = tmp_path / "sample.csv"
2025-08-17T16:47:07.8689225Z         f.write_text("a,b\n1,2\n")
2025-08-17T16:47:07.8689565Z     
2025-08-17T16:47:07.8689971Z         resp = client.post("/ingest", json={"uri": f"file://{f}"})
2025-08-17T16:47:07.8690469Z         assert resp.status_code == 200
2025-08-17T16:47:07.8690877Z         task_id = resp.json()["task_id"]
2025-08-17T16:47:07.8691214Z     
2025-08-17T16:47:07.8691517Z         res = client.get(f"/jobs/{task_id}")
2025-08-17T16:47:07.8691954Z         assert res.status_code == 200
2025-08-17T16:47:07.8692420Z >       assert res.json()["state"] == "SUCCESS"
2025-08-17T16:47:07.8692944Z E       AssertionError: assert 'PENDING' == 'SUCCESS'
2025-08-17T16:47:07.8693351Z E         
2025-08-17T16:47:07.8693614Z E         - SUCCESS
2025-08-17T16:47:07.8693903Z E         + PENDING
2025-08-17T16:47:07.8694064Z 
2025-08-17T16:47:07.8694367Z tests/api/test_ingest_endpoints.py:51: AssertionError
2025-08-17T16:47:07.8695051Z _____________________________ test_ingest_failure ______________________________
2025-08-17T16:47:07.8695410Z 
2025-08-17T16:47:07.8695839Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f43e00df080>
2025-08-17T16:47:07.8696671Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_ingest_failure0')
2025-08-17T16:47:07.8697105Z 
2025-08-17T16:47:07.8697372Z     def test_ingest_failure(monkeypatch, tmp_path) -> None:
2025-08-17T16:47:07.8698210Z         def bad_import_file(path: str, report_type=None, celery_update=None):
2025-08-17T16:47:07.8698809Z             raise RuntimeError("boom")
2025-08-17T16:47:07.8699161Z     
2025-08-17T16:47:07.8699602Z         monkeypatch.setattr("etl.load_csv.import_file", bad_import_file)
2025-08-17T16:47:07.8700216Z         client = _get_client(monkeypatch)
2025-08-17T16:47:07.8700735Z         from services.ingest.celery_app import celery_app
2025-08-17T16:47:07.8701154Z     
2025-08-17T16:47:07.8701505Z         celery_app.conf.task_eager_propagates = False
2025-08-17T16:47:07.8701918Z     
2025-08-17T16:47:07.8702302Z         f = tmp_path / "bad.csv"
2025-08-17T16:47:07.8702729Z         f.write_text("a,b\n1,2\n")
2025-08-17T16:47:07.8703076Z     
2025-08-17T16:47:07.8703473Z         resp = client.post("/ingest", json={"uri": f"file://{f}"})
2025-08-17T16:47:07.8703969Z         assert resp.status_code == 200
2025-08-17T16:47:07.8704380Z         task_id = resp.json()["task_id"]
2025-08-17T16:47:07.8704726Z     
2025-08-17T16:47:07.8705063Z         res = client.get(f"/jobs/{task_id}")
2025-08-17T16:47:07.8705491Z         assert res.status_code == 200
2025-08-17T16:47:07.8705865Z         body = res.json()
2025-08-17T16:47:07.8706319Z >       assert body["state"] == "FAILURE"
2025-08-17T16:47:07.8707062Z E       AssertionError: assert 'PENDING' == 'FAILURE'
2025-08-17T16:47:07.8707605Z E         
2025-08-17T16:47:07.8707881Z E         - FAILURE
2025-08-17T16:47:07.8708171Z E         + PENDING
2025-08-17T16:47:07.8708354Z 
2025-08-17T16:47:07.8708656Z tests/api/test_ingest_endpoints.py:74: AssertionError
2025-08-17T16:47:07.8709340Z _________________________ test_task_import_file_eager __________________________
2025-08-17T16:47:07.8709934Z 
2025-08-17T16:47:07.8710352Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f43dde45520>
2025-08-17T16:47:07.8710765Z 
2025-08-17T16:47:07.8711019Z     def test_task_import_file_eager(monkeypatch) -> None:
2025-08-17T16:47:07.8711599Z         monkeypatch.setenv("CELERY_TASK_ALWAYS_EAGER", "true")
2025-08-17T16:47:07.8712185Z         monkeypatch.setenv("CELERY_BROKER_URL", "memory://")
2025-08-17T16:47:07.8712830Z         monkeypatch.setenv("CELERY_RESULT_BACKEND", "cache+memory://")
2025-08-17T16:47:07.8713504Z         monkeypatch.setenv("CELERY_TASK_STORE_EAGER_RESULT", "true")
2025-08-17T16:47:07.8714126Z         from services.ingest.tasks import task_import_file
2025-08-17T16:47:07.8714545Z     
2025-08-17T16:47:07.8714904Z         tmp_dir = Path(tempfile.mkdtemp(prefix="ingest_"))
2025-08-17T16:47:07.8715396Z         file_path = tmp_dir / "data.csv"
2025-08-17T16:47:07.8715821Z         file_path.write_text("a,b\n1,2\n")
2025-08-17T16:47:07.8716173Z     
2025-08-17T16:47:07.8716642Z         def fake_import_file(path: str, report_type=None, celery_update=None):
2025-08-17T16:47:07.8717535Z             return {"rows": 1, "dialect": "returns_report", "target_table": "returns_raw"}
2025-08-17T16:47:07.8718048Z     
2025-08-17T16:47:07.8718494Z         monkeypatch.setattr("etl.load_csv.import_file", fake_import_file)
2025-08-17T16:47:07.8718982Z     
2025-08-17T16:47:07.8719338Z         res = task_import_file.delay(f"file://{file_path}")
2025-08-17T16:47:07.8719854Z >       summary = res.get(timeout=5)
2025-08-17T16:47:07.8720249Z                   ^^^^^^^^^^^^^^^^^^
2025-08-17T16:47:07.8720480Z 
2025-08-17T16:47:07.8720703Z tests/ingest/test_tasks_eager.py:24: 
2025-08-17T16:47:07.8721271Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T16:47:07.8722167Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/celery/result.py:251: in get
2025-08-17T16:47:07.8722901Z     return self.backend.wait_for_pending(
2025-08-17T16:47:07.8723914Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/celery/backends/base.py:755: in wait_for_pending
2025-08-17T16:47:07.8724687Z     meta = self.wait_for(
2025-08-17T16:47:07.8725174Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T16:47:07.8725487Z 
2025-08-17T16:47:07.8725883Z self = <celery.backends.cache.CacheBackend object at 0x7f43ddbb5f10>
2025-08-17T16:47:07.8726690Z task_id = 'c4833e77-333f-4ea7-8ec9-9abd88e80d1d', timeout = 5, interval = 0.5
2025-08-17T16:47:07.8727367Z no_ack = True, on_interval = <promise@0x7f43dde56850>
2025-08-17T16:47:07.8727883Z 
2025-08-17T16:47:07.8728051Z     def wait_for(self, task_id,
2025-08-17T16:47:07.8728553Z                  timeout=None, interval=0.5, no_ack=True, on_interval=None):
2025-08-17T16:47:07.8729101Z         """Wait for task and return its result.
2025-08-17T16:47:07.8729487Z     
2025-08-17T16:47:07.8729836Z         If the task raises an exception, this exception
2025-08-17T16:47:07.8730343Z         will be re-raised by :func:`wait_for`.
2025-08-17T16:47:07.8730707Z     
2025-08-17T16:47:07.8730937Z         Raises:
2025-08-17T16:47:07.8731281Z             celery.exceptions.TimeoutError:
2025-08-17T16:47:07.8731811Z                 If `timeout` is not :const:`None`, and the operation
2025-08-17T16:47:07.8732313Z                 takes longer than `timeout` seconds.
2025-08-17T16:47:07.8732677Z         """
2025-08-17T16:47:07.8732969Z         self._ensure_not_eager()
2025-08-17T16:47:07.8733288Z     
2025-08-17T16:47:07.8733533Z         time_elapsed = 0.0
2025-08-17T16:47:07.8734048Z     
2025-08-17T16:47:07.8734278Z         while 1:
2025-08-17T16:47:07.8734608Z             meta = self.get_task_meta(task_id)
2025-08-17T16:47:07.8735064Z             if meta['status'] in states.READY_STATES:
2025-08-17T16:47:07.8735465Z                 return meta
2025-08-17T16:47:07.8735775Z             if on_interval:
2025-08-17T16:47:07.8736085Z                 on_interval()
2025-08-17T16:47:07.8736691Z             # avoid hammering the CPU checking status.
2025-08-17T16:47:07.8737116Z             time.sleep(interval)
2025-08-17T16:47:07.8737645Z             time_elapsed += interval
2025-08-17T16:47:07.8738084Z             if timeout and time_elapsed >= timeout:
2025-08-17T16:47:07.8738644Z >               raise TimeoutError('The operation timed out.')
2025-08-17T16:47:07.8739302Z E               celery.exceptions.TimeoutError: The operation timed out.
2025-08-17T16:47:07.8739685Z 
2025-08-17T16:47:07.8740368Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/celery/backends/base.py:791: TimeoutError
2025-08-17T16:47:07.8741304Z =============================== warnings summary ===============================
2025-08-17T16:47:07.8741828Z services/alert_bot/tests/test_smoke.py:5
2025-08-17T16:47:07.8743881Z   /home/runner/work/AWA-App/AWA-App/services/alert_bot/tests/test_smoke.py:5: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
2025-08-17T16:47:07.8745725Z     import pkg_resources  # noqa: F401
2025-08-17T16:47:07.8745996Z 
2025-08-17T16:47:07.8746288Z tests/test_api_fast.py::test_health_endpoint
2025-08-17T16:47:07.8748218Z   /home/runner/work/AWA-App/AWA-App/tests/test_api_fast.py:13: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-17T16:47:07.8749844Z     return datetime.datetime.utcnow()
2025-08-17T16:47:07.8750114Z 
2025-08-17T16:47:07.8750315Z tests/test_api_fast.py: 1 warning
2025-08-17T16:47:07.8750742Z tests/test_health.py: 5 warnings
2025-08-17T16:47:07.8751164Z tests/test_smoke.py: 5 warnings
2025-08-17T16:47:07.8751642Z services/api/tests/test_health.py: 1 warning
2025-08-17T16:47:07.8753457Z   /home/runner/work/AWA-App/AWA-App/services/api/routes/health.py:24: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-17T16:47:07.8755174Z     app_now = datetime.utcnow().replace(tzinfo=timezone.utc)
2025-08-17T16:47:07.8755518Z 
2025-08-17T16:47:07.8755744Z tests/test_health.py::test_health[0]
2025-08-17T16:47:07.8756185Z tests/test_health.py::test_health[1]
2025-08-17T16:47:07.8756640Z tests/test_health.py::test_health[2]
2025-08-17T16:47:07.8757079Z tests/test_health.py::test_health[3]
2025-08-17T16:47:07.8757724Z tests/test_health.py::test_health[4]
2025-08-17T16:47:07.8759574Z   /home/runner/work/AWA-App/AWA-App/tests/test_health.py:22: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-17T16:47:08.3199158Z     return datetime.datetime.utcnow()
2025-08-17T16:47:08.3199623Z 
2025-08-17T16:47:08.3199950Z tests/test_smoke.py::test_health[0]
2025-08-17T16:47:08.3200619Z tests/test_smoke.py::test_health[1]
2025-08-17T16:47:08.3201199Z tests/test_smoke.py::test_health[2]
2025-08-17T16:47:08.3201800Z tests/test_smoke.py::test_health[3]
2025-08-17T16:47:08.3202373Z tests/test_smoke.py::test_health[4]
2025-08-17T16:47:08.3204490Z   /home/runner/work/AWA-App/AWA-App/tests/test_smoke.py:32: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-17T16:47:08.3206536Z     return datetime.datetime.utcnow()
2025-08-17T16:47:08.3206824Z 
2025-08-17T16:47:08.3207213Z services/api/tests/test_health.py::test_health_route
2025-08-17T16:47:08.3209879Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_health.py:14: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-17T16:47:08.3212051Z     return datetime.datetime.utcnow()
2025-08-17T16:47:08.3212375Z 
2025-08-17T16:47:08.3212928Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-08-17T16:47:08.3213868Z ================================ tests coverage ================================
2025-08-17T16:47:08.3214756Z _______________ coverage: platform linux, python 3.12.11-final-0 _______________
2025-08-17T16:47:08.3215249Z 
2025-08-17T16:47:08.3215579Z Coverage XML written to file coverage.xml
2025-08-17T16:47:08.3216335Z Required test coverage of 45% reached. Total coverage: 55.94%
2025-08-17T16:47:08.3217193Z =========================== short test summary info ============================
2025-08-17T16:47:08.3218652Z FAILED tests/api/test_ingest_endpoints.py::test_ingest_file_upload - AssertionError: assert 'PENDING' == 'SUCCESS'
2025-08-17T16:47:08.3219566Z   
2025-08-17T16:47:08.3219877Z   - SUCCESS
2025-08-17T16:47:08.3220199Z   + PENDING
2025-08-17T16:47:08.3221187Z FAILED tests/api/test_ingest_endpoints.py::test_ingest_json_uri - AssertionError: assert 'PENDING' == 'SUCCESS'
2025-08-17T16:47:08.3222045Z   
2025-08-17T16:47:08.3222360Z   - SUCCESS
2025-08-17T16:47:08.3222676Z   + PENDING
2025-08-17T16:47:08.3223648Z FAILED tests/api/test_ingest_endpoints.py::test_ingest_failure - AssertionError: assert 'PENDING' == 'FAILURE'
2025-08-17T16:47:08.3224513Z   
2025-08-17T16:47:08.3224821Z   - FAILURE
2025-08-17T16:47:08.3225135Z   + PENDING
2025-08-17T16:47:08.3226269Z FAILED tests/ingest/test_tasks_eager.py::test_task_import_file_eager - celery.exceptions.TimeoutError: The operation timed out.
2025-08-17T16:47:08.7476019Z ##[error]Process completed with exit code 1.
