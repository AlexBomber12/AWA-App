2025-08-17T16:40:23.7687677Z ##[group]Run pytest -q --cov=services
2025-08-17T16:40:23.7688238Z [36;1mpytest -q --cov=services[0m
2025-08-17T16:40:23.7743286Z shell: /usr/bin/bash -e {0}
2025-08-17T16:40:23.7743656Z env:
2025-08-17T16:40:23.7743931Z   PG_USER: postgres
2025-08-17T16:40:23.7744248Z   PG_PASSWORD: pass
2025-08-17T16:40:23.7744549Z   PG_DATABASE: awa
2025-08-17T16:40:23.7744839Z   PG_HOST: localhost
2025-08-17T16:40:23.7745148Z   PG_PORT: 5432
2025-08-17T16:40:23.7745772Z   PG_SYNC_DSN: ***localhost:5432/awa
2025-08-17T16:40:23.7746429Z   PG_ASYNC_DSN: ***localhost:5432/awa
2025-08-17T16:40:23.7747087Z   DATABASE_URL: ***localhost:5432/awa
2025-08-17T16:40:23.7747504Z   DATA_DIR: /home/runner/work/_temp/awa-data
2025-08-17T16:40:23.7747906Z   ENABLE_LIVE: 0
2025-08-17T16:40:23.7748193Z   TESTING: 1
2025-08-17T16:40:23.7748573Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-17T16:40:23.7749201Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-08-17T16:40:23.7749819Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-17T16:40:23.7750418Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-17T16:40:23.7750903Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-08-17T16:40:23.7751324Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-08-17T16:40:23.7751689Z   POSTGRES_USER: postgres
2025-08-17T16:40:23.7751948Z   POSTGRES_PASSWORD: pass
2025-08-17T16:40:23.7752370Z   POSTGRES_DB: awa
2025-08-17T16:40:23.7752608Z   LLM_PROVIDER: lan
2025-08-17T16:40:23.7752855Z   LLM_BASE_URL: http://localhost:8000
2025-08-17T16:40:23.7753147Z ##[endgroup]
2025-08-17T16:40:58.0693676Z .....FFFs.........................sss....F.............................. [ 53%]
2025-08-17T16:41:29.1205032Z ...............................................................          [100%]
2025-08-17T16:41:29.1206089Z =================================== FAILURES ===================================
2025-08-17T16:41:29.1206907Z ___________________________ test_ingest_file_upload ____________________________
2025-08-17T16:41:29.1207438Z 
2025-08-17T16:41:29.1208092Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f57e632a8d0>
2025-08-17T16:41:29.1209320Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_ingest_file_upload0')
2025-08-17T16:41:29.1210018Z 
2025-08-17T16:41:29.1210405Z     def test_ingest_file_upload(monkeypatch, tmp_path) -> None:
2025-08-17T16:41:29.1211300Z         def fake_import_file(path: str, report_type=None, celery_update=None):
2025-08-17T16:41:29.1212785Z             return {"rows": 2, "dialect": "returns_report", "target_table": "returns_raw"}
2025-08-17T16:41:29.1213236Z     
2025-08-17T16:41:29.1213636Z         monkeypatch.setattr("etl.load_csv.import_file", fake_import_file)
2025-08-17T16:41:29.1214140Z         client = _get_client(monkeypatch)
2025-08-17T16:41:29.1214450Z     
2025-08-17T16:41:29.1214849Z         resp = client.post("/ingest", files={"file": ("test.csv", b"a,b\n1,2\n")})
2025-08-17T16:41:29.1215342Z         assert resp.status_code == 200
2025-08-17T16:41:29.1215707Z         task_id = resp.json()["task_id"]
2025-08-17T16:41:29.1216012Z     
2025-08-17T16:41:29.1216282Z         res = client.get(f"/jobs/{task_id}")
2025-08-17T16:41:29.1216648Z         assert res.status_code == 200
2025-08-17T16:41:29.1216973Z         body = res.json()
2025-08-17T16:41:29.1217313Z >       assert body["state"] == "SUCCESS"
2025-08-17T16:41:29.1217763Z E       AssertionError: assert 'PENDING' == 'SUCCESS'
2025-08-17T16:41:29.1218120Z E         
2025-08-17T16:41:29.1218353Z E         - SUCCESS
2025-08-17T16:41:29.1218605Z E         + PENDING
2025-08-17T16:41:29.1218751Z 
2025-08-17T16:41:29.1219003Z tests/api/test_ingest_endpoints.py:30: AssertionError
2025-08-17T16:41:29.1219592Z ------------------------------ Captured log call -------------------------------
2025-08-17T16:41:29.1220409Z WARNING  kombu.connection:connection.py:669 No hostname was supplied. Reverting to default 'localhost'
2025-08-17T16:41:29.1221023Z _____________________________ test_ingest_json_uri _____________________________
2025-08-17T16:41:29.1221454Z 
2025-08-17T16:41:29.1221724Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f57d40afa10>
2025-08-17T16:41:29.1222607Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_ingest_json_uri0')
2025-08-17T16:41:29.1222911Z 
2025-08-17T16:41:29.1223106Z     def test_ingest_json_uri(monkeypatch, tmp_path) -> None:
2025-08-17T16:41:29.1223544Z         def fake_import_file(path: str, report_type=None, celery_update=None):
2025-08-17T16:41:29.1224039Z             return {"rows": 1, "dialect": "returns_report", "target_table": "returns_raw"}
2025-08-17T16:41:29.1224370Z     
2025-08-17T16:41:29.1224673Z         monkeypatch.setattr("etl.load_csv.import_file", fake_import_file)
2025-08-17T16:41:29.1225054Z         client = _get_client(monkeypatch)
2025-08-17T16:41:29.1225289Z     
2025-08-17T16:41:29.1225488Z         f = tmp_path / "sample.csv"
2025-08-17T16:41:29.1225758Z         f.write_text("a,b\n1,2\n")
2025-08-17T16:41:29.1225983Z     
2025-08-17T16:41:29.1226252Z         resp = client.post("/ingest", json={"uri": f"file://{f}"})
2025-08-17T16:41:29.1226592Z         assert resp.status_code == 200
2025-08-17T16:41:29.1226876Z         task_id = resp.json()["task_id"]
2025-08-17T16:41:29.1227105Z     
2025-08-17T16:41:29.1227314Z         res = client.get(f"/jobs/{task_id}")
2025-08-17T16:41:29.1227595Z         assert res.status_code == 200
2025-08-17T16:41:29.1227912Z >       assert res.json()["state"] == "SUCCESS"
2025-08-17T16:41:29.1228260Z E       AssertionError: assert 'PENDING' == 'SUCCESS'
2025-08-17T16:41:29.1228530Z E         
2025-08-17T16:41:29.1228718Z E         - SUCCESS
2025-08-17T16:41:29.1228917Z E         + PENDING
2025-08-17T16:41:29.1229023Z 
2025-08-17T16:41:29.1229218Z tests/api/test_ingest_endpoints.py:51: AssertionError
2025-08-17T16:41:29.1229653Z _____________________________ test_ingest_failure ______________________________
2025-08-17T16:41:29.1229884Z 
2025-08-17T16:41:29.1230158Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f57d634a8d0>
2025-08-17T16:41:29.1230699Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_ingest_failure0')
2025-08-17T16:41:29.1230979Z 
2025-08-17T16:41:29.1231157Z     def test_ingest_failure(monkeypatch, tmp_path) -> None:
2025-08-17T16:41:29.1231581Z         def bad_import_file(path: str, report_type=None, celery_update=None):
2025-08-17T16:41:29.1231951Z             raise RuntimeError("boom")
2025-08-17T16:41:29.1232819Z     
2025-08-17T16:41:29.1233162Z         monkeypatch.setattr("etl.load_csv.import_file", bad_import_file)
2025-08-17T16:41:29.1233553Z         client = _get_client(monkeypatch)
2025-08-17T16:41:29.1233901Z         from services.ingest.celery_app import celery_app
2025-08-17T16:41:29.1234181Z     
2025-08-17T16:41:29.1234425Z         celery_app.conf.task_eager_propagates = False
2025-08-17T16:41:29.1234691Z     
2025-08-17T16:41:29.1234968Z         f = tmp_path / "bad.csv"
2025-08-17T16:41:29.1235272Z         f.write_text("a,b\n1,2\n")
2025-08-17T16:41:29.1235510Z     
2025-08-17T16:41:29.1235770Z         resp = client.post("/ingest", json={"uri": f"file://{f}"})
2025-08-17T16:41:29.1236113Z         assert resp.status_code == 200
2025-08-17T16:41:29.1236395Z         task_id = resp.json()["task_id"]
2025-08-17T16:41:29.1236628Z     
2025-08-17T16:41:29.1236835Z         res = client.get(f"/jobs/{task_id}")
2025-08-17T16:41:29.1237122Z         assert res.status_code == 200
2025-08-17T16:41:29.1237378Z         body = res.json()
2025-08-17T16:41:29.1237644Z >       assert body["state"] == "FAILURE"
2025-08-17T16:41:29.1237983Z E       AssertionError: assert 'PENDING' == 'FAILURE'
2025-08-17T16:41:29.1238251Z E         
2025-08-17T16:41:29.1238431Z E         - FAILURE
2025-08-17T16:41:29.1238628Z E         + PENDING
2025-08-17T16:41:29.1238948Z 
2025-08-17T16:41:29.1239254Z tests/api/test_ingest_endpoints.py:74: AssertionError
2025-08-17T16:41:29.1240016Z _________________________ test_task_import_file_eager __________________________
2025-08-17T16:41:29.1240670Z 
2025-08-17T16:41:29.1241116Z monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f57cfc89c10>
2025-08-17T16:41:29.1241574Z 
2025-08-17T16:41:29.1241845Z     def test_task_import_file_eager(monkeypatch) -> None:
2025-08-17T16:41:29.1242728Z         monkeypatch.setenv("CELERY_TASK_ALWAYS_EAGER", "true")
2025-08-17T16:41:29.1243256Z         monkeypatch.setenv("CELERY_BROKER_URL", "memory://")
2025-08-17T16:41:29.1243696Z         monkeypatch.setenv("CELERY_RESULT_BACKEND", "cache+memory://")
2025-08-17T16:41:29.1244135Z         monkeypatch.setenv("CELERY_TASK_STORE_EAGER_RESULT", "true")
2025-08-17T16:41:29.1244532Z         from services.ingest.tasks import task_import_file
2025-08-17T16:41:29.1244809Z     
2025-08-17T16:41:29.1245054Z         tmp_dir = Path(tempfile.mkdtemp(prefix="ingest_"))
2025-08-17T16:41:29.1245367Z         file_path = tmp_dir / "data.csv"
2025-08-17T16:41:29.1245649Z         file_path.write_text("a,b\n1,2\n")
2025-08-17T16:41:29.1245886Z     
2025-08-17T16:41:29.1246192Z         def fake_import_file(path: str, report_type=None, celery_update=None):
2025-08-17T16:41:29.1246672Z             return {"rows": 1, "dialect": "returns_report", "target_table": "returns_raw"}
2025-08-17T16:41:29.1247001Z     
2025-08-17T16:41:29.1247298Z         monkeypatch.setattr("etl.load_csv.import_file", fake_import_file)
2025-08-17T16:41:29.1247619Z     
2025-08-17T16:41:29.1247860Z         res = task_import_file.delay(f"file://{file_path}")
2025-08-17T16:41:29.1248193Z >       summary = res.get(timeout=5)
2025-08-17T16:41:29.1248454Z                   ^^^^^^^^^^^^^^^^^^
2025-08-17T16:41:29.1248601Z 
2025-08-17T16:41:29.1248743Z tests/ingest/test_tasks_eager.py:24: 
2025-08-17T16:41:29.1249102Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T16:41:29.1249676Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/celery/result.py:251: in get
2025-08-17T16:41:29.1250159Z     return self.backend.wait_for_pending(
2025-08-17T16:41:29.1250798Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/celery/backends/base.py:755: in wait_for_pending
2025-08-17T16:41:29.1251308Z     meta = self.wait_for(
2025-08-17T16:41:29.1251634Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T16:41:29.1251839Z 
2025-08-17T16:41:29.1252084Z self = <celery.backends.cache.CacheBackend object at 0x7f57d4082e40>
2025-08-17T16:41:29.1253057Z task_id = '9b795e9c-bb7f-4a2f-8af1-ee337759b2af', timeout = 5, interval = 0.5
2025-08-17T16:41:29.1253514Z no_ack = True, on_interval = <promise@0x7f57cfcaa850>
2025-08-17T16:41:29.1253716Z 
2025-08-17T16:41:29.1253830Z     def wait_for(self, task_id,
2025-08-17T16:41:29.1254176Z                  timeout=None, interval=0.5, no_ack=True, on_interval=None):
2025-08-17T16:41:29.1254540Z         """Wait for task and return its result.
2025-08-17T16:41:29.1254784Z     
2025-08-17T16:41:29.1255020Z         If the task raises an exception, this exception
2025-08-17T16:41:29.1255348Z         will be re-raised by :func:`wait_for`.
2025-08-17T16:41:29.1255589Z     
2025-08-17T16:41:29.1255753Z         Raises:
2025-08-17T16:41:29.1255988Z             celery.exceptions.TimeoutError:
2025-08-17T16:41:29.1256340Z                 If `timeout` is not :const:`None`, and the operation
2025-08-17T16:41:29.1256682Z                 takes longer than `timeout` seconds.
2025-08-17T16:41:29.1256938Z         """
2025-08-17T16:41:29.1257163Z         self._ensure_not_eager()
2025-08-17T16:41:29.1267754Z     
2025-08-17T16:41:29.1268034Z         time_elapsed = 0.0
2025-08-17T16:41:29.1268260Z     
2025-08-17T16:41:29.1268489Z         while 1:
2025-08-17T16:41:29.1268910Z             meta = self.get_task_meta(task_id)
2025-08-17T16:41:29.1269507Z             if meta['status'] in states.READY_STATES:
2025-08-17T16:41:29.1269813Z                 return meta
2025-08-17T16:41:29.1270048Z             if on_interval:
2025-08-17T16:41:29.1270266Z                 on_interval()
2025-08-17T16:41:29.1270747Z             # avoid hammering the CPU checking status.
2025-08-17T16:41:29.1271050Z             time.sleep(interval)
2025-08-17T16:41:29.1271319Z             time_elapsed += interval
2025-08-17T16:41:29.1271616Z             if timeout and time_elapsed >= timeout:
2025-08-17T16:41:29.1271992Z >               raise TimeoutError('The operation timed out.')
2025-08-17T16:41:29.1272602Z E               celery.exceptions.TimeoutError: The operation timed out.
2025-08-17T16:41:29.1272858Z 
2025-08-17T16:41:29.1273307Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/celery/backends/base.py:791: TimeoutError
2025-08-17T16:41:29.1273913Z =============================== warnings summary ===============================
2025-08-17T16:41:29.1274271Z services/alert_bot/tests/test_smoke.py:5
2025-08-17T16:41:29.1275542Z   /home/runner/work/AWA-App/AWA-App/services/alert_bot/tests/test_smoke.py:5: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
2025-08-17T16:41:29.1276750Z     import pkg_resources  # noqa: F401
2025-08-17T16:41:29.1276922Z 
2025-08-17T16:41:29.1277124Z tests/test_api_fast.py::test_health_endpoint
2025-08-17T16:41:29.1278220Z   /home/runner/work/AWA-App/AWA-App/tests/test_api_fast.py:13: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-17T16:41:29.1279214Z     return datetime.datetime.utcnow()
2025-08-17T16:41:29.1279399Z 
2025-08-17T16:41:29.1279537Z tests/test_api_fast.py: 1 warning
2025-08-17T16:41:29.1279831Z tests/test_health.py: 5 warnings
2025-08-17T16:41:29.1280113Z tests/test_smoke.py: 5 warnings
2025-08-17T16:41:29.1280421Z services/api/tests/test_health.py: 1 warning
2025-08-17T16:41:29.1281573Z   /home/runner/work/AWA-App/AWA-App/services/api/routes/health.py:24: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-17T16:41:29.1282796Z     app_now = datetime.utcnow().replace(tzinfo=timezone.utc)
2025-08-17T16:41:29.1283022Z 
2025-08-17T16:41:29.1283165Z tests/test_health.py::test_health[0]
2025-08-17T16:41:29.1283604Z tests/test_health.py::test_health[1]
2025-08-17T16:41:29.1283897Z tests/test_health.py::test_health[2]
2025-08-17T16:41:29.1284180Z tests/test_health.py::test_health[3]
2025-08-17T16:41:29.1284463Z tests/test_health.py::test_health[4]
2025-08-17T16:41:29.1285518Z   /home/runner/work/AWA-App/AWA-App/tests/test_health.py:22: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-17T16:41:29.5077937Z     return datetime.datetime.utcnow()
2025-08-17T16:41:29.5078459Z 
2025-08-17T16:41:29.5078796Z tests/test_smoke.py::test_health[0]
2025-08-17T16:41:29.5079502Z tests/test_smoke.py::test_health[1]
2025-08-17T16:41:29.5080183Z tests/test_smoke.py::test_health[2]
2025-08-17T16:41:29.5080891Z tests/test_smoke.py::test_health[3]
2025-08-17T16:41:29.5081635Z tests/test_smoke.py::test_health[4]
2025-08-17T16:41:29.5084521Z   /home/runner/work/AWA-App/AWA-App/tests/test_smoke.py:32: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-17T16:41:29.5086774Z     return datetime.datetime.utcnow()
2025-08-17T16:41:29.5087078Z 
2025-08-17T16:41:29.5087415Z services/api/tests/test_health.py::test_health_route
2025-08-17T16:41:29.5088992Z   /home/runner/work/AWA-App/AWA-App/services/api/tests/test_health.py:14: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
2025-08-17T16:41:29.5090657Z     return datetime.datetime.utcnow()
2025-08-17T16:41:29.5090885Z 
2025-08-17T16:41:29.5091240Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-08-17T16:41:29.5091860Z ================================ tests coverage ================================
2025-08-17T16:41:29.5092780Z _______________ coverage: platform linux, python 3.12.11-final-0 _______________
2025-08-17T16:41:29.5093127Z 
2025-08-17T16:41:29.5093334Z Coverage XML written to file coverage.xml
2025-08-17T16:41:29.5093863Z Required test coverage of 45% reached. Total coverage: 55.94%
2025-08-17T16:41:29.5094443Z =========================== short test summary info ============================
2025-08-17T16:41:29.5095306Z FAILED tests/api/test_ingest_endpoints.py::test_ingest_file_upload - AssertionError: assert 'PENDING' == 'SUCCESS'
2025-08-17T16:41:29.5095940Z   
2025-08-17T16:41:29.5096153Z   - SUCCESS
2025-08-17T16:41:29.5096373Z   + PENDING
2025-08-17T16:41:29.5097052Z FAILED tests/api/test_ingest_endpoints.py::test_ingest_json_uri - AssertionError: assert 'PENDING' == 'SUCCESS'
2025-08-17T16:41:29.5097662Z   
2025-08-17T16:41:29.5097864Z   - SUCCESS
2025-08-17T16:41:29.5098078Z   + PENDING
2025-08-17T16:41:29.5098669Z FAILED tests/api/test_ingest_endpoints.py::test_ingest_failure - AssertionError: assert 'PENDING' == 'FAILURE'
2025-08-17T16:41:29.5099116Z   
2025-08-17T16:41:29.5099274Z   - FAILURE
2025-08-17T16:41:29.5099440Z   + PENDING
2025-08-17T16:41:29.5100021Z FAILED tests/ingest/test_tasks_eager.py::test_task_import_file_eager - celery.exceptions.TimeoutError: The operation timed out.
2025-08-17T16:41:29.8791243Z ##[error]Process completed with exit code 1.
