2025-08-17T19:38:33.0784404Z ##[group]Run pytest tests/db -q --cov=services --cov-append --cov-fail-under=0
2025-08-17T19:38:33.0784984Z [36;1mpytest tests/db -q --cov=services --cov-append --cov-fail-under=0[0m
2025-08-17T19:38:33.0825309Z shell: /usr/bin/bash -e {0}
2025-08-17T19:38:33.0825550Z env:
2025-08-17T19:38:33.0825731Z   PG_USER: postgres
2025-08-17T19:38:33.0826142Z   PG_PASSWORD: pass
2025-08-17T19:38:33.0826327Z   PG_DATABASE: awa
2025-08-17T19:38:33.0826515Z   PG_HOST: localhost
2025-08-17T19:38:33.0826710Z   PG_PORT: 5432
2025-08-17T19:38:33.0827239Z   PG_SYNC_DSN: ***localhost:5432/awa
2025-08-17T19:38:33.0827660Z   PG_ASYNC_DSN: ***localhost:5432/awa
2025-08-17T19:38:33.0828070Z   DATABASE_URL: ***localhost:5432/awa
2025-08-17T19:38:33.0828314Z   DATA_DIR: /tmp/awa-data
2025-08-17T19:38:33.0828524Z   ENABLE_LIVE: 0
2025-08-17T19:38:33.0828703Z   TESTING: 1
2025-08-17T19:38:33.0828952Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T19:38:33.0829392Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-17T19:38:33.0829922Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T19:38:33.0830568Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T19:38:33.0831028Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T19:38:33.0831512Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-17T19:38:33.0831975Z ##[endgroup]
2025-08-17T19:38:36.2127868Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2130502Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2132823Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\alert_bot\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\alert_bot\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2134893Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2136987Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\alert_bot\alert_bot.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\alert_bot\alert_bot.py'. (couldnt-parse)
2025-08-17T19:38:36.2138490Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2140270Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\alert_bot\rules\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\alert_bot\rules\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2142143Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2143548Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2144936Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2146804Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\config.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\config.py'. (couldnt-parse)
2025-08-17T19:38:36.2148359Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2150022Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\db.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\db.py'. (couldnt-parse)
2025-08-17T19:38:36.2151339Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2152777Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\main.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\main.py'. (couldnt-parse)
2025-08-17T19:38:36.2154081Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2155415Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\models\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\models\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2157181Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2158525Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\models\fee.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\models\fee.py'. (couldnt-parse)
2025-08-17T19:38:36.2160304Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2161692Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\roi_repository.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\roi_repository.py'. (couldnt-parse)
2025-08-17T19:38:36.2164020Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2168232Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2170880Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2173637Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\health.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\health.py'. (couldnt-parse)
2025-08-17T19:38:36.2176693Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2179303Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\repository.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\repository.py'. (couldnt-parse)
2025-08-17T19:38:36.2181949Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2184752Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\roi.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\roi.py'. (couldnt-parse)
2025-08-17T19:38:36.2187485Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2189993Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\stats.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\stats.py'. (couldnt-parse)
2025-08-17T19:38:36.2192570Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2195062Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2197768Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2200226Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\base.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\base.py'. (couldnt-parse)
2025-08-17T19:38:36.2202718Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2205247Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\config.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\config.py'. (couldnt-parse)
2025-08-17T19:38:36.2207995Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2210462Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\db.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\db.py'. (couldnt-parse)
2025-08-17T19:38:36.2212925Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2215390Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\db_url.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\db_url.py'. (couldnt-parse)
2025-08-17T19:38:36.2218383Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2220879Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\dsn.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\dsn.py'. (couldnt-parse)
2025-08-17T19:38:36.2223439Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2226078Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\keepa.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\keepa.py'. (couldnt-parse)
2025-08-17T19:38:36.2228855Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2231316Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\llm.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\llm.py'. (couldnt-parse)
2025-08-17T19:38:36.2233802Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2236574Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\models_vendor.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\models_vendor.py'. (couldnt-parse)
2025-08-17T19:38:36.2239189Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2241716Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\settings.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\settings.py'. (couldnt-parse)
2025-08-17T19:38:36.2244301Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2246929Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\db\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\db\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2249398Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2251938Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\db\utils\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\db\utils\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2254510Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2257227Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\db\utils\views.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\db\utils\views.py'. (couldnt-parse)
2025-08-17T19:38:36.2259755Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2262275Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\emailer\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\emailer\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2265056Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2267835Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\emailer\generate_body.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\emailer\generate_body.py'. (couldnt-parse)
2025-08-17T19:38:36.2270483Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2272936Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2275658Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2278248Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\db.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\db.py'. (couldnt-parse)
2025-08-17T19:38:36.2280696Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2283273Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\dialects\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\dialects\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2286057Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2288793Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\dialects\amazon_reimbursements.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\dialects\amazon_reimbursements.py'. (couldnt-parse)
2025-08-17T19:38:36.2291567Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2294231Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\dialects\amazon_returns.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\dialects\amazon_returns.py'. (couldnt-parse)
2025-08-17T19:38:36.2297168Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2299758Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\fba_fee_ingestor.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\fba_fee_ingestor.py'. (couldnt-parse)
2025-08-17T19:38:36.2302408Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2304936Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\keepa_ingestor.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\keepa_ingestor.py'. (couldnt-parse)
2025-08-17T19:38:36.2307953Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2310522Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\sp_fees_ingestor.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\sp_fees_ingestor.py'. (couldnt-parse)
2025-08-17T19:38:36.2313120Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2315628Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\fees_h10\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\fees_h10\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2318562Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2321070Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\fees_h10\client.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\fees_h10\client.py'. (couldnt-parse)
2025-08-17T19:38:36.2323686Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2326455Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\fees_h10\repository.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\fees_h10\repository.py'. (couldnt-parse)
2025-08-17T19:38:36.2329066Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2331570Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\fees_h10\worker.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\fees_h10\worker.py'. (couldnt-parse)
2025-08-17T19:38:36.2334114Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2336815Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\ingest\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\ingest\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2339353Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2341933Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\ingest\email_watcher.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\ingest\email_watcher.py'. (couldnt-parse)
2025-08-17T19:38:36.2344581Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2347343Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\ingest\ingest_router.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\ingest\ingest_router.py'. (couldnt-parse)
2025-08-17T19:38:36.2350002Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2352594Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\ingest\upload_router.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\ingest\upload_router.py'. (couldnt-parse)
2025-08-17T19:38:36.2355451Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2358184Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\llm_server\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\llm_server\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2360753Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2363517Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\llm_server\app.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\llm_server\app.py'. (couldnt-parse)
2025-08-17T19:38:36.2366242Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2368823Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2371430Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2374002Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\__main__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\__main__.py'. (couldnt-parse)
2025-08-17T19:38:36.2376844Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2379425Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\client.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\client.py'. (couldnt-parse)
2025-08-17T19:38:36.2382019Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2384551Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\cron.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\cron.py'. (couldnt-parse)
2025-08-17T19:38:36.2387361Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2389892Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\db.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\db.py'. (couldnt-parse)
2025-08-17T19:38:36.2392443Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2394956Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\flow.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\flow.py'. (couldnt-parse)
2025-08-17T19:38:36.2397995Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2400691Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\repository.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\repository.py'. (couldnt-parse)
2025-08-17T19:38:36.2403351Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2406131Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2409034Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2411701Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\common\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\common\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2414430Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2417252Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\common\base.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\common\base.py'. (couldnt-parse)
2025-08-17T19:38:36.2419932Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2422521Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\common\db_url.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\common\db_url.py'. (couldnt-parse)
2025-08-17T19:38:36.2425225Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2428201Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\common\models_vendor.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\common\models_vendor.py'. (couldnt-parse)
2025-08-17T19:38:36.2430962Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2433488Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\import.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\import.py'. (couldnt-parse)
2025-08-17T19:38:36.2436273Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2438853Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\normaliser.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\normaliser.py'. (couldnt-parse)
2025-08-17T19:38:36.2441803Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2444481Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\reader.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\reader.py'. (couldnt-parse)
2025-08-17T19:38:36.2447222Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2449889Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\repository.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\repository.py'. (couldnt-parse)
2025-08-17T19:38:36.2452770Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2455492Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2458396Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2461055Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\base.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\base.py'. (couldnt-parse)
2025-08-17T19:38:36.2463729Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2466517Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\db.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\db.py'. (couldnt-parse)
2025-08-17T19:38:36.2469213Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2471946Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\db_url.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\db_url.py'. (couldnt-parse)
2025-08-17T19:38:36.2474751Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2477648Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\dsn.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\dsn.py'. (couldnt-parse)
2025-08-17T19:38:36.2480379Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2483109Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\keepa.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\keepa.py'. (couldnt-parse)
2025-08-17T19:38:36.2486251Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2488972Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\llm.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\llm.py'. (couldnt-parse)
2025-08-17T19:38:36.2491671Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2494523Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\models_vendor.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\models_vendor.py'. (couldnt-parse)
2025-08-17T19:38:36.2497816Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2500626Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\settings.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\settings.py'. (couldnt-parse)
2025-08-17T19:38:36.2503420Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2506080Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2507671Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2509035Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\__init__.py'. (couldnt-parse)
2025-08-17T19:38:36.2510383Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2511705Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\deps.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\deps.py'. (couldnt-parse)
2025-08-17T19:38:36.2513032Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2514350Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\logic.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\logic.py'. (couldnt-parse)
2025-08-17T19:38:36.2515689Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2517162Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\main.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\main.py'. (couldnt-parse)
2025-08-17T19:38:36.2518645Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2519979Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\schemas.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\schemas.py'. (couldnt-parse)
2025-08-17T19:38:36.2521316Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.2522632Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\returns_etl\loader.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\returns_etl\loader.py'. (couldnt-parse)
2025-08-17T19:38:36.2524094Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:38:36.4210737Z EEEEEEEEEEEE                                                             [100%]
2025-08-17T19:38:36.4211527Z ==================================== ERRORS ====================================
2025-08-17T19:38:36.4212206Z __________________ ERROR at setup of test_imports[alert_bot] ___________________
2025-08-17T19:38:36.4212697Z 
2025-08-17T19:38:36.4212839Z _set_db_url = None
2025-08-17T19:38:36.4213061Z 
2025-08-17T19:38:36.4213278Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:38:36.4213825Z     def migrate_db(_set_db_url):
2025-08-17T19:38:36.4214344Z         """Ensure the database schema is present for tests."""
2025-08-17T19:38:36.4214971Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:38:36.4215481Z             return
2025-08-17T19:38:36.4215790Z     
2025-08-17T19:38:36.4216399Z         async def _has_table() -> bool:
2025-08-17T19:38:36.4216981Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:38:36.4217591Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:38:36.4218048Z             try:
2025-08-17T19:38:36.4218574Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:38:36.4219189Z             finally:
2025-08-17T19:38:36.4219553Z                 await conn.close()
2025-08-17T19:38:36.4219958Z     
2025-08-17T19:38:36.4220297Z         if not asyncio.run(_has_table()):
2025-08-17T19:38:36.4220781Z             import subprocess
2025-08-17T19:38:36.4221163Z     
2025-08-17T19:38:36.4221470Z >           subprocess.check_call(
2025-08-17T19:38:36.4222046Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:38:36.4222608Z             )
2025-08-17T19:38:36.4222802Z 
2025-08-17T19:38:36.4222961Z tests/conftest.py:108: 
2025-08-17T19:38:36.4223417Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:38:36.4223787Z 
2025-08-17T19:38:36.4224143Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:38:36.4224806Z kwargs = {}, retcode = 1
2025-08-17T19:38:36.4225324Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:38:36.4225784Z 
2025-08-17T19:38:36.4226123Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:38:36.4226743Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:38:36.4227473Z         the exit code was zero then return, otherwise raise
2025-08-17T19:38:36.4228196Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:38:36.4228886Z         return code in the returncode attribute.
2025-08-17T19:38:36.4229360Z     
2025-08-17T19:38:36.4229807Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:38:36.4230382Z     
2025-08-17T19:38:36.4230703Z         check_call(["ls", "-l"])
2025-08-17T19:38:36.4231109Z         """
2025-08-17T19:38:36.4231463Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:38:36.4232238Z         if retcode:
2025-08-17T19:38:36.4232599Z             cmd = kwargs.get("args")
2025-08-17T19:38:36.4233028Z             if cmd is None:
2025-08-17T19:38:36.4233427Z                 cmd = popenargs[0]
2025-08-17T19:38:36.4233908Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:38:36.4235011Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4236077Z 
2025-08-17T19:38:36.4236592Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:38:36.4237550Z ---------------------------- Captured stderr setup -----------------------------
2025-08-17T19:38:36.4238288Z INFO  [alembic.runtime.migration] Context impl PostgresqlImpl.
2025-08-17T19:38:36.4239302Z INFO  [alembic.runtime.migration] Will assume transactional DDL.
2025-08-17T19:38:36.4240102Z INFO  [alembic.runtime.migration] Running upgrade  -> 0001_baseline
2025-08-17T19:38:36.4241028Z INFO  [alembic.runtime.migration] Running upgrade 0001_baseline -> 0002_create_roi_view
2025-08-17T19:38:36.4242048Z INFO  [alembic.runtime.migration] Running upgrade 0002_create_roi_view -> 3e9d5c5aff2c
2025-08-17T19:38:36.4243046Z INFO  [alembic.runtime.migration] Running upgrade 3e9d5c5aff2c -> 0003_vendor_prices
2025-08-17T19:38:36.4243944Z INFO  [alembic.runtime.migration] Running upgrade 0003_vendor_prices -> 0004_fee_cron
2025-08-17T19:38:36.4244844Z INFO  [alembic.runtime.migration] Running upgrade 0004_fee_cron -> 0006_fix_roi_views
2025-08-17T19:38:36.4245731Z INFO  [alembic.runtime.migration] Running upgrade 0006_fix_roi_views -> 0020_unified_schema
2025-08-17T19:38:36.4246834Z INFO  [alembic.runtime.migration] Running upgrade 0020_unified_schema -> 0022_fix_roi_view
2025-08-17T19:38:36.4247742Z INFO  [alembic.runtime.migration] Running upgrade 0022_fix_roi_view -> 0023_add_storage_fee
2025-08-17T19:38:36.4248662Z INFO  [alembic.runtime.migration] Running upgrade 0023_add_storage_fee -> 0024_create_buybox
2025-08-17T19:38:36.4249600Z INFO  [alembic.runtime.migration] Running upgrade 0024_create_buybox -> 0025_pr4_indexes_loadlog
2025-08-17T19:38:36.4250308Z Traceback (most recent call last):
2025-08-17T19:38:36.4259108Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1971, in _exec_single_context
2025-08-17T19:38:36.4260115Z     self.dialect.do_execute(
2025-08-17T19:38:36.4261042Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/default.py", line 919, in do_execute
2025-08-17T19:38:36.4261952Z     cursor.execute(statement, parameters)
2025-08-17T19:38:36.4262786Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/psycopg/cursor.py", line 97, in execute
2025-08-17T19:38:36.4263627Z     raise ex.with_traceback(None)
2025-08-17T19:38:36.4264157Z psycopg.errors.UndefinedColumn: column "reimb_id" does not exist
2025-08-17T19:38:36.4265030Z CONTEXT:  SQL statement "CREATE UNIQUE INDEX uq_reimbursements_raw_reimb_id ON reimbursements_raw(reimb_id)"
2025-08-17T19:38:36.4266046Z PL/pgSQL function inline_code_block line 5 at SQL statement
2025-08-17T19:38:36.4266411Z 
2025-08-17T19:38:36.4266687Z The above exception was the direct cause of the following exception:
2025-08-17T19:38:36.4267089Z 
2025-08-17T19:38:36.4267241Z Traceback (most recent call last):
2025-08-17T19:38:36.4267863Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/bin/alembic", line 7, in <module>
2025-08-17T19:38:36.4268460Z     sys.exit(main())
2025-08-17T19:38:36.4268742Z              ^^^^^^
2025-08-17T19:38:36.4269482Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/config.py", line 641, in main
2025-08-17T19:38:36.4270288Z     CommandLine(prog=prog).main(argv=argv)
2025-08-17T19:38:36.4271117Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/config.py", line 631, in main
2025-08-17T19:38:36.4272148Z     self.run_cmd(cfg, options)
2025-08-17T19:38:36.4272974Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/config.py", line 608, in run_cmd
2025-08-17T19:38:36.4273745Z     fn(
2025-08-17T19:38:36.4274471Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/command.py", line 403, in upgrade
2025-08-17T19:38:36.4275319Z     script.run_env()
2025-08-17T19:38:36.4276264Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/script/base.py", line 583, in run_env
2025-08-17T19:38:36.4277127Z     util.load_python_file(self.dir, "env.py")
2025-08-17T19:38:36.4278028Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/util/pyfiles.py", line 95, in load_python_file
2025-08-17T19:38:36.4278959Z     module = load_module_py(module_id, path)
2025-08-17T19:38:36.4279561Z              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-17T19:38:36.4280456Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/util/pyfiles.py", line 113, in load_module_py
2025-08-17T19:38:36.4281411Z     spec.loader.exec_module(module)  # type: ignore
2025-08-17T19:38:36.4281854Z     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-17T19:38:36.4282408Z   File "<frozen importlib._bootstrap_external>", line 940, in exec_module
2025-08-17T19:38:36.4283159Z   File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
2025-08-17T19:38:36.4284040Z   File "/home/runner/work/AWA-App/AWA-App/services/api/migrations/env.py", line 55, in <module>
2025-08-17T19:38:36.4284707Z     run_migrations_online()
2025-08-17T19:38:36.4285463Z   File "/home/runner/work/AWA-App/AWA-App/services/api/migrations/env.py", line 51, in run_migrations_online
2025-08-17T19:38:36.4286366Z     context.run_migrations()
2025-08-17T19:38:36.4286801Z   File "<string>", line 8, in run_migrations
2025-08-17T19:38:36.4287770Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/runtime/environment.py", line 948, in run_migrations
2025-08-17T19:38:36.4288743Z     self.get_context().run_migrations(**kw)
2025-08-17T19:38:36.4289693Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/runtime/migration.py", line 627, in run_migrations
2025-08-17T19:38:36.4290593Z     step.migration_fn(**kw)
2025-08-17T19:38:36.4291426Z   File "/home/runner/work/AWA-App/AWA-App/services/api/migrations/versions/0025_pr4_indexes_loadlog.py", line 36, in upgrade
2025-08-17T19:38:36.4292258Z     op.execute(
2025-08-17T19:38:36.4292599Z   File "<string>", line 8, in execute
2025-08-17T19:38:36.4293012Z   File "<string>", line 3, in execute
2025-08-17T19:38:36.4293837Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/operations/ops.py", line 2537, in execute
2025-08-17T19:38:36.4294702Z     return operations.invoke(op)
2025-08-17T19:38:36.4295058Z            ^^^^^^^^^^^^^^^^^^^^^
2025-08-17T19:38:36.4296038Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/operations/base.py", line 445, in invoke
2025-08-17T19:38:36.4296932Z     return fn(self, operation)
2025-08-17T19:38:36.4297280Z            ^^^^^^^^^^^^^^^^^^^
2025-08-17T19:38:36.4298185Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/operations/toimpl.py", line 224, in execute_sql
2025-08-17T19:38:36.4299148Z     operations.migration_context.impl.execute(
2025-08-17T19:38:36.4300050Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/ddl/impl.py", line 214, in execute
2025-08-17T19:38:36.4300871Z     self._exec(sql, execution_options)
2025-08-17T19:38:36.4301705Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/ddl/impl.py", line 207, in _exec
2025-08-17T19:38:36.4302538Z     return conn.execute(construct, multiparams)
2025-08-17T19:38:36.4302967Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-17T19:38:36.4303817Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1422, in execute
2025-08-17T19:38:36.4304801Z     return meth(
2025-08-17T19:38:36.4305067Z            ^^^^^
2025-08-17T19:38:36.4306133Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/sql/elements.py", line 514, in _execute_on_connection
2025-08-17T19:38:36.4307188Z     return connection._execute_clauseelement(
2025-08-17T19:38:36.4307635Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-17T19:38:36.4308608Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1644, in _execute_clauseelement
2025-08-17T19:38:36.4309548Z     ret = self._execute_context(
2025-08-17T19:38:36.4309906Z           ^^^^^^^^^^^^^^^^^^^^^^
2025-08-17T19:38:36.4310808Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1850, in _execute_context
2025-08-17T19:38:36.4311899Z     return self._exec_single_context(
2025-08-17T19:38:36.4312268Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-17T19:38:36.4313188Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1990, in _exec_single_context
2025-08-17T19:38:36.4314125Z     self._handle_dbapi_exception(
2025-08-17T19:38:36.4315077Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 2357, in _handle_dbapi_exception
2025-08-17T19:38:36.4316316Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-08-17T19:38:36.4317390Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1971, in _exec_single_context
2025-08-17T19:38:36.4318317Z     self.dialect.do_execute(
2025-08-17T19:38:36.4319173Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/default.py", line 919, in do_execute
2025-08-17T19:38:36.4320070Z     cursor.execute(statement, parameters)
2025-08-17T19:38:36.4320900Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/psycopg/cursor.py", line 97, in execute
2025-08-17T19:38:36.4321701Z     raise ex.with_traceback(None)
2025-08-17T19:38:36.4322378Z sqlalchemy.exc.ProgrammingError: (psycopg.errors.UndefinedColumn) column "reimb_id" does not exist
2025-08-17T19:38:36.4323451Z CONTEXT:  SQL statement "CREATE UNIQUE INDEX uq_reimbursements_raw_reimb_id ON reimbursements_raw(reimb_id)"
2025-08-17T19:38:36.4324265Z PL/pgSQL function inline_code_block line 5 at SQL statement
2025-08-17T19:38:36.4324718Z [SQL: 
2025-08-17T19:38:36.4324961Z         DO $$ BEGIN
2025-08-17T19:38:36.4325248Z             IF NOT EXISTS (
2025-08-17T19:38:36.4326012Z                 SELECT 1 FROM pg_indexes WHERE schemaname='public' AND indexname='uq_reimbursements_raw_reimb_id'
2025-08-17T19:38:36.4326670Z             ) THEN
2025-08-17T19:38:36.4327177Z                 CREATE UNIQUE INDEX uq_reimbursements_raw_reimb_id ON reimbursements_raw(reimb_id);
2025-08-17T19:38:36.4327820Z             END IF;
2025-08-17T19:38:36.4328088Z         END $$;
2025-08-17T19:38:36.4328350Z         ]
2025-08-17T19:38:36.4328860Z (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-17T19:38:36.4329472Z _____________________ ERROR at setup of test_imports[api] ______________________
2025-08-17T19:38:36.4329864Z 
2025-08-17T19:38:36.4329976Z _set_db_url = None
2025-08-17T19:38:36.4330158Z 
2025-08-17T19:38:36.4330332Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:38:36.4330767Z     def migrate_db(_set_db_url):
2025-08-17T19:38:36.4331198Z         """Ensure the database schema is present for tests."""
2025-08-17T19:38:36.4331714Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:38:36.4332121Z             return
2025-08-17T19:38:36.4332387Z     
2025-08-17T19:38:36.4332655Z         async def _has_table() -> bool:
2025-08-17T19:38:36.4333117Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:38:36.4333784Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:38:36.4334160Z             try:
2025-08-17T19:38:36.4334585Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:38:36.4335089Z             finally:
2025-08-17T19:38:36.4335386Z                 await conn.close()
2025-08-17T19:38:36.4335714Z     
2025-08-17T19:38:36.4336149Z         if not asyncio.run(_has_table()):
2025-08-17T19:38:36.4336539Z             import subprocess
2025-08-17T19:38:36.4336859Z     
2025-08-17T19:38:36.4337119Z >           subprocess.check_call(
2025-08-17T19:38:36.4337589Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:38:36.4338056Z             )
2025-08-17T19:38:36.4338216Z 
2025-08-17T19:38:36.4338341Z tests/conftest.py:108: 
2025-08-17T19:38:36.4338886Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:38:36.4339202Z 
2025-08-17T19:38:36.4339485Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:38:36.4340037Z kwargs = {}, retcode = 1
2025-08-17T19:38:36.4340465Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:38:36.4340835Z 
2025-08-17T19:38:36.4340981Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:38:36.4341488Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:38:36.4342060Z         the exit code was zero then return, otherwise raise
2025-08-17T19:38:36.4342663Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:38:36.4343229Z         return code in the returncode attribute.
2025-08-17T19:38:36.4343611Z     
2025-08-17T19:38:36.4343976Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:38:36.4344448Z     
2025-08-17T19:38:36.4344704Z         check_call(["ls", "-l"])
2025-08-17T19:38:36.4345030Z         """
2025-08-17T19:38:36.4345317Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:38:36.4345707Z         if retcode:
2025-08-17T19:38:36.4346148Z             cmd = kwargs.get("args")
2025-08-17T19:38:36.4346506Z             if cmd is None:
2025-08-17T19:38:36.4346828Z                 cmd = popenargs[0]
2025-08-17T19:38:36.4347226Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:38:36.4348147Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4348879Z 
2025-08-17T19:38:36.4349299Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:38:36.4350101Z ____________________ ERROR at setup of test_imports[common] ____________________
2025-08-17T19:38:36.4350483Z 
2025-08-17T19:38:36.4350592Z _set_db_url = None
2025-08-17T19:38:36.4350784Z 
2025-08-17T19:38:36.4350962Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:38:36.4351403Z     def migrate_db(_set_db_url):
2025-08-17T19:38:36.4351848Z         """Ensure the database schema is present for tests."""
2025-08-17T19:38:36.4352374Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:38:36.4352795Z             return
2025-08-17T19:38:36.4353051Z     
2025-08-17T19:38:36.4353318Z         async def _has_table() -> bool:
2025-08-17T19:38:36.4353778Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:38:36.4354260Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:38:36.4354631Z             try:
2025-08-17T19:38:36.4355042Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:38:36.4355544Z             finally:
2025-08-17T19:38:36.4356011Z                 await conn.close()
2025-08-17T19:38:36.4356348Z     
2025-08-17T19:38:36.4356615Z         if not asyncio.run(_has_table()):
2025-08-17T19:38:36.4357022Z             import subprocess
2025-08-17T19:38:36.4357345Z     
2025-08-17T19:38:36.4357599Z >           subprocess.check_call(
2025-08-17T19:38:36.4358244Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:38:36.4358706Z             )
2025-08-17T19:38:36.4358865Z 
2025-08-17T19:38:36.4358990Z tests/conftest.py:108: 
2025-08-17T19:38:36.4359388Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:38:36.4359688Z 
2025-08-17T19:38:36.4359966Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:38:36.4360498Z kwargs = {}, retcode = 1
2025-08-17T19:38:36.4360941Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:38:36.4361319Z 
2025-08-17T19:38:36.4361464Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:38:36.4361968Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:38:36.4362699Z         the exit code was zero then return, otherwise raise
2025-08-17T19:38:36.4363281Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:38:36.4363865Z         return code in the returncode attribute.
2025-08-17T19:38:36.4364249Z     
2025-08-17T19:38:36.4364615Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:38:36.4365083Z     
2025-08-17T19:38:36.4365342Z         check_call(["ls", "-l"])
2025-08-17T19:38:36.4365665Z         """
2025-08-17T19:38:36.4366104Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:38:36.4366484Z         if retcode:
2025-08-17T19:38:36.4366771Z             cmd = kwargs.get("args")
2025-08-17T19:38:36.4367124Z             if cmd is None:
2025-08-17T19:38:36.4367450Z                 cmd = popenargs[0]
2025-08-17T19:38:36.4367843Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:38:36.4368746Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4369516Z 
2025-08-17T19:38:36.4369934Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:38:36.4370728Z ______________________ ERROR at setup of test_imports[db] ______________________
2025-08-17T19:38:36.4371113Z 
2025-08-17T19:38:36.4371230Z _set_db_url = None
2025-08-17T19:38:36.4371410Z 
2025-08-17T19:38:36.4371582Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:38:36.4372029Z     def migrate_db(_set_db_url):
2025-08-17T19:38:36.4372456Z         """Ensure the database schema is present for tests."""
2025-08-17T19:38:36.4372968Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:38:36.4373387Z             return
2025-08-17T19:38:36.4373651Z     
2025-08-17T19:38:36.4373914Z         async def _has_table() -> bool:
2025-08-17T19:38:36.4374375Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:38:36.4374865Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:38:36.4375237Z             try:
2025-08-17T19:38:36.4375663Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:38:36.4376395Z             finally:
2025-08-17T19:38:36.4376604Z                 await conn.close()
2025-08-17T19:38:36.4376824Z     
2025-08-17T19:38:36.4377005Z         if not asyncio.run(_has_table()):
2025-08-17T19:38:36.4377263Z             import subprocess
2025-08-17T19:38:36.4377470Z     
2025-08-17T19:38:36.4377640Z >           subprocess.check_call(
2025-08-17T19:38:36.4377946Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:38:36.4378343Z             )
2025-08-17T19:38:36.4378511Z 
2025-08-17T19:38:36.4378637Z tests/conftest.py:108: 
2025-08-17T19:38:36.4378888Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:38:36.4379085Z 
2025-08-17T19:38:36.4379279Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:38:36.4379631Z kwargs = {}, retcode = 1
2025-08-17T19:38:36.4380079Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:38:36.4380319Z 
2025-08-17T19:38:36.4380414Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:38:36.4380741Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:38:36.4381108Z         the exit code was zero then return, otherwise raise
2025-08-17T19:38:36.4381495Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:38:36.4381860Z         return code in the returncode attribute.
2025-08-17T19:38:36.4382106Z     
2025-08-17T19:38:36.4382346Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:38:36.4382642Z     
2025-08-17T19:38:36.4382811Z         check_call(["ls", "-l"])
2025-08-17T19:38:36.4383028Z         """
2025-08-17T19:38:36.4383221Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:38:36.4383581Z         if retcode:
2025-08-17T19:38:36.4383770Z             cmd = kwargs.get("args")
2025-08-17T19:38:36.4384009Z             if cmd is None:
2025-08-17T19:38:36.4384221Z                 cmd = popenargs[0]
2025-08-17T19:38:36.4384479Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:38:36.4385063Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4385535Z 
2025-08-17T19:38:36.4385996Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:38:36.4386549Z ___________________ ERROR at setup of test_imports[emailer] ____________________
2025-08-17T19:38:36.4386799Z 
2025-08-17T19:38:36.4386876Z _set_db_url = None
2025-08-17T19:38:36.4386992Z 
2025-08-17T19:38:36.4387105Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:38:36.4387389Z     def migrate_db(_set_db_url):
2025-08-17T19:38:36.4387676Z         """Ensure the database schema is present for tests."""
2025-08-17T19:38:36.4388015Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:38:36.4388292Z             return
2025-08-17T19:38:36.4388463Z     
2025-08-17T19:38:36.4388639Z         async def _has_table() -> bool:
2025-08-17T19:38:36.4388948Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:38:36.4389272Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:38:36.4389519Z             try:
2025-08-17T19:38:36.4389811Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:38:36.4390146Z             finally:
2025-08-17T19:38:36.4390340Z                 await conn.close()
2025-08-17T19:38:36.4390556Z     
2025-08-17T19:38:36.4390736Z         if not asyncio.run(_has_table()):
2025-08-17T19:38:36.4391000Z             import subprocess
2025-08-17T19:38:36.4391209Z     
2025-08-17T19:38:36.4391389Z >           subprocess.check_call(
2025-08-17T19:38:36.4391689Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:38:36.4391996Z             )
2025-08-17T19:38:36.4392102Z 
2025-08-17T19:38:36.4392183Z tests/conftest.py:108: 
2025-08-17T19:38:36.4392425Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:38:36.4392625Z 
2025-08-17T19:38:36.4392810Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:38:36.4393157Z kwargs = {}, retcode = 1
2025-08-17T19:38:36.4393439Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:38:36.4393677Z 
2025-08-17T19:38:36.4393776Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:38:36.4394097Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:38:36.4394463Z         the exit code was zero then return, otherwise raise
2025-08-17T19:38:36.4394849Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:38:36.4395216Z         return code in the returncode attribute.
2025-08-17T19:38:36.4395464Z     
2025-08-17T19:38:36.4395986Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:38:36.4396318Z     
2025-08-17T19:38:36.4396486Z         check_call(["ls", "-l"])
2025-08-17T19:38:36.4396704Z         """
2025-08-17T19:38:36.4396895Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:38:36.4397139Z         if retcode:
2025-08-17T19:38:36.4397332Z             cmd = kwargs.get("args")
2025-08-17T19:38:36.4397559Z             if cmd is None:
2025-08-17T19:38:36.4397772Z                 cmd = popenargs[0]
2025-08-17T19:38:36.4398028Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:38:36.4398612Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4399089Z 
2025-08-17T19:38:36.4399493Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:38:36.4400000Z _____________________ ERROR at setup of test_imports[etl] ______________________
2025-08-17T19:38:36.4400249Z 
2025-08-17T19:38:36.4400327Z _set_db_url = None
2025-08-17T19:38:36.4400440Z 
2025-08-17T19:38:36.4400556Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:38:36.4400831Z     def migrate_db(_set_db_url):
2025-08-17T19:38:36.4401111Z         """Ensure the database schema is present for tests."""
2025-08-17T19:38:36.4401443Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:38:36.4401714Z             return
2025-08-17T19:38:36.4401885Z     
2025-08-17T19:38:36.4402062Z         async def _has_table() -> bool:
2025-08-17T19:38:36.4402359Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:38:36.4402676Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:38:36.4402921Z             try:
2025-08-17T19:38:36.4403202Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:38:36.4403529Z             finally:
2025-08-17T19:38:36.4403729Z                 await conn.close()
2025-08-17T19:38:36.4403941Z     
2025-08-17T19:38:36.4404119Z         if not asyncio.run(_has_table()):
2025-08-17T19:38:36.4404378Z             import subprocess
2025-08-17T19:38:36.4404586Z     
2025-08-17T19:38:36.4404756Z >           subprocess.check_call(
2025-08-17T19:38:36.4405058Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:38:36.4405351Z             )
2025-08-17T19:38:36.4405457Z 
2025-08-17T19:38:36.4405538Z tests/conftest.py:108: 
2025-08-17T19:38:36.4405778Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:38:36.4406093Z 
2025-08-17T19:38:36.4406275Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:38:36.4406620Z kwargs = {}, retcode = 1
2025-08-17T19:38:36.4406909Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:38:36.4407146Z 
2025-08-17T19:38:36.4407245Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:38:36.4407573Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:38:36.4407938Z         the exit code was zero then return, otherwise raise
2025-08-17T19:38:36.4408324Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:38:36.4408689Z         return code in the returncode attribute.
2025-08-17T19:38:36.4408940Z     
2025-08-17T19:38:36.4409182Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:38:36.4409479Z     
2025-08-17T19:38:36.4409644Z         check_call(["ls", "-l"])
2025-08-17T19:38:36.4409859Z         """
2025-08-17T19:38:36.4410049Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:38:36.4410291Z         if retcode:
2025-08-17T19:38:36.4410484Z             cmd = kwargs.get("args")
2025-08-17T19:38:36.4410719Z             if cmd is None:
2025-08-17T19:38:36.4410931Z                 cmd = popenargs[0]
2025-08-17T19:38:36.4411187Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:38:36.4411890Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4412364Z 
2025-08-17T19:38:36.4412634Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:38:36.4413145Z ___________________ ERROR at setup of test_imports[fees_h10] ___________________
2025-08-17T19:38:36.4413389Z 
2025-08-17T19:38:36.4413466Z _set_db_url = None
2025-08-17T19:38:36.4413579Z 
2025-08-17T19:38:36.4413694Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:38:36.4413970Z     def migrate_db(_set_db_url):
2025-08-17T19:38:36.4414245Z         """Ensure the database schema is present for tests."""
2025-08-17T19:38:36.4414579Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:38:36.4414968Z             return
2025-08-17T19:38:36.4415137Z     
2025-08-17T19:38:36.4415311Z         async def _has_table() -> bool:
2025-08-17T19:38:36.4415615Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:38:36.4416135Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:38:36.4416386Z             try:
2025-08-17T19:38:36.4416666Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:38:36.4416997Z             finally:
2025-08-17T19:38:36.4417196Z                 await conn.close()
2025-08-17T19:38:36.4417408Z     
2025-08-17T19:38:36.4417585Z         if not asyncio.run(_has_table()):
2025-08-17T19:38:36.4417837Z             import subprocess
2025-08-17T19:38:36.4418043Z     
2025-08-17T19:38:36.4418215Z >           subprocess.check_call(
2025-08-17T19:38:36.4418518Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:38:36.4418816Z             )
2025-08-17T19:38:36.4418921Z 
2025-08-17T19:38:36.4419001Z tests/conftest.py:108: 
2025-08-17T19:38:36.4419245Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:38:36.4419451Z 
2025-08-17T19:38:36.4419632Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:38:36.4419977Z kwargs = {}, retcode = 1
2025-08-17T19:38:36.4420261Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:38:36.4420500Z 
2025-08-17T19:38:36.4420600Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:38:36.4420920Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:38:36.4421283Z         the exit code was zero then return, otherwise raise
2025-08-17T19:38:36.4421668Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:38:36.4422030Z         return code in the returncode attribute.
2025-08-17T19:38:36.4422280Z     
2025-08-17T19:38:36.4422521Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:38:36.4422822Z     
2025-08-17T19:38:36.4422988Z         check_call(["ls", "-l"])
2025-08-17T19:38:36.4423201Z         """
2025-08-17T19:38:36.4423390Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:38:36.4423633Z         if retcode:
2025-08-17T19:38:36.4423826Z             cmd = kwargs.get("args")
2025-08-17T19:38:36.4424058Z             if cmd is None:
2025-08-17T19:38:36.4424269Z                 cmd = popenargs[0]
2025-08-17T19:38:36.4424526Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:38:36.4425109Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4425588Z 
2025-08-17T19:38:36.4425954Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:38:36.4426464Z ____________________ ERROR at setup of test_imports[ingest] ____________________
2025-08-17T19:38:36.4426716Z 
2025-08-17T19:38:36.4426796Z _set_db_url = None
2025-08-17T19:38:36.4426908Z 
2025-08-17T19:38:36.4427206Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:38:36.4427513Z     def migrate_db(_set_db_url):
2025-08-17T19:38:36.4427791Z         """Ensure the database schema is present for tests."""
2025-08-17T19:38:36.4428125Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:38:36.4428398Z             return
2025-08-17T19:38:36.4428571Z     
2025-08-17T19:38:36.4428750Z         async def _has_table() -> bool:
2025-08-17T19:38:36.4429049Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:38:36.4429364Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:38:36.4429608Z             try:
2025-08-17T19:38:36.4429884Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:38:36.4430211Z             finally:
2025-08-17T19:38:36.4430548Z                 await conn.close()
2025-08-17T19:38:36.4430772Z     
2025-08-17T19:38:36.4430943Z         if not asyncio.run(_has_table()):
2025-08-17T19:38:36.4431204Z             import subprocess
2025-08-17T19:38:36.4431410Z     
2025-08-17T19:38:36.4431584Z >           subprocess.check_call(
2025-08-17T19:38:36.4431890Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:38:36.4432188Z             )
2025-08-17T19:38:36.4432288Z 
2025-08-17T19:38:36.4432369Z tests/conftest.py:108: 
2025-08-17T19:38:36.4432612Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:38:36.4432814Z 
2025-08-17T19:38:36.4432994Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:38:36.4433339Z kwargs = {}, retcode = 1
2025-08-17T19:38:36.4433626Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:38:36.4433864Z 
2025-08-17T19:38:36.4433964Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:38:36.4434298Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:38:36.4434662Z         the exit code was zero then return, otherwise raise
2025-08-17T19:38:36.4435057Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:38:36.4435429Z         return code in the returncode attribute.
2025-08-17T19:38:36.4435681Z     
2025-08-17T19:38:36.4436098Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:38:36.4436408Z     
2025-08-17T19:38:36.4436570Z         check_call(["ls", "-l"])
2025-08-17T19:38:36.4436786Z         """
2025-08-17T19:38:36.4436975Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:38:36.4437219Z         if retcode:
2025-08-17T19:38:36.4437411Z             cmd = kwargs.get("args")
2025-08-17T19:38:36.4437645Z             if cmd is None:
2025-08-17T19:38:36.4437860Z                 cmd = popenargs[0]
2025-08-17T19:38:36.4438121Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:38:36.4438717Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4439197Z 
2025-08-17T19:38:36.4439461Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:38:36.4439970Z __________________ ERROR at setup of test_imports[llm_server] __________________
2025-08-17T19:38:36.4440222Z 
2025-08-17T19:38:36.4440300Z _set_db_url = None
2025-08-17T19:38:36.4440412Z 
2025-08-17T19:38:36.4440526Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:38:36.4440805Z     def migrate_db(_set_db_url):
2025-08-17T19:38:36.4441083Z         """Ensure the database schema is present for tests."""
2025-08-17T19:38:36.4441425Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:38:36.4441699Z             return
2025-08-17T19:38:36.4441871Z     
2025-08-17T19:38:36.4442052Z         async def _has_table() -> bool:
2025-08-17T19:38:36.4442359Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:38:36.4442808Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:38:36.4443053Z             try:
2025-08-17T19:38:36.4443330Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:38:36.4443659Z             finally:
2025-08-17T19:38:36.4443859Z                 await conn.close()
2025-08-17T19:38:36.4444079Z     
2025-08-17T19:38:36.4444253Z         if not asyncio.run(_has_table()):
2025-08-17T19:38:36.4444520Z             import subprocess
2025-08-17T19:38:36.4444731Z     
2025-08-17T19:38:36.4444909Z >           subprocess.check_call(
2025-08-17T19:38:36.4445220Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:38:36.4445529Z             )
2025-08-17T19:38:36.4445630Z 
2025-08-17T19:38:36.4445712Z tests/conftest.py:108: 
2025-08-17T19:38:36.4446070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:38:36.4446394Z 
2025-08-17T19:38:36.4446579Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:38:36.4446934Z kwargs = {}, retcode = 1
2025-08-17T19:38:36.4447221Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:38:36.4447460Z 
2025-08-17T19:38:36.4447560Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:38:36.4447889Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:38:36.4448248Z         the exit code was zero then return, otherwise raise
2025-08-17T19:38:36.4448636Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:38:36.4449000Z         return code in the returncode attribute.
2025-08-17T19:38:36.4449248Z     
2025-08-17T19:38:36.4449494Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:38:36.4449882Z     
2025-08-17T19:38:36.4450118Z         check_call(["ls", "-l"])
2025-08-17T19:38:36.4450628Z         """
2025-08-17T19:38:36.4464201Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:38:36.4464561Z         if retcode:
2025-08-17T19:38:36.4464787Z             cmd = kwargs.get("args")
2025-08-17T19:38:36.4465041Z             if cmd is None:
2025-08-17T19:38:36.4465268Z                 cmd = popenargs[0]
2025-08-17T19:38:36.4465541Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:38:36.4466285Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4466766Z 
2025-08-17T19:38:36.4467043Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:38:36.4467589Z ________________ ERROR at setup of test_imports[logistics_etl] _________________
2025-08-17T19:38:36.4467851Z 
2025-08-17T19:38:36.4467927Z _set_db_url = None
2025-08-17T19:38:36.4468055Z 
2025-08-17T19:38:36.4468170Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:38:36.4468456Z     def migrate_db(_set_db_url):
2025-08-17T19:38:36.4468748Z         """Ensure the database schema is present for tests."""
2025-08-17T19:38:36.4469092Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:38:36.4469393Z             return
2025-08-17T19:38:36.4469582Z     
2025-08-17T19:38:36.4469767Z         async def _has_table() -> bool:
2025-08-17T19:38:36.4470079Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:38:36.4470406Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:38:36.4470656Z             try:
2025-08-17T19:38:36.4470937Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:38:36.4471272Z             finally:
2025-08-17T19:38:36.4471475Z                 await conn.close()
2025-08-17T19:38:36.4471696Z     
2025-08-17T19:38:36.4471879Z         if not asyncio.run(_has_table()):
2025-08-17T19:38:36.4472142Z             import subprocess
2025-08-17T19:38:36.4472350Z     
2025-08-17T19:38:36.4472525Z >           subprocess.check_call(
2025-08-17T19:38:36.4473018Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:38:36.4473325Z             )
2025-08-17T19:38:36.4473428Z 
2025-08-17T19:38:36.4473518Z tests/conftest.py:108: 
2025-08-17T19:38:36.4473769Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:38:36.4473967Z 
2025-08-17T19:38:36.4474156Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:38:36.4474497Z kwargs = {}, retcode = 1
2025-08-17T19:38:36.4474782Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:38:36.4475026Z 
2025-08-17T19:38:36.4475122Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:38:36.4475454Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:38:36.4476196Z         the exit code was zero then return, otherwise raise
2025-08-17T19:38:36.4476590Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:38:36.4476963Z         return code in the returncode attribute.
2025-08-17T19:38:36.4477211Z     
2025-08-17T19:38:36.4477462Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:38:36.4477761Z     
2025-08-17T19:38:36.4477933Z         check_call(["ls", "-l"])
2025-08-17T19:38:36.4478153Z         """
2025-08-17T19:38:36.4478347Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:38:36.4478592Z         if retcode:
2025-08-17T19:38:36.4478793Z             cmd = kwargs.get("args")
2025-08-17T19:38:36.4479032Z             if cmd is None:
2025-08-17T19:38:36.4479253Z                 cmd = popenargs[0]
2025-08-17T19:38:36.4479519Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:38:36.4480109Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4480592Z 
2025-08-17T19:38:36.4480872Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:38:36.4481395Z ________________ ERROR at setup of test_imports[price_importer] ________________
2025-08-17T19:38:36.4481659Z 
2025-08-17T19:38:36.4481732Z _set_db_url = None
2025-08-17T19:38:36.4481850Z 
2025-08-17T19:38:36.4481962Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:38:36.4482243Z     def migrate_db(_set_db_url):
2025-08-17T19:38:36.4482523Z         """Ensure the database schema is present for tests."""
2025-08-17T19:38:36.4482861Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:38:36.4483134Z             return
2025-08-17T19:38:36.4483301Z     
2025-08-17T19:38:36.4483479Z         async def _has_table() -> bool:
2025-08-17T19:38:36.4483783Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:38:36.4484106Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:38:36.4484356Z             try:
2025-08-17T19:38:36.4484636Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:38:36.4484970Z             finally:
2025-08-17T19:38:36.4485187Z                 await conn.close()
2025-08-17T19:38:36.4485406Z     
2025-08-17T19:38:36.4485589Z         if not asyncio.run(_has_table()):
2025-08-17T19:38:36.4485958Z             import subprocess
2025-08-17T19:38:36.4486171Z     
2025-08-17T19:38:36.4486340Z >           subprocess.check_call(
2025-08-17T19:38:36.4486648Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:38:36.4486950Z             )
2025-08-17T19:38:36.4487051Z 
2025-08-17T19:38:36.4487140Z tests/conftest.py:108: 
2025-08-17T19:38:36.4487384Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:38:36.4487585Z 
2025-08-17T19:38:36.4487769Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:38:36.4488121Z kwargs = {}, retcode = 1
2025-08-17T19:38:36.4488400Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:38:36.4488775Z 
2025-08-17T19:38:36.4488872Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:38:36.4489198Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:38:36.4489560Z         the exit code was zero then return, otherwise raise
2025-08-17T19:38:36.4489942Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:38:36.4490301Z         return code in the returncode attribute.
2025-08-17T19:38:36.4490545Z     
2025-08-17T19:38:36.4490789Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:38:36.4491089Z     
2025-08-17T19:38:36.4491258Z         check_call(["ls", "-l"])
2025-08-17T19:38:36.4491471Z         """
2025-08-17T19:38:36.4491663Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:38:36.4492020Z         if retcode:
2025-08-17T19:38:36.4492215Z             cmd = kwargs.get("args")
2025-08-17T19:38:36.4492451Z             if cmd is None:
2025-08-17T19:38:36.4492669Z                 cmd = popenargs[0]
2025-08-17T19:38:36.4492927Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:38:36.4493508Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4493978Z 
2025-08-17T19:38:36.4494249Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:38:36.4494749Z ___________________ ERROR at setup of test_imports[repricer] ___________________
2025-08-17T19:38:36.4495001Z 
2025-08-17T19:38:36.4495073Z _set_db_url = None
2025-08-17T19:38:36.4495192Z 
2025-08-17T19:38:36.4495303Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:38:36.4495584Z     def migrate_db(_set_db_url):
2025-08-17T19:38:36.4496023Z         """Ensure the database schema is present for tests."""
2025-08-17T19:38:36.4496365Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:38:36.4496644Z             return
2025-08-17T19:38:36.4496810Z     
2025-08-17T19:38:36.4496986Z         async def _has_table() -> bool:
2025-08-17T19:38:36.4497291Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:38:36.4497607Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:38:36.4497853Z             try:
2025-08-17T19:38:36.4498128Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:38:36.4498447Z             finally:
2025-08-17T19:38:36.4498646Z                 await conn.close()
2025-08-17T19:38:36.4498864Z     
2025-08-17T19:38:36.4499040Z         if not asyncio.run(_has_table()):
2025-08-17T19:38:36.4499296Z             import subprocess
2025-08-17T19:38:36.4499506Z     
2025-08-17T19:38:36.4499672Z >           subprocess.check_call(
2025-08-17T19:38:36.4499978Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:38:36.4500279Z             )
2025-08-17T19:38:36.4500395Z 
2025-08-17T19:38:36.4500482Z tests/conftest.py:108: 
2025-08-17T19:38:36.4500731Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:38:36.4500931Z 
2025-08-17T19:38:36.4501113Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:38:36.4501458Z kwargs = {}, retcode = 1
2025-08-17T19:38:36.4501734Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:38:36.4501976Z 
2025-08-17T19:38:36.4502069Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:38:36.4502393Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:38:36.4502752Z         the exit code was zero then return, otherwise raise
2025-08-17T19:38:36.4503132Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:38:36.4503496Z         return code in the returncode attribute.
2025-08-17T19:38:36.4503741Z     
2025-08-17T19:38:36.4503980Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:38:36.4504410Z     
2025-08-17T19:38:36.4504579Z         check_call(["ls", "-l"])
2025-08-17T19:38:36.4504791Z         """
2025-08-17T19:38:36.4504979Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:38:36.4505221Z         if retcode:
2025-08-17T19:38:36.4505409Z             cmd = kwargs.get("args")
2025-08-17T19:38:36.4505641Z             if cmd is None:
2025-08-17T19:38:36.4505963Z                 cmd = popenargs[0]
2025-08-17T19:38:36.4506222Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:38:36.4506799Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4507267Z 
2025-08-17T19:38:36.4507530Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:38:36.4508108Z ================================ tests coverage ================================
2025-08-17T19:38:36.4508491Z _______________ coverage: platform linux, python 3.11.13-final-0 _______________
2025-08-17T19:38:36.4508760Z 
2025-08-17T19:38:36.4508864Z Coverage XML written to file coverage.xml
2025-08-17T19:38:36.4509169Z =========================== short test summary info ============================
2025-08-17T19:38:36.4510010Z ERROR tests/db/test_db_smoke_imports.py::test_imports[alert_bot] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4511240Z ERROR tests/db/test_db_smoke_imports.py::test_imports[api] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4512435Z ERROR tests/db/test_db_smoke_imports.py::test_imports[common] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4513636Z ERROR tests/db/test_db_smoke_imports.py::test_imports[db] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4514826Z ERROR tests/db/test_db_smoke_imports.py::test_imports[emailer] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4516206Z ERROR tests/db/test_db_smoke_imports.py::test_imports[etl] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4517413Z ERROR tests/db/test_db_smoke_imports.py::test_imports[fees_h10] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4518623Z ERROR tests/db/test_db_smoke_imports.py::test_imports[ingest] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.4519844Z ERROR tests/db/test_db_smoke_imports.py::test_imports[llm_server] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.5496807Z ERROR tests/db/test_db_smoke_imports.py::test_imports[logistics_etl] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.5499543Z ERROR tests/db/test_db_smoke_imports.py::test_imports[price_importer] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.5501284Z ERROR tests/db/test_db_smoke_imports.py::test_imports[repricer] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:38:36.6802665Z ##[error]Process completed with exit code 1.
