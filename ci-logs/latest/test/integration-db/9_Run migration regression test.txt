2025-08-17T19:36:19.1615636Z ##[group]Run pytest tests/db -q --cov=services --cov-append --cov-fail-under=0
2025-08-17T19:36:19.1616199Z [36;1mpytest tests/db -q --cov=services --cov-append --cov-fail-under=0[0m
2025-08-17T19:36:19.1657143Z shell: /usr/bin/bash -e {0}
2025-08-17T19:36:19.1657381Z env:
2025-08-17T19:36:19.1657558Z   PG_USER: postgres
2025-08-17T19:36:19.1657761Z   PG_PASSWORD: pass
2025-08-17T19:36:19.1657958Z   PG_DATABASE: awa
2025-08-17T19:36:19.1658141Z   PG_HOST: localhost
2025-08-17T19:36:19.1658333Z   PG_PORT: 5432
2025-08-17T19:36:19.1658802Z   PG_SYNC_DSN: ***localhost:5432/awa
2025-08-17T19:36:19.1659228Z   PG_ASYNC_DSN: ***localhost:5432/awa
2025-08-17T19:36:19.1659618Z   DATABASE_URL: ***localhost:5432/awa
2025-08-17T19:36:19.1659857Z   DATA_DIR: /tmp/awa-data
2025-08-17T19:36:19.1660059Z   ENABLE_LIVE: 0
2025-08-17T19:36:19.1660234Z   TESTING: 1
2025-08-17T19:36:19.1660718Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T19:36:19.1661119Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-17T19:36:19.1661536Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T19:36:19.1661885Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T19:36:19.1662234Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-17T19:36:19.1662580Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-17T19:36:19.1662869Z ##[endgroup]
2025-08-17T19:36:22.3808499Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.3811717Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3814191Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\alert_bot\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\alert_bot\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.3817251Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3819760Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\alert_bot\alert_bot.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\alert_bot\alert_bot.py'. (couldnt-parse)
2025-08-17T19:36:22.3822454Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3824983Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\alert_bot\rules\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\alert_bot\rules\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.3827546Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3829926Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.3832513Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3834879Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\config.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\config.py'. (couldnt-parse)
2025-08-17T19:36:22.3837919Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3840435Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\db.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\db.py'. (couldnt-parse)
2025-08-17T19:36:22.3842783Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3845153Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\main.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\main.py'. (couldnt-parse)
2025-08-17T19:36:22.3847549Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3850000Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\models\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\models\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.3852648Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3855076Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\models\fee.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\models\fee.py'. (couldnt-parse)
2025-08-17T19:36:22.3857530Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3860482Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\roi_repository.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\roi_repository.py'. (couldnt-parse)
2025-08-17T19:36:22.3862988Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3865526Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.3868003Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3870644Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\health.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\health.py'. (couldnt-parse)
2025-08-17T19:36:22.3873127Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3875605Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\repository.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\repository.py'. (couldnt-parse)
2025-08-17T19:36:22.3878228Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3881116Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\roi.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\roi.py'. (couldnt-parse)
2025-08-17T19:36:22.3883552Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3885970Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\stats.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\api\routes\stats.py'. (couldnt-parse)
2025-08-17T19:36:22.3888414Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3891052Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.3893519Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3895909Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\base.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\base.py'. (couldnt-parse)
2025-08-17T19:36:22.3898307Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3900938Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\config.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\config.py'. (couldnt-parse)
2025-08-17T19:36:22.3903658Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3906007Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\db.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\db.py'. (couldnt-parse)
2025-08-17T19:36:22.3908365Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3910946Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\db_url.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\db_url.py'. (couldnt-parse)
2025-08-17T19:36:22.3913405Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3915769Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\dsn.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\dsn.py'. (couldnt-parse)
2025-08-17T19:36:22.3918150Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3920739Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\keepa.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\keepa.py'. (couldnt-parse)
2025-08-17T19:36:22.3923448Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3925816Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\llm.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\llm.py'. (couldnt-parse)
2025-08-17T19:36:22.3928219Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3930932Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\models_vendor.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\models_vendor.py'. (couldnt-parse)
2025-08-17T19:36:22.3933457Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3935903Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\settings.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\common\settings.py'. (couldnt-parse)
2025-08-17T19:36:22.3938372Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3940892Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\db\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\db\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.3943280Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3945716Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\db\utils\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\db\utils\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.3948405Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3951029Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\db\utils\views.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\db\utils\views.py'. (couldnt-parse)
2025-08-17T19:36:22.3953479Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3955915Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\emailer\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\emailer\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.3958377Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3961047Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\emailer\generate_body.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\emailer\generate_body.py'. (couldnt-parse)
2025-08-17T19:36:22.3963554Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3965946Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.3968596Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3971108Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\db.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\db.py'. (couldnt-parse)
2025-08-17T19:36:22.3973452Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3975910Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\dialects\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\dialects\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.3978409Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3981216Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\dialects\amazon_reimbursements.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\dialects\amazon_reimbursements.py'. (couldnt-parse)
2025-08-17T19:36:22.3983912Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3986463Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\dialects\amazon_returns.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\dialects\amazon_returns.py'. (couldnt-parse)
2025-08-17T19:36:22.3989325Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3991964Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\fba_fee_ingestor.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\fba_fee_ingestor.py'. (couldnt-parse)
2025-08-17T19:36:22.3994470Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.3996924Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\keepa_ingestor.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\keepa_ingestor.py'. (couldnt-parse)
2025-08-17T19:36:22.3999431Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4002073Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\sp_fees_ingestor.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\etl\sp_fees_ingestor.py'. (couldnt-parse)
2025-08-17T19:36:22.4004575Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4006985Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\fees_h10\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\fees_h10\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.4009699Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4012317Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\fees_h10\client.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\fees_h10\client.py'. (couldnt-parse)
2025-08-17T19:36:22.4014776Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4017257Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\fees_h10\repository.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\fees_h10\repository.py'. (couldnt-parse)
2025-08-17T19:36:22.4019745Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4022344Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\fees_h10\worker.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\fees_h10\worker.py'. (couldnt-parse)
2025-08-17T19:36:22.4024783Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4027210Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\ingest\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\ingest\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.4029665Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4032676Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\ingest\email_watcher.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\ingest\email_watcher.py'. (couldnt-parse)
2025-08-17T19:36:22.4035192Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4037690Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\ingest\ingest_router.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\ingest\ingest_router.py'. (couldnt-parse)
2025-08-17T19:36:22.4040208Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4042887Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\ingest\upload_router.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\ingest\upload_router.py'. (couldnt-parse)
2025-08-17T19:36:22.4045393Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4047839Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\llm_server\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\llm_server\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.4050492Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4053156Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\llm_server\app.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\llm_server\app.py'. (couldnt-parse)
2025-08-17T19:36:22.4055598Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4058091Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.4060782Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4063285Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\__main__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\__main__.py'. (couldnt-parse)
2025-08-17T19:36:22.4065864Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4068338Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\client.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\client.py'. (couldnt-parse)
2025-08-17T19:36:22.4071052Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4073341Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\cron.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\cron.py'. (couldnt-parse)
2025-08-17T19:36:22.4075873Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4078232Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\db.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\db.py'. (couldnt-parse)
2025-08-17T19:36:22.4080755Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4083183Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\flow.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\flow.py'. (couldnt-parse)
2025-08-17T19:36:22.4085536Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4088053Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\repository.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\logistics_etl\repository.py'. (couldnt-parse)
2025-08-17T19:36:22.4090824Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4093336Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.4096126Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4098690Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\common\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\common\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.4101366Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4103755Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\common\base.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\common\base.py'. (couldnt-parse)
2025-08-17T19:36:22.4106304Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4108824Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\common\db_url.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\common\db_url.py'. (couldnt-parse)
2025-08-17T19:36:22.4111538Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4114086Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\common\models_vendor.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\common\models_vendor.py'. (couldnt-parse)
2025-08-17T19:36:22.4117006Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4119496Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\import.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\import.py'. (couldnt-parse)
2025-08-17T19:36:22.4122219Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4124727Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\normaliser.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\normaliser.py'. (couldnt-parse)
2025-08-17T19:36:22.4127240Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4129729Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\reader.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\reader.py'. (couldnt-parse)
2025-08-17T19:36:22.4132375Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4134798Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\repository.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\repository.py'. (couldnt-parse)
2025-08-17T19:36:22.4137543Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4140438Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.4142917Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4145310Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\base.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\base.py'. (couldnt-parse)
2025-08-17T19:36:22.4147853Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4150521Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\db.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\db.py'. (couldnt-parse)
2025-08-17T19:36:22.4153108Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4155708Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\db_url.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\db_url.py'. (couldnt-parse)
2025-08-17T19:36:22.4158615Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4161419Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\dsn.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\dsn.py'. (couldnt-parse)
2025-08-17T19:36:22.4164027Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4166685Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\keepa.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\keepa.py'. (couldnt-parse)
2025-08-17T19:36:22.4169309Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4171563Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\llm.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\llm.py'. (couldnt-parse)
2025-08-17T19:36:22.4173016Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4174614Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\models_vendor.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\models_vendor.py'. (couldnt-parse)
2025-08-17T19:36:22.4176262Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4177703Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\settings.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\price_importer\services_common\settings.py'. (couldnt-parse)
2025-08-17T19:36:22.4179181Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4180640Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.4181953Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4183252Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\__init__.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\__init__.py'. (couldnt-parse)
2025-08-17T19:36:22.4184569Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4185855Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\deps.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\deps.py'. (couldnt-parse)
2025-08-17T19:36:22.4187264Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4188553Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\logic.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\logic.py'. (couldnt-parse)
2025-08-17T19:36:22.4189846Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4191255Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\main.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\main.py'. (couldnt-parse)
2025-08-17T19:36:22.4192550Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4193855Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\schemas.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\repricer\app\schemas.py'. (couldnt-parse)
2025-08-17T19:36:22.4195163Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.4196445Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/coverage/report_core.py:118: CoverageWarning: Couldn't parse '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\returns_etl\loader.py': No source for code: '/home/runner/work/AWA-App/AWA-App/C:\Users\Alexey\Documents\GitHub\AWA-App\services\returns_etl\loader.py'. (couldnt-parse)
2025-08-17T19:36:22.4197873Z   coverage._warn(msg, slug="couldnt-parse")
2025-08-17T19:36:22.5899827Z EEEEEEEEEEEE                                                             [100%]
2025-08-17T19:36:22.5900716Z ==================================== ERRORS ====================================
2025-08-17T19:36:22.5901380Z __________________ ERROR at setup of test_imports[alert_bot] ___________________
2025-08-17T19:36:22.5901850Z 
2025-08-17T19:36:22.5901985Z _set_db_url = None
2025-08-17T19:36:22.5902200Z 
2025-08-17T19:36:22.5902420Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:36:22.5902946Z     def migrate_db(_set_db_url):
2025-08-17T19:36:22.5903460Z         """Ensure the database schema is present for tests."""
2025-08-17T19:36:22.5904072Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:36:22.5904575Z             return
2025-08-17T19:36:22.5904889Z     
2025-08-17T19:36:22.5905265Z         async def _has_table() -> bool:
2025-08-17T19:36:22.5905845Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:36:22.5906429Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:36:22.5906880Z             try:
2025-08-17T19:36:22.5907450Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:36:22.5908047Z             finally:
2025-08-17T19:36:22.5908400Z                 await conn.close()
2025-08-17T19:36:22.5908789Z     
2025-08-17T19:36:22.5909124Z         if not asyncio.run(_has_table()):
2025-08-17T19:36:22.5909607Z             import subprocess
2025-08-17T19:36:22.5909982Z     
2025-08-17T19:36:22.5910472Z >           subprocess.check_call(
2025-08-17T19:36:22.5911046Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:36:22.5911594Z             )
2025-08-17T19:36:22.5911784Z 
2025-08-17T19:36:22.5911938Z tests/conftest.py:108: 
2025-08-17T19:36:22.5912383Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:36:22.5913040Z 
2025-08-17T19:36:22.5913385Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:36:22.5914007Z kwargs = {}, retcode = 1
2025-08-17T19:36:22.5914526Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:36:22.5914963Z 
2025-08-17T19:36:22.5915131Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:36:22.5915725Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:36:22.5916378Z         the exit code was zero then return, otherwise raise
2025-08-17T19:36:22.5917074Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:36:22.5917731Z         return code in the returncode attribute.
2025-08-17T19:36:22.5918165Z     
2025-08-17T19:36:22.5918601Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:36:22.5919136Z     
2025-08-17T19:36:22.5919450Z         check_call(["ls", "-l"])
2025-08-17T19:36:22.5919857Z         """
2025-08-17T19:36:22.5920195Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:36:22.5920831Z         if retcode:
2025-08-17T19:36:22.5921183Z             cmd = kwargs.get("args")
2025-08-17T19:36:22.5921600Z             if cmd is None:
2025-08-17T19:36:22.5921991Z                 cmd = popenargs[0]
2025-08-17T19:36:22.5922464Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:36:22.5923491Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.5924343Z 
2025-08-17T19:36:22.5924825Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:36:22.5925745Z ---------------------------- Captured stderr setup -----------------------------
2025-08-17T19:36:22.5926475Z INFO  [alembic.runtime.migration] Context impl PostgresqlImpl.
2025-08-17T19:36:22.5927477Z INFO  [alembic.runtime.migration] Will assume transactional DDL.
2025-08-17T19:36:22.5928253Z INFO  [alembic.runtime.migration] Running upgrade  -> 0001_baseline
2025-08-17T19:36:22.5929128Z INFO  [alembic.runtime.migration] Running upgrade 0001_baseline -> 0002_create_roi_view
2025-08-17T19:36:22.5930107Z INFO  [alembic.runtime.migration] Running upgrade 0002_create_roi_view -> 3e9d5c5aff2c
2025-08-17T19:36:22.5931370Z INFO  [alembic.runtime.migration] Running upgrade 3e9d5c5aff2c -> 0003_vendor_prices
2025-08-17T19:36:22.5932294Z INFO  [alembic.runtime.migration] Running upgrade 0003_vendor_prices -> 0004_fee_cron
2025-08-17T19:36:22.5933190Z INFO  [alembic.runtime.migration] Running upgrade 0004_fee_cron -> 0006_fix_roi_views
2025-08-17T19:36:22.5934131Z INFO  [alembic.runtime.migration] Running upgrade 0006_fix_roi_views -> 0020_unified_schema
2025-08-17T19:36:22.5935027Z INFO  [alembic.runtime.migration] Running upgrade 0020_unified_schema -> 0022_fix_roi_view
2025-08-17T19:36:22.5935889Z INFO  [alembic.runtime.migration] Running upgrade 0022_fix_roi_view -> 0023_add_storage_fee
2025-08-17T19:36:22.5936760Z INFO  [alembic.runtime.migration] Running upgrade 0023_add_storage_fee -> 0024_create_buybox
2025-08-17T19:36:22.5937674Z INFO  [alembic.runtime.migration] Running upgrade 0024_create_buybox -> 0025_pr4_indexes_loadlog
2025-08-17T19:36:22.5938336Z Traceback (most recent call last):
2025-08-17T19:36:22.5947076Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1971, in _exec_single_context
2025-08-17T19:36:22.5948088Z     self.dialect.do_execute(
2025-08-17T19:36:22.5949037Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/default.py", line 919, in do_execute
2025-08-17T19:36:22.5949934Z     cursor.execute(statement, parameters)
2025-08-17T19:36:22.5950987Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/psycopg/cursor.py", line 97, in execute
2025-08-17T19:36:22.5951804Z     raise ex.with_traceback(None)
2025-08-17T19:36:22.5952528Z psycopg.errors.UndefinedColumn: column "reimb_id" does not exist
2025-08-17T19:36:22.5953382Z CONTEXT:  SQL statement "CREATE UNIQUE INDEX uq_reimbursements_raw_reimb_id ON reimbursements_raw(reimb_id)"
2025-08-17T19:36:22.5954183Z PL/pgSQL function inline_code_block line 5 at SQL statement
2025-08-17T19:36:22.5954539Z 
2025-08-17T19:36:22.5954803Z The above exception was the direct cause of the following exception:
2025-08-17T19:36:22.5955183Z 
2025-08-17T19:36:22.5955319Z Traceback (most recent call last):
2025-08-17T19:36:22.5955890Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/bin/alembic", line 7, in <module>
2025-08-17T19:36:22.5956439Z     sys.exit(main())
2025-08-17T19:36:22.5956716Z              ^^^^^^
2025-08-17T19:36:22.5957405Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/config.py", line 641, in main
2025-08-17T19:36:22.5958179Z     CommandLine(prog=prog).main(argv=argv)
2025-08-17T19:36:22.5958972Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/config.py", line 631, in main
2025-08-17T19:36:22.5959720Z     self.run_cmd(cfg, options)
2025-08-17T19:36:22.5960622Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/config.py", line 608, in run_cmd
2025-08-17T19:36:22.5961351Z     fn(
2025-08-17T19:36:22.5962086Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/command.py", line 403, in upgrade
2025-08-17T19:36:22.5962838Z     script.run_env()
2025-08-17T19:36:22.5963566Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/script/base.py", line 583, in run_env
2025-08-17T19:36:22.5964389Z     util.load_python_file(self.dir, "env.py")
2025-08-17T19:36:22.5965306Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/util/pyfiles.py", line 95, in load_python_file
2025-08-17T19:36:22.5966251Z     module = load_module_py(module_id, path)
2025-08-17T19:36:22.5966825Z              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-17T19:36:22.5967703Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/util/pyfiles.py", line 113, in load_module_py
2025-08-17T19:36:22.5968587Z     spec.loader.exec_module(module)  # type: ignore
2025-08-17T19:36:22.5969020Z     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-17T19:36:22.5969537Z   File "<frozen importlib._bootstrap_external>", line 940, in exec_module
2025-08-17T19:36:22.5970443Z   File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
2025-08-17T19:36:22.5971293Z   File "/home/runner/work/AWA-App/AWA-App/services/api/migrations/env.py", line 55, in <module>
2025-08-17T19:36:22.5971946Z     run_migrations_online()
2025-08-17T19:36:22.5972671Z   File "/home/runner/work/AWA-App/AWA-App/services/api/migrations/env.py", line 51, in run_migrations_online
2025-08-17T19:36:22.5973405Z     context.run_migrations()
2025-08-17T19:36:22.5973808Z   File "<string>", line 8, in run_migrations
2025-08-17T19:36:22.5974758Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/runtime/environment.py", line 948, in run_migrations
2025-08-17T19:36:22.5975644Z     self.get_context().run_migrations(**kw)
2025-08-17T19:36:22.5976554Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/runtime/migration.py", line 627, in run_migrations
2025-08-17T19:36:22.5977434Z     step.migration_fn(**kw)
2025-08-17T19:36:22.5978262Z   File "/home/runner/work/AWA-App/AWA-App/services/api/migrations/versions/0025_pr4_indexes_loadlog.py", line 36, in upgrade
2025-08-17T19:36:22.5979069Z     op.execute(
2025-08-17T19:36:22.5979403Z   File "<string>", line 8, in execute
2025-08-17T19:36:22.5979795Z   File "<string>", line 3, in execute
2025-08-17T19:36:22.5980765Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/operations/ops.py", line 2537, in execute
2025-08-17T19:36:22.5981592Z     return operations.invoke(op)
2025-08-17T19:36:22.5981934Z            ^^^^^^^^^^^^^^^^^^^^^
2025-08-17T19:36:22.5982908Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/operations/base.py", line 445, in invoke
2025-08-17T19:36:22.5983711Z     return fn(self, operation)
2025-08-17T19:36:22.5984030Z            ^^^^^^^^^^^^^^^^^^^
2025-08-17T19:36:22.5984828Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/operations/toimpl.py", line 224, in execute_sql
2025-08-17T19:36:22.5985734Z     operations.migration_context.impl.execute(
2025-08-17T19:36:22.5986565Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/ddl/impl.py", line 214, in execute
2025-08-17T19:36:22.5987345Z     self._exec(sql, execution_options)
2025-08-17T19:36:22.5988152Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/alembic/ddl/impl.py", line 207, in _exec
2025-08-17T19:36:22.5988995Z     return conn.execute(construct, multiparams)
2025-08-17T19:36:22.5989395Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-17T19:36:22.5990384Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1422, in execute
2025-08-17T19:36:22.5991205Z     return meth(
2025-08-17T19:36:22.5991461Z            ^^^^^
2025-08-17T19:36:22.5992327Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/sql/elements.py", line 514, in _execute_on_connection
2025-08-17T19:36:22.5993283Z     return connection._execute_clauseelement(
2025-08-17T19:36:22.5993672Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-17T19:36:22.5994585Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1644, in _execute_clauseelement
2025-08-17T19:36:22.5995478Z     ret = self._execute_context(
2025-08-17T19:36:22.5995795Z           ^^^^^^^^^^^^^^^^^^^^^^
2025-08-17T19:36:22.5996616Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1850, in _execute_context
2025-08-17T19:36:22.5997742Z     return self._exec_single_context(
2025-08-17T19:36:22.5998128Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-17T19:36:22.5999117Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1990, in _exec_single_context
2025-08-17T19:36:22.6000049Z     self._handle_dbapi_exception(
2025-08-17T19:36:22.6001128Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 2357, in _handle_dbapi_exception
2025-08-17T19:36:22.6002185Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-08-17T19:36:22.6003236Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/base.py", line 1971, in _exec_single_context
2025-08-17T19:36:22.6004118Z     self.dialect.do_execute(
2025-08-17T19:36:22.6004953Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/sqlalchemy/engine/default.py", line 919, in do_execute
2025-08-17T19:36:22.6005840Z     cursor.execute(statement, parameters)
2025-08-17T19:36:22.6006608Z   File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/psycopg/cursor.py", line 97, in execute
2025-08-17T19:36:22.6007367Z     raise ex.with_traceback(None)
2025-08-17T19:36:22.6008027Z sqlalchemy.exc.ProgrammingError: (psycopg.errors.UndefinedColumn) column "reimb_id" does not exist
2025-08-17T19:36:22.6009012Z CONTEXT:  SQL statement "CREATE UNIQUE INDEX uq_reimbursements_raw_reimb_id ON reimbursements_raw(reimb_id)"
2025-08-17T19:36:22.6009779Z PL/pgSQL function inline_code_block line 5 at SQL statement
2025-08-17T19:36:22.6010229Z [SQL: 
2025-08-17T19:36:22.6010635Z         DO $$ BEGIN
2025-08-17T19:36:22.6010894Z             IF NOT EXISTS (
2025-08-17T19:36:22.6011466Z                 SELECT 1 FROM pg_indexes WHERE schemaname='public' AND indexname='uq_reimbursements_raw_reimb_id'
2025-08-17T19:36:22.6012075Z             ) THEN
2025-08-17T19:36:22.6012730Z                 CREATE UNIQUE INDEX uq_reimbursements_raw_reimb_id ON reimbursements_raw(reimb_id);
2025-08-17T19:36:22.6013277Z             END IF;
2025-08-17T19:36:22.6013531Z         END $$;
2025-08-17T19:36:22.6013774Z         ]
2025-08-17T19:36:22.6014250Z (Background on this error at: https://sqlalche.me/e/20/f405)
2025-08-17T19:36:22.6014832Z _____________________ ERROR at setup of test_imports[api] ______________________
2025-08-17T19:36:22.6015202Z 
2025-08-17T19:36:22.6015308Z _set_db_url = None
2025-08-17T19:36:22.6015481Z 
2025-08-17T19:36:22.6015638Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:36:22.6016039Z     def migrate_db(_set_db_url):
2025-08-17T19:36:22.6016431Z         """Ensure the database schema is present for tests."""
2025-08-17T19:36:22.6016909Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:36:22.6017313Z             return
2025-08-17T19:36:22.6017570Z     
2025-08-17T19:36:22.6017821Z         async def _has_table() -> bool:
2025-08-17T19:36:22.6018260Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:36:22.6018714Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:36:22.6019067Z             try:
2025-08-17T19:36:22.6019460Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:36:22.6019944Z             finally:
2025-08-17T19:36:22.6020226Z                 await conn.close()
2025-08-17T19:36:22.6020713Z     
2025-08-17T19:36:22.6020973Z         if not asyncio.run(_has_table()):
2025-08-17T19:36:22.6021337Z             import subprocess
2025-08-17T19:36:22.6021633Z     
2025-08-17T19:36:22.6021879Z >           subprocess.check_call(
2025-08-17T19:36:22.6022319Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:36:22.6022752Z             )
2025-08-17T19:36:22.6022896Z 
2025-08-17T19:36:22.6023018Z tests/conftest.py:108: 
2025-08-17T19:36:22.6023531Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:36:22.6023832Z 
2025-08-17T19:36:22.6024096Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:36:22.6024593Z kwargs = {}, retcode = 1
2025-08-17T19:36:22.6024999Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:36:22.6025338Z 
2025-08-17T19:36:22.6025475Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:36:22.6025948Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:36:22.6026466Z         the exit code was zero then return, otherwise raise
2025-08-17T19:36:22.6027020Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:36:22.6027546Z         return code in the returncode attribute.
2025-08-17T19:36:22.6027899Z     
2025-08-17T19:36:22.6028254Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:36:22.6028702Z     
2025-08-17T19:36:22.6028938Z         check_call(["ls", "-l"])
2025-08-17T19:36:22.6029248Z         """
2025-08-17T19:36:22.6029516Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:36:22.6029867Z         if retcode:
2025-08-17T19:36:22.6030144Z             cmd = kwargs.get("args")
2025-08-17T19:36:22.6030684Z             if cmd is None:
2025-08-17T19:36:22.6030988Z                 cmd = popenargs[0]
2025-08-17T19:36:22.6031361Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:36:22.6032199Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6032885Z 
2025-08-17T19:36:22.6033263Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:36:22.6034039Z ____________________ ERROR at setup of test_imports[common] ____________________
2025-08-17T19:36:22.6034400Z 
2025-08-17T19:36:22.6034507Z _set_db_url = None
2025-08-17T19:36:22.6034685Z 
2025-08-17T19:36:22.6034844Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:36:22.6035420Z     def migrate_db(_set_db_url):
2025-08-17T19:36:22.6035811Z         """Ensure the database schema is present for tests."""
2025-08-17T19:36:22.6036294Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:36:22.6036685Z             return
2025-08-17T19:36:22.6036939Z     
2025-08-17T19:36:22.6037190Z         async def _has_table() -> bool:
2025-08-17T19:36:22.6037618Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:36:22.6038089Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:36:22.6038440Z             try:
2025-08-17T19:36:22.6038829Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:36:22.6039301Z             finally:
2025-08-17T19:36:22.6039580Z                 await conn.close()
2025-08-17T19:36:22.6039891Z     
2025-08-17T19:36:22.6040143Z         if not asyncio.run(_has_table()):
2025-08-17T19:36:22.6040671Z             import subprocess
2025-08-17T19:36:22.6040974Z     
2025-08-17T19:36:22.6041223Z >           subprocess.check_call(
2025-08-17T19:36:22.6041661Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:36:22.6042095Z             )
2025-08-17T19:36:22.6042237Z 
2025-08-17T19:36:22.6042361Z tests/conftest.py:108: 
2025-08-17T19:36:22.6042713Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:36:22.6043013Z 
2025-08-17T19:36:22.6043281Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:36:22.6043774Z kwargs = {}, retcode = 1
2025-08-17T19:36:22.6044171Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:36:22.6044516Z 
2025-08-17T19:36:22.6044654Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:36:22.6045122Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:36:22.6045825Z         the exit code was zero then return, otherwise raise
2025-08-17T19:36:22.6046370Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:36:22.6046903Z         return code in the returncode attribute.
2025-08-17T19:36:22.6047262Z     
2025-08-17T19:36:22.6047615Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:36:22.6048099Z     
2025-08-17T19:36:22.6048344Z         check_call(["ls", "-l"])
2025-08-17T19:36:22.6048653Z         """
2025-08-17T19:36:22.6048934Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:36:22.6049285Z         if retcode:
2025-08-17T19:36:22.6049564Z             cmd = kwargs.get("args")
2025-08-17T19:36:22.6049901Z             if cmd is None:
2025-08-17T19:36:22.6050207Z                 cmd = popenargs[0]
2025-08-17T19:36:22.6051141Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:36:22.6051998Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6052607Z 
2025-08-17T19:36:22.6052947Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:36:22.6053594Z ______________________ ERROR at setup of test_imports[db] ______________________
2025-08-17T19:36:22.6053898Z 
2025-08-17T19:36:22.6053989Z _set_db_url = None
2025-08-17T19:36:22.6054134Z 
2025-08-17T19:36:22.6054271Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:36:22.6054617Z     def migrate_db(_set_db_url):
2025-08-17T19:36:22.6054963Z         """Ensure the database schema is present for tests."""
2025-08-17T19:36:22.6055376Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:36:22.6055706Z             return
2025-08-17T19:36:22.6055912Z     
2025-08-17T19:36:22.6056130Z         async def _has_table() -> bool:
2025-08-17T19:36:22.6056515Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:36:22.6056925Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:36:22.6057471Z             try:
2025-08-17T19:36:22.6057858Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:36:22.6058273Z             finally:
2025-08-17T19:36:22.6058527Z                 await conn.close()
2025-08-17T19:36:22.6058802Z     
2025-08-17T19:36:22.6059023Z         if not asyncio.run(_has_table()):
2025-08-17T19:36:22.6059341Z             import subprocess
2025-08-17T19:36:22.6059597Z     
2025-08-17T19:36:22.6059803Z >           subprocess.check_call(
2025-08-17T19:36:22.6060185Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:36:22.6060724Z             )
2025-08-17T19:36:22.6060850Z 
2025-08-17T19:36:22.6060958Z tests/conftest.py:108: 
2025-08-17T19:36:22.6061259Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:36:22.6061504Z 
2025-08-17T19:36:22.6061741Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:36:22.6062175Z kwargs = {}, retcode = 1
2025-08-17T19:36:22.6062530Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:36:22.6062811Z 
2025-08-17T19:36:22.6062909Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:36:22.6063247Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:36:22.6063625Z         the exit code was zero then return, otherwise raise
2025-08-17T19:36:22.6064019Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:36:22.6064390Z         return code in the returncode attribute.
2025-08-17T19:36:22.6064642Z     
2025-08-17T19:36:22.6064893Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:36:22.6065204Z     
2025-08-17T19:36:22.6065374Z         check_call(["ls", "-l"])
2025-08-17T19:36:22.6065594Z         """
2025-08-17T19:36:22.6065784Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:36:22.6066176Z         if retcode:
2025-08-17T19:36:22.6066383Z             cmd = kwargs.get("args")
2025-08-17T19:36:22.6066624Z             if cmd is None:
2025-08-17T19:36:22.6066844Z                 cmd = popenargs[0]
2025-08-17T19:36:22.6067115Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:36:22.6067728Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6068231Z 
2025-08-17T19:36:22.6068514Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:36:22.6069042Z ___________________ ERROR at setup of test_imports[emailer] ____________________
2025-08-17T19:36:22.6069305Z 
2025-08-17T19:36:22.6069380Z _set_db_url = None
2025-08-17T19:36:22.6069499Z 
2025-08-17T19:36:22.6069613Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:36:22.6069900Z     def migrate_db(_set_db_url):
2025-08-17T19:36:22.6070189Z         """Ensure the database schema is present for tests."""
2025-08-17T19:36:22.6070670Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:36:22.6070952Z             return
2025-08-17T19:36:22.6071123Z     
2025-08-17T19:36:22.6071304Z         async def _has_table() -> bool:
2025-08-17T19:36:22.6071614Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:36:22.6071940Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:36:22.6072193Z             try:
2025-08-17T19:36:22.6072474Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:36:22.6072808Z             finally:
2025-08-17T19:36:22.6073009Z                 await conn.close()
2025-08-17T19:36:22.6073234Z     
2025-08-17T19:36:22.6073417Z         if not asyncio.run(_has_table()):
2025-08-17T19:36:22.6073663Z             import subprocess
2025-08-17T19:36:22.6073865Z     
2025-08-17T19:36:22.6074032Z >           subprocess.check_call(
2025-08-17T19:36:22.6074324Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:36:22.6074742Z             )
2025-08-17T19:36:22.6074845Z 
2025-08-17T19:36:22.6074924Z tests/conftest.py:108: 
2025-08-17T19:36:22.6075158Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:36:22.6075348Z 
2025-08-17T19:36:22.6075531Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:36:22.6075861Z kwargs = {}, retcode = 1
2025-08-17T19:36:22.6076130Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:36:22.6076362Z 
2025-08-17T19:36:22.6076453Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:36:22.6076766Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:36:22.6077118Z         the exit code was zero then return, otherwise raise
2025-08-17T19:36:22.6077483Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:36:22.6077835Z         return code in the returncode attribute.
2025-08-17T19:36:22.6078072Z     
2025-08-17T19:36:22.6078300Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:36:22.6078590Z     
2025-08-17T19:36:22.6078751Z         check_call(["ls", "-l"])
2025-08-17T19:36:22.6078956Z         """
2025-08-17T19:36:22.6079141Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:36:22.6079379Z         if retcode:
2025-08-17T19:36:22.6079562Z             cmd = kwargs.get("args")
2025-08-17T19:36:22.6079788Z             if cmd is None:
2025-08-17T19:36:22.6079994Z                 cmd = popenargs[0]
2025-08-17T19:36:22.6080349Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:36:22.6080946Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6081402Z 
2025-08-17T19:36:22.6081787Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:36:22.6082281Z _____________________ ERROR at setup of test_imports[etl] ______________________
2025-08-17T19:36:22.6082513Z 
2025-08-17T19:36:22.6082584Z _set_db_url = None
2025-08-17T19:36:22.6082697Z 
2025-08-17T19:36:22.6082803Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:36:22.6083073Z     def migrate_db(_set_db_url):
2025-08-17T19:36:22.6083342Z         """Ensure the database schema is present for tests."""
2025-08-17T19:36:22.6083658Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:36:22.6083918Z             return
2025-08-17T19:36:22.6084083Z     
2025-08-17T19:36:22.6084249Z         async def _has_table() -> bool:
2025-08-17T19:36:22.6084544Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:36:22.6084851Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:36:22.6085088Z             try:
2025-08-17T19:36:22.6085356Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:36:22.6085678Z             finally:
2025-08-17T19:36:22.6085861Z                 await conn.close()
2025-08-17T19:36:22.6086071Z     
2025-08-17T19:36:22.6086242Z         if not asyncio.run(_has_table()):
2025-08-17T19:36:22.6086490Z             import subprocess
2025-08-17T19:36:22.6086693Z     
2025-08-17T19:36:22.6086852Z >           subprocess.check_call(
2025-08-17T19:36:22.6087142Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:36:22.6087431Z             )
2025-08-17T19:36:22.6087536Z 
2025-08-17T19:36:22.6087614Z tests/conftest.py:108: 
2025-08-17T19:36:22.6087849Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:36:22.6088040Z 
2025-08-17T19:36:22.6088219Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:36:22.6088552Z kwargs = {}, retcode = 1
2025-08-17T19:36:22.6088826Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:36:22.6089190Z 
2025-08-17T19:36:22.6089284Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:36:22.6089605Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:36:22.6090470Z         the exit code was zero then return, otherwise raise
2025-08-17T19:36:22.6091052Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:36:22.6091517Z         return code in the returncode attribute.
2025-08-17T19:36:22.6091970Z     
2025-08-17T19:36:22.6092317Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:36:22.6092692Z     
2025-08-17T19:36:22.6093018Z         check_call(["ls", "-l"])
2025-08-17T19:36:22.6093338Z         """
2025-08-17T19:36:22.6146953Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:36:22.6147464Z         if retcode:
2025-08-17T19:36:22.6147778Z             cmd = kwargs.get("args")
2025-08-17T19:36:22.6148180Z             if cmd is None:
2025-08-17T19:36:22.6148528Z                 cmd = popenargs[0]
2025-08-17T19:36:22.6148935Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:36:22.6149891Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6150816Z 
2025-08-17T19:36:22.6151226Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:36:22.6152055Z ___________________ ERROR at setup of test_imports[fees_h10] ___________________
2025-08-17T19:36:22.6152469Z 
2025-08-17T19:36:22.6152599Z _set_db_url = None
2025-08-17T19:36:22.6152804Z 
2025-08-17T19:36:22.6153000Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:36:22.6153502Z     def migrate_db(_set_db_url):
2025-08-17T19:36:22.6153989Z         """Ensure the database schema is present for tests."""
2025-08-17T19:36:22.6154566Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:36:22.6155316Z             return
2025-08-17T19:36:22.6155616Z     
2025-08-17T19:36:22.6155932Z         async def _has_table() -> bool:
2025-08-17T19:36:22.6156471Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:36:22.6157007Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:36:22.6157423Z             try:
2025-08-17T19:36:22.6157764Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:36:22.6158108Z             finally:
2025-08-17T19:36:22.6158305Z                 await conn.close()
2025-08-17T19:36:22.6158530Z     
2025-08-17T19:36:22.6158714Z         if not asyncio.run(_has_table()):
2025-08-17T19:36:22.6158974Z             import subprocess
2025-08-17T19:36:22.6159179Z     
2025-08-17T19:36:22.6159344Z >           subprocess.check_call(
2025-08-17T19:36:22.6159647Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:36:22.6159960Z             )
2025-08-17T19:36:22.6160071Z 
2025-08-17T19:36:22.6160162Z tests/conftest.py:108: 
2025-08-17T19:36:22.6160672Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:36:22.6160873Z 
2025-08-17T19:36:22.6161062Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:36:22.6161407Z kwargs = {}, retcode = 1
2025-08-17T19:36:22.6161685Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:36:22.6161954Z 
2025-08-17T19:36:22.6162053Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:36:22.6162374Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:36:22.6162737Z         the exit code was zero then return, otherwise raise
2025-08-17T19:36:22.6163110Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:36:22.6163464Z         return code in the returncode attribute.
2025-08-17T19:36:22.6163717Z     
2025-08-17T19:36:22.6163965Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:36:22.6164448Z     
2025-08-17T19:36:22.6164620Z         check_call(["ls", "-l"])
2025-08-17T19:36:22.6164834Z         """
2025-08-17T19:36:22.6165025Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:36:22.6165265Z         if retcode:
2025-08-17T19:36:22.6165456Z             cmd = kwargs.get("args")
2025-08-17T19:36:22.6165690Z             if cmd is None:
2025-08-17T19:36:22.6165901Z                 cmd = popenargs[0]
2025-08-17T19:36:22.6166161Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:36:22.6166748Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6167209Z 
2025-08-17T19:36:22.6167480Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:36:22.6167982Z ____________________ ERROR at setup of test_imports[ingest] ____________________
2025-08-17T19:36:22.6168232Z 
2025-08-17T19:36:22.6168309Z _set_db_url = None
2025-08-17T19:36:22.6168420Z 
2025-08-17T19:36:22.6168529Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:36:22.6168803Z     def migrate_db(_set_db_url):
2025-08-17T19:36:22.6169080Z         """Ensure the database schema is present for tests."""
2025-08-17T19:36:22.6169402Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:36:22.6169662Z             return
2025-08-17T19:36:22.6169829Z     
2025-08-17T19:36:22.6170005Z         async def _has_table() -> bool:
2025-08-17T19:36:22.6170490Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:36:22.6170814Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:36:22.6171063Z             try:
2025-08-17T19:36:22.6171336Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:36:22.6171655Z             finally:
2025-08-17T19:36:22.6171975Z                 await conn.close()
2025-08-17T19:36:22.6172188Z     
2025-08-17T19:36:22.6172371Z         if not asyncio.run(_has_table()):
2025-08-17T19:36:22.6172619Z             import subprocess
2025-08-17T19:36:22.6172831Z     
2025-08-17T19:36:22.6172999Z >           subprocess.check_call(
2025-08-17T19:36:22.6173289Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:36:22.6173582Z             )
2025-08-17T19:36:22.6173686Z 
2025-08-17T19:36:22.6173766Z tests/conftest.py:108: 
2025-08-17T19:36:22.6174004Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:36:22.6174198Z 
2025-08-17T19:36:22.6174375Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:36:22.6174718Z kwargs = {}, retcode = 1
2025-08-17T19:36:22.6174990Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:36:22.6175217Z 
2025-08-17T19:36:22.6175318Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:36:22.6175636Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:36:22.6175995Z         the exit code was zero then return, otherwise raise
2025-08-17T19:36:22.6176365Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:36:22.6176714Z         return code in the returncode attribute.
2025-08-17T19:36:22.6176954Z     
2025-08-17T19:36:22.6177190Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:36:22.6177479Z     
2025-08-17T19:36:22.6177646Z         check_call(["ls", "-l"])
2025-08-17T19:36:22.6177858Z         """
2025-08-17T19:36:22.6178045Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:36:22.6178285Z         if retcode:
2025-08-17T19:36:22.6178475Z             cmd = kwargs.get("args")
2025-08-17T19:36:22.6178698Z             if cmd is None:
2025-08-17T19:36:22.6178908Z                 cmd = popenargs[0]
2025-08-17T19:36:22.6179162Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:36:22.6179847Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6180490Z 
2025-08-17T19:36:22.6180766Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:36:22.6181301Z __________________ ERROR at setup of test_imports[llm_server] __________________
2025-08-17T19:36:22.6181541Z 
2025-08-17T19:36:22.6181618Z _set_db_url = None
2025-08-17T19:36:22.6181731Z 
2025-08-17T19:36:22.6181847Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:36:22.6182112Z     def migrate_db(_set_db_url):
2025-08-17T19:36:22.6182386Z         """Ensure the database schema is present for tests."""
2025-08-17T19:36:22.6182711Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:36:22.6182975Z             return
2025-08-17T19:36:22.6183145Z     
2025-08-17T19:36:22.6183324Z         async def _has_table() -> bool:
2025-08-17T19:36:22.6183627Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:36:22.6183946Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:36:22.6184188Z             try:
2025-08-17T19:36:22.6184462Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:36:22.6184780Z             finally:
2025-08-17T19:36:22.6184973Z                 await conn.close()
2025-08-17T19:36:22.6185182Z     
2025-08-17T19:36:22.6185363Z         if not asyncio.run(_has_table()):
2025-08-17T19:36:22.6185628Z             import subprocess
2025-08-17T19:36:22.6185832Z     
2025-08-17T19:36:22.6185999Z >           subprocess.check_call(
2025-08-17T19:36:22.6186291Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:36:22.6186579Z             )
2025-08-17T19:36:22.6186682Z 
2025-08-17T19:36:22.6186765Z tests/conftest.py:108: 
2025-08-17T19:36:22.6187000Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:36:22.6187331Z 
2025-08-17T19:36:22.6187521Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:36:22.6187872Z kwargs = {}, retcode = 1
2025-08-17T19:36:22.6188157Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:36:22.6188391Z 
2025-08-17T19:36:22.6188490Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:36:22.6188808Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:36:22.6189169Z         the exit code was zero then return, otherwise raise
2025-08-17T19:36:22.6189541Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:36:22.6189891Z         return code in the returncode attribute.
2025-08-17T19:36:22.6190130Z     
2025-08-17T19:36:22.6190556Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:36:22.6190855Z     
2025-08-17T19:36:22.6191028Z         check_call(["ls", "-l"])
2025-08-17T19:36:22.6191242Z         """
2025-08-17T19:36:22.6191433Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:36:22.6191675Z         if retcode:
2025-08-17T19:36:22.6191863Z             cmd = kwargs.get("args")
2025-08-17T19:36:22.6192089Z             if cmd is None:
2025-08-17T19:36:22.6192302Z                 cmd = popenargs[0]
2025-08-17T19:36:22.6192554Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:36:22.6193129Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6193596Z 
2025-08-17T19:36:22.6193856Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:36:22.6194359Z ________________ ERROR at setup of test_imports[logistics_etl] _________________
2025-08-17T19:36:22.6194611Z 
2025-08-17T19:36:22.6194688Z _set_db_url = None
2025-08-17T19:36:22.6194802Z 
2025-08-17T19:36:22.6194920Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:36:22.6195321Z     def migrate_db(_set_db_url):
2025-08-17T19:36:22.6195596Z         """Ensure the database schema is present for tests."""
2025-08-17T19:36:22.6195924Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:36:22.6196188Z             return
2025-08-17T19:36:22.6196360Z     
2025-08-17T19:36:22.6196536Z         async def _has_table() -> bool:
2025-08-17T19:36:22.6196829Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:36:22.6197141Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:36:22.6197382Z             try:
2025-08-17T19:36:22.6197653Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:36:22.6197976Z             finally:
2025-08-17T19:36:22.6198170Z                 await conn.close()
2025-08-17T19:36:22.6198375Z     
2025-08-17T19:36:22.6198553Z         if not asyncio.run(_has_table()):
2025-08-17T19:36:22.6198806Z             import subprocess
2025-08-17T19:36:22.6199013Z     
2025-08-17T19:36:22.6199179Z >           subprocess.check_call(
2025-08-17T19:36:22.6199474Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:36:22.6199764Z             )
2025-08-17T19:36:22.6199868Z 
2025-08-17T19:36:22.6199949Z tests/conftest.py:108: 
2025-08-17T19:36:22.6200186Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:36:22.6200586Z 
2025-08-17T19:36:22.6200770Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:36:22.6201117Z kwargs = {}, retcode = 1
2025-08-17T19:36:22.6201398Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:36:22.6201631Z 
2025-08-17T19:36:22.6201731Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:36:22.6202043Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:36:22.6202528Z         the exit code was zero then return, otherwise raise
2025-08-17T19:36:22.6202905Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:36:22.6203257Z         return code in the returncode attribute.
2025-08-17T19:36:22.6203495Z     
2025-08-17T19:36:22.6203728Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:36:22.6204018Z     
2025-08-17T19:36:22.6204179Z         check_call(["ls", "-l"])
2025-08-17T19:36:22.6204400Z         """
2025-08-17T19:36:22.6204589Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:36:22.6204827Z         if retcode:
2025-08-17T19:36:22.6205018Z             cmd = kwargs.get("args")
2025-08-17T19:36:22.6205246Z             if cmd is None:
2025-08-17T19:36:22.6205449Z                 cmd = popenargs[0]
2025-08-17T19:36:22.6205701Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:36:22.6206266Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6206737Z 
2025-08-17T19:36:22.6206997Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:36:22.6207500Z ________________ ERROR at setup of test_imports[price_importer] ________________
2025-08-17T19:36:22.6207752Z 
2025-08-17T19:36:22.6207828Z _set_db_url = None
2025-08-17T19:36:22.6207940Z 
2025-08-17T19:36:22.6208051Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:36:22.6208317Z     def migrate_db(_set_db_url):
2025-08-17T19:36:22.6208587Z         """Ensure the database schema is present for tests."""
2025-08-17T19:36:22.6208912Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:36:22.6209178Z             return
2025-08-17T19:36:22.6209349Z     
2025-08-17T19:36:22.6209524Z         async def _has_table() -> bool:
2025-08-17T19:36:22.6209819Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:36:22.6210139Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:36:22.6210712Z             try:
2025-08-17T19:36:22.6210992Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:36:22.6211318Z             finally:
2025-08-17T19:36:22.6211519Z                 await conn.close()
2025-08-17T19:36:22.6211739Z     
2025-08-17T19:36:22.6211913Z         if not asyncio.run(_has_table()):
2025-08-17T19:36:22.6212166Z             import subprocess
2025-08-17T19:36:22.6212373Z     
2025-08-17T19:36:22.6212549Z >           subprocess.check_call(
2025-08-17T19:36:22.6212853Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:36:22.6213148Z             )
2025-08-17T19:36:22.6213250Z 
2025-08-17T19:36:22.6213336Z tests/conftest.py:108: 
2025-08-17T19:36:22.6213579Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:36:22.6213782Z 
2025-08-17T19:36:22.6213962Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:36:22.6214317Z kwargs = {}, retcode = 1
2025-08-17T19:36:22.6214601Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:36:22.6214838Z 
2025-08-17T19:36:22.6214938Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:36:22.6215259Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:36:22.6215617Z         the exit code was zero then return, otherwise raise
2025-08-17T19:36:22.6215994Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:36:22.6216345Z         return code in the returncode attribute.
2025-08-17T19:36:22.6216589Z     
2025-08-17T19:36:22.6216827Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:36:22.6217119Z     
2025-08-17T19:36:22.6217280Z         check_call(["ls", "-l"])
2025-08-17T19:36:22.6217497Z         """
2025-08-17T19:36:22.6217685Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:36:22.6218053Z         if retcode:
2025-08-17T19:36:22.6218255Z             cmd = kwargs.get("args")
2025-08-17T19:36:22.6218483Z             if cmd is None:
2025-08-17T19:36:22.6218692Z                 cmd = popenargs[0]
2025-08-17T19:36:22.6218943Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:36:22.6219512Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6219978Z 
2025-08-17T19:36:22.6220376Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:36:22.6220907Z ___________________ ERROR at setup of test_imports[repricer] ___________________
2025-08-17T19:36:22.6221151Z 
2025-08-17T19:36:22.6221227Z _set_db_url = None
2025-08-17T19:36:22.6221338Z 
2025-08-17T19:36:22.6221454Z     @pytest.fixture(scope="session", autouse=True)
2025-08-17T19:36:22.6221728Z     def migrate_db(_set_db_url):
2025-08-17T19:36:22.6221999Z         """Ensure the database schema is present for tests."""
2025-08-17T19:36:22.6222328Z         if os.getenv("TESTING") != "1" or not _db_available():
2025-08-17T19:36:22.6222592Z             return
2025-08-17T19:36:22.6222762Z     
2025-08-17T19:36:22.6222939Z         async def _has_table() -> bool:
2025-08-17T19:36:22.6223236Z             dsn = os.getenv("PG_ASYNC_DSN") or build_dsn(sync=False)
2025-08-17T19:36:22.6223541Z             conn = await asyncpg.connect(dsn)
2025-08-17T19:36:22.6223781Z             try:
2025-08-17T19:36:22.6224051Z                 return bool(await conn.fetchval("SELECT to_regclass('products')"))
2025-08-17T19:36:22.6224368Z             finally:
2025-08-17T19:36:22.6224565Z                 await conn.close()
2025-08-17T19:36:22.6224775Z     
2025-08-17T19:36:22.6224944Z         if not asyncio.run(_has_table()):
2025-08-17T19:36:22.6225192Z             import subprocess
2025-08-17T19:36:22.6225395Z     
2025-08-17T19:36:22.6225561Z >           subprocess.check_call(
2025-08-17T19:36:22.6225857Z                 ["alembic", "-c", "services/api/alembic.ini", "upgrade", "head"]
2025-08-17T19:36:22.6226276Z             )
2025-08-17T19:36:22.6226374Z 
2025-08-17T19:36:22.6226454Z tests/conftest.py:108: 
2025-08-17T19:36:22.6226688Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-17T19:36:22.6226884Z 
2025-08-17T19:36:22.6227060Z popenargs = (['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head'],)
2025-08-17T19:36:22.6227397Z kwargs = {}, retcode = 1
2025-08-17T19:36:22.6227671Z cmd = ['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']
2025-08-17T19:36:22.6227902Z 
2025-08-17T19:36:22.6228001Z     def check_call(*popenargs, **kwargs):
2025-08-17T19:36:22.6228319Z         """Run command with arguments.  Wait for command to complete.  If
2025-08-17T19:36:22.6228674Z         the exit code was zero then return, otherwise raise
2025-08-17T19:36:22.6229042Z         CalledProcessError.  The CalledProcessError object will have the
2025-08-17T19:36:22.6229400Z         return code in the returncode attribute.
2025-08-17T19:36:22.6229646Z     
2025-08-17T19:36:22.6229884Z         The arguments are the same as for the call function.  Example:
2025-08-17T19:36:22.6230174Z     
2025-08-17T19:36:22.6230506Z         check_call(["ls", "-l"])
2025-08-17T19:36:22.6230725Z         """
2025-08-17T19:36:22.6230914Z         retcode = call(*popenargs, **kwargs)
2025-08-17T19:36:22.6231153Z         if retcode:
2025-08-17T19:36:22.6231346Z             cmd = kwargs.get("args")
2025-08-17T19:36:22.6231579Z             if cmd is None:
2025-08-17T19:36:22.6231784Z                 cmd = popenargs[0]
2025-08-17T19:36:22.6232038Z >           raise CalledProcessError(retcode, cmd)
2025-08-17T19:36:22.6232604Z E           subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6233068Z 
2025-08-17T19:36:22.6233323Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/subprocess.py:413: CalledProcessError
2025-08-17T19:36:22.6233904Z ================================ tests coverage ================================
2025-08-17T19:36:22.6234274Z _______________ coverage: platform linux, python 3.11.13-final-0 _______________
2025-08-17T19:36:22.6234525Z 
2025-08-17T19:36:22.6234626Z Coverage XML written to file coverage.xml
2025-08-17T19:36:22.6234914Z =========================== short test summary info ============================
2025-08-17T19:36:22.6235718Z ERROR tests/db/test_db_smoke_imports.py::test_imports[alert_bot] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6236896Z ERROR tests/db/test_db_smoke_imports.py::test_imports[api] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6238057Z ERROR tests/db/test_db_smoke_imports.py::test_imports[common] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6239216Z ERROR tests/db/test_db_smoke_imports.py::test_imports[db] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6240610Z ERROR tests/db/test_db_smoke_imports.py::test_imports[emailer] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6241784Z ERROR tests/db/test_db_smoke_imports.py::test_imports[etl] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6242934Z ERROR tests/db/test_db_smoke_imports.py::test_imports[fees_h10] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6244243Z ERROR tests/db/test_db_smoke_imports.py::test_imports[ingest] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.6245414Z ERROR tests/db/test_db_smoke_imports.py::test_imports[llm_server] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.7702515Z ERROR tests/db/test_db_smoke_imports.py::test_imports[logistics_etl] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.7704457Z ERROR tests/db/test_db_smoke_imports.py::test_imports[price_importer] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:22.7706161Z ERROR tests/db/test_db_smoke_imports.py::test_imports[repricer] - subprocess.CalledProcessError: Command '['alembic', '-c', 'services/api/alembic.ini', 'upgrade', 'head']' returned non-zero exit status 1.
2025-08-17T19:36:23.0043645Z ##[error]Process completed with exit code 1.
